'use strict';
var main_Entry = function(modules) {
  /**
   * @param {number} moduleId
   * @return {?}
   */
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) {
      return installedModules[moduleId].exports;
    }
    var module = installedModules[moduleId] = {
      i : moduleId,
      l : false,
      exports : {}
    };
    return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = true, module.exports;
  }
  /** @type {function(number, !Array, number): ?} */
  var parentJsonpFunction = window.webpackJsonp_name__Entry;
  /**
   * @param {number} chunkIds
   * @param {!Array} moreModules
   * @param {number} executeModules
   * @return {?}
   */
  window.webpackJsonp_name__Entry = function(chunkIds, moreModules, executeModules) {
    var moduleId;
    var p;
    var chooseFramework;
    /** @type {number} */
    var i = 0;
    /** @type {!Array} */
    var _sizeAnimateTimeStamps = [];
    for (; i < chunkIds.length; i++) {
      p = chunkIds[i];
      if (parsed[p]) {
        _sizeAnimateTimeStamps.push(parsed[p][0]);
      }
      /** @type {number} */
      parsed[p] = 0;
    }
    for (moduleId in moreModules) {
      if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
        modules[moduleId] = moreModules[moduleId];
      }
    }
    if (parentJsonpFunction) {
      parentJsonpFunction(chunkIds, moreModules, executeModules);
    }
    for (; _sizeAnimateTimeStamps.length;) {
      _sizeAnimateTimeStamps.shift()();
    }
    if (executeModules) {
      /** @type {number} */
      i = 0;
      for (; i < executeModules.length; i++) {
        chooseFramework = __webpack_require__(__webpack_require__.s = executeModules[i]);
      }
    }
    return chooseFramework;
  };
  var installedModules = {};
  var parsed = {
    2 : 0
  };
  return __webpack_require__.e = function(c) {
    /**
     * @return {undefined}
     */
    function onScriptComplete() {
      /** @type {null} */
      script.onerror = script.onload = null;
      clearTimeout(timeout);
      var collection = parsed[c];
      if (0 !== collection) {
        if (collection) {
          collection[1](new Error("Loading chunk " + c + " failed."));
        }
        parsed[c] = void 0;
      }
    }
    var list = parsed[c];
    if (0 === list) {
      return new Promise(function(e) {
        e();
      });
    }
    if (list) {
      return list[2];
    }
    /** @type {!Promise} */
    var p = new Promise(function(S, s) {
      /** @type {!Array} */
      list = parsed[c] = [S, s];
    });
    /** @type {!Promise} */
    list[2] = p;
    /** @type {!Element} */
    var el_head = document.getElementsByTagName("head")[0];
    /** @type {!Element} */
    var script = document.createElement("script");
    /** @type {string} */
    script.type = "text/javascript";
    /** @type {string} */
    script.charset = "utf-8";
    /** @type {boolean} */
    script.async = true;
    /** @type {number} */
    script.timeout = 120000;
    if (__webpack_require__.nc) {
      script.setAttribute("nonce", __webpack_require__.nc);
    }
    /** @type {string} */
    script.src = __webpack_require__.p + "bookofdead_" + c + ".bundle.js";
    /** @type {number} */
    var timeout = setTimeout(onScriptComplete, 120000);
    return script.onerror = script.onload = onScriptComplete, el_head.appendChild(script), p;
  }, __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.d = function(o, name, n) {
    if (!__webpack_require__.o(o, name)) {
      Object.defineProperty(o, name, {
        configurable : false,
        enumerable : true,
        get : n
      });
    }
  }, __webpack_require__.n = function(module) {
    /** @type {function(): ?} */
    var n = module && module.__esModule ? function() {
      return module.default;
    } : function() {
      return module;
    };
    return __webpack_require__.d(n, "a", n), n;
  }, __webpack_require__.o = function(t, object) {
    return Object.prototype.hasOwnProperty.call(t, object);
  }, __webpack_require__.p = "", __webpack_require__.oe = function(err) {
    throw err;
  }, __webpack_require__(__webpack_require__.s = 12);
}([function(canCreateDiscussions, a, $) {
  Object.defineProperty(a, "__esModule", {
    value : true
  });
  $.d(a, "VideoSlot", function() {
    return Jo;
  });
  $.d(a, "VideoSlotGameTransition", function() {
    return V;
  });
  $.d(a, "VideoSlotGameTransitionEvent", function() {
    return win;
  });
  $.d(a, "VideoSlotLogo", function() {
    return zo;
  });
  $.d(a, "VideoSlotAutoplayHandler", function() {
    return Klass;
  });
  $.d(a, "VideoSlotAutoplaySettings", function() {
    return RuleContext;
  });
  $.d(a, "VideoSlotAutoplayEvent", function() {
    return BinderFor;
  });
  $.d(a, "VideoSlotBetController", function() {
    return DooberTooltip;
  });
  $.d(a, "LockType", function() {
    return event;
  });
  $.d(a, "VideoSlotBetSettings", function() {
    return WebGLConstants;
  });
  $.d(a, "BonusFeature", function() {
    return tCell;
  });
  $.d(a, "BonusAnswerData", function() {
    return Adapter;
  });
  $.d(a, "BonusModel", function() {
    return Model;
  });
  $.d(a, "BonusSendData", function() {
    return Actions;
  });
  $.d(a, "BonusStage", function() {
    return DowngradeNg2ComponentAdapter;
  });
  $.d(a, "BonusStageData", function() {
    return qo;
  });
  $.d(a, "ExtendedBonusEvent", function() {
    return fileConstructor;
  });
  $.d(a, "BonusView", function() {
    return rr;
  });
  $.d(a, "VideoSlotServerMessageHandler", function() {
    return xt;
  });
  $.d(a, "VSClientCommand", function() {
    return value;
  });
  $.d(a, "VSServerCommand", function() {
    return _aureliaPal;
  });
  $.d(a, "BetMaxMode", function() {
    return i;
  });
  $.d(a, "BetMode", function() {
    return result;
  });
  $.d(a, "VideoSlotConfig", function() {
    return BuddhaConfig;
  });
  $.d(a, "VideoSlotExternalInterface", function() {
    return re;
  });
  $.d(a, "VideoSlotEIBetSettingsEvent", function() {
    return Event;
  });
  $.d(a, "VideoSlotEIDenomEvent", function() {
    return tcomplete;
  });
  $.d(a, "VideoSlotEIRoundEvent", function() {
    return MGE;
  });
  $.d(a, "FastPlayQuestionHandler", function() {
    return Cluster;
  });
  $.d(a, "FastPlayQuestionManager", function() {
    return pe;
  });
  $.d(a, "FastPlayQuestionEvent", function() {
    return TimerEvent;
  });
  $.d(a, "EmptyFeature", function() {
    return Contact;
  });
  $.d(a, "Feature", function() {
    return c;
  });
  $.d(a, "FeatureManager", function() {
    return SwarmMeta;
  });
  $.d(a, "PickSymbols", function() {
    return common2;
  });
  $.d(a, "FeatureCommand", function() {
    return hashes;
  });
  $.d(a, "FeatureAwardType", function() {
    return data;
  });
  $.d(a, "FeatureCommandConverter", function() {
    return Ke;
  });
  $.d(a, "BonusEvent", function() {
    return ProgressEvent;
  });
  $.d(a, "FeatureAwardEvent", function() {
    return target;
  });
  $.d(a, "FeatureCollectEvent", function() {
    return item;
  });
  $.d(a, "FeatureDataEvent", function() {
    return obj;
  });
  $.d(a, "FeatureEndEvent", function() {
    return Array;
  });
  $.d(a, "FeatureEvent", function() {
    return query;
  });
  $.d(a, "FeatureInputEvent", function() {
    return dom;
  });
  $.d(a, "FeatureSelectEvent", function() {
    return args;
  });
  $.d(a, "FeatureStartEvent", function() {
    return InjectResult;
  });
  $.d(a, "FeatureUIEvent", function() {
    return params;
  });
  $.d(a, "FeatureUISelectedEvent", function() {
    return types;
  });
  $.d(a, "FeatureUISelectEvent", function() {
    return s;
  });
  $.d(a, "FeatureWinEvent", function() {
    return ChangeEvent;
  });
  $.d(a, "FeatureAwardAmountEvent", function() {
    return Menu;
  });
  $.d(a, "FeatureAwardClearEvent", function() {
    return replacedTarget;
  });
  $.d(a, "FeatureAwardCoinsEvent", function() {
    return action;
  });
  $.d(a, "FeatureAwardCoinsMultiplierEvent", function() {
    return signal2;
  });
  $.d(a, "FeatureAwardFeatureEvent", function() {
    return signal3;
  });
  $.d(a, "FeatureAwardFreespinsEvent", function() {
    return temp__4090__auto__;
  });
  $.d(a, "FeatureAwardFreespinsMultiplierEvent", function() {
    return ngEl;
  });
  $.d(a, "FeatureAwardJackpotEvent", function() {
    return transRec;
  });
  $.d(a, "FeatureAwardNewSymbolsEvent", function() {
    return IEListenerHandle;
  });
  $.d(a, "FeatureAwardWinLineEvent", function() {
    return buffer;
  });
  $.d(a, "PickSymbolsView", function() {
    return hr;
  });
  $.d(a, "SelectItem", function() {
    return _r;
  });
  $.d(a, "FreeGameHandler", function() {
    return Layer;
  });
  $.d(a, "FreeGameManager", function() {
    return ReferenceList;
  });
  $.d(a, "FreeGameCommandConverter", function() {
    return ComponentManager;
  });
  $.d(a, "FreeGameModel", function() {
    return Sn;
  });
  $.d(a, "FreeGameConsumedEvent", function() {
    return CustomEvent;
  });
  $.d(a, "FreeGameEndEvent", function() {
    return runtimeConstructor;
  });
  $.d(a, "FreeGameEvent", function() {
    return events;
  });
  $.d(a, "FreeGameMessageEventType", function() {
    return root;
  });
  $.d(a, "FreeGameMessageEvent", function() {
    return SelectionEvent;
  });
  $.d(a, "FreeGameStartEvent", function() {
    return Item;
  });
  $.d(a, "FreeGameTotalWinEvent", function() {
    return Router;
  });
  $.d(a, "FreespinLogicController", function() {
    return Box;
  });
  $.d(a, "FreespinManager", function() {
    return Hn;
  });
  $.d(a, "FreespinCommandConverter", function() {
    return Nn;
  });
  $.d(a, "FreespinModel", function() {
    return f;
  });
  $.d(a, "FreespinEvent", function() {
    return e;
  });
  $.d(a, "FreespinSpinEvent", function() {
    return touchEvents;
  });
  $.d(a, "FreespinStatusEvent", function() {
    return val;
  });
  $.d(a, "FreespinViewEvent", function() {
    return pointer;
  });
  $.d(a, "FreespinView", function() {
    return Notification;
  });
  $.d(a, "GambleLogicController", function() {
    return Uint8Array;
  });
  $.d(a, "GambleManager", function() {
    return individual;
  });
  $.d(a, "GambleCommandConverter", function() {
    return yt;
  });
  $.d(a, "GambleModel", function() {
    return ht;
  });
  $.d(a, "GambleAnswerEvent", function() {
    return model;
  });
  $.d(a, "GambleEvent", function() {
    return node;
  });
  $.d(a, "GambleSelectEvent", function() {
    return binding;
  });
  $.d(a, "GambleUIEvent", function() {
    return Set;
  });
  $.d(a, "VideoSlotGambleEvent", function() {
    return ZmPrefAccount;
  });
  $.d(a, "RedOrBlackSelection", function() {
    return props;
  });
  $.d(a, "RedOrBlackLogicController", function() {
    return AttributeTransformer;
  });
  $.d(a, "RedOrBlackManager", function() {
    return indContent;
  });
  $.d(a, "RedOrBlackEndEvent", function() {
    return api;
  });
  $.d(a, "RedOrBlackViewButton", function() {
    return Poker;
  });
  $.d(a, "RedOrBlackView", function() {
    return cls;
  });
  $.d(a, "VideoSlotSettings", function() {
    return Un;
  });
  $.d(a, "MainGameView", function() {
    return Fn;
  });
  $.d(a, "VideoSlotIdleController", function() {
    return Schwartz;
  });
  $.d(a, "VideoSlotIdleManager", function() {
    return Gn;
  });
  $.d(a, "MysteryJackpot", function() {
    return CompileContext;
  });
  $.d(a, "JackpotEndEvent", function() {
    return fragmentedQuery;
  });
  $.d(a, "JackpotPanelEvent", function() {
    return batch;
  });
  $.d(a, "JackpotWinEvent", function() {
    return BigNumber;
  });
  $.d(a, "MysteryJackpotClosePopupEvent", function() {
    return WSocketEvent;
  });
  $.d(a, "MysteryJackpotControlEvent", function() {
    return Cues;
  });
  $.d(a, "JackpotShowPanelEvent", function() {
    return Error;
  });
  $.d(a, "JackpotShowParticleEvent", function() {
    return AddObjectCommand;
  });
  $.d(a, "JackpotSoundController", function() {
    return dr;
  });
  $.d(a, "JackpotDisplayView", function() {
    return yr;
  });
  $.d(a, "VideoSlotLogicManager", function() {
    return SimplicialMesh;
  });
  $.d(a, "VideoSlotLogicCommandConverter", function() {
    return SequelizeAuto;
  });
  $.d(a, "SpinAnswerWinInfo", function() {
    return PopdownPalette;
  });
  $.d(a, "SpinAnswerEvent", function() {
    return me;
  });
  $.d(a, "SpinEndEvent", function() {
    return evt;
  });
  $.d(a, "SpinEvent", function() {
    return entry;
  });
  $.d(a, "SpinStartEvent", function() {
    return panel;
  });
  $.d(a, "PaytableChange", function() {
    return Visibility;
  });
  $.d(a, "PaytableData", function() {
    return CallChain;
  });
  $.d(a, "VideoSlotPaytableEvent", function() {
    return Action;
  });
  $.d(a, "ReelManagerStopMode", function() {
    return t;
  });
  $.d(a, "ReelFSController", function() {
    return Nlint;
  });
  $.d(a, "ReelLogicState", function() {
    return PrimitiveState;
  });
  $.d(a, "ReelLogicController", function() {
    return RrdGraphDesc;
  });
  $.d(a, "ReelManager", function() {
    return LogicGate;
  });
  $.d(a, "ReelManagerBase", function() {
    return nameArgs;
  });
  $.d(a, "ReelPresentationController", function() {
    return View;
  });
  $.d(a, "ReelData", function() {
    return PrefilledTX;
  });
  $.d(a, "StopMode", function() {
    return TextureAsset;
  });
  $.d(a, "SpinMode", function() {
    return modes;
  });
  $.d(a, "SpinnerState", function() {
    return STATE;
  });
  $.d(a, "ReelSpinner", function() {
    return CandidateElement;
  });
  $.d(a, "AnticipatedReelSequencer", function() {
    return info;
  });
  $.d(a, "ReelSequencer", function() {
    return mi;
  });
  $.d(a, "SimpleReelSequencer", function() {
    return tm;
  });
  $.d(a, "StopReelSequencer", function() {
    return Connection;
  });
  $.d(a, "ScatterSuspenseHandler", function() {
    return vr;
  });
  $.d(a, "ReelEvent", function() {
    return State;
  });
  $.d(a, "ReelSuspenseEvent", function() {
    return TOAST;
  });
  $.d(a, "ReelSymbolEvent", function() {
    return Node;
  });
  $.d(a, "ReelSuspenseView", function() {
    return PropertyObj;
  });
  $.d(a, "ReelView", function() {
    return Date;
  });
  $.d(a, "VideoSlotResourceManager", function() {
    return UserMessageProcessor;
  });
  $.d(a, "BluredSceneManagerPixi", function() {
    return StateChange;
  });
  $.d(a, "MotionBlurCustomTexture", function() {
    return Texture;
  });
  $.d(a, "MotionBlurManagerPixi", function() {
    return Setting;
  });
  $.d(a, "MotionBlurWebGLRenderer", function() {
    return Renderer;
  });
  $.d(a, "MotionBlurSpritePixi", function() {
    return RealTester;
  });
  $.d(a, "motionBlurVertexSource", function() {
    return maxheightnewvalue;
  });
  $.d(a, "motionBlurFragmentSource", function() {
    return timemod;
  });
  $.d(a, "BlurableImpl", function() {
    return Condition;
  });
  $.d(a, "BluredSceneNode", function() {
    return Task;
  });
  $.d(a, "AssetCache", function() {
    return Sr;
  });
  $.d(a, "WinlineRopeWebGLComponent", function() {
    return region;
  });
  $.d(a, "winlineRopeVertexSource", function() {
    return json;
  });
  $.d(a, "winlineRopeFragmentSource", function() {
    return br;
  });
  $.d(a, "WinlineShadedWebGLComponent", function() {
    return Response;
  });
  $.d(a, "winlineVertexSource", function() {
    return html;
  });
  $.d(a, "simpleWinlineFragmentSource", function() {
    return So;
  });
  $.d(a, "advancedWinlineFragmentSource", function() {
    return mo;
  });
  $.d(a, "unishineWinlineFragmentSource", function() {
    return bo;
  });
  $.d(a, "WinlineBase", function() {
    return Blob;
  });
  $.d(a, "WinlineOptions", function() {
    return div;
  });
  $.d(a, "WinlinePoint", function() {
    return RegExp;
  });
  $.d(a, "WinlineRopeOptions", function() {
    return giphyControlWrap;
  });
  $.d(a, "WinlineShadedOptions", function() {
    return gifGallery;
  });
  $.d(a, "VideoSlotRoundController", function() {
    return Ki;
  });
  $.d(a, "VideoSlotRoundHandler", function() {
    return MapView;
  });
  $.d(a, "AccumulatedWinSoundController", function() {
    return rT;
  });
  $.d(a, "WinSoundMode", function() {
    return ValueMode;
  });
  $.d(a, "BaseWinSoundController", function() {
    return tile;
  });
  $.d(a, "SoundController", function() {
    return Cell;
  });
  $.d(a, "SoundManager", function() {
    return Dr;
  });
  $.d(a, "StemsController", function() {
    return objectsThere;
  });
  $.d(a, "AccumulatedWinSoundEvent", function() {
    return AudioContext;
  });
  $.d(a, "VideoSlotCarouselSplashManager", function() {
    return Hr;
  });
  $.d(a, "VideoSlotSplashManager", function() {
    return Ur;
  });
  $.d(a, "FadingSymbol", function() {
    return resourceAmount;
  });
  $.d(a, "SymbolAnticipationState", function() {
    return changes;
  });
  $.d(a, "Symbol", function() {
    return k;
  });
  $.d(a, "SymbolCache", function() {
    return BoxTimelineKeyframe;
  });
  $.d(a, "SymbolState", function() {
    return STATES;
  });
  $.d(a, "SymbolManager", function() {
    return ObservedInfo;
  });
  $.d(a, "SymbolStateController", function() {
    return JarallaxStatic;
  });
  $.d(a, "QuickStopEvent", function() {
    return Gr;
  });
  $.d(a, "VideoSlotShowButtonsEvent", function() {
    return Tween;
  });
  $.d(a, "VideoSlotUIEvent", function() {
    return v;
  });
  $.d(a, "VideoSlotUIManager", function() {
    return PxLoaderSound;
  });
  $.d(a, "VideoSlotViewFactory", function() {
    return Expression;
  });
  $.d(a, "BigWinPresentationController", function() {
    return ParseError;
  });
  $.d(a, "VideoSlotWinManager", function() {
    return DragEvent;
  });
  $.d(a, "WinFeature", function() {
    return catArr;
  });
  $.d(a, "WinLogicController", function() {
    return Cursor;
  });
  $.d(a, "WinPresentationController", function() {
    return Scope;
  });
  $.d(a, "WinSoundController", function() {
    return SuggestionsBuilder;
  });
  $.d(a, "ExpandingWinCounter", function() {
    return JarallaxAnimation;
  });
  $.d(a, "WinData", function() {
    return Line;
  });
  $.d(a, "WinState", function() {
    return col;
  });
  $.d(a, "BigWinInfoEvent", function() {
    return Receiver;
  });
  $.d(a, "BigWinViewEvent", function() {
    return states;
  });
  $.d(a, "WinEvent", function() {
    return that;
  });
  $.d(a, "WinPatternEvent", function() {
    return Request;
  });
  $.d(a, "WinShowEvent", function() {
    return ComponentEvent;
  });
  $.d(a, "BigWinView", function() {
    return command;
  });
  $.d(a, "MasterWinView", function() {
    return SystemNotFoundError;
  });
  $.d(a, "WinFrameView", function() {
    return Jr;
  });
  $.d(a, "WinLabelView", function() {
    return HtmlAttrAst;
  });
  $.d(a, "WinPatternAnimView", function() {
    return Kr;
  });
  $.d(a, "WinPatternParticleView", function() {
    return qr;
  });
  $.d(a, "WinPatternRopeView", function() {
    return Zr;
  });
  $.d(a, "WinPatternShadedView", function() {
    return ReductionPromiseArray;
  });
  $.d(a, "WinScatterAnimView", function() {
    return $r;
  });
  $.d(a, "WinScatterShadedView", function() {
    return TableGrid;
  });
  $.d(a, "WinSymbolView", function() {
    return JarallaxObject;
  });
  $.d(a, "VideoSlotKeyboardSettings", function() {
    return es;
  });
  $.d(a, "VideoSlotKeyboardHandlerNode", function() {
    return ns;
  });
  var i;
  var exports = $(1);
  var options = $(5);
  var self = $(2);
  var core = $(16);
  var genParam = ($.n(core), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var RuleContext = function(value) {
    /**
     * @param {?} g
     * @param {?} b
     * @param {?} c
     * @param {?} r
     * @param {?} i
     * @param {?} type
     * @param {?} message
     * @return {?}
     */
    function e(g, b, c, r, i, type, message) {
      var aNewColor = value.call(this, c, i, type, message) || this;
      return aNewColor._stopAtFsWin = true, aNewColor._stopAtBonusWin = true, aNewColor._freeSpinEnabled = g, aNewColor._bonusEnabled = b, aNewColor;
    }
    return genParam(e, value), Object.defineProperty(e.prototype, "stopAtFsWin", {
      get : function() {
        return this._stopAtFsWin;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._stopAtFsWin = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "stopAtBonusWin", {
      get : function() {
        return this._stopAtBonusWin;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._stopAtBonusWin = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "freeSpinEnabled", {
      get : function() {
        return this._freeSpinEnabled;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "bonusEnabled", {
      get : function() {
        return this._bonusEnabled;
      },
      enumerable : true,
      configurable : true
    }), e.prototype.toggleStopAtFsWin = function() {
      /** @type {boolean} */
      this._stopAtFsWin = !this._stopAtFsWin;
      this.notify();
    }, e.prototype.toggleStopAtBonusWin = function() {
      /** @type {boolean} */
      this._stopAtBonusWin = !this._stopAtBonusWin;
      this.notify();
    }, e.prototype.serialize = function(request) {
      value.prototype.serialize.call(this, request);
      request.serializeObject("_stopAtFsWin", this);
      request.serializeObject("_stopAtBonusWin", this);
      request.serializeObject("_freeSpinEnabled", this);
      request.serializeObject("_bonusEnabled", this);
    }, e;
  }(options.AutoplaySettings);
  var coveredByRange = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var query = function(end) {
    /**
     * @return {?}
     */
    function start() {
      return null !== end && end.apply(this, arguments) || this;
    }
    return coveredByRange(start, end), start.FEATURESTART = "FEATURESTART", start.FEATUREINPUT = "FEATUREINPUT", start.FEATURESELECT = "FEATURESELECT", start.FEATURESELECTED = "FEATURESELECTED", start.FEATUREAWARD = "FEATUREAWARD", start.FEATUREEND = "FEATUREEND", start.FEATUREDATA = "FEATUREDATA", start.FEATUREDATAANSWER = "FEATUREDATAANSWER", start.FEATURECOLLECT = "FEATURECOLLECT", start.FEATURECOLLECTED = "FEATURECOLLECTED", start.FEATUREWIN = "FEATUREWIN", start.FEATURECOMPLETED = "FEATURECOMPLETED", 
    start;
  }(self.MegatonEvent);
  var createPoint = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var params = function(value) {
    /**
     * @return {?}
     */
    function timestamp() {
      return null !== value && value.apply(this, arguments) || this;
    }
    return createPoint(timestamp, value), timestamp.FEATUREUISELECT = "FEATUREUISELECT", timestamp.FEATUREUISELECTED = "FEATUREUISELECTED", timestamp;
  }(query);
  var mod = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var s = function(input) {
    /**
     * @param {string} key
     * @param {string} value
     * @return {?}
     */
    function exports(key, value) {
      var that = input.call(this, params.FEATUREUISELECT) || this;
      return that._featureId = key, that._possibleValues = value, that;
    }
    return mod(exports, input), Object.defineProperty(exports.prototype, "featureId", {
      get : function() {
        return this._featureId;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "possibleValues", {
      get : function() {
        return this._possibleValues;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(params);
  var equal = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var types = function(context) {
    /**
     * @param {string} value
     * @return {?}
     */
    function e(value) {
      var x = context.call(this, params.FEATUREUISELECTED) || this;
      return x._value = value, x;
    }
    return equal(e, context), Object.defineProperty(e.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), e;
  }(params);
  var ensureStartEnd = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var v = function(end) {
    /**
     * @return {?}
     */
    function UploaderQueue() {
      return null !== end && end.apply(this, arguments) || this;
    }
    return ensureStartEnd(UploaderQueue, end), UploaderQueue.SPIN = "UISPIN", UploaderQueue.SPIN_OR_CONTINUE = "UISPINORCONTINUE", UploaderQueue.MOBILE_MENU = "UIMOBILEMENU", UploaderQueue.CONTINUE = "UICONTINUE", UploaderQueue.FAST_PLAY_INCREMENT = "FASTPLAYINCREMENT", UploaderQueue.GAMBLE = "UIGAMBLE", UploaderQueue.COLLECT = "UICOLLECT", UploaderQueue.AUTOPLAY_START = "UIAUTOPLAYSTART", UploaderQueue.AUTOPLAY_STOP = "UIAUTOPLAYSTOP", UploaderQueue.BET_CHANGE = "UIBETCHANGE", UploaderQueue.PAYTABLE = 
    "UIPAYTABLE", UploaderQueue.INDICATOR_PAYTABLE = "UIINDICATORPAYTABLE", UploaderQueue.NEXT_PAYTABLE = "UINEXTPAYTABLE", UploaderQueue.PREV_PAYTABLE = "UIPREVPAYTABLE", UploaderQueue.EXIT_PAYTABLE = "UIEXITPAYTABLE", UploaderQueue.PAYTABLE_CHANGE_PAGE = "UIPAYTABLECHANGEPAGE", UploaderQueue.TOGGLE_FAST_PLAY = "UITOGGLEFASTPLAY", UploaderQueue.SHOW_PAYTABLE = "UISHOWPAYTABLE", UploaderQueue.HIDE_PAYTABLE = "UIHIDEPAYTABLE", UploaderQueue.TOGGLE_STOP_ANY_WIN = "UITOGGLESTOPANYWIN", UploaderQueue.TOGGLE_STOP_BONUS = 
    "UITOGGLESTOPBONUS", UploaderQueue.TOGGLE_STOP_FREESPIN = "UITOGGLESTOPFREESPIN", UploaderQueue.TOGGLE_STOP_JACKPOT = "UITOGGLESTOPJACKPOT", UploaderQueue.UPDATE_AUTOSPINS = "UIUPDATEAUTOSPINS", UploaderQueue.UPDATE_SETTINGS = "UIUPDATESETTINGS", UploaderQueue.REELQUICKSTOP = "REELQUICKSTOPEVENT", UploaderQueue.OSPT_SHOWN = "OSPT_SHOWN", UploaderQueue.OSPT_HIDDEN = "OSPT_HIDDEN", UploaderQueue.HOVER_INDICATOR_SHOWN = "HOVER_INDICATOR_SHOWN", UploaderQueue.HOVER_INDICATOR_HIDDEN = "HOVER_INDICATOR_HIDDEN", 
    UploaderQueue;
  }(options.CommonUIEvent);
  var triggerKeyAction = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ProgressEvent = function(v) {
    /**
     * @param {?} i
     * @param {?} n
     * @return {?}
     */
    function e(i, n) {
      var ct = v.call(this, i) || this;
      return ct.bonusSymbol = n, ct;
    }
    return triggerKeyAction(e, v), e.BONUS_STARTED = "BONUS_STARTED", e.BONUS_ENDED = "BONUS_ENDED", e.BONUSWIN = "BONUSWIN", e;
  }(self.MegatonEvent);
  var setTimeout = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var BigNumber = function(s) {
    /**
     * @param {?} e
     * @param {?} p
     * @param {string} n
     * @return {?}
     */
    function f(e, p, n) {
      if (void 0 === n) {
        /** @type {number} */
        n = 0;
      }
      var b = s.call(this, f.JACKPOTWIN) || this;
      return b._jackpotId = e, b._amount = n, b._wonJackpotInfo = p, b;
    }
    return setTimeout(f, s), Object.defineProperty(f.prototype, "jackpotId", {
      get : function() {
        return this._jackpotId;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(f.prototype, "amount", {
      get : function() {
        return this._amount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(f.prototype, "wonJackpotInfo", {
      get : function() {
        return this._wonJackpotInfo;
      },
      enumerable : true,
      configurable : true
    }), f.JACKPOTWIN = "jackpotwin", f;
  }(query);
  var fieldSpecificFormatter = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Tween = function(f) {
    /**
     * @return {?}
     */
    function UploaderQueue() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return fieldSpecificFormatter(UploaderQueue, f), UploaderQueue.NONE = 0, UploaderQueue.BET = 1, UploaderQueue.CONTINUE = 2, UploaderQueue.CONTINUE_SPIN = 3, UploaderQueue.CONTINUE_SPIN_NOAUTOPLAY = 4, UploaderQueue.GAMBLE_WAIT = 5, UploaderQueue.GAMBLE_SPIN_WAIT = 6, UploaderQueue.GAMBLE = 7, UploaderQueue.COLLECT = 8, UploaderQueue;
  }(exports.ShowButtonsEvent);
  var dot = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var e = function(normal) {
    /**
     * @return {?}
     */
    function rv() {
      return null !== normal && normal.apply(this, arguments) || this;
    }
    return dot(rv, normal), rv.INTRO_START = "FREESPIN_INTRO_START", rv.WAIT_START = "FREESPIN_WAIT_START", rv.FREESPIN_START = "FREESPIN_START", rv.FREESPIN_END = "FREESPIN_END", rv;
  }(self.MegatonEvent);
  var C = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var pointer = function(d) {
    /**
     * @return {?}
     */
    function style() {
      return null !== d && d.apply(this, arguments) || this;
    }
    return C(style, d), style.FREESPIN_INTRO = "FREESPIN_INTRO", style.FREESPIN_SUMMARY = "FREESPIN_SUMMARY", style.FREESPIN_ENDED = "FREESPIN_ENDED", style;
  }(e);
  var B = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var BinderFor = function(remove) {
    /**
     * @return {?}
     */
    function proxy() {
      return null !== remove && remove.apply(this, arguments) || this;
    }
    return B(proxy, remove), proxy.BONUS_STARTED_IN_AUTOPLAY = "VSAE_BONUS_STARTED_IN_AUTOPLAY", proxy.BONUS_ENDED_IN_AUTOPLAY = "VSAE_BONUS_ENDED_IN_AUTOPLAY", proxy.FREESPIN_STARTED_IN_AUTOPLAY = "VSAE_FREESPIN_STARTED_IN_AUTOPLAY", proxy.FREESPIN_ENDED_IN_AUTOPLAY = "VSAE_FREESPIN_ENDED_IN_AUTOPLAY", proxy.STARTED_DURING_BONUS = "VSAE_STARTED_DURING_BONUS", proxy.STARTED_DURING_FREESPIN = "VSAE_STARTED_DURING_FREESPIN", proxy;
  }(self.MegatonEvent);
  var m = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var that = function(callback) {
    /**
     * @param {?} i
     * @param {!Object} x
     * @param {boolean} y
     * @return {?}
     */
    function v(i, x, y) {
      var orginData = callback.call(this, i) || this;
      return orginData.winsData = x, orginData.bigWinMode = y, orginData;
    }
    return m(v, callback), v.INIT = "WIN_INIT", v.DELAY_DONE = "WIN_DELAY_DONE", v.START = "WIN_START", v.WIN_PAYLINE = "WIN_PAYLINE", v.STOP = "WIN_STOP", v.DONE = "WIN_DONE", v;
  }(self.MegatonEvent);
  var refreshToken = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var evt = function(f) {
    /**
     * @param {?} e
     * @param {?} g
     * @param {?} name
     * @param {?} s
     * @param {?} a
     * @return {?}
     */
    function c(e, g, name, s, a) {
      var n = f.call(this, c.SPINEND) || this;
      return n._canGamble = e, n._wonCoins = g, n._roundWonAmount = name, n._freeSpinsLeft = s, n._freeSpinMultiplier = a, n;
    }
    return refreshToken(c, f), Object.defineProperty(c.prototype, "canGamble", {
      get : function() {
        return this._canGamble;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "wonCoins", {
      get : function() {
        return this._wonCoins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "roundWonAmount", {
      get : function() {
        return this._roundWonAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "freeSpinsLeft", {
      get : function() {
        return this._freeSpinsLeft;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "freeSpinMultiplier", {
      get : function() {
        return this._freeSpinMultiplier;
      },
      enumerable : true,
      configurable : true
    }), c.SPINEND = "SPINEND", c;
  }(self.MegatonEvent);
  var findRoots = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var V = function() {
    /**
     * @param {!Object} itemClassName
     * @param {number} itemDis
     * @return {undefined}
     */
    function ScrollList(itemClassName, itemDis) {
      if (void 0 === itemDis) {
        /** @type {boolean} */
        itemDis = true;
      }
      var options = this;
      /** @type {!Object} */
      this._dispatcher = itemClassName;
      /** @type {number} */
      this._hideJackpot = itemDis;
      /** @type {boolean} */
      this._isIdle = false;
      /**
       * @param {!Object} t
       * @return {?}
       */
      this._boundAnimationHandler = function(t) {
        return options.animationHandler(t);
      };
      /**
       * @param {!Object} t
       * @return {?}
       */
      this._boundDoAnimationHandler = function(t) {
        return options.doAnimationHandler(t);
      };
      this._dispatcher.addEventListener(exports.GameStatusEvent.IDLE, function(handler) {
        return options.onIdle(handler);
      });
      this._dispatcher.addEventListener(exports.SplashEvent.SPLASH_HIDE, function(t) {
        return options.onSplashHide(t);
      });
      this._dispatcher.dispatch(new win(win.EVENT_INITED, false));
    }
    return Object.defineProperty(ScrollList.prototype, "welcomeMessage", {
      get : function() {
        return "IDS_MENU_WELCOME";
      },
      enumerable : true,
      configurable : true
    }), ScrollList.prototype.onIdle = function(handler) {
      /** @type {boolean} */
      this._isIdle = true;
    }, ScrollList.prototype.onSplashHide = function(inEl) {
      if (this._isIdle) {
        this.execAnimation(self.Task.createHandler(null));
      } else {
        this.noAnimation();
      }
    }, ScrollList.prototype.execAnimation = function(canCreateDiscussions) {
      this._dispatcher.dispatch(new win(win.EVENT_SHOWN, true));
      this._dispatcher.dispatch(new exports.InfoEvent(this.welcomeMessage, options.WinInfoEvent.INFO));
      if (this._hideJackpot) {
        this._dispatcher.dispatch(new win(win.EVENT_HIDE_JACKPOT, true));
      }
      canCreateDiscussions.execHandler(this._boundDoAnimationHandler);
    }, ScrollList.prototype.noAnimation = function() {
      this._dispatcher.dispatch(new win(win.EVENT_HIDDEN, false));
      if (this._hideJackpot) {
        this._dispatcher.dispatch(new win(win.EVENT_SHOW_JACKPOT, false));
      }
    }, ScrollList.prototype.doAnimationHandler = function(args) {
      switch(args.state) {
        case 0:
          args.startHandler(this._boundAnimationHandler);
          break;
        default:
          this._dispatcher.dispatch(new win(win.EVENT_HIDDEN, true));
          this._dispatcher.dispatch(new exports.InfoEvent("", options.WinInfoEvent.INFO));
          if (this._hideJackpot) {
            this._dispatcher.dispatch(new win(win.EVENT_SHOW_JACKPOT, true));
          }
          args.complete();
      }
    }, ScrollList.prototype.animationHandler = function(result) {
      result.complete();
    }, ScrollList;
  }();
  var win = function(roots) {
    /**
     * @param {?} name
     * @param {?} index
     * @return {?}
     */
    function child(name, index) {
      var REGEX = roots.call(this, name) || this;
      return REGEX._animationPlayed = index, REGEX;
    }
    return findRoots(child, roots), Object.defineProperty(child.prototype, "animationPlayed", {
      get : function() {
        return this._animationPlayed;
      },
      enumerable : true,
      configurable : true
    }), child.EVENT_INITED = "game_transition_inited", child.EVENT_SHOWN = "game_transition_shown", child.EVENT_HIDDEN = "game_transition_hidden", child.EVENT_HIDE_JACKPOT = "game_transition_hide_jp", child.EVENT_SHOW_JACKPOT = "game_transition_show_jp", child;
  }(self.MegatonEvent);
  var conflictPathWatch = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Klass = function(item) {
    /**
     * @param {!HTMLElement} ctx
     * @param {?} callback
     * @param {?} id
     * @param {!Object} o
     * @return {?}
     */
    function $(ctx, callback, id, o) {
      var self = item.call(this, ctx, callback, id) || this;
      return self._config = o, self._gambleDelay = 10, self._continueDelay = 10, self._bonusDelay = 40, self._bonusRunning = false, self._freespinRunning = false, self._loggedOut = false, self._hasTransition = false, ctx.addEventListener(evt.SPINEND, function(eventName) {
        return self.onWin(eventName);
      }), ctx.addEventListener(s.FEATUREUISELECT, function(t) {
        return self.onFeatureUISelect(t);
      }), ctx.addEventListener(pointer.FREESPIN_INTRO, function() {
        return self.onFsWin();
      }), ctx.addEventListener(pointer.FREESPIN_ENDED, function() {
        return self.onFsEnded();
      }), ctx.addEventListener(ProgressEvent.BONUSWIN, function() {
        return self.onBonusWin();
      }), ctx.addEventListener(ProgressEvent.BONUS_ENDED, function() {
        return self.onBonusEnded();
      }), ctx.addEventListener(BigNumber.JACKPOTWIN, function() {
        return self.onJackpotWin();
      }), ctx.addEventListener(that.START, function(dappId) {
        return self.onWinStart(dappId);
      }), ctx.addEventListener(that.DELAY_DONE, function(dappId) {
        return self.onWinDone(dappId);
      }), ctx.addEventListener(that.DONE, function(dappId) {
        return self.onWinDone(dappId);
      }), ctx.addEventListener(exports.RealityCheckEvent.REALITYCHECKEVENT, function() {
        return self.onRealityCheck();
      }), ctx.addEventListener(exports.ExternalMessageEvent.EXTERNALMESSAGE, function() {
        return self.onExternalMessage();
      }), ctx.addEventListener(exports.ExitEvent.LOGOUT, function() {
        return self.onLogout();
      }), ctx.addEventListener(win.EVENT_INITED, function() {
        return self.transitionInited();
      }), ctx.addEventListener(win.EVENT_HIDDEN, function() {
        return self.transitionHidden();
      }), self;
    }
    return conflictPathWatch($, item), Object.defineProperty($.prototype, "gambleDelay", {
      set : function(mymuted) {
        /** @type {!Array} */
        this._gambleDelay = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "continueDelay", {
      set : function(mymuted) {
        /** @type {!Array} */
        this._continueDelay = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "bonusDelay", {
      set : function(mymuted) {
        /** @type {!Array} */
        this._bonusDelay = mymuted;
      },
      enumerable : true,
      configurable : true
    }), $.prototype.start = function(target) {
      if (!(this._config.disableAutoPlay || this._loggedOut)) {
        item.prototype.start.call(this, target);
        if (this._running) {
          if (this._bonusRunning) {
            this._dispatcher.dispatch(new BinderFor(BinderFor.STARTED_DURING_BONUS));
          }
          if (this._freespinRunning) {
            this._dispatcher.dispatch(new BinderFor(BinderFor.STARTED_DURING_FREESPIN));
          }
        }
      }
    }, $.prototype.onBonusWin = function() {
      /** @type {boolean} */
      this._bonusRunning = true;
      if (this._autoplaySettings.stopAtBonusWin) {
        this.stop();
      } else {
        if (this._running) {
          this._dispatcher.dispatch(new BinderFor(BinderFor.BONUS_STARTED_IN_AUTOPLAY));
        }
      }
    }, $.prototype.onBonusEnded = function() {
      if (this._running) {
        this._dispatcher.dispatch(new BinderFor(BinderFor.BONUS_ENDED_IN_AUTOPLAY));
      }
      /** @type {boolean} */
      this._bonusRunning = false;
    }, $.prototype.onFsWin = function() {
      /** @type {boolean} */
      this._freespinRunning = true;
      if (this._autoplaySettings.stopAtFsWin) {
        this.stop();
      } else {
        if (this._running) {
          this._dispatcher.dispatch(new BinderFor(BinderFor.FREESPIN_STARTED_IN_AUTOPLAY));
        }
      }
    }, $.prototype.onFsEnded = function() {
      if (this._running) {
        this._dispatcher.dispatch(new BinderFor(BinderFor.FREESPIN_ENDED_IN_AUTOPLAY));
      }
      /** @type {boolean} */
      this._freespinRunning = false;
    }, $.prototype.onWin = function(event) {
      var clickedLink = event.roundWonAmount;
      if (this._autoplaySettings.stopAtAnyWin && clickedLink > 0) {
        /** @type {boolean} */
        this._shouldStopOnWinProcess = true;
      } else {
        if (this._autoplaySettings.stopAtWin && clickedLink > this._autoplaySettings.stopAtWinValue) {
          /** @type {boolean} */
          this._shouldStopOnWinProcess = true;
        }
      }
    }, $.prototype.onRoundEnd = function(result) {
      var total = result.amount;
      if (this._autoplaySettings.stopAtTotalLoss && this._autoplaySettings.stopAtTotalLossValue > 0) {
        this._totalLossPool += total;
        if (this._totalLossPool < this._bet) {
          this.stop();
        }
      }
    }, $.prototype.transitionInited = function() {
      /** @type {boolean} */
      this._hasTransition = true;
    }, $.prototype.transitionHidden = function() {
      /** @type {boolean} */
      this._autoplaySettings.disabled = false;
    }, $.prototype.enable = function() {
      if (!this._hasTransition) {
        /** @type {boolean} */
        this._autoplaySettings.disabled = false;
      }
    }, $.prototype.onWinStart = function(dappid) {
      this.checkIfShouldStop();
      this._triggerState |= $.STATE_WIN;
    }, $.prototype.onWinDone = function(dappid) {
      this.checkIfShouldStop();
      this.enableTrigger($.STATE_WIN, false, 0);
    }, $.prototype.checkIfShouldStop = function() {
      if (this._shouldStopOnWinProcess) {
        this.stop();
        /** @type {boolean} */
        this._shouldStopOnWinProcess = false;
      }
    }, $.prototype.onShowButtons = function(match) {
      /** @type {boolean} */
      var uboard = match.groupId === Tween.GAMBLE_WAIT || match.groupId === Tween.GAMBLE_SPIN_WAIT || match.groupId === Tween.GAMBLE || match.groupId === Tween.COLLECT;
      this.enableTrigger($.STATE_GAMBLE, uboard, this._gambleDelay);
      /** @type {boolean} */
      var nberr = match.groupId === Tween.CONTINUE_SPIN;
      this.enableTrigger($.STATE_CONTINUE, nberr, this._continueDelay);
      item.prototype.onShowButtons.call(this, match);
    }, $.prototype.onFeatureUISelect = function(result) {
      this._bonusValues = result.possibleValues;
      this.enableTrigger($.STATE_BONUS, this._bonusValues && this._bonusValues.length > 0, this._bonusDelay);
    }, $.prototype.onTrigger = function() {
      if (!(this._triggerState & $.STATE_WIN)) {
        item.prototype.onTrigger.call(this);
      }
      if (this._triggerState & $.STATE_BONUS && this._running) {
        this.triggerBonus();
      }
      if (this._triggerState & $.STATE_GAMBLE && this._running) {
        this.triggerGamble();
      }
      if (this._triggerState & $.STATE_CONTINUE && this._running) {
        this.triggerContinue();
      }
      this.clear();
    }, $.prototype.triggerPlay = function() {
      this._dispatcher.dispatch(new v(v.SPIN));
      item.prototype.triggerPlay.call(this);
    }, $.prototype.triggerBonus = function() {
      /** @type {number} */
      var id = Math.floor(Math.random() * this._bonusValues.length);
      var password = this._bonusValues[id];
      this._dispatcher.dispatch(new types(password));
    }, $.prototype.triggerGamble = function() {
      this._dispatcher.dispatch(new v(v.COLLECT));
    }, $.prototype.triggerContinue = function() {
      this._dispatcher.dispatch(new v(v.CONTINUE));
    }, $.prototype.onRealityCheck = function() {
      if (!this._config.autoPlayResume) {
        this.stop();
      }
    }, $.prototype.onExternalMessage = function() {
      if (!this._config.autoPlayResume) {
        this.stop();
      }
    }, $.prototype.onLogout = function() {
      /** @type {boolean} */
      this._loggedOut = true;
      this.stop();
    }, $.STATE_GAMBLE = 2, $.STATE_BONUS = 4, $.STATE_CONTINUE = 8, $.STATE_WIN = 16, $;
  }(options.AutoplayHandler);
  var __extends = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(canCreateDiscussions) {
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.COINS = 0] = "COINS";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.DENOM = 1] = "DENOM";
  }(i || (i = {}));
  var result;
  !function(ReferenceFrame) {
    /** @type {string} */
    ReferenceFrame[ReferenceFrame.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    ReferenceFrame[ReferenceFrame.FIXED = 1] = "FIXED";
  }(result || (result = {}));
  var event;
  var BuddhaConfig = function(_super) {
    /**
     * @return {?}
     */
    function Folder() {
      var player = _super.call(this) || this;
      return player._quickStop = true, player._enforceRoundTime = false, player._minQuickRoundTime = 1000, player._autoSpins = [10, 20, 30, 40, 50], player._defaultAutoSpins = 20, player._betMaxSpin = false, player._defaultDenomination = 1, player._defaultLines = 0, player._disableAutoPlay = false, player._autoplayLimits = false, player._autoplayReset = false, player._disableFastPlay = false, player._disableFastPlayQuestion = false, player._defaultFastPlay = false, player._disableGamble = false, 
      player._betMode = result.NORMAL, player._disableSpacebarToSpin = false, player._defaultSpacebarToSpin = true, player._defaultAutoAdjustBet = true, player._autoPlayResume = false, player._hideFastPlay = false, player._hideAutoAdjustBet = false, player._hideSpaceBarToSpin = false, player._quickBetCurrency = false, player._freeGameEndLogout = false, player._numberOfAdjacentServerSymbols = 1, player._numberOfRealServerSymbolsPerReel = [3, 3, 3, 3, 3], player._bigSummary = false, player;
    }
    return __extends(Folder, _super), Object.defineProperty(Folder.prototype, "minQuickRoundTime", {
      get : function() {
        return this._minQuickRoundTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "enforceRoundTime", {
      get : function() {
        return this._enforceRoundTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "quickStop", {
      get : function() {
        return this._quickStop;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "betMaxSpin", {
      get : function() {
        return this._betMaxSpin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "betMaxMode", {
      get : function() {
        return this._betMaxMode;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoSpins", {
      get : function() {
        return this._autoSpins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "defaultAutoSpins", {
      get : function() {
        return this._defaultAutoSpins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "defaultDenomination", {
      get : function() {
        return this._defaultDenomination;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "defaultLines", {
      get : function() {
        return this._defaultLines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoplayReset", {
      get : function() {
        return this._autoplayReset;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoplayLimits", {
      get : function() {
        return this._autoplayLimits;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "disableAutoPlay", {
      get : function() {
        return this._disableAutoPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "disableFastPlay", {
      get : function() {
        return this._disableFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "disableFastPlayQuestion", {
      get : function() {
        return this._disableFastPlayQuestion;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "defaultFastPlay", {
      get : function() {
        return this._defaultFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "disableGamble", {
      get : function() {
        return this._disableGamble;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "betMode", {
      get : function() {
        return this._betMode;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "enableContinueDuringAutoplay", {
      get : function() {
        return this._enableContinueDuringAutoplay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "disableSpaceBarToSpin", {
      get : function() {
        return this._disableSpacebarToSpin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "defaultSpacebarToSpin", {
      get : function() {
        return this._defaultSpacebarToSpin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "defaultAutoAdjustBet", {
      get : function() {
        return this._defaultAutoAdjustBet;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoPlayResume", {
      get : function() {
        return this._autoPlayResume;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "hideFastPlay", {
      get : function() {
        return this._hideFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "hideAutoAdjustBet", {
      get : function() {
        return this._hideAutoAdjustBet;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "hideSpaceBarToSpin", {
      get : function() {
        return this._hideSpaceBarToSpin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "quickBetCurrency", {
      get : function() {
        return this._quickBetCurrency;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "freeGameEndLogout", {
      get : function() {
        return this._freeGameEndLogout;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "numberOfAdjacentServerSymbols", {
      get : function() {
        return this._numberOfAdjacentServerSymbols;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "numberOfRealServerSymbolsPerReel", {
      get : function() {
        return this._numberOfRealServerSymbolsPerReel;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "bigSummary", {
      get : function() {
        return this._bigSummary;
      },
      enumerable : true,
      configurable : true
    }), Folder.prototype.parse = function(args) {
      if (null == args) {
        return false;
      }
      if (this._quickStop = exports.Config.parseBoolean(args.quickStop, true), this._betMaxSpin = exports.Config.parseBoolean(args.betMaxSpin, false), this._betMaxMode = exports.Config.parseBoolean(args.betMaxMode, false) ? i.COINS : i.DENOM, this._defaultDenomination = exports.Config.parseInt(args.denom, 1), this._defaultLines = exports.Config.parseInt(args.lines, 0), this._minQuickRoundTime = exports.Config.parseInt(args.minQuickRoundTime, 1000), this._enforceRoundTime = exports.Config.parseBoolean(args.enforceRoundTime, 
      false), void 0 !== args.autoSpins) {
        /** @type {!Array} */
        this._autoSpins = [];
        var n = args.autoSpins.split(",");
        var j;
        for (j in n) {
          if (n.hasOwnProperty(j)) {
            /** @type {number} */
            var s = parseInt(n[j]);
            if (!isNaN(s)) {
              this._autoSpins.push(s);
            }
          }
        }
        this._defaultAutoSpins = this._autoSpins.length > 0 ? this._autoSpins[0] : 0;
      }
      if (void 0 !== args.defaultAutoSpins) {
        /** @type {number} */
        var top = parseInt(args.defaultAutoSpins);
        for (j in this._autoSpins) {
          if (this._autoSpins.hasOwnProperty(j)) {
            var axis = this._autoSpins[j];
            if (axis === top) {
              this._defaultAutoSpins = axis;
            }
          }
        }
      }
      this._autoplayReset = exports.Config.parseBoolean(args.autoplayReset, false);
      this._autoplayLimits = exports.Config.parseBoolean(args.autoplayLimits, false);
      this._disableAutoPlay = exports.Config.parseBoolean(args.disableAutoplay, false);
      this._disableFastPlay = exports.Config.parseBoolean(args.disableFastplay, false);
      this._disableFastPlayQuestion = exports.Config.parseBoolean(args.disableFastplayQuestion, false);
      this._defaultFastPlay = exports.Config.parseBoolean(args.defaultFastPlay, false);
      this._disableGamble = exports.Config.parseBoolean(args.neverGamble, false);
      this._betMode = exports.Config.parseInt(args.creditDisplay, 0) >= 2 ? result.FIXED : result.NORMAL;
      /** @type {boolean} */
      this._enableContinueDuringAutoplay = false;
      this._disableSpacebarToSpin = exports.Config.parseBoolean(args.disableSpacebarToSpin, false);
      this._bigSummary = exports.Config.parseBoolean(args.bigSummary, false);
      if (this._disableSpacebarToSpin) {
        /** @type {boolean} */
        this._defaultSpacebarToSpin = false;
      } else {
        this._defaultSpacebarToSpin = exports.Config.parseBoolean(args.defaultSpacebarToSpin, true);
      }
      this._defaultAutoAdjustBet = exports.Config.parseBoolean(args.defaultAutoAdjustBet, true);
      this._autoPlayResume = exports.Config.parseBoolean(args.autoPlayResume, false);
      this._hideFastPlay = exports.Config.parseBoolean(args.hideFastplay, false);
      this._hideAutoAdjustBet = exports.Config.parseBoolean(args.hideAutoAdjustBet, false);
      this._hideSpaceBarToSpin = exports.Config.parseBoolean(args.hideSpaceBarToSpin, false);
      this._quickBetCurrency = exports.Config.parseBoolean(args.quickBetCurrency, false);
      this._freeGameEndLogout = exports.Config.parseBoolean(args.freeGameEndLogout, false);
      var poffset = _super.prototype.parse.call(this, args);
      return this._minQuickRoundTime < 0 ? this._minQuickRoundTime = 0 : this._minQuickRoundTime > this._minRoundTime && (this._minQuickRoundTime = this._minRoundTime), poffset;
    }, Folder;
  }(exports.CasinoConfig);
  var validateForMax = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(ContentType) {
    /** @type {string} */
    ContentType[ContentType.NONE = 0] = "NONE";
    /** @type {string} */
    ContentType[ContentType.COIN = 1] = "COIN";
    /** @type {string} */
    ContentType[ContentType.LINE = 2] = "LINE";
    /** @type {string} */
    ContentType[ContentType.DENOM = 4] = "DENOM";
    /** @type {string} */
    ContentType[ContentType.FIXED_BET = 8] = "FIXED_BET";
  }(event || (event = {}));
  var _aureliaPal;
  var WebGLConstants = function(options) {
    /**
     * @param {string} e
     * @param {?} n
     * @param {number} data
     * @param {boolean} value
     * @param {number} key
     * @return {?}
     */
    function data(e, n, data, value, key) {
      if (void 0 === data) {
        /** @type {number} */
        data = 0;
      }
      if (void 0 === key) {
        /** @type {number} */
        key = 1;
      }
      var that = options.call(this) || this;
      return that._maxLines = e, that._maxCoins = n, that._betMaxMode = data, that._enabled = true, that._lock = value, that._lines = that._maxLines, that._coins = that._lock & event.COIN && that.isLocked(event.FIXED_BET) ? that._maxCoins : 1, that._denominationMultiplier = 1, that._denominations = [1, 2, 5, 10, 20, 25, 50, 100], that._temporaryAddedFreegameDenom = -1, that._freeGameMode = false, that.setDenomination(key), that._freegameTempStore = new self.DataSerializer([]), that;
    }
    return validateForMax(data, options), data.getClosestValueIndex = function(t, color) {
      var tmp;
      /** @type {number} */
      var minValue = Math.abs(color[0] - t);
      /** @type {number} */
      var convertedBallx = 0;
      var len = color.length;
      /** @type {number} */
      var k = 1;
      for (; k < len; k++) {
        if ((tmp = Math.abs(color[k] - t)) < minValue) {
          /** @type {number} */
          minValue = tmp;
          /** @type {number} */
          convertedBallx = k;
        }
      }
      return convertedBallx;
    }, Object.defineProperty(data.prototype, "betMaxMode", {
      set : function(mymuted) {
        this._betMaxMode = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "lock", {
      get : function() {
        return this._lock;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "lines", {
      get : function() {
        return this._lines;
      },
      set : function(val) {
        if (!((this._lock & event.LINE || !this._enabled) && !this._freeGameMode || val > this.maxLines || val < 1)) {
          /** @type {boolean} */
          var notEmpty = this._lines !== val;
          /** @type {number} */
          this._lines = val;
          if (notEmpty) {
            this.notify(data.LINES);
          }
        }
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      set : function(val) {
        if (!((this._lock & event.COIN || !this._enabled) && !this._freeGameMode || val > this.maxCoins || val < 1)) {
          /** @type {boolean} */
          var notEmpty = this._coins !== val;
          /** @type {number} */
          this._coins = val;
          /** @type {number} */
          exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
          if (notEmpty) {
            this.notify(data.COINS);
          }
        }
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "denomination", {
      get : function() {
        return this._denom < 0 ? this.getCoinDenomination(this._coins) : this._denominations[this._denom];
      },
      set : function(bufDesc) {
        if (!(this._lock & event.DENOM) && this._enabled || this._freeGameMode) {
          /** @type {boolean} */
          var clojIsReversed = this.denomination !== bufDesc;
          this.setDenomination(bufDesc, clojIsReversed);
        }
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "denominations", {
      get : function() {
        return this._denominations;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "betAmount", {
      get : function() {
        return this.coins * this.denomination * this._lines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "betCoins", {
      get : function() {
        return this._coins * this._lines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "maxLines", {
      get : function() {
        return this._maxLines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "maxCoins", {
      get : function() {
        return this._maxCoins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "hasMultipleDenominations", {
      get : function() {
        return this._denominations.length > 1;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "denominationMultiplier", {
      get : function() {
        return this._denominationMultiplier;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "fixedLines", {
      get : function() {
        return this._fixedLines;
      },
      set : function(mymuted) {
        this._fixedLines = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "fixedCoins", {
      get : function() {
        return this._fixedCoins;
      },
      set : function(mymuted) {
        this._fixedCoins = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "freeGameMode", {
      set : function(mymuted) {
        /** @type {number} */
        this._freeGameMode = mymuted;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.getCoinDenomination = function(i) {
      return this._coinDenominations && this._coinDenominations.length >= i - 1 ? this._coinDenominations[i - 1] : 0;
    }, data.prototype.setDenomIndex = function(ballNumber) {
      if (!(this._lock & event.DENOM || !this._enabled)) {
        this.setDenomination(this._denominations[ballNumber]);
      }
    }, data.prototype.isEnabled = function() {
      return this._enabled;
    }, data.prototype.enable = function(value, index) {
      if (void 0 === index) {
        /** @type {boolean} */
        index = true;
      }
      /** @type {boolean} */
      this._enabled = value;
      if (index) {
        this.notify(data.ENABLED);
      }
    }, data.prototype.initFreeGame = function(eta, lmbda, n) {
      this._freegameTempStore.save(this);
      /** @type {boolean} */
      this._freeGameMode = true;
      this.denomination = eta;
      this.coins = lmbda;
      /** @type {string} */
      this.lines = n;
    }, data.prototype.endFreeGame = function() {
      /** @type {boolean} */
      this._freeGameMode = false;
    }, data.prototype.setDenominations = function(lmbda, n) {
      var asyncSyncTime = this.denomination;
      /** @type {!Object} */
      this._denominations = lmbda;
      /** @type {number} */
      this._denominationMultiplier = n;
      exports.ResourceManager.getInstance().getMoneyFormatter().denominationMultiplier = this.denominationMultiplier;
      this.notify(data.DENOMINATIONS);
      this.setDenomination(asyncSyncTime);
    }, data.prototype.isLocked = function(itemIndex) {
      return (this._lock & itemIndex) > 0 || !this._enabled;
    }, data.prototype.resolveDenominations = function(clusterShardData) {
      var s1 = clusterShardData.split(",");
      /** @type {!Array} */
      this._coinDenominations = [];
      /** @type {number} */
      var i = 0;
      var l = s1.length;
      for (; i < l; i++) {
        /** @type {number} */
        this._coinDenominations[i] = parseInt(s1[i]);
      }
      if (this._coinDenominations.length > this._maxCoins) {
        this._coinDenominations.length = this._maxCoins;
      }
      if (this._coinDenominations.length < 1) {
        this._coinDenominations.push(1);
      }
      if (isNaN(this._coinDenominations[0])) {
        /** @type {number} */
        this._coinDenominations[0] = 1;
      }
      var id;
      /** @type {number} */
      id = 1;
      for (; id < this._maxCoins; id++) {
        if (this._coinDenominations.length < id + 1) {
          this._coinDenominations.push(this._coinDenominations[id - 1]);
        }
        if (isNaN(this._coinDenominations[id])) {
          this._coinDenominations[id] = this._coinDenominations[id - 1];
        }
      }
      /** @type {number} */
      id = 0;
      for (; id < this._maxCoins; id++) {
        this._coinDenominations[id] = this._denominations[data.getClosestValueIndex(this._coinDenominations[id] * this._denominationMultiplier, this._denominations)];
      }
      this._coinDenominations.sort(function(s, images) {
        return s - images;
      });
    }, data.prototype.decDenom = function() {
      if (!(this._lock & event.DENOM || !this._enabled)) {
        this._denom--;
        if (this._denom < 0) {
          /** @type {number} */
          this._denom = this._denominations.length - 1;
        }
        this.setDenomIndex(this._denom);
      }
    }, data.prototype.incDenom = function() {
      if (!(this._lock & event.DENOM || !this._enabled)) {
        this._denom++;
        if (this._denom >= this._denominations.length) {
          /** @type {number} */
          this._denom = 0;
        }
        this.setDenomIndex(this._denom);
      }
    }, data.prototype.setCoins = function(val) {
      if (val <= this._maxCoins) {
        /** @type {number} */
        this._coins = val;
        /** @type {number} */
        exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
        this.notify(data.COINS);
      }
    }, data.prototype.decCoins = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = true;
      }
      if (!(this._lock & event.COIN || !this._enabled)) {
        this._coins--;
        if (this._coins <= 0) {
          this._coins = this._maxCoins;
        }
        /** @type {number} */
        exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
        if (canCreateDiscussions) {
          this.notify(data.COINS);
        }
      }
    }, data.prototype.incCoins = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = true;
      }
      if (!(this._lock & event.COIN || !this._enabled)) {
        this._coins++;
        if (this._coins > this._maxCoins) {
          /** @type {number} */
          this._coins = 1;
        }
        /** @type {number} */
        exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
        if (canCreateDiscussions) {
          this.notify(data.COINS);
        }
      }
    }, data.prototype.decLines = function(addedRenderer) {
      if (void 0 === addedRenderer) {
        /** @type {boolean} */
        addedRenderer = true;
      }
      if (!(this._lock & event.LINE || !this._enabled)) {
        this._lines--;
        if (this._lines <= 0) {
          this._lines = this._maxLines;
        }
        if (addedRenderer) {
          this.notify(data.LINES);
        }
      }
    }, data.prototype.incLines = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = true;
      }
      if (!(this._lock & event.LINE || !this._enabled)) {
        this._lines++;
        if (this._lines > this._maxLines) {
          /** @type {number} */
          this._lines = 1;
        }
        if (canCreateDiscussions) {
          this.notify(data.LINES);
        }
      }
    }, data.prototype.adjustBet = function(canCreateDiscussions) {
      var val = this._coins;
      var lines = this._lines;
      var r = this._denom;
      if (!this._enabled) {
        return false;
      }
      if (canCreateDiscussions >= this.betAmount) {
        return true;
      }
      for (; canCreateDiscussions < this.betAmount;) {
        if (!this.adjustDown()) {
          return this._coins = val, this._lines = lines, this._denom = r, false;
        }
      }
      return exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination, exports.ResourceManager.getInstance().getCreditFormatter().denomination = this.denomination, val !== this._coins && this.notify(data.COINS), lines !== this._lines && this.notify(data.LINES), r !== this._denom && this.notify(data.DENOM), true;
    }, data.prototype.betMax = function() {
      if (this._enabled) {
        /** @type {boolean} */
        var t = false;
        /** @type {boolean} */
        var n = false;
        /** @type {boolean} */
        var o = false;
        if (this._lines !== this._maxLines) {
          if (!(this._lock & event.LINE)) {
            this._lines = this._maxLines;
            /** @type {boolean} */
            n = true;
          }
        }
        if (this._betMaxMode === i.DENOM && this._denom >= 0) {
          if (!(this._lock & event.DENOM)) {
            /** @type {number} */
            this._denom = this._denominations.length - 1;
            /** @type {boolean} */
            o = true;
          }
        } else {
          if (!(this._lock & event.COIN)) {
            this._coins = this._maxCoins;
            /** @type {boolean} */
            t = true;
          }
        }
        if (t) {
          this.notify(data.COINS);
        }
        if (n) {
          this.notify(data.LINES);
        }
        if (o) {
          this.notify(data.DENOM);
        }
      }
    }, data.prototype.addTemporaryFreegameDenomIfMissing = function(aircraftId) {
      return -1 === this._denominations.indexOf(aircraftId) && (this._temporaryAddedFreegameDenom = aircraftId, this._denominations.push(aircraftId), this._denominations.sort(function(s, images) {
        return s - images;
      }), true);
    }, data.prototype.removeTemporaryFreegameDenom = function() {
      if (-1 !== this._temporaryAddedFreegameDenom) {
        var t = this._temporaryAddedFreegameDenom;
        return this._denominations.splice(this._denominations.indexOf(this._temporaryAddedFreegameDenom), 1), this._temporaryAddedFreegameDenom = -1, t;
      }
      return -1;
    }, data.prototype.serialize = function(request) {
      options.prototype.serialize.call(this, request);
      request.serializeObject("_coins", this);
      request.serializeObject("_lines", this);
      request.serializeObject("_denom", this);
    }, data.prototype.setServerAnswerBetValues = function(server, string, count) {
      /** @type {number} */
      var state = 0;
      /** @type {number} */
      state = state | (this._coins === server ? 0 : data.COINS);
      /** @type {number} */
      this._coins = server;
      /** @type {number} */
      state = state | (this._lines === string ? 0 : data.LINES);
      this._lines = string;
      var label = data.getClosestValueIndex(count, this._denominations);
      /** @type {number} */
      state = state | (this._denom === label ? 0 : data.DENOM);
      this._denom = label;
      exports.ResourceManager.getInstance().getCreditFormatter().denomination = this.denomination;
      /** @type {number} */
      exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
      if (state > 0) {
        this.notify(state);
      }
    }, data.prototype.setDenomination = function(result, isSlidingUp) {
      if (void 0 === isSlidingUp) {
        /** @type {boolean} */
        isSlidingUp = true;
      }
      if (!(this._lock & event.DENOM || !this._enabled)) {
        this._denom = data.getClosestValueIndex(result, this._denominations);
        exports.ResourceManager.getInstance().getCreditFormatter().denomination = this.denomination;
        /** @type {number} */
        exports.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
        if (isSlidingUp) {
          this.notify(data.DENOM);
        }
      }
    }, data.prototype.adjustDown = function() {
      var t = this._denom;
      /** @type {boolean} */
      var $obstructed = false;
      if (this._denom > 0 && this._denom--, t === this._denom) {
        if (0 == (this._lock & event.COIN) && this._coins > 1) {
          this._coins--;
          /** @type {boolean} */
          $obstructed = true;
        } else {
          if (this._lines > 1) {
            var $function = this._lines;
            this.decLines(false);
            /** @type {boolean} */
            $obstructed = $function !== this._lines;
          }
        }
      } else {
        /** @type {boolean} */
        $obstructed = true;
      }
      return $obstructed;
    }, data.ENABLED = 1, data.COINS = 2, data.LINES = 4, data.DENOM = 8, data.DENOMINATIONS = 16, data;
  }(self.Model);
  var parseCharactor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MGE = function(item) {
    /**
     * @param {?} date
     * @param {?} y
     * @param {number} id
     * @param {string} e
     * @param {?} n
     * @param {string} left
     * @return {?}
     */
    function p(date, y, id, e, n, left) {
      if (void 0 === id) {
        /** @type {string} */
        id = "";
      }
      var self = item.call(this, date, y, id) || this;
      return self._lines = e, self._coins = n, self._denomination = left, self;
    }
    return parseCharactor(p, item), Object.defineProperty(p.prototype, "lines", {
      get : function() {
        return this._lines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "denomination", {
      get : function() {
        return this._denomination;
      },
      enumerable : true,
      configurable : true
    }), p.BET_UPDATE = "BET_UPDATE", p;
  }(exports.EIRoundEvent);
  var forExpressionTerm = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var DooberTooltip = function(test) {
    /**
     * @param {!HTMLElement} radius
     * @param {?} l
     * @param {!Object} m
     * @param {!Object} c
     * @return {?}
     */
    function init(radius, l, m, c) {
      var _this = test.call(this, radius) || this;
      return _this._roundHandler = l, _this._betSettings = m, _this._config = c, c.defaultLines > 0 && (_this._betSettings.lines = c.defaultLines), c.defaultLimit > 0 && (_this._betSettings.coins = c.defaultLimit), m.addListener(function(fs) {
        return _this.onBetChanged(fs);
      }), radius.addEventListener(exports.DenominationsEvent.DENOMINATIONS, function(inlets) {
        return _this.onDenominations(inlets);
      }), _this;
    }
    return forExpressionTerm(init, test), init.prototype.onDenominations = function(inlets) {
      this._betSettings.setDenominations(inlets.denominations, inlets.multiplier);
      this._betSettings.resolveDenominations(this._config.passedLimits);
      /** @type {number} */
      this._betSettings.denomination = this._config.defaultDenomination * inlets.multiplier;
    }, init.prototype.onBetChanged = function(gl) {
      if (gl.isChanged(WebGLConstants.COINS) || gl.isChanged(WebGLConstants.LINES) || gl.isChanged(WebGLConstants.DENOM)) {
        var e = this._betSettings.betAmount;
        this._roundHandler.setBet(e);
        var checked = this._betSettings.betCoins;
        var historyID = exports.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._roundHandler.bet);
        this._dispatcher.dispatch(new MGE(MGE.BET_UPDATE, checked, historyID, this._betSettings.lines, this._betSettings.coins, this._betSettings.denomination));
      }
    }, init;
  }(self.EventProcessor);
  var gettext = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var events = function(origin) {
    /**
     * @return {?}
     */
    function Event() {
      return null !== origin && origin.apply(this, arguments) || this;
    }
    return gettext(Event, origin), Event.START = "FREEGAME_START", Event.END = "FREEGAME_END", Event.CONSUMED = "FREEGAME_CONSUMED", Event.TOTALWIN = "FREEGAME_TOTALWIN", Event.ADDITIONAL = "FREEGAME_ADDITIONAL", Event.INSESSION = "FREEGAME_INSESSION", Event.UPDATE = "FREEGAME_UPDATE", Event.LOGOUT = "FREEGAME_LOGOUT", Event;
  }(self.MegatonEvent);
  var testImportWithCommonJSTransform = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var val = function(output) {
    /**
     * @param {string} value
     * @return {?}
     */
    function c(value) {
      var x = output.call(this, c.FREESPIN_STATUS) || this;
      return x._value = value, x;
    }
    return testImportWithCommonJSTransform(c, output), Object.defineProperty(c.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), c.FREESPIN_STATUS = "FREESPIN_STATUS", c;
  }(e);
  var googleImageSize = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var node = function(size) {
    /**
     * @return {?}
     */
    function input() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return googleImageSize(input, size), input.GAMBLE_AVAILABLE = "GAMBLE_AVAILABLE", input.GAMBLE_START = "GAMBLE_START", input.GAMBLE_COLLECT = "GAMBLE_COLLECT", input.CONFIRM_COLLECT = "CONFIRM_COLLECT", input;
  }(self.MegatonEvent);
  var hook = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var model = function(current) {
    /**
     * @param {!Object} o
     * @param {?} f
     * @param {?} idx
     * @param {?} styles
     * @param {?} sort
     * @return {?}
     */
    function select(o, f, idx, styles, sort) {
      var self = current.call(this, select.GAMBLE_ANSWER) || this;
      return self._selection = o, self._winCode = f, self._winCoins = idx, self._cardIndex = styles, self._canGamble = sort, self;
    }
    return hook(select, current), Object.defineProperty(select.prototype, "selection", {
      get : function() {
        return this._selection;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(select.prototype, "winCode", {
      get : function() {
        return this._winCode;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(select.prototype, "winCoins", {
      get : function() {
        return this._winCoins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(select.prototype, "cardIndex", {
      get : function() {
        return this._cardIndex;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(select.prototype, "canGamble", {
      get : function() {
        return this._canGamble;
      },
      enumerable : true,
      configurable : true
    }), select.GAMBLE_ANSWER = "GAMBLE_ANSWER", select;
  }(node);
  var set_remove = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var binding = function(obj) {
    /**
     * @param {string} value
     * @return {?}
     */
    function current(value) {
      var x = obj.call(this, current.GAMBLE_SELECT) || this;
      return x._value = value, x;
    }
    return set_remove(current, obj), Object.defineProperty(current.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), current.GAMBLE_SELECT = "GAMBLE_SELECT", current;
  }(node);
  var log = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Uint8Array = function(output) {
    /**
     * @param {!HTMLElement} msg
     * @param {string} api
     * @param {?} setting
     * @param {?} store
     * @param {!Object} data
     * @param {number} w
     * @return {?}
     */
    function init(msg, api, setting, store, data, w) {
      var self = output.call(this, msg) || this;
      return self._data = data, self._input = api, self._roundHandler = setting, self._betSettings = store, self._data.canGamble = false, self._confirmCollect = w, api.registerEvent(model.GAMBLE_ANSWER), api.registerEvent(node.GAMBLE_COLLECT), api.registerEvent(v.COLLECT), api.registerEvent(v.GAMBLE), msg.addEventListener(val.FREESPIN_STATUS, function(inputValue) {
        return self.onConfirmCollect(inputValue);
      }), msg.addEventListener(options.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return self.onAutoplay(true);
      }), msg.addEventListener(options.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return self.onAutoplay(false);
      }), self._gambleWaitSequence = [function(data) {
        return self.gambleWaitIntroHandler(data);
      }, function(inputValue) {
        return self.gambleWaitProcessHandler(inputValue);
      }], self._gambleSequence = [function(inputValue) {
        return self.gambleIntroHandler(inputValue);
      }, function(inputValue) {
        return self.gambleProcessHandler(inputValue);
      }, function(inputValue) {
        return self.gambleOutroHandler(inputValue);
      }], self;
    }
    return log(init, output), init.prototype.start = function(t, n, elem, type, options, fn) {
      var allTraps = this;
      this._data.canContinueGamble = n.canGamble;
      this._data.winAmount = n.wonCoins;
      /** @type {number} */
      this._data.numGambles = 0;
      /** @type {string} */
      this._noGambleMode = elem;
      /** @type {boolean} */
      this._forceWaitCollect = type;
      /** @type {number} */
      this._showSpin = options;
      /** @type {number} */
      this._waitUntil = fn;
      this._roundHandler.setWin(n.roundWonAmount);
      this._roundHandler.setWonCoins(n.wonCoins);
      if (n.wonCoins <= 0) {
        /** @type {boolean} */
        this._data.canContinueGamble = false;
      }
      t.execHandler(function(t) {
        return allTraps.gambleHandler(t);
      });
    }, init.prototype.onConfirmCollect = function(event) {
      /** @type {boolean} */
      this._confirmCollect = true;
    }, init.prototype.onAutoplay = function(data) {
      /** @type {string} */
      this._data.autoCollect = data;
    }, init.prototype.gambleHandler = function(args) {
      var allTraps = this;
      switch(args.state) {
        case 0:
          if (this._pendingSpinEvent = null, this._data.canGamble && this._data.canContinueGamble && !this._data.autoCollect && !this._noGambleMode) {
            args.startHandler(function(t) {
              return allTraps.gambleWaitHandler(t);
            });
            break;
          }
        case 1:
          args.startHandler(function(propName) {
            return allTraps.waitCollectHandler(propName);
          });
          args.next(2);
          break;
        case 2:
          this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.NONE));
          /** @type {number} */
          var i = 0;
          if (this._waitUntil > 0) {
            /** @type {number} */
            i = Math.max(i, this._waitUntil - self.SystemManager.getScheduler().getTime());
          }
          args.startDelayMs(i);
          break;
        default:
          if (this._pendingSpinEvent) {
            this._dispatcher.dispatch(this._pendingSpinEvent);
          }
          args.complete();
      }
    }, init.prototype.gambleWaitHandler = function(self) {
      var allTraps = this;
      if (this._noGambleMode || self.state > 0) {
        self.complete();
      } else {
        self.startHandler(function(t) {
          return allTraps.enableSpinHandler(t);
        }, null, false);
        self.startSequence(this._gambleWaitSequence);
      }
    }, init.prototype.gambleWaitIntroHandler = function(subgoal) {
      this._dispatcher.dispatch(new node(node.GAMBLE_AVAILABLE));
      this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.GAMBLE_WAIT));
      subgoal.complete();
    }, init.prototype.enableSpinHandler = function(testObj) {
      switch(testObj.state) {
        case 0:
          /** @type {number} */
          var i = 0;
          if (this._waitUntil > 0) {
            /** @type {number} */
            i = Math.max(i, this._waitUntil - self.SystemManager.getScheduler().getTime());
          }
          this._spinEnablerTask = testObj.startDelayMs(i);
          break;
        default:
          /** @type {null} */
          this._spinEnablerTask = null;
          if (this._showSpin) {
            this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.GAMBLE_SPIN_WAIT));
          }
      }
    }, init.prototype.gambleWaitProcessHandler = function(value) {
      var m;
      var ArgsHandler = this;
      for (; m = this._input.read(value);) {
        var id = m.type;
        if (id === model.GAMBLE_ANSWER) {
          break;
        }
        if (this._input.next(), id === v.SPIN && (this._pendingSpinEvent = m), id === v.GAMBLE || id === v.COLLECT || id === v.SPIN || id === node.GAMBLE_COLLECT) {
          break;
        }
      }
      if (m) {
        if (m.type === model.GAMBLE_ANSWER || m.type === v.GAMBLE) {
          return this._spinEnablerTask && (this._spinEnablerTask.cancelDelay(), this._spinEnablerTask = null), void value.execHandler(function(element) {
            return ArgsHandler.processGambleHandler(element);
          });
        }
        value.complete();
      }
    }, init.prototype.processGambleHandler = function(suppressDisabledCheck) {
      this._dispatcher.dispatch(new node(node.GAMBLE_START));
      suppressDisabledCheck.execSequence(this._gambleSequence);
    }, init.prototype.gambleIntroHandler = function(a) {
      a.complete();
    }, init.prototype.gambleProcessHandler = function(a) {
      a.complete();
    }, init.prototype.gambleOutroHandler = function(a) {
      a.complete();
    }, init.prototype.waitCollectHandler = function(value) {
      switch(value.state) {
        case 0:
          if (!(this._data.canGamble && this._data.canContinueGamble || this._data.canContinueGamble && this._data.autoCollect || this._data.winAmount && this._confirmCollect)) {
            return void value.complete();
          }
          this._dispatcher.dispatch(new binding(0));
          if (this._input.data && this._input.data.type === exports.ReconnectEndEvent.RECONNECTEND) {
            this._input.next();
          }
        default:
          var d = void 0;
          if (this._forceWaitCollect) {
            for (; d = this._input.read(value);) {
              if (this._input.next(), d.type === exports.ReconnectEndEvent.RECONNECTEND && self.SystemManager.getScheduler().reconnecting) {
                this._dispatcher.dispatch(new binding(0));
              } else {
                if (d.type === v.SPIN) {
                  this._pendingSpinEvent = d;
                } else {
                  if (d.type === node.GAMBLE_COLLECT) {
                    return void value.complete();
                  }
                }
              }
            }
          } else {
            for (; d = this._input.data;) {
              this._input.next();
              if (d.type === exports.ReconnectEndEvent.RECONNECTEND) {
                this._dispatcher.dispatch(new binding(0));
              } else {
                if (d.type === v.SPIN) {
                  this._pendingSpinEvent = d;
                }
              }
            }
            value.complete();
          }
      }
    }, init;
  }(self.EventProcessor);
  var datesBetween = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ht = function(end) {
    /**
     * @return {?}
     */
    function ScopeError() {
      return end.call(this) || this;
    }
    return datesBetween(ScopeError, end), Object.defineProperty(ScopeError.prototype, "numGambles", {
      get : function() {
        return this._numGambles;
      },
      set : function(mymuted) {
        this._numGambles = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "canGamble", {
      get : function() {
        return this._canGamble;
      },
      set : function(mymuted) {
        this._canGamble = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "canContinueGamble", {
      get : function() {
        return this._canContinueGamble;
      },
      set : function(mymuted) {
        this._canContinueGamble = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "autoCollect", {
      get : function() {
        return this._autoCollect;
      },
      set : function(mymuted) {
        this._autoCollect = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._winAmount = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "winCode", {
      get : function() {
        return this._winCode;
      },
      set : function(mymuted) {
        /** @type {string} */
        this._winCode = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "maxGambles", {
      get : function() {
        return 5;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScopeError.prototype, "gambleLimit", {
      get : function() {
        return 2500;
      },
      enumerable : true,
      configurable : true
    }), ScopeError;
  }(self.Model);
  var individual = function() {
    /**
     * @param {undefined} element
     * @param {undefined} name
     * @param {undefined} isVertical
     * @param {undefined} secondIsSidebar
     * @param {number} settingName
     * @return {undefined}
     */
    function constructor(element, name, isVertical, secondIsSidebar, settingName) {
      if (void 0 === settingName) {
        /** @type {boolean} */
        settingName = false;
      }
      var command = exports.ResourceManager.getInstance().getEntityManager();
      var value = command.create("?");
      command.add("gamble", value);
      this._data = this.createData();
      this._gambleLogicController = this.createGambleLogicController(element, name, isVertical, secondIsSidebar, this._data, settingName);
    }
    return Object.defineProperty(constructor.prototype, "gambleLogicController", {
      get : function() {
        return this._gambleLogicController;
      },
      enumerable : true,
      configurable : true
    }), constructor.prototype.createData = function() {
      return new ht;
    }, constructor.prototype.createGambleLogicController = function(b, s, n, format, filters, value) {
      return new Uint8Array(b, s, n, format, filters, value);
    }, constructor;
  }();
  !function(exports) {
    /** @type {string} */
    exports[exports.SPIN = 1] = "SPIN";
    /** @type {string} */
    exports[exports.FEATURE = 2] = "FEATURE";
    /** @type {string} */
    exports[exports.SPINEND = 3] = "SPINEND";
    /** @type {string} */
    exports[exports.GAMBLE = 4] = "GAMBLE";
    /** @type {string} */
    exports[exports.COLLECT = 6] = "COLLECT";
  }(_aureliaPal || (_aureliaPal = {}));
  var value;
  !function(exports) {
    /** @type {string} */
    exports[exports.SPIN = 1] = "SPIN";
    /** @type {string} */
    exports[exports.FEATURE = 2] = "FEATURE";
    /** @type {string} */
    exports[exports.GAMBLE = 4] = "GAMBLE";
    /** @type {string} */
    exports[exports.FREESPINSPIN = 7] = "FREESPINSPIN";
  }(value || (value = {}));
  var props;
  var stepProcessor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var yt = function(step) {
    /**
     * @param {!HTMLElement} _
     * @return {?}
     */
    function Main(_) {
      var plugin = step.call(this, _) || this;
      return _.addEventListener(exports.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), _.addEventListener(binding.GAMBLE_SELECT, function(t) {
        return plugin.onGambleSelect(t);
      }), plugin;
    }
    return stepProcessor(Main, step), Main.prototype.onCommand = function(event) {
      switch(event.command.type) {
        case _aureliaPal.GAMBLE:
          var storage = event.command;
          var obj = storage.getInt(0);
          var fields = storage.getInt(1);
          var skipId = storage.getInt(2);
          var s = storage.getInt(3);
          /** @type {boolean} */
          var a = !storage.getBoolean(4);
          /** @type {number} */
          var u = s <= 12 ? 0 : s <= 25 ? 13 : s <= 38 ? 26 : 39;
          this._dispatcher.dispatch(new exports.LogicEvent(new model(obj, fields, skipId, u, a)));
          break;
        case _aureliaPal.COLLECT:
          this._dispatcher.dispatch(new exports.LogicEvent(new node(node.GAMBLE_COLLECT)));
          break;
        case exports.ServerCommand.FREESPIN_STATUS:
          this._dispatcher.dispatch(new exports.LogicEvent(new node(node.CONFIRM_COLLECT)));
      }
    }, Main.prototype.onGambleSelect = function(b) {
      var body = new exports.Command(value.GAMBLE, [String(b.value)]);
      this._dispatcher.dispatch(new exports.CommandEvent(exports.CommandEvent.LOGIC_OUT, body));
    }, Main;
  }(self.EventProcessor);
  var convertToItem = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Set = function(obj) {
    /**
     * @param {string} value
     * @return {?}
     */
    function current(value) {
      var x = obj.call(this, current.GAMBLE_UI) || this;
      return x._value = value, x;
    }
    return convertToItem(current, obj), Object.defineProperty(current.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), current.GAMBLE_UI = "GAMBLE_UI", current;
  }(node);
  var isPropertyDefined = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ZmPrefAccount = function(config) {
    /**
     * @param {?} event
     * @param {?} data
     * @return {?}
     */
    function select(event, data) {
      var imageData = config.call(this, event) || this;
      return imageData._selection = data, imageData;
    }
    return isPropertyDefined(select, config), Object.defineProperty(select.prototype, "selection", {
      get : function() {
        return this._selection;
      },
      enumerable : true,
      configurable : true
    }), select.GAMBLE = "GAMBLE", select.COLLECT = "COLLECT", select;
  }(self.MegatonEvent);
  var configure = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Poker = function() {
    /**
     * @return {undefined}
     */
    function Poker() {
    }
    return Poker.RED = "RED", Poker.BLACK = "BLACK", Poker.HEART = "HEART", Poker.DIAMOND = "DIAMOND", Poker.CLUB = "CLUB", Poker.SPADE = "SPADE", Poker;
  }();
  var cls = function(module) {
    /**
     * @param {?} selector
     * @return {?}
     */
    function init(selector) {
      var that = module.call(this, selector) || this;
      /** @type {number} */
      that._historyLength = 8;
      /** @type {boolean} */
      that._shown = false;
      /** @type {!Array} */
      that._colorNames = ["none", "club", "diamond", "spade", "heart"];
      /** @type {string} */
      that._buttons[Poker.RED] = "redBtn";
      /** @type {string} */
      that._buttons[Poker.BLACK] = "blackBtn";
      /** @type {string} */
      that._buttons[Poker.HEART] = "heartBtn";
      /** @type {string} */
      that._buttons[Poker.DIAMOND] = "diamondBtn";
      /** @type {string} */
      that._buttons[Poker.CLUB] = "clubBtn";
      /** @type {string} */
      that._buttons[Poker.SPADE] = "spadeBtn";
      that._panelAnim = that._entity.getAnimation(".");
      that._cardAnim = that._entity.getAnimation("card");
      that._faceAnim = that._entity.getAnimation("front");
      that._colorPaysValue = that._entity.getTextField("colorPaysValue");
      that._suitPaysValue = that._entity.getTextField("suitPaysValue");
      that._topLabel = that._entity.getTextField("IDS_CHOOSE_COLOR_OR_SUIT");
      that._cardAnim.play("stop");
      /** @type {!Array} */
      that._historyAnims = [];
      /** @type {number} */
      var j = 1;
      for (; j <= that._historyLength; j++) {
        that._historyAnims.push(that._entity.getAnimation("pcard" + j));
      }
      return that;
    }
    return configure(init, module), init.prototype.setWinCode = function(textWriter, o, keyFn) {
      if (textWriter > 0) {
        this._topLabel.setText(1 === textWriter ? "IDS_VP_TIE" : o ? "IDS_VP_WIN" : "IDS_VP_BONUS5");
      } else {
        if (0 !== textWriter || keyFn) {
          this._topLabel.setText("");
        } else {
          this._topLabel.setText("IDS_VP_GAMEOVER");
        }
      }
    }, init.prototype.nextRound = function(limit) {
      var listOfPages = exports.ResourceManager.getInstance().getCreditFormatter();
      this._colorPaysValue.setText(limit ? String(listOfPages.formatCoinValue(2 * limit)) : "");
      this._suitPaysValue.setText(limit ? String(listOfPages.formatCoinValue(4 * limit)) : "");
      this._topLabel.setText("IDS_VP_BONUS2");
    }, init.prototype.refreshHistory = function(data) {
      /** @type {number} */
      var i = 0;
      var nbElts = data.length;
      for (; i < nbElts; i++) {
        /** @type {number} */
        var startMorph = Math.floor(data[i] / 13) + 1;
        this._historyAnims[i].play(this._colorNames[startMorph]);
      }
    }, init.prototype.show = function(el, shown, cancel) {
      if (void 0 === cancel && (cancel = true), this._shown === shown) {
        return void(cancel ? el.complete() : el.startDelayMs(0));
      }
      /** @type {boolean} */
      this._shown = shown;
      if (shown) {
        this._cardAnim.play("stop");
      }
      if (cancel) {
        el.execFunction(this._panelAnim.play, shown ? "show" : "hide");
      } else {
        el.startFunction(this._panelAnim.play, shown ? "show" : "hide");
      }
    }, init.prototype.showCard = function(self, enable, name) {
      if (void 0 === name) {
        /** @type {number} */
        name = 0;
      }
      var type = this._cardAnim.getClipName();
      /** @type {string} */
      var method = enable ? "show" : "stop";
      if (type === method) {
        self.complete();
      } else {
        self.execFunction(this._cardAnim.play, method);
        if (enable) {
          this._faceAnim.play("c" + name);
        }
      }
    }, init;
  }(exports.ViewBase);
  var callService$1 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var api = function(t) {
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function e(key, value) {
      var Hoptoad = t.call(this, e.GAMBLE_END) || this;
      return Hoptoad._wonAmount = key, Hoptoad._isWinCap = value, Hoptoad;
    }
    return callService$1(e, t), Object.defineProperty(e.prototype, "wonAmount", {
      get : function() {
        return this._wonAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "isWinCap", {
      get : function() {
        return this._isWinCap;
      },
      enumerable : true,
      configurable : true
    }), e.GAMBLE_END = "VS_RED_OR_BLACK_END", e;
  }(self.MegatonEvent);
  var trigger = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(Poker) {
    /** @type {string} */
    Poker[Poker.RED = 1] = "RED";
    /** @type {string} */
    Poker[Poker.BLACK = 3] = "BLACK";
    /** @type {string} */
    Poker[Poker.CLUB = 4] = "CLUB";
    /** @type {string} */
    Poker[Poker.DIAMOND = 5] = "DIAMOND";
    /** @type {string} */
    Poker[Poker.SPADE = 6] = "SPADE";
    /** @type {string} */
    Poker[Poker.HEART = 7] = "HEART";
  }(props || (props = {}));
  var root;
  var AttributeTransformer = function(t) {
    /**
     * @param {?} reason
     * @param {?} p
     * @param {?} item
     * @param {?} width
     * @param {?} height
     * @param {!Element} view
     * @return {?}
     */
    function init(reason, p, item, width, height, view) {
      var self = t.call(this, reason, p, item, width, height, false) || this;
      return self._historyLength = 8, self._view = view, self._data.canGamble = true, self._history = [], self._isCollect = false, self._currentSelection = -1, p.registerEvent(Set.GAMBLE_UI), self._view.initButton(Poker.RED, function() {
        return self.onSelect(props.RED);
      }), self._view.initButton(Poker.BLACK, function() {
        return self.onSelect(props.BLACK);
      }), self._view.initButton(Poker.HEART, function() {
        return self.onSelect(props.HEART);
      }), self._view.initButton(Poker.DIAMOND, function() {
        return self.onSelect(props.DIAMOND);
      }), self._view.initButton(Poker.CLUB, function() {
        return self.onSelect(props.CLUB);
      }), self._view.initButton(Poker.SPADE, function() {
        return self.onSelect(props.SPADE);
      }), self._gambleProcessItemSequence = [function(data) {
        return self.gambleProcessItemIntroHandler(data);
      }, function(t) {
        return self.gambleProcessItemProcessHandler(t);
      }, function(t) {
        return self.gambleProcessItemOutroHandler(t);
      }], self;
    }
    return trigger(init, t), init.prototype.onSelect = function(state) {
      this._dispatcher.dispatch(new Set(state));
    }, init.prototype.gambleIntroHandler = function(a) {
      var util = exports.ResourceManager.getInstance().getCreditFormatter();
      var item = util.getCreditString("IDS_GAMBLELIMIT", "IDS_GAMBLELIMIT_MONEY");
      var buffering = "%d=" + this._data.maxGambles + "&%c=" + util.formatCoinValue(this._data.gambleLimit);
      this._dispatcher.dispatch(new exports.InfoEvent(item, options.WinInfoEvent.INFO, buffering));
      this.gambleProcessNextRoundButtons();
      this._view.show(a, true);
    }, init.prototype.gambleProcessHandler = function(a) {
      var ArgsHandler = this;
      if (this._data.canContinueGamble) {
        a.startHandler(function(element) {
          return ArgsHandler.gambleProcessItemHandler(element);
        });
      } else {
        a.complete();
      }
    }, init.prototype.gambleProcessItemHandler = function(suppressDisabledCheck) {
      suppressDisabledCheck.execSequence(this._gambleProcessItemSequence);
    }, init.prototype.gambleProcessItemIntroHandler = function(subgoal) {
      this.gambleProcessNextRoundButtons();
      subgoal.complete();
    }, init.prototype.gambleProcessItemProcessHandler = function(args) {
      var options;
      var allTraps = this;
      for (; options = this._input.read(args);) {
        this._input.next();
        /** @type {boolean} */
        var i = false;
        switch(options.type) {
          case model.GAMBLE_ANSWER:
            var params = options;
            this._data.winAmount = params.winCoins;
            this._data.canContinueGamble = params.canGamble;
            this._data.numGambles++;
            this._card = params.cardIndex;
            if (this._history) {
              this._history.unshift(this._card);
              if (this._history.length > this._historyLength) {
                this._history.pop();
              }
            }
            this._data.winCode = params.winCode;
            if (this._data.winCode <= 0) {
              /** @type {boolean} */
              this._data.canContinueGamble = false;
            }
            args.execHandler(function(propName) {
              return allTraps.showCardHandler(propName);
            });
            /** @type {boolean} */
            i = true;
            break;
          case Set.GAMBLE_UI:
            this._currentSelection = options.value;
            this._dispatcher.dispatch(new binding(this._currentSelection));
            args.startHandler(function(propName) {
              return allTraps.hideCardHandler(propName);
            });
            /** @type {boolean} */
            i = true;
            break;
          case v.COLLECT:
          case node.GAMBLE_COLLECT:
            /** @type {boolean} */
            this._isCollect = true;
            /** @type {boolean} */
            this._data.canContinueGamble = false;
            args.complete();
            /** @type {boolean} */
            i = true;
        }
        if (i) {
          this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.GAMBLE));
          this.enableViewButtons(false, this._currentSelection);
          /** @type {number} */
          this._currentSelection = -1;
          break;
        }
      }
    }, init.prototype.gambleProcessItemOutroHandler = function(result) {
      var haproxyStats = this;
      switch(result.state) {
        case 0:
          if (this._view.refreshHistory(this._history), this._view.setWinCode(this._data.winCode, this._data.canContinueGamble, this._isCollect), this._data.winCode > 0) {
            /** @type {number} */
            var event = this._data.winAmount / this._data.winCode * (this._data.winCode - 1);
            this._dispatcher.dispatch(new options.WinInfoEvent(event, 1000, options.WinInfoEvent.WIN));
            /** @type {number} */
            this._data.winCode = 0;
            result.startDelayMs(1000);
          } else {
            result.startDelayMs((this._isCollect ? 0 : 5) * (1000 / 24));
          }
          this._roundHandler.setWin(this._data.winAmount * this._betSettings.denomination);
          break;
        default:
          if (this._data.canContinueGamble) {
            result.execHandler(function(stat) {
              return haproxyStats.hideCardHandler(stat);
            });
          } else {
            result.complete();
          }
      }
    }, init.prototype.showCardHandler = function(value) {
      this._view.showCard(value, true, this._card);
    }, init.prototype.hideCardHandler = function(value) {
      this._view.showCard(value, false);
    }, init.prototype.gambleOutroHandler = function(a) {
      switch(a.state) {
        case 0:
          if (0 === this._data.winAmount) {
            this._dispatcher.dispatch(new options.WinCounterControlEvent(options.WinCounterControlEvent.RESET));
          }
          a.startDelayMs(this._isCollect ? 0 : 1500);
          /** @type {boolean} */
          this._isCollect = false;
          break;
        case 1:
          this._view.show(a, false, false);
          break;
        default:
          this.deselectViewButtons();
          /** @type {boolean} */
          var checked = this._data.winAmount >= this._data.gambleLimit || this._data.numGambles >= this._data.maxGambles;
          if (this._data.winAmount > 0) {
            this._dispatcher.dispatch(new exports.InfoEvent(checked ? "IDS_VP_BONUS5" : "", options.WinInfoEvent.IDLE));
          } else {
            this._dispatcher.dispatch(new exports.InfoEvent("", options.WinInfoEvent.INFO));
          }
          this._dispatcher.dispatch(new api(this._data.winAmount, checked));
          a.complete();
      }
    }, init.prototype.enableViewButtons = function(lastVerFailed, reqType) {
      if (void 0 === reqType && (reqType = -1), this._view.enableButton(Poker.RED, lastVerFailed), this._view.enableButton(Poker.BLACK, lastVerFailed), this._view.enableButton(Poker.HEART, lastVerFailed), this._view.enableButton(Poker.DIAMOND, lastVerFailed), this._view.enableButton(Poker.CLUB, lastVerFailed), this._view.enableButton(Poker.SPADE, lastVerFailed), lastVerFailed) {
        this.deselectViewButtons();
      } else {
        switch(reqType) {
          case props.RED:
            this._view.selectButton(Poker.RED, true);
            break;
          case props.BLACK:
            this._view.selectButton(Poker.BLACK, true);
            break;
          case props.HEART:
            this._view.selectButton(Poker.HEART, true);
            break;
          case props.DIAMOND:
            this._view.selectButton(Poker.DIAMOND, true);
            break;
          case props.CLUB:
            this._view.selectButton(Poker.CLUB, true);
            break;
          case props.SPADE:
            this._view.selectButton(Poker.SPADE, true);
        }
      }
    }, init.prototype.deselectViewButtons = function() {
      this._view.selectButton(Poker.RED, false);
      this._view.selectButton(Poker.BLACK, false);
      this._view.selectButton(Poker.HEART, false);
      this._view.selectButton(Poker.DIAMOND, false);
      this._view.selectButton(Poker.CLUB, false);
      this._view.selectButton(Poker.SPADE, false);
    }, init.prototype.gambleProcessNextRoundButtons = function() {
      this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.COLLECT));
      this.enableViewButtons(true);
      this._view.nextRound(this._data.winAmount);
    }, init;
  }(Uint8Array);
  var debug = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var indContent = function(klass) {
    /**
     * @param {?} data
     * @param {?} container
     * @param {?} noUI
     * @param {?} hideResources
     * @return {?}
     */
    function constructor(data, container, noUI, hideResources) {
      return klass.call(this, data, container, noUI, hideResources) || this;
    }
    return debug(constructor, klass), constructor.prototype.createGambleLogicController = function(context, el, isVertical, secondIsSidebar, settingName) {
      var view = this.createView();
      return new AttributeTransformer(context, el, isVertical, secondIsSidebar, settingName, view);
    }, constructor.prototype.createView = function() {
      var command = exports.ResourceManager.getInstance().getEntityManager();
      var value = command.create("?");
      return command.add("gamble", value), new cls(value);
    }, constructor;
  }(individual);
  var lifecycleTest = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Login = function(t) {
    /**
     * @param {!HTMLElement} self
     * @param {?} startIndex
     * @return {?}
     */
    function store(self, startIndex) {
      var allTraps = t.call(this, self, startIndex) || this;
      return allTraps._freeGameMode = false, self.addEventListener(exports.RoundEvent.ROUNDEND, function(t) {
        return allTraps.onRoundEnd(t);
      }), self.addEventListener(events.START, function(t) {
        return allTraps.onFreeGameStart(t);
      }), self.addEventListener(events.END, function(t) {
        return allTraps.onFreeGameEnd(t);
      }), self.addEventListener(node.GAMBLE_COLLECT, function(pendingCall) {
        return allTraps.onCollect(pendingCall);
      }), allTraps;
    }
    return lifecycleTest(store, t), store.prototype.onRoundEnd = function(result) {
      /** @type {number} */
      this._lastRoundEnd = result;
    }, store.prototype.onFreeGameStart = function(inEl) {
      /** @type {boolean} */
      this._freeGameMode = true;
    }, store.prototype.onCollect = function(pc) {
      if (!this._roundHandler.running) {
        this._roundHandler.balanceModeUpdate();
      }
    }, store.prototype.onFreeGameEnd = function(result) {
      /** @type {boolean} */
      this._freeGameMode = false;
      if (this._lastBonusBalanceChange) {
        this._roundHandler.updateBalanceMode();
        t.prototype.balanceTypeChange.call(this, this._lastBonusBalanceChange);
        /** @type {null} */
        this._lastBonusBalanceChange = null;
      } else {
        if (this._lastRoundEnd.nextBalanceMoneyType !== exports.BonusBalanceEventType.MIX) {
          this._roundHandler.updateBalanceMode();
          t.prototype.balanceTypeChange.call(this, new exports.RoundEvent(exports.RoundEvent.BALANCETYPECHANGE, this._lastRoundEnd.inGame, this._lastRoundEnd.amount, this._lastRoundEnd.nextBalanceMoneyType, this._lastRoundEnd.additionalCost, void 0, this._lastRoundEnd.currency));
          /** @type {null} */
          this._lastRoundEnd = null;
        }
      }
    }, store.prototype.balanceTypeChange = function(props) {
      if (this._freeGameMode) {
        /** @type {!AudioNode} */
        this._lastBonusBalanceChange = props;
      } else {
        t.prototype.balanceTypeChange.call(this, props);
      }
    }, store;
  }(options.BonusBalanceHandler);
  var findSimilarPaths = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Dt = function(output) {
    /**
     * @param {?} id
     * @param {?} value
     * @return {?}
     */
    function left(id, value) {
      return output.call(this, id, value) || this;
    }
    return findSimilarPaths(left, output), left.prototype.createBonusBalanceHandler = function($rootScope, $state) {
      return new Login($rootScope, $state);
    }, left;
  }(options.BonusBalanceManager);
  var getLoadedRefs = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var xt = function(root) {
    /**
     * @param {?} b
     * @return {?}
     */
    function obj(b) {
      return root.call(this, b) || this;
    }
    return getLoadedRefs(obj, root), obj.prototype.processServerMessageEvent = function(queueItem) {
      switch(queueItem.flags) {
        case exports.ServerMessageEventFlag.NEWFREEGAME:
          this._dispatcher.dispatch(new events(events.INSESSION));
          break;
        default:
          root.prototype.processServerMessageEvent.call(this, queueItem);
      }
    }, obj;
  }(exports.ServerMessageHandler);
  var encodeVInt = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Event = function(size) {
    /**
     * @return {?}
     */
    function value() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return encodeVInt(value, size), value.AVAILABLECOINS = "AVAILABLE_COINS", value.SELECTEDLINES = "SELECTED_LINES", value.SELECTEDCOIN = "SELECTED_COIN", value.SELECTEDCOINVALUE = "SELECTED_COIN_VALUE", value.AVAILABLELINES = "AVAILABLE_LINES", value.AVAILABLECOINVALUES = "AVAILABLE_COIN_VALUES", value;
  }(exports.ExternalInterfaceEvent);
  var pathToNode = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var entry = function(root) {
    /**
     * @param {?} key
     * @param {number} value
     * @param {number} text
     * @return {?}
     */
    function node(key, value, text) {
      var buffer = root.call(this, node.SPIN) || this;
      return buffer._coins = key, buffer._lines = value, buffer._denom = text, buffer;
    }
    return pathToNode(node, root), Object.defineProperty(node.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(node.prototype, "lines", {
      get : function() {
        return this._lines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(node.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), node.SPIN = "SPIN", node;
  }(self.MegatonEvent);
  var playReversibleAnimation = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var tcomplete = function(t) {
    /**
     * @param {?} cb
     * @param {number} n
     * @return {?}
     */
    function a(cb, n) {
      var ct = t.call(this, cb, 0) || this;
      return ct._denom = n, ct;
    }
    return playReversibleAnimation(a, t), Object.defineProperty(a.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), a.AVAILABLECOINVALUES = "AVAILABLE_COIN_VALUES", a;
  }(Event);
  var deflate_rle = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var State = function(flush) {
    /**
     * @param {?} kind
     * @param {?} data
     * @return {?}
     */
    function State(kind, data) {
      var imageData = flush.call(this, kind) || this;
      return imageData._reel = data, imageData;
    }
    return deflate_rle(State, flush), Object.defineProperty(State.prototype, "reelIdx", {
      get : function() {
        return this._reel;
      },
      enumerable : true,
      configurable : true
    }), State.STARTING = "REEL_STARTING", State.STARTED = "REEL_STARTED", State.STOPPING = "REEL_STOPPING", State.BOUNCING = "REEL_BOUNCING", State.STOPPED = "REEL_STOPPED", State.IDLE = "REEL_IDLE", State.ALLSTOPPED = "REEL_ALL_STOPPED", State;
  }(self.MegatonEvent);
  var send_to_history = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(LogLevel) {
    /** @type {string} */
    LogLevel[LogLevel.INFO = 0] = "INFO";
    /** @type {string} */
    LogLevel[LogLevel.ADDITIONAL = 1] = "ADDITIONAL";
    /** @type {string} */
    LogLevel[LogLevel.INSESSION = 2] = "INSESSION";
  }(root || (root = {}));
  var hashes;
  var SelectionEvent = function(util) {
    /**
     * @param {number} key
     * @param {number} index
     * @param {string} title
     * @param {string} message
     * @param {number} priority
     * @return {?}
     */
    function update(key, index, title, message, priority) {
      if (void 0 === index) {
        /** @type {number} */
        index = 0;
      }
      if (void 0 === title) {
        /** @type {string} */
        title = "";
      }
      if (void 0 === message) {
        /** @type {string} */
        message = "";
      }
      if (void 0 === priority) {
        /** @type {number} */
        priority = update.FREEGAME_DEFAULT_PRIORITY;
      }
      var self = util.call(this, update.FREEGAMEMESSAGE) || this;
      var ArticleType = exports.ResourceManager.getInstance().getTextManager();
      return self._id = key, self._flags = index, self._priority = priority, self._title = title, self._message = message, self._titleText = ArticleType.getByName(self._title).getText(), self._messageText = ArticleType.getByName(self._message).getText(), self;
    }
    return send_to_history(update, util), Object.defineProperty(update.prototype, "id", {
      get : function() {
        return this._id;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(update.prototype, "flags", {
      get : function() {
        return this._flags;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(update.prototype, "priority", {
      get : function() {
        return this._priority;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(update.prototype, "title", {
      get : function() {
        return this._title;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(update.prototype, "message", {
      get : function() {
        return this._message;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(update.prototype, "titleText", {
      get : function() {
        return this._titleText;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(update.prototype, "messageText", {
      get : function() {
        return this._messageText;
      },
      enumerable : true,
      configurable : true
    }), update.FREEGAMEMESSAGE = "FREEGAMEMESSAGE", update.FREEGAME_END_PRIORITY = 102, update.FREEGAME_DEFAULT_PRIORITY = 0, update;
  }(self.MegatonEvent);
  var setRouterStateSnapshot = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var panel = function(root) {
    /**
     * @return {?}
     */
    function rule() {
      return root.call(this, rule.SPIN_START) || this;
    }
    return setRouterStateSnapshot(rule, root), rule.SPIN_START = "SPIN_START", rule;
  }(self.MegatonEvent);
  var test = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Action = function(t) {
    /**
     * @param {?} options
     * @param {?} key
     * @param {boolean} value
     * @return {?}
     */
    function set(options, key, value) {
      var that = t.call(this, options) || this;
      return that._pageNum = key, that._visible = value, that;
    }
    return test(set, t), Object.defineProperty(set.prototype, "pageNum", {
      get : function() {
        return this._pageNum;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "visible", {
      get : function() {
        return this._visible;
      },
      enumerable : true,
      configurable : true
    }), set.PAYTABLE = "PAYTABLE", set.PAYTABLE_CHANGED = "PAYTABLE_CHANGED", set;
  }(self.MegatonEvent);
  var compileAdditionOperator = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ComponentEvent = function(right) {
    /**
     * @param {?} context
     * @param {number} data
     * @return {?}
     */
    function left(context, data) {
      var imageData = right.call(this, context) || this;
      return imageData._winData = data, imageData;
    }
    return compileAdditionOperator(left, right), Object.defineProperty(left.prototype, "winData", {
      get : function() {
        return this._winData;
      },
      enumerable : true,
      configurable : true
    }), left.WIN_SHOW = "WIN_SHOW", left.WIN_HIDE = "WIN_HIDE", left;
  }(self.MegatonEvent);
  var bad_escape = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var batch = function(param) {
    /**
     * @return {?}
     */
    function selector() {
      return null !== param && param.apply(this, arguments) || this;
    }
    return bad_escape(selector, param), selector.COUNTER_START = "COUNTER_START", selector.COUNTER_STOP = "COUNTER_STOP", selector.POPUP_SHOWING = "JP_POPUP_SHOWING", selector.POPUP_HIDING = "JP_POPUP_HIDING", selector;
  }(self.MegatonEvent);
  var createClass = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var WSocketEvent = function(code) {
    /**
     * @return {?}
     */
    function Dialog() {
      return null !== code && code.apply(this, arguments) || this;
    }
    return createClass(Dialog, code), Dialog.CLOSE = "MJP_CLOSE_POPUP", Dialog;
  }(self.MegatonEvent);
  var factory = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var re = function(util) {
    /**
     * @param {?} key
     * @param {?} val
     * @param {?} index
     * @param {?} args
     * @param {?} value
     * @param {?} name
     * @return {?}
     */
    function self(key, val, index, args, value, name) {
      var utils = util.call(this, key, val, index, value, name) || this;
      return utils._betSettings = args, utils.addCallback(self.CALLBACK_GET_SELECTED_COIN, function(adUnitCode) {
        return void 0 === adUnitCode && (adUnitCode = false), utils.onGetSelectedCoin(adUnitCode);
      }), utils.addCallback(self.CALLBACK_GET_SELECTED_COIN_VALUE, function(adUnitCode) {
        return void 0 === adUnitCode && (adUnitCode = false), utils.onGetSelectedCoinValue(adUnitCode);
      }), utils.addCallback(self.CALLBACK_GET_SELECTED_LINES, function(adUnitCode) {
        return void 0 === adUnitCode && (adUnitCode = false), utils.onGetSelectedLines(adUnitCode);
      }), utils.addCallback(self.CALLBACK_GET_AVAILABLE_COINS, function(adUnitCode) {
        return void 0 === adUnitCode && (adUnitCode = false), utils.onGetAvailableCoins(adUnitCode);
      }), utils.addCallback(self.CALLBACK_GET_AVAILABLE_LINES, function(adUnitCode) {
        return void 0 === adUnitCode && (adUnitCode = false), utils.onGetAvailableLines(adUnitCode);
      }), utils.addCallback(self.CALLBACK_GET_AVAILABLE_COIN_VALUES, function(adUnitCode) {
        return void 0 === adUnitCode && (adUnitCode = false), utils.onGetAvailableDenominations(adUnitCode);
      }), utils.addCallback(self.CALLBACK_INC_COINS, function() {
        return utils.onIncCoins();
      }), utils.addCallback(self.CALLBACK_DEC_COINS, function() {
        return utils.onDecCoins();
      }), utils.addCallback(self.CALLBACK_INC_COIN_VALUE, function() {
        return utils.onIncCoinValue();
      }), utils.addCallback(self.CALLBACK_DEC_COIN_VALUE, function() {
        return utils.onDecCoinValue();
      }), utils.addCallback(self.CALLBACK_INC_LINES, function() {
        return utils.onIncLines();
      }), utils.addCallback(self.CALLBACK_DEC_LINES, function() {
        return utils.onDecLines();
      }), utils.addCallback(self.CALLBACK_SET_LINES, function(___j) {
        return utils.onSetLines(___j);
      }), utils.addCallback(self.CALLBACK_SET_COINS, function(a) {
        return utils.onSetSelectedCoin(a);
      }), utils.addCallback(self.CALLBACK_SET_COIN_VALUE, function(element) {
        return utils.onSetCoinValue(element);
      }), utils.addCallback(self.CALLBACK_TOGGLE_PAYTABLE, function(val) {
        return utils.onTogglePaytable(val);
      }), utils.addCallback(self.CALLBACK_BET_MAX, function() {
        return utils.onBetMax();
      }), utils.addCallback(self.CALLBACK_SPIN, function() {
        return utils.onSpin();
      }), utils.addCallback(self.CALLBACK_GAMBLE, function(1) {
        return utils.onGamble(1);
      }), utils.addCallback(self.CALLBACK_COLLECT, function() {
        return utils.onCollect();
      }), utils.addCallback(self.CALLBACK_AUTOPLAY, function(0) {
        return utils.onAutoplay(0);
      }), utils.addCallback(self.CALLBACK_CLOSE_MJP_POPUP, function() {
        return utils.onCloseMjpPanel();
      }), utils._availableEvents = utils._availableEvents.concat([Event.AVAILABLECOINS, Event.SELECTEDCOIN, Event.SELECTEDCOINVALUE, Event.SELECTEDLINES, Event.AVAILABLELINES, Event.AVAILABLECOINVALUES, ProgressEvent.BONUS_STARTED, ProgressEvent.BONUS_ENDED, e.FREESPIN_START, e.FREESPIN_END, options.AutoplayEvent.AUTOPLAY_STARTED, options.AutoplayEvent.AUTOPLAY_ENDED, options.AutoplayEvent.AUTOPLAY_TRIGGER, v.GAMBLE, v.COLLECT, v.SHOW_PAYTABLE, model.GAMBLE_ANSWER, node.GAMBLE_AVAILABLE, ComponentEvent.WIN_SHOW, 
      that.START, that.WIN_PAYLINE, entry.SPIN, State.ALLSTOPPED, SelectionEvent.FREEGAMEMESSAGE, events.START, events.END, events.LOGOUT, panel.SPIN_START, Action.PAYTABLE_CHANGED, MGE.BET_UPDATE, batch.POPUP_SHOWING, batch.POPUP_HIDING]), utils;
    }
    return factory(self, util), self.prototype.onGetBet = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      var checked = this._betSettings.betCoins;
      var historyID = exports.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._roundHandler.bet);
      this._dispatcher.dispatch(new MGE(exports.EIRoundEvent.BET, checked, historyID, this._betSettings.lines, this._betSettings.coins, this._betSettings.denomination));
    }, self.prototype.onGetBalance = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      var remainder = this._roundHandler.balance;
      var buffering = exports.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(remainder);
      /** @type {number} */
      var body = Math.floor(remainder / this._betSettings.denomination);
      this._dispatcher.dispatch(new exports.EIRoundEvent(exports.EIRoundEvent.BALANCE, body, buffering));
    }, self.prototype.onGetWin = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      var body = this._roundHandler.wonCoins;
      var magnifier = this._roundHandler.win;
      var $magnifier = exports.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(magnifier);
      this._dispatcher.dispatch(new exports.EIRoundEvent(exports.EIRoundEvent.WIN, body, $magnifier));
    }, self.prototype.onGetAvailableCoins = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new Event(Event.AVAILABLECOINS, this._betSettings.maxCoins));
    }, self.prototype.onGetSelectedLines = function(adUnitCode) {
      return void 0 === adUnitCode && (adUnitCode = false), adUnitCode ? this._betSettings.lines : void this._dispatcher.dispatch(new Event(Event.SELECTEDLINES, this._betSettings.lines));
    }, self.prototype.onGetSelectedCoinValue = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      var func = exports.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._betSettings.denomination);
      this._dispatcher.dispatch(new Event(Event.SELECTEDCOINVALUE, this._betSettings.denomination, func));
    }, self.prototype.onGetSelectedCoin = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new Event(Event.SELECTEDCOIN, this._betSettings.coins));
    }, self.prototype.onGetAvailableLines = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new Event(Event.AVAILABLELINES, this._betSettings.maxLines));
    }, self.prototype.onGetAvailableDenominations = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new tcomplete(tcomplete.AVAILABLECOINVALUES, this._betSettings.denominations));
    }, self.prototype.onSetSelectedCoin = function(coins) {
      this._betSettings.coins = coins;
    }, self.prototype.onSetCoinValue = function(suppressDisabledCheck) {
      this._betSettings.denomination = suppressDisabledCheck;
    }, self.prototype.onSetLines = function(x) {
      /** @type {string} */
      this._betSettings.lines = x;
    }, self.prototype.onBetMax = function() {
      this._betSettings.betMax();
    }, self.prototype.onSpin = function() {
      this._dispatcher.dispatch(new v(v.SPIN_OR_CONTINUE));
    }, self.prototype.onGamble = function(checked) {
      this._dispatcher.dispatch(new ZmPrefAccount(ZmPrefAccount.GAMBLE, checked));
    }, self.prototype.onCollect = function() {
      this._dispatcher.dispatch(new ZmPrefAccount(ZmPrefAccount.COLLECT));
    }, self.prototype.onAutoplay = function(height) {
      if (height > 0) {
        this._dispatcher.dispatch(new options.AutoplayEvent(options.AutoplayEvent.AUTOPLAY_START, height));
      } else {
        this._dispatcher.dispatch(new v(v.AUTOPLAY));
      }
    }, self.prototype.onTogglePaytable = function(checked) {
      this._dispatcher.dispatch(new Action(Action.PAYTABLE, checked));
    }, self.prototype.onIncCoins = function() {
      this._betSettings.incCoins();
    }, self.prototype.onDecCoins = function() {
      this._betSettings.decCoins();
    }, self.prototype.onIncCoinValue = function() {
      this._betSettings.incDenom();
    }, self.prototype.onDecCoinValue = function() {
      this._betSettings.decDenom();
    }, self.prototype.onIncLines = function() {
      this._betSettings.incLines();
    }, self.prototype.onDecLines = function() {
      this._betSettings.decLines();
    }, self.prototype.onStartAutoplay = function(new_url, file, i, forceOptional, writer__4004__auto__, opts__4005__auto__, _overFrame, _outFrame) {
      this._autoplaySettings.stopAtBonusWin = i;
      this._autoplaySettings.stopAtFsWin = forceOptional;
      util.prototype.onStartAutoplay.call(this, new_url, file, i, i, writer__4004__auto__, opts__4005__auto__, _overFrame, _outFrame);
    }, self.prototype.onCloseMjpPanel = function() {
      this._dispatcher.dispatch(new WSocketEvent(WSocketEvent.CLOSE));
    }, self.CALLBACK_GET_SELECTED_COIN = "GET_SELECTED_COIN", self.CALLBACK_GET_SELECTED_COIN_VALUE = "GET_SELECTED_COIN_VALUE", self.CALLBACK_GET_SELECTED_LINES = "GET_SELECTED_LINES", self.CALLBACK_GET_AVAILABLE_COINS = "GET_AVAILABLE_COINS", self.CALLBACK_GET_AVAILABLE_LINES = "GET_AVAILABLE_LINES", self.CALLBACK_GET_AVAILABLE_COIN_VALUES = "GET_AVAILABLE_COIN_VALUES", self.CALLBACK_INC_COINS = "INC_COINS", self.CALLBACK_DEC_COINS = "DEC_COINS", self.CALLBACK_INC_COIN_VALUE = "INC_COIN_VALUE", 
    self.CALLBACK_DEC_COIN_VALUE = "DEC_COIN_VALUE", self.CALLBACK_INC_LINES = "INC_LINES", self.CALLBACK_DEC_LINES = "DEC_LINES", self.CALLBACK_SET_LINES = "SET_LINES", self.CALLBACK_SET_COINS = "SET_COINS", self.CALLBACK_SET_COIN_VALUE = "SET_COIN_VALUE", self.CALLBACK_TOGGLE_PAYTABLE = "TOGGLE_PAYTABLE", self.CALLBACK_BET_MAX = "BET_MAX", self.CALLBACK_SPIN = "SPIN", self.CALLBACK_GAMBLE = "GAMBLE", self.CALLBACK_COLLECT = "COLLECT", self.CALLBACK_AUTOPLAY = "AUTOPLAY", self.CALLBACK_CLOSE_MJP_POPUP = 
    "CLOSE_MJP_POPUP", self;
  }(options.CommonExternalInterface);
  var _putTopic = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var TimerEvent = function(value) {
    /**
     * @param {?} i
     * @param {?} name
     * @return {?}
     */
    function data(i, name) {
      var obj = value.call(this, i) || this;
      return obj._buttonState = name, obj;
    }
    return _putTopic(data, value), Object.defineProperty(data.prototype, "buttonState", {
      get : function() {
        return this._buttonState;
      },
      enumerable : true,
      configurable : true
    }), data.SHOW_WINDOW = "show_question_window", data.HIDE_WINDOW = "hide_question_window", data;
  }(self.MegatonEvent);
  var validator = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cluster = function(text) {
    /**
     * @param {!HTMLElement} name
     * @param {!Object} placeholder
     * @return {?}
     */
    function init(name, placeholder) {
      var context = text.call(this, name) || this;
      return context._lastStartTime = 0, context._continueCount = 0, context._questionEnabled = true, context._inWaitState = false, context._videoSlotSettings = placeholder, name.addEventListener(v.FAST_PLAY_INCREMENT, function(id) {
        return context.onContinue(id);
      }), name.addEventListener(TimerEvent.HIDE_WINDOW, function(element) {
        return context.onHideWindow(element);
      }), name.addEventListener(e.WAIT_START, function() {
        return context.onFreespinWait(true);
      }), name.addEventListener(e.FREESPIN_START, function() {
        return context.onFreespinWait(false);
      }), context;
    }
    return validator(init, text), init.prototype.onFreespinWait = function(isIron) {
      /** @type {boolean} */
      this._inWaitState = isIron;
    }, init.prototype.onContinue = function(fileId) {
      if (this._questionEnabled && !this._inWaitState && !this._videoSlotSettings.fastPlay) {
        /** @type {number} */
        var e = Date.now() / 1000;
        if (e - this._lastStartTime > 10) {
          /** @type {number} */
          this._continueCount = 1;
          /** @type {number} */
          this._lastStartTime = e;
        } else {
          if (++this._continueCount >= 3) {
            /** @type {boolean} */
            this._questionEnabled = false;
            self.SystemManager.getScheduler().pause(true);
            this._dispatcher.dispatch(new TimerEvent(TimerEvent.SHOW_WINDOW, 0));
          }
        }
      }
    }, init.prototype.onHideWindow = function(node) {
      if (1 == node.buttonState) {
        this._videoSlotSettings.toggleFastPlay();
      }
      self.SystemManager.getScheduler().pause(false);
    }, init;
  }(self.EventProcessor);
  var pe = function() {
    /**
     * @param {?} mmCoreSplitViewBlock
     * @param {string} $state
     * @return {undefined}
     */
    function $get(mmCoreSplitViewBlock, $state) {
      this.createFastPlayQuestionHandler(mmCoreSplitViewBlock, $state);
    }
    return $get.prototype.createFastPlayQuestionHandler = function(map, $state) {
      return new Cluster(map, $state);
    }, $get;
  }();
  var interf = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var InjectResult = function(data) {
    /**
     * @param {string} key
     * @param {string} value
     * @param {number} duration
     * @param {(Object|string)} reason
     * @return {?}
     */
    function exports(key, value, duration, reason) {
      var self = data.call(this, query.FEATURESTART) || this;
      return self._featureType = key, self._symbol = value, self._numSymbols = duration, self._data = reason, self;
    }
    return interf(exports, data), Object.defineProperty(exports.prototype, "featureType", {
      get : function() {
        return this._featureType;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "symbol", {
      get : function() {
        return this._symbol;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "numSymbols", {
      get : function() {
        return this._numSymbols;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(query);
  var import$ = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var dom = function(options) {
    /**
     * @return {?}
     */
    function S() {
      return options.call(this, query.FEATUREINPUT) || this;
    }
    return import$(S, options), S;
  }(query);
  var containsPort = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var args = function(size) {
    /**
     * @param {?} a
     * @param {(Object|string)} fn
     * @return {?}
     */
    function SyncedObject(a, fn) {
      var $ = size.call(this, a ? query.FEATURESELECTED : query.FEATURESELECT) || this;
      return $._data = fn, $;
    }
    return containsPort(SyncedObject, size), Object.defineProperty(SyncedObject.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), SyncedObject;
  }(query);
  var _defaults = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Array = function(source) {
    /**
     * @param {string} index
     * @return {?}
     */
    function exports(index) {
      var REGEX = source.call(this, query.FEATUREEND) || this;
      return REGEX._needsCollect = index, REGEX;
    }
    return _defaults(exports, source), Object.defineProperty(exports.prototype, "needsCollect", {
      get : function() {
        return this._needsCollect;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(query);
  var updateSearchQuery = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var obj = function(originalQuery) {
    /**
     * @param {?} options
     * @param {!Object} key
     * @param {!Object} value
     * @return {?}
     */
    function list(options, key, value) {
      var that = originalQuery.call(this, options ? query.FEATUREDATAANSWER : query.FEATUREDATA) || this;
      return that._value = key, that._data = value, that;
    }
    return updateSearchQuery(list, originalQuery), Object.defineProperty(list.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(list.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), list;
  }(query);
  var g = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var item = function(a) {
    /**
     * @param {?} event
     * @return {?}
     */
    function n(event) {
      return a.call(this, event ? query.FEATURECOLLECTED : query.FEATURECOLLECT) || this;
    }
    return g(n, a), n;
  }(query);
  var define = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var target = function(data) {
    /**
     * @param {?} index
     * @return {?}
     */
    function exports(index) {
      var REGEX = data.call(this, query.FEATUREAWARD) || this;
      return REGEX._awardType = index, REGEX;
    }
    return define(exports, data), Object.defineProperty(exports.prototype, "awardType", {
      get : function() {
        return this._awardType;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(query);
  var fn = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var action = function(canvas) {
    /**
     * @param {?} name
     * @return {?}
     */
    function module(name) {
      var obj = canvas.call(this, module.COINS) || this;
      return obj._coins = name, obj;
    }
    return fn(module, canvas), Object.defineProperty(module.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), module.COINS = "COINS", module;
  }(target);
  var _syncModel = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var temp__4090__auto__ = function(item) {
    /**
     * @param {?} fn
     * @return {?}
     */
    function model(fn) {
      var $ = item.call(this, model.FREESPINS) || this;
      return $._freespins = fn, $;
    }
    return _syncModel(model, item), Object.defineProperty(model.prototype, "freespins", {
      get : function() {
        return this._freespins;
      },
      enumerable : true,
      configurable : true
    }), model.FREESPINS = "FREESPINS", model;
  }(target);
  var ensureObject = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Menu = function(output) {
    /**
     * @param {string} value
     * @return {?}
     */
    function data(value) {
      var elem = output.call(this, data.AMOUNT) || this;
      return elem._amount = value, elem;
    }
    return ensureObject(data, output), Object.defineProperty(data.prototype, "amount", {
      get : function() {
        return this._amount;
      },
      enumerable : true,
      configurable : true
    }), data.AMOUNT = "AMOUNT", data;
  }(target);
  var explorerObject = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var transRec = function(obj) {
    /**
     * @param {string} key
     * @param {string} value
     * @return {?}
     */
    function e(key, value) {
      var that = obj.call(this, e.JACKPOT) || this;
      return that._id = key, that._value = value, that;
    }
    return explorerObject(e, obj), Object.defineProperty(e.prototype, "id", {
      get : function() {
        return this._id;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), e.JACKPOT = "JACKPOT", e;
  }(target);
  var rmTodosWhere = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var signal2 = function(p) {
    /**
     * @param {?} fn
     * @return {?}
     */
    function store(fn) {
      var $ = p.call(this, store.COINSMULTIPLIER) || this;
      return $._coinsMultiplier = fn, $;
    }
    return rmTodosWhere(store, p), Object.defineProperty(store.prototype, "coinsMultiplier", {
      get : function() {
        return this._coinsMultiplier;
      },
      enumerable : true,
      configurable : true
    }), store.COINSMULTIPLIER = "COINSMULTIPLIER", store;
  }(target);
  var walkRoot = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ngEl = function(root) {
    /**
     * @param {?} value
     * @return {?}
     */
    function data(value) {
      var elem = root.call(this, data.FREESPINSMULTIPLIER) || this;
      return elem._freespinsMultiplier = value, elem;
    }
    return walkRoot(data, root), Object.defineProperty(data.prototype, "freespinsMultiplier", {
      get : function() {
        return this._freespinsMultiplier;
      },
      enumerable : true,
      configurable : true
    }), data.FREESPINSMULTIPLIER = "FREESPINSMULTIPLIER", data;
  }(target);
  var _typeof2 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var signal3 = function(t) {
    /**
     * @param {(Object|string)} id
     * @return {?}
     */
    function exports(id) {
      var o = t.call(this, exports.FEATURE) || this;
      return o._data = id, o;
    }
    return _typeof2(exports, t), Object.defineProperty(exports.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), exports.FEATURE = "FEATURE", exports;
  }(target);
  var d = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var buffer = function(b) {
    /**
     * @param {?} key
     * @param {string} index
     * @param {number} view
     * @param {number} left
     * @param {?} zIndex
     * @return {?}
     */
    function constructor(key, index, view, left, zIndex) {
      var result = b.call(this, constructor.WINLINE) || this;
      return result._winLine = key, result._symbol = index, result._numSymbols = view, result._flags = left, result._coins = zIndex, result;
    }
    return d(constructor, b), Object.defineProperty(constructor.prototype, "winLine", {
      get : function() {
        return this._winLine;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "symbol", {
      get : function() {
        return this._symbol;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "numSymbols", {
      get : function() {
        return this._numSymbols;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "flags", {
      get : function() {
        return this._flags;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), constructor.WINLINE = "WINLINE", constructor;
  }(target);
  var _getEqualsCommand = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var replacedTarget = function(res) {
    /**
     * @param {!Object} type
     * @return {?}
     */
    function Path(type) {
      var array = res.call(this, Path.CLEAR) || this;
      return array._positions = type, array;
    }
    return _getEqualsCommand(Path, res), Object.defineProperty(Path.prototype, "positions", {
      get : function() {
        return this._positions;
      },
      enumerable : true,
      configurable : true
    }), Path.CLEAR = "CLEAR", Path;
  }(target);
  var _fileReplace = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var IEListenerHandle = function(item) {
    /**
     * @param {!Object} value
     * @return {?}
     */
    function model(value) {
      var elem = item.call(this, model.NEWSYMBOLS) || this;
      return elem._symbols = value, elem;
    }
    return _fileReplace(model, item), Object.defineProperty(model.prototype, "symbols", {
      get : function() {
        return this._symbols;
      },
      enumerable : true,
      configurable : true
    }), model.NEWSYMBOLS = "NEWSYMBOLS", model;
  }(target);
  var _inherits = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(self) {
    /** @type {string} */
    self[self.START = 0] = "START";
    /** @type {string} */
    self[self.INPUT = 1] = "INPUT";
    /** @type {string} */
    self[self.AWARD = 2] = "AWARD";
    /** @type {string} */
    self[self.SELECT = 3] = "SELECT";
    /** @type {string} */
    self[self.DATA = 4] = "DATA";
    /** @type {string} */
    self[self.END = 5] = "END";
    /** @type {string} */
    self[self.COLLECT = 6] = "COLLECT";
  }(hashes || (hashes = {}));
  var data;
  !function(data) {
    /** @type {string} */
    data[data.COINS = 0] = "COINS";
    /** @type {string} */
    data[data.FREESPINS = 1] = "FREESPINS";
    /** @type {string} */
    data[data.AMOUNT = 2] = "AMOUNT";
    /** @type {string} */
    data[data.JACKPOT = 3] = "JACKPOT";
    /** @type {string} */
    data[data.COINSMULTIPLIER = 4] = "COINSMULTIPLIER";
    /** @type {string} */
    data[data.FREESPINSMULTIPLIER = 5] = "FREESPINSMULTIPLIER";
    /** @type {string} */
    data[data.FEATURE = 6] = "FEATURE";
    /** @type {string} */
    data[data.WINLINE = 8] = "WINLINE";
    /** @type {string} */
    data[data.CLEAR = 9] = "CLEAR";
    /** @type {string} */
    data[data.NEWSYMBOL = 10] = "NEWSYMBOL";
  }(data || (data = {}));
  var t;
  var Ke = function(t) {
    /**
     * @param {!HTMLElement} data
     * @param {number} options
     * @return {?}
     */
    function Main(data, options) {
      if (void 0 === options) {
        /** @type {!Array} */
        options = [3, 3, 3, 3, 3];
      }
      var self = t.call(this, data) || this;
      return self._numSymbols = options, data.addEventListener(exports.CommandEvent.GAME_IN, function(event) {
        return self.onCommand(event);
      }), data.addEventListener(args.FEATURESELECT, function(feature) {
        return self.onFeatureSelect(feature);
      }), data.addEventListener(obj.FEATUREDATA, function(t) {
        return self.onFeatureData(t);
      }), data.addEventListener(item.FEATURECOLLECT, function(elements) {
        return self.onFeatureCollect(elements);
      }), self;
    }
    return _inherits(Main, t), Main.prototype.onCommand = function(event) {
      switch(event.command.type) {
        case _aureliaPal.FEATURE:
          var value = event.command;
          switch(value.getInt(0)) {
            case hashes.START:
              var socketPath = value.getInt(1);
              var tabId = value.getInt(2);
              var connector = value.getInt(3);
              var a = value.getInt(4);
              this._dispatcher.dispatch(new exports.LogicEvent(new InjectResult(socketPath, tabId, connector, a)));
              break;
            case hashes.INPUT:
              this._dispatcher.dispatch(new exports.LogicEvent(new dom));
              break;
            case hashes.AWARD:
              switch(value.getInt(1)) {
                case data.COINS:
                  this._dispatcher.dispatch(new exports.LogicEvent(new action(value.getInt(2))));
                  break;
                case data.FREESPINS:
                  this._dispatcher.dispatch(new exports.LogicEvent(new temp__4090__auto__(value.getInt(2))));
                  break;
                case data.AMOUNT:
                  this._dispatcher.dispatch(new exports.LogicEvent(new Menu(value.getInt(2))));
                  break;
                case data.JACKPOT:
                  this._dispatcher.dispatch(new exports.LogicEvent(new transRec(value.getInt(2), value.getInt(3))));
                  this._dispatcher.dispatch(new options.JackpotServerMessageEvent(options.JackpotServerMessageEvent.JACKPOT_WON, value.getInt(2)));
                  break;
                case data.COINSMULTIPLIER:
                  this._dispatcher.dispatch(new exports.LogicEvent(new signal2(value.getInt(2))));
                  break;
                case data.FREESPINSMULTIPLIER:
                  this._dispatcher.dispatch(new exports.LogicEvent(new ngEl(value.getInt(2))));
                  break;
                case data.FEATURE:
                  this._dispatcher.dispatch(new exports.LogicEvent(new signal3(value.getInt(2))));
                  break;
                case data.WINLINE:
                  var u = value.getInt(2);
                  var base64 = value.getInt(3);
                  var p = value.getInt(4);
                  var h = value.getInt(5);
                  var l = value.getInt(6);
                  this._dispatcher.dispatch(new exports.LogicEvent(new buffer(u, base64, p, h, l)));
                  break;
                case data.CLEAR:
                  /** @type {!Array} */
                  var newNodeLists = [];
                  /** @type {number} */
                  var iValue = 2;
                  /** @type {number} */
                  var elementIndex = 0;
                  var element = this._numSymbols;
                  for (; elementIndex < element.length; elementIndex++) {
                    var clientHeight = element[elementIndex];
                    /** @type {!Array} */
                    var itemNodeList = [];
                    /** @type {number} */
                    var targetOffsetHeight = 0;
                    for (; targetOffsetHeight < clientHeight; targetOffsetHeight++) {
                      itemNodeList.push(value.getBoolean(iValue++));
                    }
                    newNodeLists.push(itemNodeList);
                  }
                  this._dispatcher.dispatch(new exports.LogicEvent(new replacedTarget(newNodeLists)));
                  break;
                case data.NEWSYMBOL:
                  /** @type {!Array} */
                  var el = [];
                  /** @type {number} */
                  var textureUnit = 2;
                  /** @type {number} */
                  var layer_i = 0;
                  var crossfilterable_layers = this._numSymbols;
                  for (; layer_i < crossfilterable_layers.length; layer_i++) {
                    clientHeight = crossfilterable_layers[layer_i];
                    /** @type {!Array} */
                    var A = [];
                    /** @type {number} */
                    targetOffsetHeight = 0;
                    for (; targetOffsetHeight < clientHeight; targetOffsetHeight++) {
                      A.push(value.getInt(textureUnit++));
                    }
                    el.push(A);
                  }
                  this._dispatcher.dispatch(new exports.LogicEvent(new IEListenerHandle(el)));
              }break;
            case hashes.SELECT:
              var O = value.getInt(1);
              this._dispatcher.dispatch(new exports.LogicEvent(new args(true, O)));
              break;
            case hashes.END:
              var dim_input = value.getBoolean(1);
              this._dispatcher.dispatch(new exports.LogicEvent(new Array(dim_input)));
              break;
            case hashes.DATA:
              this._dispatcher.dispatch(new exports.LogicEvent(new obj(true, value.getInt(1), value.getStrArray(2, value.length - 2))));
              break;
            case hashes.COLLECT:
              this._dispatcher.dispatch(new exports.LogicEvent(new item(true)));
          }
      }
    }, Main.prototype.onFeatureSelect = function(event) {
      var body = new exports.Command(value.FEATURE, [String(hashes.SELECT), String(event.data)]);
      this._dispatcher.dispatch(new exports.CommandEvent(exports.CommandEvent.LOGIC_OUT, body));
    }, Main.prototype.onFeatureData = function(b) {
      /** @type {!Array} */
      var options = [];
      options.push(String(hashes.DATA));
      options.push(String(b.value));
      /** @type {number} */
      var n = 0;
      var numberOfFrustums = b.data.length;
      for (; n < numberOfFrustums; n++) {
        options.push(String(b.data[n]));
      }
      var collection = new exports.Command(value.FEATURE, options);
      this._dispatcher.dispatch(new exports.CommandEvent(exports.CommandEvent.LOGIC_OUT, collection));
    }, Main.prototype.onFeatureCollect = function(a) {
      var body = new exports.Command(value.FEATURE, [String(hashes.COLLECT)]);
      this._dispatcher.dispatch(new exports.CommandEvent(exports.CommandEvent.LOGIC_OUT, body));
    }, Main;
  }(exports.CommandConverter);
  var fillInDemoSource = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ChangeEvent = function(html) {
    /**
     * @param {!Object} name
     * @return {?}
     */
    function f(name) {
      var obj = html.call(this, f.FEATUREWIN) || this;
      return obj._feature = name, obj;
    }
    return fillInDemoSource(f, html), Object.defineProperty(f.prototype, "feature", {
      get : function() {
        return this._feature;
      },
      enumerable : true,
      configurable : true
    }), f;
  }(query);
  var equals = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var c = function(step) {
    /**
     * @param {?} err
     * @param {string} value
     * @param {string} key
     * @return {?}
     */
    function self(err, value, key) {
      var me = step.call(this, err) || this;
      return me._featureId = key, me._input = value, me._awards = [], me._selects = [], me._processFeatureSequence = [function(isBgroundImg) {
        return me.introHandler(isBgroundImg);
      }, function(t) {
        return me.processAwardsHandler(t);
      }, function(t) {
        return me.processDataHandler(t);
      }, function(t) {
        return me.summaryHandler(t);
      }, function(t) {
        return me.collectHandler(t);
      }, function(t) {
        return me.outroHandler(t);
      }], me._processInputSequence = [function(data) {
        return me.selectIntroHandler(data);
      }, function(t) {
        return me.selectWaitHandler(t);
      }, function(data) {
        return me.showSelectHandler(data);
      }, function(key) {
        return me.selectedWaitHandler(key);
      }, function(data) {
        return me.selectOutroHandler(data);
      }], me;
    }
    return equals(self, step), Object.defineProperty(self.prototype, "totalCoins", {
      get : function() {
        return this._totalCoins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "totalAmount", {
      get : function() {
        return this._totalAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "featureData", {
      get : function() {
        return this._featureData;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.setWinCapHandler = function(canCreateDiscussions) {
      /** @type {string} */
      this._winCapHandler = canCreateDiscussions;
    }, self.prototype.process = function(start) {
      var foreignControls = this;
      var event = this._input.read(start);
      this.onStart(event);
      this._input.next();
      start.startHandler(function(isBgroundImg) {
        return foreignControls.processFeatureHandler(isBgroundImg);
      });
    }, self.prototype.processFeatureHandler = function(isBgroundImg) {
      isBgroundImg.execSequence(this._processFeatureSequence);
    }, self.prototype.introHandler = function(isBgroundImg) {
      isBgroundImg.complete();
    }, self.prototype.processAwardsHandler = function(args) {
      var params;
      var allTraps = this;
      for (; params = this._input.read(args);) {
        switch(this._input.next(), params.type) {
          case target.FEATUREAWARD:
            return this.onAward(params), void args.startHandler(function(t) {
              return allTraps.processAwardHandler(t);
            });
          case dom.FEATUREINPUT:
            return void args.startHandler(function(t) {
              return allTraps.processInputHandler(t);
            });
          case Array.FEATUREEND:
            return this._needsCollect = params.needsCollect, this.onFeatureProcessed(), void args.complete();
        }
      }
    }, self.prototype.onStart = function(event) {
      /** @type {!Object} */
      this._featureData = event;
      /** @type {number} */
      this._awards.length = 0;
      /** @type {number} */
      this._selects.length = 0;
      /** @type {number} */
      this._totalCoins = 0;
      /** @type {number} */
      this._totalFreespins = 0;
      /** @type {number} */
      this._totalJackpots = 0;
      /** @type {number} */
      this._totalAmount = 0;
    }, self.prototype.onAward = function(state) {
      switch(this._awards.push(state), state.awardType) {
        case action.COINS:
          this._totalCoins += state.coins;
          break;
        case temp__4090__auto__.FREESPINS:
          this._totalFreespins += state.freespins;
          break;
        case Menu.AMOUNT:
          this._totalAmount += state.amount;
          break;
        case transRec.JACKPOT:
          this._totalJackpots += state.value;
          break;
        case signal2.COINSMULTIPLIER:
          this._totalCoins *= state.coinsMultiplier;
          break;
        case ngEl.FREESPINSMULTIPLIER:
          this._totalFreespins *= state.freespinsMultiplier;
      }
    }, self.prototype.processAwardHandler = function(result) {
      result.complete();
    }, self.prototype.processInputHandler = function(result) {
      result.execSequence(this._processInputSequence);
    }, self.prototype.selectIntroHandler = function(subgoal) {
      var item = this.getSelectIntroMessage();
      this._dispatcher.dispatch(new exports.InfoEvent(item, this._featureId));
      subgoal.complete();
    }, self.prototype.getSelectIntroMessage = function() {
      return "PICK AN ITEM";
    }, self.prototype.selectWaitHandler = function(state) {
      var result;
      var value;
      for (; result = this._input.read(state);) {
        if (result.type === args.FEATURESELECTED) {
          value = result.data;
          break;
        }
        if (this._input.next(), result.type === types.FEATUREUISELECTED) {
          value = result.value;
          this._dispatcher.dispatch(new args(false, value));
          break;
        }
      }
      if (result) {
        this.onSelect(value);
        state.complete();
      }
    }, self.prototype.onSelect = function(d) {
      this._selects.push(d);
    }, self.prototype.showSelectHandler = function(subgoal) {
      this._dispatcher.dispatch(new exports.InfoEvent("", this._featureId));
      subgoal.complete();
    }, self.prototype.selectedWaitHandler = function(key) {
      var row;
      for (; (row = this._input.read(key)) && (this._input.next(), row.type !== args.FEATURESELECTED);) {
      }
      if (row) {
        key.complete();
      }
    }, self.prototype.selectOutroHandler = function(subgoal) {
      subgoal.complete();
    }, self.prototype.onFeatureProcessed = function() {
    }, self.prototype.processDataHandler = function(result) {
      result.complete();
    }, self.prototype.summaryHandler = function(result) {
      result.complete();
    }, self.prototype.collectHandler = function(state) {
      switch(state.state) {
        case 0:
          if (this.dispatchWinEvent(), !this._needsCollect) {
            return void state.complete();
          }
          this._dispatcher.dispatch(new item(false));
          if (this._input.data && this._input.data.type === exports.ReconnectEndEvent.RECONNECTEND) {
            this._input.next();
          }
        default:
          var elem = void 0;
          for (; elem = this._input.read(state);) {
            if (this._input.next(), elem.type === exports.ReconnectEndEvent.RECONNECTEND && self.SystemManager.getScheduler().reconnecting) {
              this._dispatcher.dispatch(new item(false));
            } else {
              if (elem.type === item.FEATURECOLLECTED) {
                return void state.complete();
              }
            }
          }
      }
    }, self.prototype.outroHandler = function(t) {
      this._dispatcher.dispatch(new query(query.FEATURECOMPLETED));
      t.complete();
    }, self.prototype.dispatchBonusEvent = function(state) {
      this._dispatcher.dispatch(new ProgressEvent(state));
    }, self.prototype.dispatchWinEvent = function() {
      this._dispatcher.dispatch(new ChangeEvent(this));
    }, self;
  }(self.EventProcessor);
  var branchesExist = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Contact = function(baseClass) {
    /**
     * @return {?}
     */
    function temp() {
      return null !== baseClass && baseClass.apply(this, arguments) || this;
    }
    return branchesExist(temp, baseClass), temp.prototype.selectWait = function(completionNotifier) {
      this.onSelect(0);
      completionNotifier.complete();
    }, temp;
  }(c);
  var timmSet = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var fragmentedQuery = function(t) {
    /**
     * @return {?}
     */
    function record() {
      return t.call(this, record.JACKPOTEND) || this;
    }
    return timmSet(record, t), record.JACKPOTEND = "jackpotend", record;
  }(query);
  var consoleChannel = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Error = function(f) {
    /**
     * @param {!Object} task
     * @param {number} i
     * @return {?}
     */
    function message(task, i) {
      var self = f.call(this, message.JACKPOTSHOWPANEL) || this;
      return self._task = task, self._id = i, self;
    }
    return consoleChannel(message, f), Object.defineProperty(message.prototype, "id", {
      get : function() {
        return this._id;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(message.prototype, "task", {
      get : function() {
        return this._task;
      },
      enumerable : true,
      configurable : true
    }), message.JACKPOTSHOWPANEL = "JACKPOTSHOWPANEL", message;
  }(self.MegatonEvent);
  var _handleCollectionClone = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var AddObjectCommand = function(output) {
    /**
     * @param {!Object} type
     * @return {?}
     */
    function Type(type) {
      var array = output.call(this, Type.JACKPOTSHOWPARTICLE) || this;
      return array._task = type, array;
    }
    return _handleCollectionClone(Type, output), Object.defineProperty(Type.prototype, "task", {
      get : function() {
        return this._task;
      },
      enumerable : true,
      configurable : true
    }), Type.JACKPOTSHOWPARTICLE = "JACKPOTSHOWPARTICLE", Type;
  }(self.MegatonEvent);
  var cb = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cues = function(size) {
    /**
     * @return {?}
     */
    function item() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return cb(item, size), item.DISABLE = "MJP_VIEW_DISABLE", item.ENABLE = "MJP_VIEW_ENABLE", item;
  }(self.MegatonEvent);
  var startDeathCam = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var CompileContext = function(self) {
    /**
     * @param {!HTMLElement} event
     * @param {?} context
     * @param {!Object} f
     * @param {!Object} o
     * @return {?}
     */
    function s(event, context, f, o) {
      var _this = self.call(this, event, context, "MysteryJackpot") || this;
      return _this._config = o, _this._jackpotManager = f, _this._isDisabled = false, _this._isInFreespin = false, _this._isInPaytable = false, _this._isInSplash = false, _this._isInBonus = false, _this._isInTransition = false, event.addEventListener(Cues.DISABLE, function() {
        return _this.onDisable(true);
      }), event.addEventListener(Cues.ENABLE, function() {
        return _this.onDisable(false);
      }), event.addEventListener(ProgressEvent.BONUS_STARTED, function() {
        return _this.onBonus(true);
      }), event.addEventListener(ProgressEvent.BONUS_ENDED, function() {
        return _this.onBonus(false);
      }), event.addEventListener(e.INTRO_START, function() {
        return _this.onFreespin(true);
      }), event.addEventListener(e.FREESPIN_END, function() {
        return _this.onFreespin(false);
      }), event.addEventListener(v.SHOW_PAYTABLE, function() {
        return _this.onPaytable(true);
      }), event.addEventListener(v.HIDE_PAYTABLE, function() {
        return _this.onPaytable(false);
      }), event.addEventListener(win.EVENT_HIDE_JACKPOT, function() {
        return _this.onTransition(true);
      }), event.addEventListener(win.EVENT_SHOW_JACKPOT, function() {
        return _this.onTransition(false);
      }), event.addEventListener(exports.SplashEvent.SPLASH_SHOW, function() {
        return _this.onSplash(true);
      }), event.addEventListener(exports.SplashEvent.SPLASH_HIDE, function() {
        return _this.onSplash(false);
      }), event.addEventListener(options.JackpotStatusEvent.TOGGLE, function(popupResponse) {
        return _this.onJackpotStatus(popupResponse);
      }), _this._jackpotManager.showDisplays(false), _this;
    }
    return startDeathCam(s, self), s.prototype.onDisable = function(isDisabled) {
      /** @type {boolean} */
      this._isDisabled = isDisabled;
      this.toggleDisplays();
    }, s.prototype.onSplash = function(sigma) {
      /** @type {boolean} */
      this._isInSplash = sigma;
      this.toggleDisplays();
    }, s.prototype.onPaytable = function(otherRangeStick) {
      /** @type {string} */
      this._isInPaytable = otherRangeStick;
      this.toggleDisplays();
    }, s.prototype.onTransition = function(a) {
      /** @type {boolean} */
      this._isInTransition = a;
      this.toggleDisplays();
    }, s.prototype.onBonus = function(indicator) {
      /** @type {boolean} */
      this._isInBonus = indicator;
      this.toggleDisplays();
    }, s.prototype.onFreespin = function(isIron) {
      /** @type {boolean} */
      this._isInFreespin = isIron;
      this.toggleDisplays();
    }, s.prototype.onJackpotStatus = function(oauthData) {
      this.toggleDisplays();
    }, s.prototype.mysteryJackpotSummaryHandler = function(item) {
      var jObj = this._awards[0];
      var type = jObj.id;
      var tag = this._jackpotManager.getModel(String(type));
      var s = this._jackpotManager.getView(String(type));
      var base = {
        wonAmount : this._totalJackpots,
        name : tag.name,
        prizeType : s.getPrizeType(),
        prizeName : s.getPrizeName()
      };
      if (s.getPrizeType() === options.MysteryJackpotType.DEMO) {
        return void item.complete();
      }
      switch(item.state) {
        case 0:
          this._jackpotManager.lock(String(tag.id), this._totalJackpots);
          this._dispatcher.dispatch(new BigNumber(String(type), base));
          if (s) {
            s.showWin(true);
          }
          item.startDelayMs(2400);
          break;
        case 1:
          this._dispatcher.dispatch(new AddObjectCommand(item));
          break;
        case 2:
          this._dispatcher.dispatch(new Error(item, type));
          break;
        default:
          this._dispatcher.dispatch(new Tween(Tween.NONE));
          this._dispatcher.dispatch(new fragmentedQuery);
          if (tag) {
            tag.unlock();
          }
          if (s) {
            s.showWin(false);
          }
          this._jackpotManager.unlock(String(tag.id));
          item.execDelayMs(1000 / 24 * 20);
      }
    }, s.prototype.guaranteedJackpotSummaryHandler = function(item) {
      var button = options.GuaranteedJackpotManager.instance;
      var serializedRecord = this._awards[0];
      var id = serializedRecord.id;
      var self = button.getModel(id);
      var base = {
        wonAmount : this._totalJackpots,
        name : self.baseModel.name,
        prizeType : options.MysteryJackpotType.MONETARY,
        prizeName : null
      };
      switch(item.state) {
        case 0:
          self.baseModel.lockJackpotWin(this._totalJackpots);
          this._dispatcher.dispatch(new BigNumber(String(id), base));
          item.startDelayMs(2400);
          break;
        case 1:
          this._dispatcher.dispatch(new AddObjectCommand(item));
          break;
        case 2:
          this._dispatcher.dispatch(new Error(item, id));
          break;
        default:
          this._dispatcher.dispatch(new Tween(Tween.NONE));
          this._dispatcher.dispatch(new fragmentedQuery);
          if (self) {
            self.baseModel.unlock();
          }
          self.baseModel.unlock();
          item.execDelayMs(1000 / 24 * 20);
      }
    }, s.prototype.summaryHandler = function(tinfo) {
      var that = options.GuaranteedJackpotManager.instance;
      var d = this._awards[0];
      if (that && that.getModel(d.id)) {
        this.guaranteedJackpotSummaryHandler(tinfo);
      } else {
        this.mysteryJackpotSummaryHandler(tinfo);
      }
    }, s.prototype.toggleDisplays = function() {
      /** @type {boolean} */
      var timemodified = !(this._isDisabled || this._isInSplash || this._isInPaytable || this._isInBonus || this._isInFreespin || this._isInTransition);
      this._jackpotManager.showDisplays(timemodified);
    }, s.prototype.dispatchWinEvent = function() {
      this._dispatcher.dispatch(new exports.InfoEvent("", options.WinInfoEvent.INFO));
    }, s.FEATURE_TYPE = 10, s;
  }(c);
  var walk = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SwarmMeta = function(f) {
    /**
     * @param {?} value
     * @param {string} context
     * @param {!Object} name
     * @param {!Object} options
     * @return {?}
     */
    function init(value, context, name, options) {
      var self = f.call(this, value) || this;
      return context.registerEvent(dom.FEATUREINPUT), context.registerEvent(args.FEATURESELECTED), context.registerEvent(target.FEATUREAWARD), context.registerEvent(Array.FEATUREEND), context.registerEvent(obj.FEATUREDATAANSWER), context.registerEvent(item.FEATURECOLLECTED), context.registerEvent(types.FEATUREUISELECTED), self._emptyFeature = new Contact(self._dispatcher, context, ""), self._mysteryJackpot = self.createMysteryJackpot(self._dispatcher, context, name, options), self;
    }
    return walk(init, f), init.prototype.getReelFeature = function(suppressDisabledCheck) {
      return null;
    }, init.prototype.getShowFeature = function(v) {
      switch(v.featureType) {
        case CompileContext.FEATURE_TYPE:
          return this._mysteryJackpot;
      }
      return this._emptyFeature;
    }, init.prototype.createMysteryJackpot = function(src, filename, builder, options) {
      return new CompileContext(src, filename, builder, options);
    }, init;
  }(self.EventProcessor);
  var defineProperty = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Item = function(value) {
    /**
     * @param {?} key
     * @param {?} index
     * @param {number} local
     * @param {?} name
     * @param {?} isVertical
     * @param {?} size
     * @return {?}
     */
    function constructor(key, index, local, name, isVertical, size) {
      var s = value.call(this, events.START) || this;
      return s._bet = key, s._lines = index, s._freeGames = local, s._denomination = name, s._freeGamesWin = isVertical, s._resumed = size, s;
    }
    return defineProperty(constructor, value), Object.defineProperty(constructor.prototype, "bet", {
      get : function() {
        return this._bet;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "lines", {
      get : function() {
        return this._lines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "freeGames", {
      get : function() {
        return this._freeGames;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "denomination", {
      get : function() {
        return this._denomination;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "freeGamesWin", {
      get : function() {
        return this._freeGamesWin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "resumed", {
      get : function() {
        return this._resumed;
      },
      enumerable : true,
      configurable : true
    }), constructor;
  }(events);
  var aCh = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var runtimeConstructor = function(value) {
    /**
     * @param {?} i
     * @param {?} w
     * @param {?} p
     * @return {?}
     */
    function p(i, w, p) {
      var camera = value.call(this, i) || this;
      return camera._freeGamesWin = w, camera._additionalOffers = p, camera;
    }
    return aCh(p, value), Object.defineProperty(p.prototype, "freeGamesWin", {
      get : function() {
        return this._freeGamesWin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "additionalOffers", {
      get : function() {
        return this._additionalOffers;
      },
      enumerable : true,
      configurable : true
    }), p;
  }(events);
  var _createClass = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ComponentManager = function(properties) {
    /**
     * @param {!HTMLElement} name
     * @param {!Object} config
     * @return {?}
     */
    function Main(name, config) {
      var self = properties.call(this, name) || this;
      return self._lastGameMode = self._currentGameMode = 0, self._config = config, name.addEventListener(exports.CommandEvent.GAME_IN, function(event) {
        return self.onCommand(event);
      }), self;
    }
    return _createClass(Main, properties), Main.prototype.onCommand = function(event) {
      var _this = this;
      var storage = event.command;
      /** @type {boolean} */
      var i = self.SystemManager.getDeviceHandler().platform === self.DeviceHandler.MOBILE;
      switch(event.command.type) {
        case exports.ServerCommand.BALANCEMODE:
          if (i) {
            this._lastGameMode = this._currentGameMode;
            this._currentGameMode = storage.getInt(0);
          }
          break;
        case exports.ServerCommand.SSFREEGAME:
          var itm = storage.getInt(0);
          var kind = storage.getInt(1);
          var table = storage.getInt(2);
          var disabled = storage.getInt(3);
          var checked = storage.getInt(4);
          /** @type {boolean} */
          var isShorthand = 0 === storage.getInt(5);
          var item = new Item(kind, table, itm, disabled, checked, isShorthand);
          this._dispatcher.dispatch(new exports.LogicEvent(item, exports.LogicEvent.DELAYED));
          if (!this._forceBalanceMessage && i && 0 !== this._currentGameMode) {
            /** @type {boolean} */
            this._forceBalanceMessage = true;
            this._dispatcher.addEventListener(SelectionEvent.FREEGAMEMESSAGE, function() {
              if (_this._lastGameMode !== _this._currentGameMode) {
                /** @type {string} */
                var options = _this._currentGameMode === exports.BonusBalanceEventType.BONUS ? "IDS_M_BALANCEMONEYTYPE_BONUS_TEXT" : "IDS_M_BALANCEMONEYTYPE_REAL_TEXT";
                _this._dispatcher.dispatch(new exports.BonusBalanceMessageEvent(exports.BonusBalanceMessageEvent.BONUSBALANCEMESSAGE, exports.MessageEventFlag.OK | exports.MessageEventFlag.NOCANCEL, _this._currentGameMode, "IDS_CMN_INFORMATION", options));
              }
            });
          }
          break;
        case exports.ServerCommand.SSFREEGAMEEND:
          var blobqueueConstructor = storage.getInt(0);
          var isOverride = storage.getBoolean(1);
          /** @type {null} */
          var password = null;
          password = this._config.freeGameEndLogout && !isOverride ? new runtimeConstructor(events.LOGOUT, blobqueueConstructor, false) : new runtimeConstructor(events.END, blobqueueConstructor, isOverride);
          this._dispatcher.dispatch(new exports.LogicEvent(password, exports.LogicEvent.DELAYED));
      }
    }, Main;
  }(self.EventProcessor);
  var Sn = function() {
    /**
     * @return {undefined}
     */
    function Observable() {
      /** @type {boolean} */
      this._active = false;
      /** @type {boolean} */
      this._consumed = false;
      /** @type {number} */
      this._freeGames = 0;
      /** @type {number} */
      this._totalWin = 0;
    }
    return Object.defineProperty(Observable.prototype, "freeGames", {
      get : function() {
        return this._freeGames;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._freeGames = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Observable.prototype, "active", {
      get : function() {
        return this._active;
      },
      set : function(value) {
        /** @type {boolean} */
        this._active = value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Observable.prototype, "totalWin", {
      get : function() {
        return this._totalWin;
      },
      set : function(mymuted) {
        /** @type {string} */
        this._totalWin = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Observable.prototype, "consumed", {
      get : function() {
        return this._consumed;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._consumed = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Observable;
  }();
  var on = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var CustomEvent = function(value) {
    /**
     * @param {number} fn
     * @return {?}
     */
    function obj(fn) {
      var $ = value.call(this, events.CONSUMED) || this;
      return $._freeGames = fn, $;
    }
    return on(obj, value), Object.defineProperty(obj.prototype, "freeGames", {
      get : function() {
        return this._freeGames;
      },
      enumerable : true,
      configurable : true
    }), obj;
  }(events);
  var filter = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Router = function(arr) {
    /**
     * @param {string} index
     * @return {?}
     */
    function exports(index) {
      var REGEX = arr.call(this, events.TOTALWIN) || this;
      return REGEX._totalWin = index, REGEX;
    }
    return filter(exports, arr), Object.defineProperty(exports.prototype, "totalWin", {
      get : function() {
        return this._totalWin;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(events);
  var incrementAndSave = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Layer = function(_FluxStore) {
    /**
     * @param {!HTMLElement} dispatcher
     * @param {?} options
     * @param {!Object} index
     * @param {(Object|string)} data
     * @param {?} count
     * @return {?}
     */
    function self(dispatcher, options, index, data, count) {
      var self = _FluxStore.call(this, dispatcher) || this;
      return self._data = data, self._betSettings = options, self._config = index, self._started = false, self._roundHandler = count, self._inSessionMessages = [], dispatcher.addEventListener(events.START, function(loading) {
        return self.onStart(loading);
      }), dispatcher.addEventListener(events.END, function(e) {
        return self.onEnd(e);
      }), dispatcher.addEventListener(events.INSESSION, function(person) {
        return self.onInSessionFreeGame(person);
      }), dispatcher.addEventListener(events.LOGOUT, function(elements) {
        return self.onEndLogout(elements);
      }), dispatcher.addEventListener(events.ADDITIONAL, function(elements) {
        return self.onAcceptAdditional(elements);
      }), dispatcher.addEventListener(exports.RoundEvent.ROUNDEND, function(t) {
        return self.onRoundEnd(t);
      }), dispatcher.addEventListener(events.UPDATE, function() {
        return self.onUpdateFreeGame();
      }), dispatcher.addEventListener(exports.RoundEvent.ROUNDSTART, function(hash) {
        return self.onRoundStart(hash);
      }), self;
    }
    return incrementAndSave(self, _FluxStore), self.prototype.onStart = function(data) {
      this._data.freeGames = data.freeGames;
      this._data.totalWin = data.freeGamesWin;
      if (!this._started) {
        this._betSettings.addTemporaryFreegameDenomIfMissing(data.denomination);
        this._betSettings.coins = data._bet;
        this._betSettings.lines = data._lines;
        this._betSettings.denomination = data._denomination;
        this._betSettings.setDenominations(this._betSettings.denominations, this._betSettings.denominationMultiplier);
        this._betSettings.enable(false);
        /** @type {boolean} */
        this._started = true;
        this._dispatcher.dispatch(new exports.RealityCheckLossEvent(exports.RealityCheckLossEvent.LOSS_COUNTING_DISABLED));
      }
      /** @type {boolean} */
      this._data.active = this._data.freeGames > 0;
      if (this._data.active) {
        this._dispatcher.dispatch(new Router(this._data.totalWin));
      }
      if (this._data.consumed && this._data.freeGames > 0) {
        this._data.freeGames--;
      }
      if (!this._data.consumed && this._data.freeGames > 0) {
        /** @type {boolean} */
        this._data.consumed = true;
        this._data.freeGames--;
        this._dispatcher.dispatch(new CustomEvent(this._data.freeGames));
        this.handleFreeGameMessage(data);
      }
    }, self.prototype.onEnd = function(instance) {
      if (this._data.consumed = false, this._betSettings.enable(true), this._dispatcher.dispatch(new CustomEvent(this._data.freeGames)), this._dispatcher.dispatch(new options.AutoplayEvent(options.AutoplayEvent.AUTOPLAY_STOP)), this._betSettings.removeTemporaryFreegameDenom(), this._betSettings.coins = this._config.defaultLimit > 0 ? this._config.defaultLimit : this._betSettings.isLocked(event.FIXED_BET) ? this._betSettings.maxCoins : 1, this._betSettings.lines = this._config.defaultLines > 0 ? this._config.defaultLines : 
      this._betSettings.maxLines, this._betSettings.denomination = this._config.defaultDenomination * this._betSettings.denominationMultiplier, this._betSettings.setDenominations(this._betSettings.denominations, this._betSettings.denominationMultiplier), this._data.active = false, this._started = false, this._dispatcher.dispatch(new exports.RealityCheckLossEvent(exports.RealityCheckLossEvent.LOSS_COUNTING_ENABLED)), true === instance.additionalOffers) {
        this._dispatcher.dispatch(new SelectionEvent(root.ADDITIONAL, 2, "IDS_FREEGAMESTITLE", "IDS_ADDITIONALFREEGAMES", SelectionEvent.FREEGAME_END_PRIORITY));
      } else {
        /** @type {number} */
        var checked = exports.MessageEventFlag.OK | exports.MessageEventFlag.NOCANCEL;
        this._dispatcher.dispatch(new SelectionEvent(root.INFO, checked, "IDS_FREEGAMESTITLE", "IDS_FREEGAMESCOMPLETED", SelectionEvent.FREEGAME_END_PRIORITY));
      }
    }, self.prototype.handleFreeGameMessage = function(state) {
      var originalBaseURL;
      var g = exports.ResourceManager.getInstance().getTextManager();
      var default_favicon = exports.ResourceManager.getInstance().getCreditFormatter().formatCoinsAsCredit(state.bet * state.lines * state.freeGames);
      /** @type {string} */
      var rowId = "";
      /** @type {string} */
      rowId = state.resumed ? 1 === state.freeGames ? "IDS_FREEGAME_RECONNECT" : "IDS_FREEGAMES_RECONNECT" : this._config.detailedFreegameMessage ? 1 === state.freeGames ? "IDS_WONFREEGAME_VALUE" : "IDS_WONFREEGAMES_VALUE" : 1 === state.freeGames ? "IDS_WONFREEGAME" : "IDS_WONFREEGAMES";
      originalBaseURL = g.getByName(rowId).getText();
      originalBaseURL = originalBaseURL.replace("%d", state.freeGames.toString());
      originalBaseURL = originalBaseURL.replace("%t", default_favicon.toString());
      /** @type {number} */
      var checked = exports.MessageEventFlag.OK | exports.MessageEventFlag.NOCANCEL;
      this._dispatcher.dispatch(new SelectionEvent(root.INFO, checked, "IDS_FREEGAMESTITLE", originalBaseURL));
      this._dispatcher.dispatch(new options.AutoplayEvent(options.AutoplayEvent.AUTOPLAY_STOP));
    }, self.prototype.onUpdateFreeGame = function() {
      if (this._data.freeGames > 0) {
        var PersonModel = exports.ResourceManager.getInstance().getTextManager();
        var e = PersonModel.getByName("IDS_FREEGAMES_RECONNECT").getText().replace("%d", this._data.freeGames.toString());
        /** @type {number} */
        var checked = exports.MessageEventFlag.OK | exports.MessageEventFlag.NOCANCEL;
        this._dispatcher.dispatch(new SelectionEvent(root.INFO, checked, "IDS_FREEGAMESTITLE", e));
      }
    }, self.prototype.onAcceptAdditional = function(a) {
      this._dispatcher.dispatch(new exports.ExitEvent(exports.ExitEvent.LOGOUT, exports.ExitReason.RELOAD));
    }, self.prototype.onInSessionFreeGame = function(paramName) {
      this._inSessionMessages.push(paramName);
      if (!this._roundHandler.running) {
        this.ConsumeInSessionFreegameIfAvailable();
      }
    }, self.prototype.onRoundStart = function(ast) {
      if (self.SystemManager.getScheduler().reconnecting) {
        /** @type {boolean} */
        this._data.consumed = false;
      }
      if (this._data.active) {
        this._dispatcher.dispatch(new CustomEvent(this._data.freeGames));
      }
    }, self.prototype.onRoundEnd = function(result) {
      this.ConsumeInSessionFreegameIfAvailable();
    }, self.prototype.onEndLogout = function(a) {
      var checked = exports.MessageEventFlag.CRITICAL;
      this._dispatcher.dispatch(new SelectionEvent(root.INFO, checked, "IDS_FREEGAMESTITLE", "IDS_FREEGAMESCOMPLETED_LOGOUT"));
    }, self.prototype.ConsumeInSessionFreegameIfAvailable = function() {
      if (this._inSessionMessages.length > 0 && !this._data.active) {
        this._dispatcher.dispatch(new options.AutoplayEvent(options.AutoplayEvent.AUTOPLAY_STOP));
        this._dispatcher.dispatch(new SelectionEvent(root.ADDITIONAL, 2, "IDS_FREEGAMESTITLE", "IDS_HASFREEGAMES"));
        this._inSessionMessages.pop();
      }
    }, self;
  }(self.EventProcessor);
  var ReferenceList = function() {
    /**
     * @param {!Function} vW
     * @param {undefined} vH
     * @param {undefined} isVertical
     * @param {!Function} secondIsSidebar
     * @return {undefined}
     */
    function ScrollList(vW, vH, isVertical, secondIsSidebar) {
      this._data = this.createFreeGameModel();
      this.createFreeGameHandler(vW, vH, isVertical, this._data, secondIsSidebar);
    }
    return Object.defineProperty(ScrollList.prototype, "freeGamesLeft", {
      get : function() {
        return this._data.freeGames;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "isActive", {
      get : function() {
        return this._data.active;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "isConsumed", {
      get : function() {
        return this._data.consumed;
      },
      enumerable : true,
      configurable : true
    }), ScrollList.prototype.createFreeGameHandler = function(w, h, name, timestamp, imgLoc) {
      return new Layer(w, h, name, timestamp, imgLoc);
    }, ScrollList.prototype.createFreeGameModel = function() {
      return new Sn;
    }, ScrollList;
  }();
  var h = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var touchEvents = function(t) {
    /**
     * @param {string} id
     * @return {?}
     */
    function Parent(id) {
      var o = t.call(this, Parent.FREESPIN_SPIN) || this;
      return o._value = id, o;
    }
    return h(Parent, t), Object.defineProperty(Parent.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), Parent.FREESPIN_SPIN = "FREESPIN_SPIN", Parent;
  }(e);
  var parameterPath = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Nn = function(t) {
    /**
     * @param {!HTMLElement} document
     * @return {?}
     */
    function Main(document) {
      var plugin = t.call(this, document) || this;
      return document.addEventListener(exports.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), document.addEventListener(touchEvents.FREESPIN_SPIN, function(t) {
        return plugin.onFreespinSpin(t);
      }), plugin;
    }
    return parameterPath(Main, t), Main.prototype.onCommand = function(event) {
      var value = event.command;
      switch(value.type) {
        case exports.ServerCommand.FREESPIN_STATUS:
          var _val = value.getInt(0);
          this._dispatcher.dispatch(new exports.LogicEvent(new val(_val)));
      }
    }, Main.prototype.onFreespinSpin = function(b) {
      var body = new exports.Command(value.FREESPINSPIN, [b.value.toString()]);
      this._dispatcher.dispatch(new exports.CommandEvent(exports.CommandEvent.LOGIC_OUT, body));
    }, Main;
  }(exports.CommandConverter);
  var callback = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Box = function(hasChildren) {
    /**
     * @param {!HTMLElement} that
     * @param {string} key
     * @param {(Object|string)} value
     * @param {!Element} view
     * @return {?}
     */
    function set(that, key, value, view) {
      var self = hasChildren.call(this, that) || this;
      return self._input = key, self._data = value, self._view = view, self._reconnectTarget = -1, self._sendStatus = true, self._waiter = null, self._data.freespinLeft = 0, self._data.clean(), self._view.addListener(function(t) {
        return self.onViewEvent(t);
      }), self._view.summaryBtn.addEventListener(exports.ButtonEvent.CLICK, function() {
        return self.onContinue();
      }), self._endSequence = [function(t) {
        return self.endIntroHandler(t);
      }, function(expr) {
        return self.endWaitHandler(expr);
      }, function(t) {
        return self.endOutroHandler(t);
      }], self._startSequence = [function(now) {
        return self.startIntroHandler(now);
      }, function(expr) {
        return self.startWaitHandler(expr);
      }, function(t) {
        return self.startOutroHandler(t);
      }], self._retriggerSequence = [function(slave) {
        return self.retriggerIntroHandler(slave);
      }, function(expr) {
        return self.retriggerWaitHandler(expr);
      }, function(slave) {
        return self.retriggerOutroHandler(slave);
      }], that.addEventListener(exports.RoundEvent.ROUNDSTART, function() {
        return self.onStartRound();
      }), that.addEventListener(val.FREESPIN_STATUS, function(hash) {
        return self.onFreespinStatus(hash);
      }), that.addEventListener(v.CONTINUE, function() {
        return self.onContinue();
      }), that.addEventListener(exports.InfoEvent.INFO, function(t) {
        return self.onInfo(t);
      }), self;
    }
    return callback(set, hasChildren), Object.defineProperty(set.prototype, "isActive", {
      get : function() {
        return this._data.freespinLeft > 0;
      },
      enumerable : true,
      configurable : true
    }), set.prototype.onSpinEvent = function(charsetPart) {
      var value = this.isActive ? this._data.reconnectCnt : -1;
      if (self.SystemManager.getScheduler().reconnecting && this._reconnectTarget === value) {
        /** @type {boolean} */
        var n = true;
        this._input.snoop(function(ap, canCreateDiscussions) {
          return !(ap instanceof evt) && (!(ap instanceof Array && ap.needsCollect) || (n = false, false));
        });
        if (n) {
          this._dispatcher.dispatch(new exports.ReconnectEndEvent);
        }
      }
    }, set.prototype.onStartRound = function() {
      this._data.reset();
    }, set.prototype.process = function(element, attrs) {
      var args = this;
      var i = this._data.freespinLeft;
      return this._data.freespinLeft = attrs.freeSpinsLeft, this._data.freespinMultiplier = attrs.freeSpinMultiplier, (this._data.freespinLeft > 0 || i > 0) && (0 === i ? this._data.clean() : this._data.next()), this._data.totalWin = attrs.wonCoins, this._data.freespinLeft > 0 && self.SystemManager.getScheduler().reconnecting && this._reconnectTarget === this._data.reconnectCnt - 1 && this._dispatcher.dispatch(new exports.ReconnectEndEvent), this._sendStatus && (this._data.freespinLeft > 0 || i > 
      0) && this._dispatcher.dispatch(new touchEvents(this._data.reconnectCnt)), this._data.freespinLeft > 0 ? (this._input.next(), void(i > 0 ? (this._freespinWon = this._data.freespinLeft - i + 1, this.showRetrigger() ? element.execHandler(function(useToolingApi) {
        return args.retriggerHandler(useToolingApi);
      }) : element.execHandler(function(t) {
        return args.nextHandler(t);
      })) : (this._freespinWon = this._data.freespinLeft - i, element.execHandler(function(event) {
        return args.startHandler(event);
      })))) : i > 0 ? void element.execHandler(function(evt) {
        return args.endHandler(evt);
      }) : void element.complete();
    }, set.prototype.onInfo = function(data) {
      if (this.isActive) {
        switch(data.infoId) {
          case options.WinInfoEvent.WIN:
            /** @type {!Object} */
            var p = data;
            this._data.totalWin += p.coins;
            this.updatePanel();
        }
      }
    }, set.prototype.onFreespinStatus = function(y1) {
      /** @type {boolean} */
      this._sendStatus = true;
      this._reconnectTarget = y1.value;
    }, set.prototype.onViewEvent = function(type) {
      this._dispatcher.dispatch(type);
    }, set.prototype.startHandler = function(evt) {
      evt.execSequence(this._startSequence);
    }, set.prototype.startIntroHandler = function(state) {
      switch(state.state) {
        case 0:
          this._dispatcher.dispatch(new e(e.INTRO_START));
          this.updatePanel();
          this._view.startIntro(state, this._freespinWon);
          break;
        default:
          state.complete();
      }
    }, set.prototype.startWaitHandler = function(expr) {
      this._dispatcher.dispatch(new e(e.WAIT_START));
      this.waitForContinue(expr, -1, true);
    }, set.prototype.startOutroHandler = function(a) {
      switch(a.state) {
        case 0:
          this._dispatcher.dispatch(new e(e.FREESPIN_START));
          this._view.startOutro(a);
          break;
        default:
          a.complete();
      }
    }, set.prototype.showRetrigger = function() {
      return false;
    }, set.prototype.retriggerHandler = function(useToolingApi) {
      useToolingApi.execSequence(this._retriggerSequence);
    }, set.prototype.retriggerIntroHandler = function(self) {
      switch(self.state) {
        case 0:
          this._view.retriggerIntro(self, this._freespinWon);
          break;
        default:
          this.updatePanel(true);
          self.complete();
      }
    }, set.prototype.retriggerWaitHandler = function(expr) {
      this.waitForContinue(expr, 100, true);
    }, set.prototype.retriggerOutroHandler = function(self) {
      switch(self.state) {
        case 0:
          this._view.retriggerOutro(self);
          break;
        default:
          this.updatePanel();
          self.complete();
      }
    }, set.prototype.nextHandler = function(response) {
      switch(response.state) {
        case 0:
          response.startDelayMs(300);
          break;
        default:
          this.updatePanel();
          response.complete();
      }
    }, set.prototype.endHandler = function(evt) {
      evt.execSequence(this._endSequence);
    }, set.prototype.endIntroHandler = function(a) {
      switch(a.state) {
        case 0:
          this._view.setTotalWin(this._data.totalWin);
          this._view.endIntro(a);
          break;
        default:
          a.complete();
      }
    }, set.prototype.endWaitHandler = function(expr) {
      this.waitForContinue(expr, self.SystemManager.getScheduler().timeToTick(3000), false);
    }, set.prototype.endOutroHandler = function(status) {
      switch(status.state) {
        case 0:
          this._dispatcher.dispatch(new e(e.FREESPIN_END));
          this._view.endOutro(status);
          break;
        default:
          var util = exports.ResourceManager.getInstance().getCreditFormatter();
          var item = util.getCreditString("IDS_MENU_WONCOINS_FREESPINS", "IDS_MENU_WONMONEY_FREESPINS");
          var buffering = "%d=" + util.formatCoinValue(this._data.totalWin);
          this._dispatcher.dispatch(new exports.InfoEvent(item, options.WinInfoEvent.INFO, buffering));
          status.complete();
      }
    }, set.prototype.waitForContinue = function(t, times, options) {
      switch(t.state) {
        case 0:
          if (!self.SystemManager.getScheduler().reconnecting) {
            var password = options ? Tween.CONTINUE_SPIN : Tween.CONTINUE;
            this._dispatcher.dispatch(new Tween(password));
            this._waiter = times < 0 ? t.wait(new self.Waiter).ctx : t.startDelayMs(times * (1000 / 24)).ctx;
            break;
          }
        default:
          this._dispatcher.dispatch(new Tween(Tween.NONE));
          /** @type {null} */
          this._waiter = null;
          t.complete();
      }
    }, set.prototype.onContinue = function() {
      if (this._waiter) {
        self.Waiter.notifyContext(this._waiter);
      }
      /** @type {null} */
      this._waiter = null;
    }, set.prototype.updatePanel = function(buttons) {
      this._view.updatePanel(this._data.freespinLeft, this._data.freespinCnt, this._data.totalWin, buttons);
    }, set;
  }(self.EventProcessor);
  var MakeClosure_AddDependencyLoad = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Notification = function(request) {
    /**
     * @param {(Image|string)} records
     * @return {?}
     */
    function load(records) {
      var self = request.call(this) || this;
      return self.createComponents(records), self._creditFormatter = exports.ResourceManager.getInstance().getCreditFormatter(), self._startOutroSequence = [function(abs) {
        return self.introHideHandler(abs);
      }, function(data) {
        return self.panelShowHandler(data);
      }], self._endOutroGroup = [function(slave) {
        return self.summaryHideHandler(slave);
      }, function(slave) {
        return self.panelHideHandler(slave);
      }], self.updatePanel(0, 0, 0), self;
    }
    return MakeClosure_AddDependencyLoad(load, request), Object.defineProperty(load.prototype, "summaryBtn", {
      get : function() {
        return this._summaryBtn;
      },
      enumerable : true,
      configurable : true
    }), load.prototype.startIntro = function(self, cb) {
      var allTraps = this;
      self.startHandler(function(t) {
        return allTraps.startIntroHandler(t);
      }, cb);
    }, load.prototype.startOutro = function(args) {
      var allTraps = this;
      args.startHandler(function(t) {
        return allTraps.startOutroHandler(t);
      });
    }, load.prototype.retriggerIntro = function(asyncFunction, extraAsyncArgs) {
      asyncFunction.startDelayMs(0);
    }, load.prototype.retriggerOutro = function(proplist) {
      proplist.startDelayMs(0);
    }, load.prototype.endIntro = function(callback) {
      var allTraps = this;
      callback.startHandler(function(t) {
        return allTraps.endIntroHandler(t);
      });
    }, load.prototype.setTotalWin = function(canCreateDiscussions) {
      this._totalWinValue = canCreateDiscussions;
      this._winValue.setText(this._creditFormatter.formatCoinValue(this._totalWinValue));
    }, load.prototype.endOutro = function(params) {
      params.startGroup(this._endOutroGroup);
    }, load.prototype.updatePanel = function(type, callback, duration, buttons) {
      var ref = type + callback;
      this._fsValue.setText("IDS_FREESPIN_X_OF_Y");
      /** @type {number} */
      var id = buttons ? 0 : 1;
      this._fsValue.setArgs("%d=" + (callback + id) + "&%t=" + ref);
      this._winValue.setArgs("> " + this._creditFormatter.formatCoinValue(duration));
      this._winValue.setText("IDS_TOTALWIN");
    }, load.prototype.showFSPanel = function(canCreateDiscussions) {
      if (this._panelAnim) {
        if (canCreateDiscussions) {
          this._panelAnim.play("show");
        } else {
          this._panelAnim.play("hide");
        }
      }
    }, load.prototype.createComponents = function(toAdd) {
      this._introAnim = toAdd.getAnimation("freespinPopup");
      this._panelAnim = toAdd.getAnimation("fsCounter");
      this._retriggerAnim = toAdd.getAnimation("freespinRetrigger");
      this._summaryAnim = toAdd.getAnimation("freespinSummary");
      this._winValue = toAdd.getTextField("IDS_TOTAL_WIN_X");
      this._fsValue = toAdd.getTextField("IDS_FREESPIN_X");
      this._retriggerValue = toAdd.getTextField("IDS_WON_ADD_X_FREESPINS");
      this._totalWinTextfield = toAdd.getTextField("summaryPopupTotalWin");
      this._summaryBtn = toAdd.getButton("freespinSummary.inner.btn");
      this._summaryBtn.enable(false);
      this._introAnim.play("stop");
      this._panelAnim.play("stop");
      this._retriggerAnim.play("stop");
      this._summaryAnim.play("stop");
    }, load.prototype.startIntroHandler = function(self) {
      var YM = this;
      switch(self.state) {
        case 0:
          this.dispatch(new pointer(pointer.FREESPIN_INTRO));
          self.execFunction(function(buttons, callback, delay, start) {
            return YM._introAnim.play(buttons, callback, delay, start);
          }, "show");
          break;
        default:
          self.complete();
      }
    }, load.prototype.startOutroHandler = function(result) {
      this._summaryBtn.enable(true);
      result.execSequence(this._startOutroSequence);
    }, load.prototype.introHideHandler = function(self) {
      self.execFunction(this._introAnim.play, "hide");
    }, load.prototype.panelShowHandler = function(subgoal) {
      this._panelAnim.play("show");
      subgoal.complete();
    }, load.prototype.endIntroHandler = function(result) {
      var allTraps = this;
      result.execHandler(function(t) {
        return allTraps.showSummaryHandler(t);
      });
    }, load.prototype.showSummaryHandler = function(self) {
      switch(self.state) {
        case 0:
          this.dispatch(new pointer(pointer.FREESPIN_SUMMARY));
          this._totalWinTextfield.setText(this._creditFormatter.formatCoinValue(this._totalWinValue));
          self.startFunction(this._summaryAnim.play, "show");
          break;
        default:
          this.dispatch(new pointer(pointer.FREESPIN_ENDED));
          self.complete();
      }
    }, load.prototype.panelHideHandler = function(self) {
      self.execFunction(this._panelAnim.play, "hide");
    }, load.prototype.summaryHideHandler = function(self) {
      self.execFunction(this._summaryAnim.play, "hide");
      this._summaryBtn.enable(false);
    }, load;
  }(self.Dispatcher);
  var get_module_id = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var f = function(token) {
    /**
     * @return {?}
     */
    function model() {
      var pathStore = token.call(this) || this;
      return pathStore.clean(), pathStore;
    }
    return get_module_id(model, token), Object.defineProperty(model.prototype, "freespinLeft", {
      get : function() {
        return this._freespinLeft;
      },
      set : function(mymuted) {
        this._freespinLeft = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(model.prototype, "totalWin", {
      get : function() {
        return this._totalWin;
      },
      set : function(mymuted) {
        /** @type {string} */
        this._totalWin = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(model.prototype, "freespinCnt", {
      get : function() {
        return this._freespinCnt;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(model.prototype, "reconnectCnt", {
      get : function() {
        return this._reconnectCnt;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(model.prototype, "freespinMultiplier", {
      get : function() {
        return this._freespinMultiplier;
      },
      set : function(mymuted) {
        this._freespinMultiplier = mymuted;
      },
      enumerable : true,
      configurable : true
    }), model.prototype.clean = function() {
      /** @type {number} */
      this._totalWin = 0;
      /** @type {number} */
      this._freespinCnt = 0;
    }, model.prototype.reset = function() {
      this.clean();
      /** @type {number} */
      this._reconnectCnt = 0;
    }, model.prototype.next = function() {
      this._freespinCnt++;
      this._reconnectCnt++;
    }, model;
  }(self.Model);
  var Hn = function() {
    /**
     * @param {?} loc
     * @param {undefined} width
     * @param {undefined} view
     * @return {undefined}
     */
    function constructor(loc, width, view) {
      this._view = this.createView(view);
      this._data = this.createData();
      this._freespinLogicController = this.createFreespinLogicController(loc, width, this._data, this._view);
    }
    return constructor.prototype.isActive = function() {
      return this._freespinLogicController.isActive;
    }, constructor.prototype.createFreespinLogicController = function(canvas, w, h, maskWidth) {
      return new Box(canvas, w, h, maskWidth);
    }, constructor.prototype.createView = function(name) {
      return new Notification(name);
    }, constructor.prototype.createData = function() {
      return new f;
    }, Object.defineProperty(constructor.prototype, "freespinLogicController", {
      get : function() {
        return this._freespinLogicController;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "freespinView", {
      get : function() {
        return this._view;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "freespinModel", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), constructor;
  }();
  var combiFunc = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Un = function(t) {
    /**
     * @return {?}
     */
    function Point() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return combiFunc(Point, t), Object.defineProperty(Point.prototype, "adjustBet", {
      get : function() {
        return this._adjustBet;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._adjustBet = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Point.prototype.setAdjustBet = function(canCreateDiscussions) {
      /** @type {boolean} */
      this._adjustBet = canCreateDiscussions;
      this.notify();
    }, Point.prototype.toggleAdjustBet = function() {
      /** @type {boolean} */
      this._adjustBet = !this._adjustBet;
      this.notify();
    }, Point.prototype.serialize = function(glue) {
      t.prototype.serialize.call(this, glue);
    }, Point;
  }(exports.GameSettings);
  var Fn = function() {
    /**
     * @param {!Object} e
     * @param {?} p
     * @param {number} i
     * @return {undefined}
     */
    function handler(e, p, i) {
      if (void 0 === i) {
        /** @type {string} */
        i = "mainGame";
      }
      var model = this;
      /** @type {boolean} */
      this._splashMode = false;
      /** @type {!Object} */
      this._dispatcher = e;
      this._mainGameDisplay = p.getDisplay(i);
      e.addEventListener(v.SHOW_PAYTABLE, function(shown) {
        return model.show(false, shown);
      });
      e.addEventListener(v.HIDE_PAYTABLE, function(shown) {
        return model.show(true, shown);
      });
      e.addEventListener(exports.SplashEvent.SPLASH_SHOW, function(shown) {
        return model.show(false, shown);
      });
      e.addEventListener(exports.SplashEvent.SPLASH_HIDE, function(shown) {
        return model.show(true, shown);
      });
    }
    return handler.prototype.show = function(value, option) {
      switch(option.type) {
        case exports.SplashEvent.SPLASH_SHOW:
          /** @type {boolean} */
          this._splashMode = true;
          break;
        case exports.SplashEvent.SPLASH_HIDE:
          /** @type {boolean} */
          this._splashMode = false;
      }
      this._mainGameDisplay.setVisible(!this._splashMode && value);
    }, handler;
  }();
  var getDescent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Schwartz = function(size) {
    /**
     * @param {?} metadata
     * @return {?}
     */
    function listener(metadata) {
      var self = size.call(this) || this;
      self._reelManager = metadata;
      /** @type {!Array} */
      self._symbols = [];
      /** @type {number} */
      var i = 0;
      for (; i < self._reelManager.getNumReels(); i++) {
        var sec = self._reelManager.getNumRows(i);
        /** @type {number} */
        var ms = 0;
        for (; ms < sec; ms++) {
          self._symbols.push(self._reelManager.getSymbol(i, ms));
        }
      }
      return self;
    }
    return getDescent(listener, size), listener.prototype.playIdle = function() {
      var astNodeTypes;
      var circuitLength = this._symbols.length;
      for (; circuitLength; circuitLength--) {
        /** @type {number} */
        var name = Math.floor(Math.random() * circuitLength);
        /** @type {!Array} */
        astNodeTypes = [this._symbols[name], this._symbols[circuitLength - 1]];
        this._symbols[circuitLength - 1] = astNodeTypes[0];
        this._symbols[name] = astNodeTypes[1];
      }
      /** @type {number} */
      var i = 0;
      var runners = this._symbols;
      for (; i < runners.length; i++) {
        if (runners[i].idle()) {
          break;
        }
      }
    }, listener.prototype.idleHandler = function(o) {
      switch(o.state) {
        case 0:
          o.startDelayMs((75 + Math.floor(25 * Math.random())) * (1000 / 24));
          break;
        default:
          this.playIdle();
          o.startDelayMs(1250);
          o.next(0);
      }
    }, listener;
  }(options.IdleController);
  var Gn = function() {
    /**
     * @param {?} $element
     * @return {undefined}
     */
    function Taps($element) {
      this._reelManager = $element;
      this._idleController = this.createIdleController(this._reelManager);
    }
    return Taps.prototype.createIdleController = function(options) {
      return new Schwartz(options);
    }, Taps.prototype.start = function() {
      this._idleController.showIdle(true);
    }, Taps.prototype.stop = function() {
      this._idleController.showIdle(false);
    }, Taps;
  }();
  var canvasIndexFromEvent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PopdownPalette = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t;
  }();
  var me = function(t) {
    /**
     * @param {?} key
     * @param {?} value
     * @param {number} msg
     * @param {!Object} r
     * @param {!Object} i
     * @param {?} a
     * @return {?}
     */
    function e(key, value, msg, r, i, a) {
      var self = t.call(this, e.SPINANSWER) || this;
      return self._coins = key, self._lines = value, self._denom = msg, self._symbols = r, self._wins = i, self._numFeatures = a, self;
    }
    return canvasIndexFromEvent(e, t), Object.defineProperty(e.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "lines", {
      get : function() {
        return this._lines;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "symbols", {
      get : function() {
        return this._symbols;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "wins", {
      get : function() {
        return this._wins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "numFeatures", {
      get : function() {
        return this._numFeatures;
      },
      enumerable : true,
      configurable : true
    }), e.SPINANSWER = "SPINANSWER", e;
  }(self.MegatonEvent);
  var mount = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SequelizeAuto = function(b) {
    /**
     * @param {!HTMLElement} data
     * @param {number} config
     * @param {number} options
     * @return {?}
     */
    function Main(data, config, options) {
      if (void 0 === config) {
        /** @type {!Array} */
        config = [3, 3, 3, 3, 3];
      }
      if (void 0 === options) {
        /** @type {number} */
        options = 0;
      }
      var plugin = b.call(this, data) || this;
      return plugin._confirmCollect = false, plugin._numSymbols = config, plugin._numAdjacentSymbols = options, data.addEventListener(node.CONFIRM_COLLECT, function() {
        return plugin.onConfirmCollect();
      }), data.addEventListener(exports.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), data.addEventListener(entry.SPIN, function(t) {
        return plugin.onSpin(t);
      }), plugin;
    }
    return mount(Main, b), Main.prototype.onConfirmCollect = function() {
      /** @type {boolean} */
      this._confirmCollect = true;
    }, Main.prototype.onCommand = function(event) {
      var storage = event.command;
      switch(storage.type) {
        case _aureliaPal.SPIN:
          var el = storage.getInt(0);
          var fixedWidth = storage.getInt(1);
          var r = storage.getInt(2);
          /** @type {number} */
          var ret = 3;
          /** @type {!Array} */
          var newNodeLists = [];
          /** @type {number} */
          var i = 3;
          /** @type {number} */
          var y = 0;
          for (; y < this._numSymbols.length; y++) {
            i = i + this._numSymbols[y];
          }
          var p = storage.getInt(i++);
          var vcount = storage.getInt(i++);
          i = i + 5 * vcount;
          /** @type {number} */
          var j = 0;
          for (; j < this._numSymbols.length; j++) {
            /** @type {!Array} */
            var itemNodeList = [];
            y = void 0;
            var jy = this._numSymbols[j];
            /** @type {number} */
            y = 0;
            for (; y < this._numAdjacentSymbols; y++) {
              itemNodeList.push(storage.getInt(i++));
            }
            /** @type {number} */
            y = 0;
            for (; y < jy; y++) {
              itemNodeList.push(storage.getInt(ret++));
            }
            /** @type {number} */
            y = 0;
            for (; y < this._numAdjacentSymbols; y++) {
              itemNodeList.push(storage.getInt(i++));
            }
            newNodeLists.push(itemNodeList);
          }
          /** @type {number} */
          ret = ret + 2;
          /** @type {!Array} */
          var plotsArray = [];
          /** @type {number} */
          j = 0;
          for (; j < vcount; j++) {
            var p = new PopdownPalette;
            p.pattern = storage.getInt(ret++);
            p.symbol = storage.getInt(ret++);
            p.count = storage.getInt(ret++);
            p.flags = storage.getInt(ret++);
            p.coins = storage.getInt(ret++);
            plotsArray.push(p);
          }
          this._dispatcher.dispatch(new exports.LogicEvent(new me(el, fixedWidth, r, newNodeLists, plotsArray, p)));
          break;
        case _aureliaPal.SPINEND:
          var question = storage.getBoolean(0);
          var readonly = storage.getInt(1);
          var dropzones = storage.getInt(2);
          var S = storage.getInt(3);
          var m = storage.getInt(4);
          this._dispatcher.dispatch(new exports.LogicEvent(new evt(question, readonly, dropzones, S, m)));
      }
    }, Main.prototype.onSpin = function(p) {
      /** @type {!Array} */
      var name = this._confirmCollect ? [String(p.coins), String(p.lines), String(p.denom), "1"] : [String(p.coins), String(p.lines), String(p.denom)];
      var ctx = new exports.Command(value.SPIN, name);
      this._dispatcher.dispatch(new exports.CommandEvent(exports.CommandEvent.LOGIC_OUT, ctx));
    }, Main;
  }(self.EventProcessor);
  !function(commands) {
    /** @type {string} */
    commands[commands.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    commands[commands.FAST = 1] = "FAST";
    /** @type {string} */
    commands[commands.ABORT = 2] = "ABORT";
  }(t || (t = {}));
  var Visibility;
  var resolve = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SimplicialMesh = function(stream) {
    /**
     * @param {!Object} key
     * @param {?} socket
     * @param {?} state
     * @param {?} index
     * @param {!Object} data
     * @param {?} secret
     * @param {!Object} salt
     * @param {?} count
     * @param {?} app
     * @param {?} def
     * @param {?} textures
     * @param {?} gl
     * @param {!Object} url
     * @param {!Object} dist
     * @return {?}
     */
    function init(key, socket, state, index, data, secret, salt, count, app, def, textures, gl, url, dist) {
      var self = stream.call(this, socket) || this;
      return self._dispatcher = key, self._settings = index, self._config = data, self._roundHandler = state, self._betSettings = secret, self._reelManager = salt, self._symbolManager = count, self._winController = def.winLogicController, self._bigWinController = def.bigWinController, self._featureManager = app, self._freeGameManager = url, self._freespinController = textures.freespinLogicController, self._gambleController = gl.gambleLogicController, self._idleManager = dist, self._roundsSequence = 
      [function(t) {
        return self.betHandler(t);
      }, function(canCreateDiscussions) {
        return self.gameHandler(canCreateDiscussions);
      }], self._betSequence = [function(data) {
        return self.betStartHandler(data);
      }, function(key) {
        return self.betProcessHandler(key);
      }, function(data) {
        return self.betStopHandler(data);
      }], self._spinSequence = [function(person) {
        return self.reelHandler(person);
      }, function(t) {
        return self.showHandler(t);
      }], self._reelSequence = [function(vChar) {
        return self.startReelHandler(vChar);
      }, function(t) {
        return self.processReelHandler(t);
      }, function(intoId) {
        return self.stopReelHandler(intoId);
      }], self._showSequence = [function(data) {
        return self.showIntroHandler(data);
      }, function(t) {
        return self.processShowHandler(t);
      }, function(vChar) {
        return self.showOutroHandler(vChar);
      }], self._gameSequence = [function(data) {
        return self.roundStartHandler(data);
      }, function(t) {
        return self.spinsHandler(t);
      }, function(t) {
        return self.gambleHandler(t);
      }, function(t) {
        return self.roundStopHandler(t);
      }], def.winCounter.setMaxValue(data.winCapValue), self._winCapHandler = def.winCounter, self._winController.setWinCapHandler(self._winCapHandler), socket.registerEvent(v.SPIN), socket.registerEvent(me.SPINANSWER), socket.registerEvent(InjectResult.FEATURESTART), socket.registerEvent(evt.SPINEND), socket.registerEvent(exports.SPFundsErrorEvent.SPFUNDSERROR), self;
    }
    return resolve(init, stream), init.prototype.roundsHandler = function(canCreateDiscussions) {
      canCreateDiscussions.execLoop(this._roundsSequence);
    }, init.prototype.gameHandler = function(canCreateDiscussions) {
      canCreateDiscussions.execSequence(this._gameSequence);
    }, init.prototype.betHandler = function(result) {
      result.execSequence(this._betSequence);
    }, init.prototype.betStartHandler = function(subgoal) {
      this._idleManager.start();
      this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.BET));
      subgoal.complete();
    }, init.prototype.betProcessHandler = function(state) {
      var data;
      for (; (data = this._input.read(state)) && data.type !== me.SPINANSWER && (this._input.processDelayedCommands(), this._input.next(), data.type !== v.SPIN);) {
      }
      this._input.processDelayedCommands();
      if (data) {
        state.complete();
      }
    }, init.prototype.betStopHandler = function(subgoal) {
      this._idleManager.stop();
      this._winController.stop();
      this._dispatcher.dispatch(new exports.ShowButtonsEvent(Tween.NONE));
      subgoal.complete();
    }, init.prototype.roundStartHandler = function(subgoal) {
      if (this._settings.adjustBet) {
        this._betSettings.adjustBet(this._roundHandler.balance);
      }
      var type = new entry(this._betSettings.coins, this._betSettings.lines, this._betSettings.denomination);
      this._dispatcher.dispatch(type);
      this._roundHandler.startRound(true);
      this._roundHandler.setWin(0);
      this._roundStartTime = self.SystemManager.getScheduler().getTime();
      subgoal.complete();
    }, init.prototype.spinsHandler = function(args) {
      var ArgsHandler = this;
      switch(args.state) {
        case 0:
          this._winController.reset();
          args.startHandler(function(element) {
            return ArgsHandler.spinHandler(element);
          });
          break;
        case 1:
          args.startHandler(function(element) {
            return ArgsHandler.freespinHandler(element);
          });
          break;
        case 2:
          if (this._freespinController.isActive) {
            args.startDelayMs(1000 / 24 * 1);
            args.next(0);
          } else {
            args.complete();
          }
      }
    }, init.prototype.spinHandler = function(suppressDisabledCheck) {
      this._dispatcher.dispatch(new panel);
      suppressDisabledCheck.execSequence(this._spinSequence);
    }, init.prototype.reelHandler = function(type) {
      type.execSequence(this._reelSequence);
    }, init.prototype.startReelHandler = function(t) {
      switch(t.state) {
        case 0:
          this._reelManager.start(t);
          break;
        default:
          t.complete();
      }
    }, init.prototype.processReelHandler = function(target) {
      var element;
      for (; element = this._input.read(target);) {
        switch(element.type) {
          case me.SPINANSWER:
            var p = element;
            this._winController.onSpinEvent(p);
            this._reelManager.onSpinAnswer(p);
            this._betSettings.setServerAnswerBetValues(p.coins, p.lines, p.denom);
            this._freespinController.onSpinEvent(p);
            this._input.next();
            break;
          case InjectResult.FEATURESTART:
            var i = this._featureManager.getReelFeature(element);
            return i ? (i.setWinCapHandler(this._winCapHandler), void i.process(target)) : void target.complete();
          case evt.SPINEND:
          case exports.SPFundsErrorEvent.SPFUNDSERROR:
            return void target.complete();
          default:
            this._input.next();
        }
      }
    }, init.prototype.stopReelHandler = function(scope) {
      switch(scope.state) {
        case 0:
          if (this._input.data.type === exports.SPFundsErrorEvent.SPFUNDSERROR) {
            this._reelManager.stop(t.ABORT, scope);
          } else {
            if (this._settings.fastPlay) {
              this._reelManager.stop(t.FAST, scope);
            } else {
              this._reelManager.stop(t.NORMAL, scope);
            }
          }
          break;
        default:
          scope.complete();
      }
    }, init.prototype.showHandler = function(prop) {
      prop.execSequence(this._showSequence);
    }, init.prototype.showIntroHandler = function(subgoal) {
      subgoal.complete();
    }, init.prototype.processShowHandler = function(target) {
      var e;
      for (; e = this._input.read(target);) {
        switch(e.type) {
          case InjectResult.FEATURESTART:
            var n = this._featureManager.getShowFeature(e);
            if (n) {
              return n.setWinCapHandler(this._winCapHandler), void n.process(target);
            }
            this._input.next();
            break;
          case evt.SPINEND:
          case exports.SPFundsErrorEvent.SPFUNDSERROR:
            return void target.complete();
          default:
            this._input.next();
        }
      }
    }, init.prototype.showOutroHandler = function(t) {
      var isOverride = this._freeGameManager.isActive && 0 == this._freeGameManager.freeGamesLeft;
      var app = this._config.disableGamble && !isOverride;
      /** @type {boolean} */
      var repeat = false;
      if (this._input.data.type === evt.SPINEND) {
        /** @type {boolean} */
        repeat = 0 === this._input.data.freeSpinsLeft && !this._freespinController.isActive;
      }
      /** @type {number} */
      var opts = 0;
      if (this._config.enforceRoundTime && repeat) {
        opts = this._roundStartTime + this._config.minRoundTime;
      }
      this._winController.start(t, repeat, app, this._freespinController.isActive, opts);
    }, init.prototype.freespinHandler = function(t) {
      if (this._input.data.type === evt.SPINEND) {
        this._freespinController.process(t, this._input.data);
      } else {
        t.complete();
      }
    }, init.prototype.gambleHandler = function(t) {
      if (this._input.data.type === evt.SPINEND) {
        var value = this._input.data;
        this._input.next();
        /** @type {number} */
        var fn = 0;
        if (this._config.enforceRoundTime) {
          fn = this._roundStartTime + this._config.minRoundTime;
        }
        var prev = this._freeGameManager.isActive;
        var o = this._freeGameManager.isActive && 0 == this._freeGameManager.freeGamesLeft;
        var Post = this._freeGameManager.isActive && !this._freeGameManager.isConsumed;
        this._gambleController.start(t, value, this._config.disableGamble, prev, !(o || Post), fn);
      } else {
        this._input.next();
        t.complete();
      }
    }, init.prototype.roundStopHandler = function(result) {
      this._roundHandler.endRound();
      result.complete();
    }, init;
  }(exports.LogicManager);
  var getUniqueSyncBlockId = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(type) {
    /** @type {string} */
    type[type.PAGE = 1] = "PAGE";
    /** @type {string} */
    type[type.VISIBLE = 2] = "VISIBLE";
    /** @type {string} */
    type[type.BETSETTINGS = 4] = "BETSETTINGS";
  }(Visibility || (Visibility = {}));
  var TextureAsset;
  var CallChain = function(id) {
    /**
     * @param {!Object} env
     * @param {string} node
     * @return {?}
     */
    function component(env, node) {
      var self = id.call(this) || this;
      return self._betSettings = env, self._betSettings.addListener(function(gl) {
        return self.onBetChanged(gl);
      }), self._numPages = node, self._page = 0, self._visible = false, exports.ResourceManager.getInstance().getMoneyFormatter().multipliers = self.getMultipliers(), self;
    }
    return getUniqueSyncBlockId(component, id), Object.defineProperty(component.prototype, "page", {
      get : function() {
        return this._page;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(component.prototype, "visible", {
      get : function() {
        return this._visible;
      },
      enumerable : true,
      configurable : true
    }), component.prototype.nextPage = function() {
      var lastPage = this._page;
      this._page++;
      if (this._page >= this._numPages) {
        /** @type {number} */
        this._page = 0;
      }
      if (lastPage !== this._page) {
        this.notify(Visibility.PAGE);
      }
    }, component.prototype.prevPage = function() {
      var lastPage = this._page;
      this._page--;
      if (this._page < 0) {
        /** @type {number} */
        this._page = this._numPages - 1;
      }
      if (lastPage !== this._page) {
        this.notify(Visibility.PAGE);
      }
    }, component.prototype.exit = function() {
      if (this._visible) {
        /** @type {boolean} */
        this._visible = false;
        this.notify(Visibility.VISIBLE);
      }
    }, component.prototype.toggleVisible = function() {
      /** @type {boolean} */
      this._visible = !this._visible;
      this.notify(Visibility.VISIBLE);
    }, component.prototype.onPaytable = function(page) {
      var p = this._page;
      if (page >= 0 && page < this._numPages) {
        if (p !== page) {
          /** @type {!Object} */
          this._page = page;
          this.notify(Visibility.PAGE);
        }
        if (!this._visible) {
          /** @type {boolean} */
          this._visible = true;
          this.notify(Visibility.VISIBLE);
        }
      } else {
        if (this._visible) {
          if (this._page + 1 >= this._numPages) {
            /** @type {boolean} */
            this._visible = false;
            this.notify(Visibility.VISIBLE);
            /** @type {number} */
            this._page = 0;
          } else {
            this._page++;
          }
          if (p !== this._page) {
            this.notify(Visibility.PAGE);
          }
        } else {
          /** @type {boolean} */
          this._visible = true;
          this.notify(Visibility.VISIBLE);
        }
      }
    }, component.prototype.getValues = function() {
      return [];
    }, component.prototype.getValuesByIndex = function(varNum) {
      return [];
    }, component.prototype.getOSPTValuesByIndex = function(i) {
      return this.getValuesByIndex(i);
    }, component.prototype.onIndicatorClick = function(event) {
      if (this._page !== event) {
        /** @type {!Object} */
        this._page = event;
        this.notify(Visibility.PAGE);
      }
    }, Object.defineProperty(component.prototype, "numPages", {
      get : function() {
        return this._numPages;
      },
      enumerable : true,
      configurable : true
    }), component.prototype.onBetChanged = function(gl) {
      if (gl.isChanged(WebGLConstants.COINS) || gl.isChanged(WebGLConstants.LINES) || gl.isChanged(WebGLConstants.DENOM) || gl.isChanged(WebGLConstants.DENOMINATIONS)) {
        this.notify(Visibility.BETSETTINGS);
      }
    }, component.prototype.getSymbolPayouts = function(demoItem) {
      var Math = exports.ResourceManager.getInstance().getCreditFormatter();
      var n = this._values || [];
      var coins = this._betSettings.coins;
      var imgNowHeight = demoItem ? exports.MoneyFormatterFlag.NONE : exports.MoneyFormatterFlag.NO_CURRENCY;
      /** @type {!Array} */
      var newNodeLists = [];
      /** @type {number} */
      var i = 0;
      var latex = n;
      for (; i < latex.length; i++) {
        var chunk = latex[i];
        if (chunk) {
          newNodeLists.push(chunk.map(function(magnitude) {
            return Math.formatCoinValue(coins * magnitude, imgNowHeight);
          }));
        } else {
          newNodeLists.push([]);
        }
      }
      return newNodeLists;
    }, component.prototype.getMultipliers = function() {
      return null;
    }, component;
  }(self.Model);
  var PropertyObj = function() {
    /**
     * @param {string} dt
     * @param {!Object} entity
     * @return {undefined}
     */
    function set(dt, entity) {
      /** @type {string} */
      this._reelIdx = dt;
      /** @type {!Object} */
      this._entity = entity;
      this._anim = this.getAnim();
      if (this._anim) {
        this._anim.play("hidden");
      }
      /** @type {boolean} */
      this._isShown = false;
    }
    return set.prototype.onReelStopping = function() {
    }, set.prototype.onReelStopped = function(aRoundNumber) {
      if (this._isShown) {
        this._anim.play("hide");
        /** @type {boolean} */
        this._isShown = false;
      }
    }, set.prototype.showSuspense = function() {
      if (!this._isShown) {
        this._anim.play("show");
        /** @type {boolean} */
        this._isShown = true;
      }
    }, set.prototype.getAnim = function() {
      return this._entity.getAnimation("reelSuspense" + this._reelIdx);
    }, set;
  }();
  var pow = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Node = function(e) {
    /**
     * @param {?} b
     * @param {?} n
     * @return {?}
     */
    function E(b, n) {
      var ct = e.call(this, b) || this;
      return ct._reel = n, ct;
    }
    return pow(E, e), Object.defineProperty(E.prototype, "reelIdx", {
      get : function() {
        return this._reel;
      },
      enumerable : true,
      configurable : true
    }), E.EXIT = "SYMBOLS_EXIT", E.ENTER = "SYMBOLS_ENTER", E;
  }(self.MegatonEvent);
  var extractCssFromDocument = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(Fonts) {
    /** @type {string} */
    Fonts[Fonts.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    Fonts[Fonts.SLOW = 1] = "SLOW";
    /** @type {string} */
    Fonts[Fonts.FAST = 2] = "FAST";
  }(TextureAsset || (TextureAsset = {}));
  var modes;
  !function(Fonts) {
    /** @type {string} */
    Fonts[Fonts.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    Fonts[Fonts.FAST = 1] = "FAST";
  }(modes || (modes = {}));
  var STATE;
  !function(State) {
    /** @type {string} */
    State[State.INIT = 0] = "INIT";
    /** @type {string} */
    State[State.STARTING = 1] = "STARTING";
    /** @type {string} */
    State[State.SPINNING = 2] = "SPINNING";
    /** @type {string} */
    State[State.STOPPING = 3] = "STOPPING";
    /** @type {string} */
    State[State.ENTERING = 4] = "ENTERING";
    /** @type {string} */
    State[State.BOUNCING = 5] = "BOUNCING";
    /** @type {string} */
    State[State.IDLE = 6] = "IDLE";
  }(STATE || (STATE = {}));
  var PrimitiveState;
  var CandidateElement = function(options) {
    /**
     * @param {string} key
     * @param {number} value
     * @param {number} ctx
     * @return {?}
     */
    function $(key, value, ctx) {
      if (void 0 === value) {
        /** @type {number} */
        value = 3;
      }
      if (void 0 === ctx) {
        /** @type {number} */
        ctx = value;
      }
      var that = options.call(this) || this;
      return that._id = key, that._enterOffset = value, that._exitOffset = ctx, that._changeEvent = new self.ChangeEvent(1), that._idleEvent = new State(State.IDLE, key), that._state = STATE.IDLE, that._speed = 0, that._startSpeed = 0, that._startDuration = 300, that._spinSpeed = 0.02, that._stopDuration = -1, that.setSpinMode(modes.NORMAL), that.setStopMode(TextureAsset.NORMAL), that;
    }
    return extractCssFromDocument($, options), Object.defineProperty($.prototype, "position", {
      get : function() {
        return this._pos;
      },
      set : function(p) {
        /** @type {number} */
        this._pos = p;
        this.dispatch(this._changeEvent);
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "speed", {
      get : function() {
        return this._speed;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "stopPos", {
      get : function() {
        return this._stopPos;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "state", {
      get : function() {
        return this._state;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "stopDuration", {
      get : function() {
        return this._stopDuration;
      },
      enumerable : true,
      configurable : true
    }), $.prototype.setPos = function(p) {
      /** @type {number} */
      this._pos = p;
    }, $.prototype.start = function() {
      var events = this;
      return this._startPos = this._pos, this._stopPos = void 0, this._exitEvent = new Node(Node.EXIT, this._id), this._startTask && this._startTask.complete(), this._startTime = -1, this._state = STATE.INIT, this._startTask = self.Task.createHandler(null), self.SystemManager.getScheduler().addUpdateListener(function() {
        return events.onStarting();
      }, this._startTask.ctx), this._startTask;
    }, $.prototype.setStartDelay = function(time) {
      this._startTime = self.SystemManager.getScheduler().getTime() + time;
    }, $.prototype.spin = function() {
      var t = this;
      if (this._state < STATE.SPINNING) {
        this._state = STATE.SPINNING;
      }
      if (this._spinCtx) {
        self.Context.complete(this._spinCtx);
        /** @type {null} */
        this._spinCtx = null;
      }
      if (this._startTask) {
        this._startTask.complete();
        /** @type {null} */
        this._startTask = null;
      }
      this._baseTime = self.SystemManager.getScheduler().getTime();
      this._spinCtx = self.Context.newContext(null, null, null);
      self.SystemManager.getScheduler().addUpdateListener(function() {
        return t.onSpinning();
      }, this._spinCtx);
    }, $.prototype.stop = function() {
      var t = this;
      if (this._state !== STATE.IDLE) {
        return this._stopTask && this._stopTask.complete(), this._enterEvent = new Node(Node.ENTER, this._id), this._stopTime = -1, this._stopPos = void 0, this._stopTask = self.Task.createHandler(null), self.SystemManager.getScheduler().addUpdateListener(function() {
          return t.onStopping();
        }, this._stopTask.ctx), this._stopTask;
      }
    }, $.prototype.setStopDelay = function(time) {
      this._stopTime = self.SystemManager.getScheduler().getTime() + time;
    }, $.prototype.setupStartParams = function(formatters, customFormatters) {
      /** @type {number} */
      this._startSpeed = formatters;
      /** @type {number} */
      this._startDuration = customFormatters;
    }, $.prototype.setupSpinParams = function(canCreateDiscussions) {
      /** @type {number} */
      this._spinSpeed = canCreateDiscussions;
    }, $.prototype.setupStopParams = function(t, xgh2, xgh3) {
      /** @type {number} */
      this._stopSpeed = t;
      /** @type {number} */
      this._stopDuration = xgh2;
      /** @type {number} */
      this._stopAdvance = xgh3;
    }, $.prototype.setupBounceParams = function(formatters, customFormatters) {
      /** @type {number} */
      this._bounceSpeed = formatters;
      /** @type {number} */
      this._bounceDuration = customFormatters;
    }, $.prototype.setStopMode = function(a) {
      switch(this._stopMode = a, a) {
        case TextureAsset.SLOW:
          /** @type {number} */
          this._stopDuration = 3000;
          /** @type {number} */
          this._stopAdvance = this._spinSpeed > 0.025 ? 26 : 18;
          /** @type {number} */
          this._stopSpeed = 0;
          /** @type {number} */
          this._bounceSpeed = 0;
          /** @type {number} */
          this._bounceDuration = 0;
          break;
        case TextureAsset.FAST:
          /** @type {number} */
          this._stopDuration = 300;
          /** @type {number} */
          this._stopAdvance = 5;
          /** @type {number} */
          this._stopSpeed = 0.0015;
          /** @type {number} */
          this._bounceSpeed = 0.0015;
          /** @type {number} */
          this._bounceDuration = 250;
          break;
        default:
          /** @type {number} */
          this._stopDuration = 300;
          /** @type {number} */
          this._stopAdvance = 5;
          /** @type {number} */
          this._stopSpeed = 0.0015;
          /** @type {number} */
          this._bounceSpeed = 0.0015;
          /** @type {number} */
          this._bounceDuration = 350;
      }
      if (!(this._state !== STATE.STOPPING && this._state !== STATE.ENTERING)) {
        /** @type {number} */
        this._duration = 0;
      }
    }, $.prototype.getStopMode = function() {
      return this._stopMode;
    }, $.prototype.setSpinMode = function(canCreateDiscussions) {
      switch(canCreateDiscussions) {
        case modes.FAST:
          /** @type {number} */
          this._spinSpeed = 0.03;
          break;
        default:
          /** @type {number} */
          this._spinSpeed = 0.02;
      }
    }, $.prototype.onStarting = function() {
      var t = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      var e = t - this._startTime;
      if (!(e < 0 || this._startTime < 0)) {
        if (this._state < STATE.STARTING) {
          if (this._spinCtx) {
            self.Context.complete(this._spinCtx);
            /** @type {null} */
            this._spinCtx = null;
          }
          this.dispatch(new State(State.STARTING, this._id));
          this._speed = this._startSpeed;
          this._duration = this._startDuration;
          this.setupMotion(this._spinSpeed, this._duration);
          this._state = STATE.STARTING;
        }
        if (this._state === STATE.STARTING && this.updatePos(e)) {
          this.dispatch(new State(State.STARTED, this._id));
          this.spin();
        }
      }
    }, $.prototype.onSpinning = function() {
      var groupsize = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      var dragstocreate = groupsize - this._baseTime;
      this._pos += this._spinSpeed * dragstocreate;
      this._baseTime = groupsize;
      this.dispatch(this._changeEvent);
      this.checkPosition();
    }, $.prototype.onStopping = function() {
      var el = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      var e = el - this._stopTime;
      if (!(e < 0 || this._stopTime < 0)) {
        if (this._state < STATE.STOPPING) {
          if (this._spinCtx) {
            self.Context.complete(this._spinCtx);
            /** @type {null} */
            this._spinCtx = null;
          }
          if (this._startTask) {
            this._startTask.complete();
            /** @type {null} */
            this._startTask = null;
          }
          this.dispatch(new State(State.STOPPING, this._id));
          this._stopPos = Math.ceil(this._pos) + this._stopAdvance;
          this._duration = this._stopDuration;
          this.setupMotion(this._stopSpeed, this._duration, this._stopPos);
          this._state = STATE.STOPPING;
        }
        if (!(this._state !== STATE.STOPPING && this._state !== STATE.ENTERING)) {
          if (this.updatePos(e)) {
            this.dispatch(new State(State.STOPPED, this._id));
            if (0 === this._bounceSpeed) {
              this.idle();
            } else {
              this.bounce();
            }
          }
        }
      }
    }, $.prototype.bounce = function(args) {
      var e = this;
      if (void 0 === args) {
        /** @type {null} */
        args = null;
      }
      if (this._state < STATE.BOUNCING) {
        this._state = STATE.BOUNCING;
      }
      if (this._stopTask) {
        this._stopTask.complete();
        /** @type {null} */
        this._stopTask = null;
      }
      if (this._spinCtx) {
        self.Context.complete(this._spinCtx);
        /** @type {null} */
        this._spinCtx = null;
      }
      this._baseTime = self.SystemManager.getScheduler().getTime();
      this._speed = this._bounceSpeed;
      this.setupMotion(0, this._bounceDuration, this._pos);
      if (args) {
        this._stopTask = args.startHandler();
        this._spinCtx = this._stopTask.ctx;
      } else {
        this._spinCtx = self.Context.newContext(null, null, null);
      }
      this.dispatch(new State(State.BOUNCING, this._id));
      this._state = STATE.BOUNCING;
      self.SystemManager.getScheduler().addUpdateListener(function() {
        return e.onBouncing();
      }, this._spinCtx);
    }, $.prototype.onBouncing = function() {
      var el = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      var e = el - this._baseTime;
      if (this._state === STATE.BOUNCING && this.updatePos(e)) {
        this.idle();
      }
    }, $.prototype.idle = function() {
      if (this._state !== STATE.IDLE) {
        this.dispatch(this._idleEvent);
      }
      this._state = STATE.IDLE;
      if (this._stopTask) {
        this._stopTask.complete();
        /** @type {null} */
        this._stopTask = null;
      }
      if (this._spinCtx) {
        self.Context.complete(this._spinCtx);
        /** @type {null} */
        this._spinCtx = null;
      }
    }, $.prototype.setupMotion = function(result, duration, removeSwitch) {
      /** @type {number} */
      this._duration = duration;
      if (void 0 === removeSwitch) {
        this._curve0 = this._pos;
        /** @type {number} */
        this._curve1 = this._speed * duration;
        /** @type {number} */
        this._curve2 = (result - this._speed) * duration / 2;
        /** @type {number} */
        this._curve3 = 0;
      } else {
        this._curve0 = this._pos;
        /** @type {number} */
        this._curve1 = this._speed * duration;
        /** @type {number} */
        this._curve2 = 3 * removeSwitch - 3 * this._pos - (result + 2 * this._speed) * duration;
        /** @type {number} */
        this._curve3 = -2 * removeSwitch + 2 * this._pos + (result + this._speed) * duration;
      }
    }, $.prototype.updatePos = function(width) {
      /** @type {number} */
      var e = this._duration > 0 ? width / this._duration : 1;
      return e > 1 && (e = 1), this._pos = ((this._curve3 * e + this._curve2) * e + this._curve1) * e + this._curve0, this._speed = ((3 * this._curve3 * e + 2 * this._curve2) * e + this._curve1) / this._duration, this.dispatch(this._changeEvent), this.checkPosition(), 1 === e;
    }, $.prototype.checkPosition = function() {
      if (this._exitEvent && this._pos - this._exitOffset > this._startPos) {
        this.dispatch(this._exitEvent);
        /** @type {null} */
        this._exitEvent = null;
      }
      if (this._enterEvent && this._pos + this._enterOffset > this._stopPos) {
        if (this._exitEvent) {
          this.dispatch(this._exitEvent);
          /** @type {null} */
          this._exitEvent = null;
        }
        this.dispatch(this._enterEvent);
        /** @type {null} */
        this._enterEvent = null;
        this._state = STATE.ENTERING;
      }
    }, $;
  }(self.EventDispatcher);
  var p = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(Status) {
    /** @type {string} */
    Status[Status.NONE = 0] = "NONE";
    /** @type {string} */
    Status[Status.STARTING = 1] = "STARTING";
    /** @type {string} */
    Status[Status.READY = 2] = "READY";
    /** @type {string} */
    Status[Status.SPINNING = 3] = "SPINNING";
    /** @type {string} */
    Status[Status.STOPPING = 4] = "STOPPING";
  }(PrimitiveState || (PrimitiveState = {}));
  var changes;
  var RrdGraphDesc = function(json) {
    /**
     * @param {!HTMLElement} c
     * @param {string} key
     * @param {!Object} value
     * @param {number} _
     * @param {!Object} p
     * @param {!Object} u
     * @param {!Object} name
     * @param {number} a
     * @return {?}
     */
    function init(c, key, value, _, p, u, name, a) {
      var options = json.call(this, c) || this;
      return options._freespinManager = key, options._spinners = value, options._reelData = _, options._startSequencer = p, options._stopSequencer = u, options._config = name, options._gameSettings = a, options._startSequence = [function(t) {
        return options.startIntroHandler(t);
      }, function(promises) {
        return options.startProcessHandler(promises);
      }, function(t) {
        return options.startOutroHandler(t);
      }], options._stopSequence = [function(data) {
        return options.stopIntroHandler(data);
      }, function(promises) {
        return options.stopProcessHandler(promises);
      }, function(data) {
        return options.stopOutroHandler(data);
      }], p.addListener(function() {
        return options.startNext();
      }), u.addListener(function() {
        return options.stopNext();
      }), c.addEventListener(v.CONTINUE, function() {
        return options.onContinue();
      }), c.addEventListener(me.SPINANSWER, function(t) {
        return options.onSpinAnswer(t);
      }), c.addEventListener(State.ALLSTOPPED, function(promises) {
        return options.onAllStopped(promises);
      }), options._starterTask = new self.Task, options._state = PrimitiveState.NONE, options;
    }
    return p(init, json), init.prototype.initReelListeners = function() {
      var active_pools = this;
      var resizedObj = this;
      /** @type {number} */
      var n = 0;
      for (; n < this._spinners.length; n++) {
        !function(i) {
          resizedObj._spinners[i].addEventListener(State.STOPPING, function() {
            return active_pools.onReelStopping(i);
          });
          resizedObj._spinners[i].addEventListener(State.BOUNCING, function() {
            return active_pools.onReelBouncing(i);
          });
          resizedObj._spinners[i].addEventListener(State.STOPPED, function() {
            return active_pools.onReelStopped(i);
          });
        }(n);
      }
    }, init.prototype.start = function(t) {
      this._startSequencer.onReelsStart();
      this._stopSequencer.onReelsStart();
      t.startSequence(this._startSequence);
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._spinners;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].setSpinMode(modes.NORMAL);
      }
      this._startTime = self.SystemManager.getScheduler().getTime();
    }, init.prototype.stop = function(buffer, fn) {
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._spinners;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].setStopMode(TextureAsset.NORMAL);
      }
      switch(buffer) {
        case t.FAST:
          this.fastStop(false);
          break;
        case t.ABORT:
          this.fastStop(true);
      }
      fn.startSequence(this._stopSequence);
    }, init.prototype.fastStop = function(longerPolling) {
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._reelData;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].suspenseHandler = void 0;
      }
      /** @type {number} */
      var i = 0;
      var example_numbers = this._spinners;
      for (; i < example_numbers.length; i++) {
        var a = example_numbers[i];
        a.setSpinMode(modes.NORMAL);
        a.setStopMode(longerPolling ? TextureAsset.FAST : TextureAsset.NORMAL);
      }
      this._stopSequencer.fastPlay();
      if (longerPolling) {
        this._stopSequencer.quickStop();
      }
    }, init.prototype.startIntroHandler = function(result) {
      this._state = PrimitiveState.STARTING;
      if (this._stopSequencer.quickStopEnabled) {
        this.showContinueButton();
      }
      result.complete();
    }, init.prototype.startProcessHandler = function(asyncFunction) {
      /** @type {!Array} */
      var thisArg = [this._startSequencer.start()];
      /** @type {number} */
      var t = 0;
      var otherCollidables = this._spinners;
      for (; t < otherCollidables.length; t++) {
        otherCollidables[t].start();
      }
      asyncFunction.execGroup(thisArg);
    }, init.prototype.startOutroHandler = function(result) {
      this._state = PrimitiveState.SPINNING;
      result.complete();
    }, init.prototype.startNext = function() {
      this._spinners[this._startSequencer.reelIdx].setStartDelay(this._startSequencer.delay);
    }, init.prototype.stopIntroHandler = function(subgoal) {
      this._state = PrimitiveState.STOPPING;
      subgoal.complete();
    }, init.prototype.stopProcessHandler = function(list) {
      /** @type {!Array} */
      var leftEdgeNodes = [this._stopSequencer.start()];
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._spinners;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        var layer = crossfilterable_layers[layer_i];
        leftEdgeNodes.push(layer.stop());
      }
      list.execGroup(leftEdgeNodes);
    }, init.prototype.stopOutroHandler = function(subgoal) {
      this._state = PrimitiveState.NONE;
      subgoal.complete();
    }, init.prototype.stopNext = function() {
      var method = this._stopSequencer.reelIdx;
      if (void 0 !== method) {
        var _ = this._spinners[method];
        _.setStopMode(this._stopSequencer.stopMode);
        _.setStopDelay(this._stopSequencer.delay);
        if (this._stopSequencer.quickStopEnabled) {
          this.showContinueButton();
        }
      }
    }, init.prototype.onReelStopping = function(aRoundNumber) {
    }, init.prototype.onReelBouncing = function(aRoundNumber) {
    }, init.prototype.onReelStopped = function(destIdentifier) {
      if (-1 === this._stopSequencer.getNextReelIdxOf(destIdentifier)) {
        this._dispatcher.dispatch(new State(State.ALLSTOPPED, -1));
      }
    }, init.prototype.onContinue = function() {
      if (this._state !== PrimitiveState.NONE) {
        this.hideContinueButton();
        if (this._startSequencer.quickStopEnabled && this._state === PrimitiveState.READY) {
          this.quickStart();
        }
        if (this._stopSequencer.quickStopEnabled) {
          this.quickStop();
        }
      }
    }, init.prototype.showContinueButton = function() {
      if (this._config.quickStop) {
        this._dispatcher.dispatch(new Tween(Tween.CONTINUE));
      }
    }, init.prototype.hideContinueButton = function() {
      this._dispatcher.dispatch(new Tween(Tween.NONE));
    }, init.prototype.cancelQuickStop = function() {
      this._stopSequencer.update();
    }, init.prototype.quickStart = function() {
      this._startSequencer.quickStop();
    }, init.prototype.quickStop = function() {
      this.hideContinueButton();
      this._stopSequencer.quickStop();
    }, init.prototype.onSpinAnswer = function(b) {
      this._stopSequencer.setSymbols(b.symbols);
      if (this._state === PrimitiveState.STARTING) {
        this._state = PrimitiveState.READY;
      }
    }, init.prototype.onAllStopped = function(value) {
      this._dispatcher.dispatch(new Tween(Tween.NONE));
    }, init;
  }(self.EventProcessor);
  var parseWriteArg = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var TOAST = function(t) {
    /**
     * @param {?} clock
     * @param {string} type
     * @return {?}
     */
    function Event(clock, type) {
      var array = t.call(this, clock) || this;
      return array._reelIdx = type, array;
    }
    return parseWriteArg(Event, t), Object.defineProperty(Event.prototype, "reelIdx", {
      get : function() {
        return this._reelIdx;
      },
      enumerable : true,
      configurable : true
    }), Event.SHOW = "REEL_SUSPENSE_SHOW", Event.HIDE = "REEL_SUSPENSE_HIDE", Event;
  }(self.MegatonEvent);
  var L = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var View = function(type) {
    /**
     * @param {?} offset
     * @param {!Object} context
     * @param {number} layer
     * @param {string} url
     * @param {?} ports
     * @param {?} options
     * @param {number} cb
     * @param {!Object} config
     * @return {?}
     */
    function bind(offset, context, layer, url, ports, options, cb, config) {
      if (void 0 === cb) {
        /** @type {number} */
        cb = 1;
      }
      var self = type.call(this, offset) || this;
      /** @type {boolean} */
      self.enableSymbolAnticipation = false;
      /** @type {!Object} */
      self._spinners = context;
      /** @type {number} */
      self._reelData = layer;
      /** @type {string} */
      self._views = url;
      self._suspenseViews = ports;
      self._stopReelSequencer = options;
      /** @type {number} */
      self._additionalAdjacentSymbolCnt = cb;
      /** @type {!Object} */
      self._config = config;
      var displaySeqLen = self._reelData.length;
      var that = this;
      /** @type {number} */
      var i = 0;
      for (; i < displaySeqLen; i++) {
        !function(i) {
          that._spinners[i].addEventListener(self.ChangeEvent.CHANGE, function() {
            return self.onSpinner(i);
          });
          that._spinners[i].addEventListener(Node.EXIT, function() {
            return self.onExit(i);
          });
          that._spinners[i].addEventListener(Node.ENTER, that.onEnter.bind(that, i));
          that._spinners[i].addEventListener(State.STARTED, function(retryReason) {
            return self.onStarted(retryReason);
          });
          that._spinners[i].addEventListener(State.STARTING, function(t) {
            return self.onStarting(t);
          });
          that._spinners[i].addEventListener(State.STOPPING, function(t) {
            return self.onStopping(t);
          });
          that._spinners[i].addEventListener(State.STOPPED, function(t) {
            return self.onStopped(t);
          });
          that._spinners[i].addEventListener(State.IDLE, function(f1) {
            return self.onIdle(f1);
          });
          that._reelData[i].addListener(function() {
            return self.onReelData(i, true);
          });
        }(i);
      }
      return self._symbols = new Array(self._reelData.length), self;
    }
    return L(bind, type), bind.prototype.onSpinner = function(i) {
      var msg = this._spinners[i];
      this._views[i].update(0, msg.position, msg.speed, this._reelData[i].alpha);
    }, bind.prototype.onReelData = function(i, enableCache) {
      if (void 0 === enableCache) {
        /** @type {boolean} */
        enableCache = true;
      }
      var activeFile = this._reelData[i];
      if (this._views[i].setSymbols(activeFile.stripSymbols, activeFile.stripSize), enableCache) {
        var msg = this._spinners[i];
        this._views[i].update(0, msg.position, msg.speed, this._reelData[i].alpha);
      }
    }, bind.prototype.setSymbols = function(name, value) {
      /** @type {!Array} */
      this._symbols[name] = value;
    }, bind.prototype.onSpinAnswer = function(other) {
      this._symbols = other.symbols;
    }, bind.prototype.onInitEnter = function(target, value, array) {
      var i;
      /** @type {!Array} */
      var options = [];
      var count = array.length;
      /** @type {number} */
      i = 2;
      for (; i > 0; i--) {
        options.push(this._reelData[target].getSymbol(-i).symbol);
      }
      /** @type {number} */
      i = 0;
      for (; i < count; i++) {
        options.push(array[i]);
      }
      /** @type {number} */
      i = 0;
      for (; i < 2; i++) {
        options.push(this._reelData[target].getSymbol(i + count).symbol);
      }
      /** @type {number} */
      var index = Math.floor((options.length - count) / 2);
      var a = index + this._config.numberOfAdjacentServerSymbols;
      /** @type {number} */
      var context = index + count - 1 - this._config.numberOfAdjacentServerSymbols;
      options = this.checkSymbols(options, target, a, context);
      this._reelData[target].onEnter(options, value);
    }, bind.prototype.onEnter = function(i, e) {
      var x;
      /** @type {!Array} */
      var data = [];
      var derivativesLength = this._symbols[i].length;
      var r = e >= 0 ? e : this._additionalAdjacentSymbolCnt < 2 ? 2 : this._additionalAdjacentSymbolCnt;
      x = r;
      for (; x > 0; x--) {
        data.push(this._reelData[i].getSymbol(-x).symbol);
      }
      /** @type {number} */
      x = 0;
      for (; x < derivativesLength; x++) {
        data.push(this._symbols[i][x]);
      }
      /** @type {number} */
      x = 0;
      for (; x < r; x++) {
        data.push(this._reelData[i].getSymbol(x + derivativesLength).symbol);
      }
      var d = this._config.numberOfRealServerSymbolsPerReel[i];
      /** @type {number} */
      var s = Math.floor((data.length - d) / 2);
      /** @type {number} */
      var h = s + d - 1;
      data = this.checkSymbols(data, i, s, h);
      this._reelData[i].onEnter(data, this._spinners[i].stopPos);
    }, bind.prototype.checkSymbols = function(val, from, to, value, days, temp) {
      if (void 0 === days) {
        /** @type {!Array} */
        days = [];
      }
      /** @type {number} */
      var animationDuration = to - this._config.numberOfAdjacentServerSymbols;
      var newValue = value + this._config.numberOfAdjacentServerSymbols;
      return this.checkSymbolsBelow(this.checkSymbolsAbove(val, from, animationDuration, days, temp), from, newValue, days, temp);
    }, bind.prototype.checkStackingSymbols = function(t, n, k, i, state_name) {
      var _t = this;
      var rec = t.slice(k, i + 1);
      return state_name.map(function(value) {
        if (rec[0] === value) {
          t[k - 1] = rec[2] === value ? _t.getRandomAllowedSymbolFromReel(n, [value]) : value;
          t[k - 2] = rec[1] === value ? _t.getRandomAllowedSymbolFromReel(n, [value]) : value;
        }
        if (rec[2] === value) {
          t[i + 1] = rec[0] === value ? _t.getRandomAllowedSymbolFromReel(n, [value]) : value;
          t[i + 2] = rec[1] === value ? _t.getRandomAllowedSymbolFromReel(n, [value]) : value;
        }
      }), t;
    }, bind.prototype.checkSymbolsAbove = function(colors, i, name, days, temp) {
      if (void 0 === days) {
        /** @type {!Array} */
        days = [];
      }
      if (void 0 === temp) {
        /** @type {!Array} */
        temp = [];
      }
      var cl = colors.length;
      var length = this._reelData[i].strip.length;
      /** @type {number} */
      var offset = cl - this._reelData[i].rows >> 1;
      /** @type {number} */
      var pos = length - this._spinners[i].stopPos % length;
      /** @type {number} */
      var count = pos + length - offset;
      /** @type {number} */
      var index = (count - 1) % length;
      /** @type {number} */
      var a = (count - 2) % length;
      /** @type {number} */
      var j = name - 1;
      for (; j >= 0; j--) {
        var temp = days.slice();
        /** @type {number} */
        var i = j + 1;
        for (; i <= j + 2; i++) {
          if (-1 === temp.indexOf(colors[i])) {
            temp.push(colors[i]);
          }
        }
        if (0 === j && a >= 0) {
          var tx = this._reelData[i].stripSymbols[a];
          if (tx) {
            temp.push(tx.getId());
          }
        }
        if (j < 2 && index >= 0) {
          var entry1 = this._reelData[i].stripSymbols[index];
          if (entry1) {
            temp.push(entry1.getId());
          }
        }
        if (temp.indexOf(colors[j]) > -1) {
          colors[j] = this.getRandomAllowedSymbolFromReel(i, temp);
        }
      }
      return colors;
    }, bind.prototype.checkSymbolsBelow = function(arr, i, path, name, o) {
      if (void 0 === name) {
        /** @type {!Array} */
        name = [];
      }
      if (void 0 === o) {
        /** @type {!Array} */
        o = [];
      }
      var length = arr.length;
      var s = this._reelData[i].strip.length;
      /** @type {number} */
      var y1 = length - this._reelData[i].rows >> 1;
      /** @type {number} */
      var t = s - this._spinners[i].stopPos % s;
      /** @type {number} */
      var val = t + s - y1;
      /** @type {number} */
      var type = (val + length) % s;
      /** @type {number} */
      var indexLookupKey = (val + length + 1) % s;
      var index = path + 1;
      for (; index < length; index++) {
        var b = name.slice();
        /** @type {number} */
        var x = index - 1;
        for (; x >= index - 2; x--) {
          if (-1 === o.indexOf(arr[x])) {
            b.push(arr[x]);
          }
        }
        if (index === length - 1 && indexLookupKey >= 0) {
          var currentIndex = this._reelData[i].stripSymbols[indexLookupKey];
          if (currentIndex) {
            b.push(currentIndex.getId());
          }
        }
        if (index >= length - 2 && type >= 0) {
          var tag = this._reelData[i].stripSymbols[type];
          if (tag) {
            b.push(tag.getId());
          }
        }
        if (b.indexOf(arr[index]) > -1) {
          arr[index] = this.getRandomAllowedSymbolFromReel(i, b);
        }
      }
      return arr;
    }, bind.prototype.getRandomAllowedSymbolFromReel = function(i, match) {
      return options.ArrayUtil.getFirstAllowed(options.ArrayUtil.shuffle(options.ArrayUtil.getUnique(this._reelData[i].strip)), match);
    }, bind.prototype.onExit = function(i) {
      this._reelData[i].onExit();
    }, bind.prototype.onStarted = function(err) {
      this._dispatcher.dispatch(err);
    }, bind.prototype.onStarting = function(type) {
      this._dispatcher.dispatch(type);
      this._reelData[type.reelIdx].onStarting();
    }, bind.prototype.onStopping = function(type) {
      this._dispatcher.dispatch(type);
      if (this._reelData[type.reelIdx].suspenseHandler) {
        this._suspenseViews[type.reelIdx].onReelStopping();
        this._dispatcher.dispatch(new TOAST(TOAST.HIDE, type.reelIdx));
      }
    }, bind.prototype.onStopped = function(type) {
      this._dispatcher.dispatch(type);
      var result = this._reelData[type.reelIdx];
      /** @type {number} */
      var name = 0;
      var courseSections = result.rows;
      for (; name < courseSections; name++) {
        result.getSymbol(name).land(this._spinners[type.reelIdx].getStopMode());
      }
      var o = this._stopReelSequencer.suspenseEnabled;
      var checked = this._stopReelSequencer.getNextReelIdxOf(type.reelIdx);
      if (checked > -1 && this._reelData[checked].suspenseHandler && o) {
        this.anticipateSymbols(type.reelIdx);
        this._suspenseViews[checked].showSuspense();
        this._stopReelSequencer.onSuspense();
        this._dispatcher.dispatch(new TOAST(TOAST.SHOW, checked));
      } else {
        this.hideAnticipationOnSymbols(type.reelIdx);
      }
      this._suspenseViews[type.reelIdx].onReelStopped(!o);
    }, bind.prototype.onIdle = function(handler) {
      this._spinners[handler.reelIdx].setPos(this._spinners[handler.reelIdx].position % this._reelData[handler.reelIdx].stripSize);
    }, bind.prototype.anticipateSymbols = function(checkboxesLength) {
      var related_node_ids = this._stopReelSequencer.getScatterSymbolsIDs();
      if (related_node_ids && this.enableSymbolAnticipation) {
        /** @type {number} */
        var DOCUMENT_ELEMENT = 0;
        for (; DOCUMENT_ELEMENT <= checkboxesLength; DOCUMENT_ELEMENT++) {
          var root = this._reelData[DOCUMENT_ELEMENT];
          /** @type {number} */
          var j = 0;
          for (; j < root.rows; j++) {
            var request = root.getSymbol(j);
            request.anticipate(related_node_ids.indexOf(request.getId()) >= 0);
          }
        }
      }
    }, bind.prototype.hideAnticipationOnSymbols = function(checkboxesLength) {
      /** @type {number} */
      var DOCUMENT_ELEMENT = 0;
      for (; DOCUMENT_ELEMENT <= checkboxesLength; DOCUMENT_ELEMENT++) {
        var root = this._reelData[DOCUMENT_ELEMENT];
        /** @type {number} */
        var j = 0;
        for (; j < root.rows; j++) {
          root.getSymbol(j).hideAnticipation();
        }
      }
    }, bind;
  }(self.EventProcessor);
  var getTranspilerModule = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PrefilledTX = function(babel) {
    /**
     * @param {string} key
     * @param {!Array} desc
     * @param {number} index
     * @param {?} name
     * @param {boolean} val
     * @return {?}
     */
    function self(key, desc, index, name, val) {
      var self = babel.call(this) || this;
      return self._reelIdx = key, self._rows = index, self._symbols = [], self._alpha = 1, self._pos = 0, self._numberOfRealServerSymbols = val, self.setStrip(desc, name), self;
    }
    return getTranspilerModule(self, babel), Object.defineProperty(self.prototype, "reelIdx", {
      get : function() {
        return this._reelIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "suspenseHandler", {
      get : function() {
        return this._suspenseHandler;
      },
      set : function(mymuted) {
        this._suspenseHandler = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "stripSymbols", {
      get : function() {
        return this._symbols;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "strip", {
      get : function() {
        return this._strip;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "stripSize", {
      get : function() {
        return this._strip.length;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "rows", {
      get : function() {
        return this._rows;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "alpha", {
      get : function() {
        return this._alpha;
      },
      set : function(value) {
        /** @type {number} */
        this._alpha = value;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "position", {
      set : function(kmn) {
        var mn = this._strip.length;
        /** @type {number} */
        var n = mn - 1;
        /** @type {number} */
        this._pos = n - (kmn + n) % mn;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.getSymbol = function(name) {
      return this._symbols[(name + this._pos + this._strip.length) % this._strip.length];
    }, self.prototype.setStrip = function(json, safe) {
      var l = this._strip ? this._strip.length : 0;
      var n = json ? json.length : 0;
      /** @type {number} */
      var mongodbFile = (this._values ? this._values.length : this._rows) - this._rows >> 1;
      /** @type {number} */
      var x = this._pos % l;
      /** @type {number} */
      this._pos = 0;
      /** @type {number} */
      var s = -mongodbFile;
      var e = this._rows + mongodbFile;
      var i = this._symbols.length;
      for (; i < n; i++) {
        this._symbols.push(safe.createSymbol());
      }
      if (l > 0) {
        /** @type {boolean} */
        var littleEndian = x >= this._values.length;
        /** @type {number} */
        i = e - 1;
        for (; i >= s; i--) {
          /** @type {number} */
          var j = littleEndian ? i : e + s - 1 - i;
          /** @type {number} */
          var name = (x + j + l) % l;
          this._symbols[(j + n) % n].copyFrom(this._symbols[name]);
        }
      }
      /** @type {!Array} */
      this._strip = json;
      i = n;
      for (; i < l; i++) {
        this._symbols[i].setSymbol(-1, this._reelIdx, -1);
      }
      /** @type {number} */
      i = 0;
      for (; i < n; i++) {
        /** @type {number} */
        var j = (i - s) % n + s;
        if (!(j >= s && j < e && 0 !== l)) {
          this._symbols[i].setSymbol(json[i], this._reelIdx, -1);
        }
      }
    }, self.prototype.onStarting = function() {
      if (this._values) {
        var length = this._strip.length;
        /** @type {number} */
        var gutterX = this._values.length - this._rows >> 1;
        /** @type {number} */
        var index = this._pos + length - gutterX;
        /** @type {number} */
        var i = 0;
        var count = this._values.length;
        for (; i < count; i++) {
          /** @type {number} */
          var name = (i + index) % length;
          this._symbols[name].stop();
        }
      }
    }, self.prototype.onEnter = function(value, position) {
      if (this._values && this.onExit(false), value) {
        var valueLength = value.length;
        var length = this._strip.length;
        /** @type {!Object} */
        this._values = value;
        /** @type {number} */
        this._pos = length - position % length;
        /** @type {number} */
        var gutterX = valueLength - this._rows >> 1;
        /** @type {number} */
        var index = this._pos + length - gutterX;
        /** @type {number} */
        var min_hour = Math.floor((valueLength - this._numberOfRealServerSymbols) / 2);
        /** @type {number} */
        var max_hour = min_hour + this._numberOfRealServerSymbols - 1;
        /** @type {number} */
        var i = 0;
        for (; i < valueLength; i++) {
          /** @type {number} */
          var name = (i + index) % length;
          /** @type {number} */
          var arg = i < min_hour || i > max_hour ? -1 : i;
          this._symbols[name].setSymbol(value[i], this._reelIdx, arg);
        }
        this.notify();
      }
    }, self.prototype.onExit = function(name) {
      if (void 0 === name && (name = true), this._values) {
        var length = this._strip.length;
        /** @type {number} */
        var i = this._values.length - this._rows >> 1;
        /** @type {number} */
        var offset = this._pos + length - i;
        /** @type {number} */
        var j = 0;
        var count = this._values.length;
        for (; j < count; j++) {
          /** @type {number} */
          var i = (j + offset) % length;
          this._symbols[i].setSymbol(this._strip[i], this._reelIdx, -1);
        }
      }
      /** @type {null} */
      this._values = null;
      if (name) {
        this.notify();
      }
    }, self;
  }(self.Model);
  var Date = function() {
    /**
     * @param {?} sqlBuf
     * @param {boolean} offset
     * @param {number} total
     * @param {number} elem
     * @param {!Array} size
     * @param {number} intSetSource
     * @return {undefined}
     */
    function update(sqlBuf, offset, total, elem, size, intSetSource) {
      this._xOffset = sqlBuf;
      /** @type {boolean} */
      this._yOffset = offset;
      /** @type {number} */
      this._xDiff = total;
      /** @type {number} */
      this._yDiff = elem;
      /** @type {!Array} */
      this._clipSize = size;
      /** @type {number} */
      this._clipOffset = intSetSource;
      /** @type {!Array} */
      this._transforms = [];
      /** @type {!Array} */
      this._displays = [];
      /** @type {!Array} */
      this._blurables = [];
    }
    return update.prototype.setSymbols = function(data, value) {
      this._transforms.length = data.length;
      /** @type {number} */
      this._size = value;
      /** @type {number} */
      var i = 0;
      var tldCount = data.length;
      for (; i < tldCount; i++) {
        this._transforms[i] = data[i].transform;
        this._displays[i] = data[i].display;
        this._blurables[i] = data[i].blurable;
      }
      /** @type {number} */
      this._clipSize = this._yDiff * value;
    }, update.prototype.update = function(tx, duration, percent, value) {
      /** @type {number} */
      tx = tx * this._xDiff;
      /** @type {number} */
      duration = duration * this._yDiff;
      /** @type {number} */
      var i = 0;
      var size = this._size;
      for (; i < size; i++) {
        /** @type {number} */
        var x = tx;
        /** @type {number} */
        var padding = (duration + this._clipOffset) % this._clipSize - this._clipOffset;
        var mat = this._displays[i];
        if (mat) {
          mat.setAlpha(value);
        }
        var sound = this._blurables[i];
        if (sound) {
          sound.setBlur(400 * percent);
        }
        var element = this._transforms[i];
        if (element) {
          element.setX(x + this._xOffset);
          element.setY(padding + this._yOffset);
        }
        tx = tx + this._xDiff;
        duration = duration + this._yDiff;
      }
    }, update;
  }();
  var quantize = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var mi = function(step) {
    /**
     * @param {number} data
     * @return {?}
     */
    function data(data) {
      var neuralnet = step.call(this) || this;
      return neuralnet._reelData = data, neuralnet._reelOrder = neuralnet.createReelOrder(), neuralnet._stopTimes = [], neuralnet.reset(), neuralnet;
    }
    return quantize(data, step), Object.defineProperty(data.prototype, "reelOrder", {
      get : function() {
        return this._reelOrder;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "reelIdx", {
      get : function() {
        return this._reelOrder[this._idx];
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "quickStopEnabled", {
      get : function() {
        return 0 === this._quickStop;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "suspenseEnabled", {
      get : function() {
        return this._quickStop < 2;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.getScatterSymbolsIDs = function() {
      return null;
    }, Object.defineProperty(data.prototype, "delay", {
      get : function() {
        /** @type {number} */
        var end = this._stopTimes[this._idx] - self.SystemManager.getScheduler().getTime();
        return end < 0 ? 0 : end;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "stopMode", {
      get : function() {
        return this._quickStop || this._fastPlay ? TextureAsset.FAST : TextureAsset.NORMAL;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.setSymbols = function(symbols) {
    }, data.prototype.onReelsStart = function() {
      this.reset();
      this._startTime = self.SystemManager.getScheduler().getTime();
    }, data.prototype.start = function() {
      var _this = this;
      return this.update(), this._waitTask = null, self.Task.createHandler(function(event) {
        return _this.startHandler(event);
      });
    }, data.prototype.onSuspense = function() {
    }, data.prototype.quickStop = function() {
      this._quickStop++;
      if (this._waitTask) {
        /** @type {number} */
        this._idx = -1;
        this.update();
        this._waitTask.cancelDelay();
      } else {
        this._idx--;
        this.notify();
      }
    }, data.prototype.fastPlay = function() {
      /** @type {boolean} */
      this._fastPlay = true;
    }, data.prototype.startHandler = function(config) {
      if (this._waitTask = null, this._idx > -1 && this.notify(), ++this._idx < this._stopTimes.length) {
        var PLAYER = self.SystemManager.getScheduler();
        var time = this._stopTimes[this._idx];
        var newTime = PLAYER.timeToTick(time);
        /** @type {number} */
        var timeout = newTime - PLAYER.timeToTick(PLAYER.getTime());
        this._waitTask = config.startDelay(timeout > 0 ? timeout : 0);
      } else {
        config.complete();
      }
    }, data.prototype.getNextReelIdxOf = function(host) {
      var e = this._reelOrder.indexOf(host) + 1;
      return this._reelOrder[e] ? this._reelOrder[e] : -1;
    }, data.prototype.reset = function() {
      /** @type {number} */
      this._idx = -1;
      /** @type {null} */
      this._waitTask = null;
      /** @type {number} */
      this._quickStop = 0;
      /** @type {boolean} */
      this._fastPlay = false;
      /** @type {number} */
      this._stopTimes.length = 0;
    }, data.prototype.createReelOrder = function() {
      /** @type {!Array} */
      var onSelectionCalls = [];
      /** @type {number} */
      var e = 0;
      for (; e < this._reelData.length; e++) {
        onSelectionCalls.push(e);
      }
      return onSelectionCalls;
    }, data;
  }(self.Model);
  var consolelog = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var tm = function(s) {
    /**
     * @param {?} type
     * @param {number} i
     * @param {number} err
     * @param {number} val
     * @return {?}
     */
    function e(type, i, err, val) {
      if (void 0 === err) {
        /** @type {number} */
        err = 0;
      }
      if (void 0 === val) {
        /** @type {number} */
        val = i / 2;
      }
      var self = s.call(this, type) || this;
      return self._diff = i, self._quickDiff = err, self._fastDiff = val, self;
    }
    return consolelog(e, s), e.prototype.update = function() {
      var id = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      var identity = 0;
      for (; identity < this._reelOrder.length; identity++) {
        id = id + (identity > 0 ? this._quickStop ? this._quickDiff : this._fastPlay ? this._fastDiff : this._diff : 0);
        this._stopTimes[identity] = id;
      }
    }, e;
  }(mi);
  var getUrlFromRegistry = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Connection = function(config) {
    /**
     * @param {?} value
     * @param {?} i
     * @param {?} name
     * @param {number} n
     * @param {number} msg
     * @return {?}
     */
    function e(value, i, name, n, msg) {
      var options = config.call(this, value, i, name) || this;
      /** @type {number} */
      options._minRoundTime = n;
      /** @type {number} */
      options._minQuickRoundTime = msg;
      /** @type {number} */
      options._reelStopTime = 300;
      /** @type {number} */
      options._quickReelStopTime = 300;
      /** @type {number} */
      var iy = options._minRoundTime - options._reelData.length * options._reelStopTime;
      /** @type {number} */
      var num = iy + options._reelData.length * options._quickReelStopTime;
      return options._minQuickRoundTime > num && (options._minQuickRoundTime = num), options;
    }
    return getUrlFromRegistry(e, config), e.prototype.update = function() {
      var id = this.getStopDelayOffset();
      /** @type {number} */
      var identity = 0;
      for (; identity < this._reelOrder.length; identity++) {
        id = id + (identity > 0 ? this._quickStop ? this._quickDiff : this._fastPlay ? this._fastDiff : this._diff : 0);
        this._stopTimes[identity] = id;
      }
    }, e.prototype.getStopDelayOffset = function() {
      var a = this._reelData.length;
      var e = this._quickStop ? this._quickDiff : this._fastPlay ? this._fastDiff : this._diff;
      var isvirus = this._quickStop || this._fastPlay ? this._quickReelStopTime : this._reelStopTime;
      var statusCheckDelay = e * (a - 1) + isvirus;
      /** @type {number} */
      var delta = self.SystemManager.getScheduler().getTime() - this._startTime;
      var prevPanelWidth = this._quickStop ? this._minQuickRoundTime : this._fastPlay ? this._minQuickRoundTime + e * (a - 1) : this._minRoundTime;
      /** @type {number} */
      var navRowCellPadding = Math.max(0, prevPanelWidth - delta - statusCheckDelay - 100);
      return Math.ceil(navRowCellPadding + self.SystemManager.getScheduler().getTime());
    }, e;
  }(tm);
  var $externalizeFunction = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Nlint = function(t) {
    /**
     * @param {!HTMLElement} i
     * @param {?} name
     * @return {?}
     */
    function v(i, name) {
      var recompile_shader = t.call(this, i) || this;
      return recompile_shader._reelManager = name, i.addEventListener(e.FREESPIN_START, function() {
        return recompile_shader.onFreespinStart();
      }), i.addEventListener(e.FREESPIN_END, function() {
        return recompile_shader.onFreespinEnd();
      }), recompile_shader;
    }
    return $externalizeFunction(v, t), v.prototype.onFreespinStart = function() {
      this._reelManager.selectReelStripSet(1);
    }, v.prototype.onFreespinEnd = function() {
      this._reelManager.selectReelStripSet(0);
    }, v;
  }(self.EventProcessor);
  var nameArgs = function() {
    /**
     * @param {?} val
     * @return {undefined}
     */
    function o(val) {
      this._symbolManager = val;
      this._reelSizes = this.createReelSizes();
      this._patterns = this.createPatterns();
      var valBbox = this.getSymbolAreaBound(val, this._reelSizes);
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = val.symbolAreas;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].setClip(valBbox);
      }
    }
    return o.prototype.getLines = function() {
      return this._patterns.length;
    }, Object.defineProperty(o.prototype, "patterns", {
      get : function() {
        return this._patterns;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "symbolManager", {
      get : function() {
        return this._symbolManager;
      },
      enumerable : true,
      configurable : true
    }), o.prototype.getNumReels = function() {
      return this._reelSizes.length;
    }, o.prototype.getNumRows = function(propertyName) {
      return this._reelSizes[propertyName];
    }, o.prototype.getPatternSymbols = function(index, length, mode) {
      /** @type {!Array} */
      var newNodeLists = [];
      var frame = this._patterns[index];
      /** @type {number} */
      var j = 0;
      for (; j < mode; j++) {
        newNodeLists.push(this.getSymbol(j + length, frame[j + length]));
      }
      return newNodeLists;
    }, o.prototype.getNonPatternSymbols = function(id, i, h) {
      /** @type {!Array} */
      var rowData = [];
      var elements = this._patterns[id];
      /** @type {number} */
      var j = 0;
      var imagesLen = this._reelSizes.length;
      for (; j < imagesLen; j++) {
        /** @type {number} */
        var row = 0;
        var col = this._reelSizes[j];
        for (; row < col; row++) {
          if (i > j || j >= i + h || elements[j] !== row) {
            rowData.push(this.getSymbol(j, row));
          }
        }
      }
      return rowData;
    }, o.prototype.getScatterSymbols = function(currencySymbol) {
      /** @type {!Array} */
      var transactionIDList = [];
      /** @type {number} */
      var i = 0;
      var inputsSize = this._reelSizes.length;
      for (; i < inputsSize; i++) {
        /** @type {number} */
        var props = 0;
        var quickCommandAction = this._reelSizes[i];
        for (; props < quickCommandAction; props++) {
          var data = this.getSymbol(i, props);
          if (data.symbol === currencySymbol) {
            transactionIDList.push(data);
          }
        }
      }
      return transactionIDList;
    }, o.prototype.getNonScatterSymbols = function(symbol) {
      /** @type {!Array} */
      var potentialShortlistLayers = [];
      /** @type {number} */
      var i = 0;
      var inputsSize = this._reelSizes.length;
      for (; i < inputsSize; i++) {
        /** @type {number} */
        var event = 0;
        var quickCommandAction = this._reelSizes[i];
        for (; event < quickCommandAction; event++) {
          var layer = this.getSymbol(i, event);
          if (layer.symbol !== symbol) {
            potentialShortlistLayers.push(layer);
          }
        }
      }
      return potentialShortlistLayers;
    }, o.prototype.setSymbols = function(symbols) {
      /** @type {number} */
      var s = 0;
      var length = symbols.length;
      for (; s < length; s++) {
        /** @type {number} */
        var value = 0;
        var startLevel = symbols[s].length;
        for (; value < startLevel; value++) {
          this.getSymbol(s, value).setSymbol(symbols[s][value], s, value);
        }
      }
    }, o.prototype.createReelSizes = function() {
      return [3, 3, 3, 3, 3];
    }, o.prototype.createPatterns = function() {
      return [[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2, 2, 2, 2, 2], [0, 1, 2, 1, 0], [2, 1, 0, 1, 2], [1, 0, 0, 0, 1], [1, 2, 2, 2, 1], [0, 0, 1, 2, 2], [2, 2, 1, 0, 0], [1, 2, 1, 0, 1], [1, 0, 1, 2, 1], [0, 1, 1, 1, 0], [2, 1, 1, 1, 2], [0, 1, 0, 1, 0], [2, 1, 2, 1, 2], [1, 1, 0, 1, 1], [1, 1, 2, 1, 1], [0, 0, 2, 0, 0], [2, 2, 0, 2, 2], [0, 2, 2, 2, 0]];
    }, Object.defineProperty(o.prototype, "x0", {
      get : function() {
        return 190;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "y0", {
      get : function() {
        return 235;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "xGap", {
      get : function() {
        return 9;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "yGap", {
      get : function() {
        return 0;
      },
      enumerable : true,
      configurable : true
    }), o.prototype.getSymbolPosition = function(pageNumber, event) {
      var x = this.x0 + (this._symbolManager.symbolWidth + this.xGap) * pageNumber;
      var y = this.y0 + (this._symbolManager.symbolHeight + this.yGap) * event;
      return new exports.Point(x, y);
    }, o.prototype.getSymbolAreaBound = function(s, p) {
      /** @type {number} */
      var map = this.x0 - s.symbolWidth / 2;
      /** @type {number} */
      var options = this.y0 - s.symbolHeight / 2;
      /** @type {number} */
      var width = p.length * s.symbolWidth + (p.length - 1) * this.xGap;
      /** @type {number} */
      var height = p[0] * s.symbolHeight + (p[0] - 1) * this.yGap;
      return new exports.Rectangle(map, options, width, height);
    }, o;
  }();
  var isTextKey = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var LogicGate = function(t) {
    /**
     * @param {string} x
     * @param {undefined} i
     * @param {undefined} element
     * @param {undefined} options
     * @param {undefined} key
     * @param {string} a
     * @return {?}
     */
    function e(x, i, element, options, key, a) {
      var me = t.call(this, i) || this;
      me._stripSets = me.createReelStripSets();
      var ld = me._reelSizes.length;
      /** @type {!Array} */
      me._reelData = [];
      /** @type {!Array} */
      me._spinners = [];
      /** @type {!Array} */
      var config = [];
      /** @type {!Array} */
      var data = [];
      /** @type {number} */
      var id = 0;
      for (; id < ld; id++) {
        var vm = me.createReelData(id, me._reelSizes[id], i, options.numberOfRealServerSymbolsPerReel[id]);
        me._reelData.push(vm);
        var locale = options.numberOfRealServerSymbolsPerReel[id] + options.numberOfAdjacentServerSymbols + me.additionalAdjacentSymbolCnt;
        var p = me.createReelSpinner(id, locale);
        me._spinners.push(p);
        var result = me.createReelView(id, vm.stripSymbols.length, i);
        result.setSymbols(vm.stripSymbols, vm.stripSymbols.length);
        config.push(result);
        var y = me.createReelSuspenseView(id, key);
        data.push(y);
      }
      var groups = me.createStartSequencer();
      var items = me.createStopSequencer(options, element);
      return me._reelLogicController = me.createReelLogicController(x, element, me._spinners, groups, items, options, a), me._reelPresentationController = me.createReelPresentationController(x, me._spinners, config, data, i, items, options), me._reelLogicController.initReelListeners(), me._reelFSController = me.createReelFSController(x), me.initReels(me._spinners), me;
    }
    return isTextKey(e, t), e.prototype.start = function(t) {
      this._reelLogicController.start(t);
    }, e.prototype.stop = function(callback, event) {
      this._reelLogicController.stop(callback, event);
    }, e.prototype.onSpinAnswer = function(b) {
      this._reelPresentationController.onSpinAnswer(b);
    }, e.prototype.getReelDataOf = function(ballNumber) {
      return this._reelData[ballNumber];
    }, e.prototype.getSymbol = function(name, type) {
      return this._reelData[name].getSymbol(type);
    }, e.prototype.setSymbol = function(s, value, symbol) {
      this._reelData[s].getSymbol(value).setSymbol(symbol, s, value);
      this._reelPresentationController.onReelData(s);
      this._reelPresentationController.onSpinner(s);
    }, e.prototype.createReelLogicController = function(url, label, value, name, object, stack, start) {
      return new RrdGraphDesc(url, label, value, this._reelData, name, object, stack, start);
    }, e.prototype.createReelPresentationController = function(name, template, data, tmpl, object, key, contentTmpl) {
      return new View(name, template, this._reelData, data, tmpl, key, this.additionalAdjacentSymbolCnt, contentTmpl);
    }, e.prototype.createReelFSController = function(dir) {
      return new Nlint(dir, this);
    }, e.prototype.createStartSequencer = function() {
      return new tm(this._reelData, 0);
    }, e.prototype.createStopSequencer = function(params, value_in_code) {
      return new Connection(this._reelData, 300, 0, params.minRoundTime, params.minQuickRoundTime);
    }, e.prototype.createReelStrips = function() {
      return [[0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]];
    }, e.prototype.createReelStripsFS = function() {
      return this.createReelStrips();
    }, e.prototype.createReelStripSets = function() {
      return [this.createReelStrips(), this.createReelStripsFS()];
    }, e.prototype.selectReelStripSet = function(i) {
      if (i >= this._stripSets.length) {
        /** @type {number} */
        i = this._stripSets.length - 1;
      }
      var e = this._stripSets[i];
      /** @type {number} */
      var j = 0;
      var c = e.length;
      for (; j < c; j++) {
        this._reelData[j].setStrip(e[j], this._symbolManager);
        this._reelPresentationController.onReelData(j, false);
        /** @type {number} */
        this._spinners[j].position = 0;
      }
    }, e.prototype.createReelData = function(index, side, value, playHandleAnimation) {
      return new PrefilledTX(index, this._stripSets[0][index], side, value, playHandleAnimation);
    }, e.prototype.createReelSpinner = function(element, contentDocument) {
      return new CandidateElement(element, contentDocument);
    }, e.prototype.createReelView = function(rawPads, i, options) {
      var x = this.x0 + (options.symbolWidth + this.xGap) * rawPads;
      var y0 = this.y0;
      var stepValue = options.symbolHeight + this.yGap;
      return new Date(x, y0, 0, stepValue, i * stepValue, 2 * stepValue);
    }, e.prototype.createReelSuspenseView = function(object, name) {
      return new PropertyObj(object, name);
    }, e.prototype.initReels = function(custom) {
      /** @type {number} */
      var value = 0;
      var minboxVal = this.getNumReels();
      for (; value < minboxVal; value++) {
        var children = this._reelData[value].strip;
        /** @type {number} */
        var offset = Math.floor(Math.random() * children.length);
        /** @type {number} */
        custom[value].position = offset;
        /** @type {!Array} */
        var ret = [];
        /** @type {number} */
        var i = 0;
        var newRows = this._reelData[value].rows;
        for (; i < newRows; i++) {
          ret.push(children[(i + offset) % children.length]);
        }
        this._reelPresentationController.onInitEnter(value, offset, ret);
        this._reelPresentationController.setSymbols(value, ret);
      }
    }, Object.defineProperty(e.prototype, "additionalAdjacentSymbolCnt", {
      get : function() {
        return 2;
      },
      enumerable : true,
      configurable : true
    }), e;
  }(nameArgs);
  var Texture = function() {
    /**
     * @param {!Object} texture
     * @param {undefined} x
     * @param {undefined} y
     * @param {string} width
     * @param {string} height
     * @return {undefined}
     */
    function set(texture, x, y, width, height) {
      var _this = this;
      /** @type {number} */
      this.width = 1;
      /** @type {number} */
      this.height = 1;
      /** @type {number} */
      this.minU = 0;
      /** @type {number} */
      this.minV = 0;
      /** @type {number} */
      this.maxU = 1;
      /** @type {number} */
      this.maxV = 1;
      /** @type {number} */
      this.cropMinX = 0;
      /** @type {number} */
      this.cropMinY = 0;
      /** @type {number} */
      this.cropMaxX = 1;
      /** @type {number} */
      this.cropMaxY = 1;
      /** @type {!Array} */
      this._listeners = [];
      /** @type {!Object} */
      this.baseTexture = texture;
      texture.addListener("webglrefresh", function() {
        return _this.callListeners();
      });
      /** @type {string} */
      this.width = width;
      /** @type {string} */
      this.height = height;
      /** @type {number} */
      this.minU = x / this.baseTexture.width;
      /** @type {number} */
      this.minV = y / this.baseTexture.height;
      /** @type {number} */
      this.maxU = (x + width) / this.baseTexture.width;
      /** @type {number} */
      this.maxV = (y + height) / this.baseTexture.height;
    }
    return set.prototype.getWebGLTexture = function(mipmap) {
      var renderer = exports.ResourceManager.getInstance().getSceneManager()._renderer;
      var fb = this.baseTexture._glTextures[renderer.CONTEXT_UID];
      return fb ? fb.texture : (renderer.textureManager.updateTexture(this.baseTexture), this.baseTexture.emit("webglrefresh"), fb = this.baseTexture._glTextures[renderer.CONTEXT_UID], fb ? fb.texture : null);
    }, set.prototype.checkForUpdate = function() {
    }, set.prototype.addWebGLRefreshListener = function(i) {
      this._listeners.push(i);
    }, set.prototype.callListeners = function() {
      /** @type {number} */
      var i = 0;
      var listeners = this._listeners;
      for (; i < listeners.length; i++) {
        (0, listeners[i])();
      }
    }, set;
  }();
  var Setting = function() {
    /**
     * @return {undefined}
     */
    function HTMLSectionBuilder() {
      /** @type {number} */
      this._currentColumnStart = 0;
      /** @type {number} */
      this._currentColumnEnd = 0;
      /** @type {number} */
      this._currentColumnHeight = 0;
    }
    return HTMLSectionBuilder.prototype.initializeRenderTexture = function(value, scale, data) {
      if (void 0 === scale) {
        /** @type {number} */
        scale = 2048;
      }
      if (void 0 === data) {
        /** @type {number} */
        data = 512;
      }
      this._atlasTexture = new core.RenderTexture(new core.BaseRenderTexture(scale, scale));
      this._helperTexture = new core.RenderTexture(new core.BaseRenderTexture(data, data));
      /** @type {boolean} */
      this._atlasTexture.baseTexture.premultipliedAlpha = true;
      /** @type {boolean} */
      this._helperTexture.baseTexture.premultipliedAlpha = true;
      /** @type {string} */
      this._renderer = value;
      this._atlasSprite = new core.Sprite(new core.Texture(this._atlasTexture.baseTexture));
      this._helperSprite = new core.Sprite(new core.Texture(this._helperTexture.baseTexture));
      /** @type {number} */
      this._currentColumnStart = 0;
      /** @type {number} */
      this._currentColumnEnd = 0;
      /** @type {number} */
      this._currentColumnHeight = 0;
      this._container = new core.Container;
    }, HTMLSectionBuilder.prototype.toHelper = function(position, theta, n, paths, delta) {
      /** @type {number} */
      this._atlasSprite.texture.frame.x = position;
      /** @type {number} */
      this._atlasSprite.texture.frame.y = theta;
      /** @type {number} */
      this._atlasSprite.texture.frame.width = n;
      /** @type {string} */
      this._atlasSprite.texture.frame.height = paths;
      this._atlasSprite.texture.frame = this._atlasSprite.texture.frame;
      /** @type {number} */
      this._atlasSprite.scale.y = delta;
      this._container.removeChildren();
      this._container.addChild(this._atlasSprite);
      this._renderer.render(this._container, this._helperTexture, true);
    }, HTMLSectionBuilder.prototype.toAtlas = function(position, theta, n, t, i) {
      /** @type {number} */
      this._helperSprite.texture.frame.x = 0;
      /** @type {number} */
      this._helperSprite.texture.frame.y = 0;
      /** @type {number} */
      this._helperSprite.texture.frame.width = n;
      /** @type {number} */
      this._helperSprite.texture.frame.height = t;
      this._helperSprite.texture.frame = this._helperSprite.texture.frame;
      /** @type {number} */
      this._helperSprite.x = position;
      /** @type {number} */
      this._helperSprite.y = theta;
      /** @type {number} */
      this._helperSprite.scale.y = i;
      this._container.removeChildren();
      this._container.addChild(this._helperSprite);
      this._renderer.render(this._container, this._atlasTexture, false);
    }, HTMLSectionBuilder.prototype.checkRowStep = function(instance, size) {
      if (this._currentColumnHeight + size > this._atlasTexture.height) {
        this._currentColumnStart = this._currentColumnEnd;
        this._currentColumnEnd += instance;
        /** @type {number} */
        this._currentColumnHeight = 0;
      }
    }, HTMLSectionBuilder.prototype.generateTextureArray = function(controller, e, h) {
      this.checkRowStep(e, h / 1 + 8);
      if (this._currentColumnEnd < this._currentColumnStart + e) {
        this._currentColumnEnd = this._currentColumnStart + e;
      }
      this._container.removeChildren();
      this._container.addChild(controller);
      this._renderer.render(this._container, this._helperTexture, true);
      this.toAtlas(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 1, 1);
      var funcInstance = new Texture(this._atlasTexture.baseTexture, this._currentColumnStart, this._currentColumnHeight, e, h / 1 + 8);
      this._currentColumnHeight += h / 1 + 8;
      this.checkRowStep(e, h / 2 + 8);
      this.toAtlas(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 1, 0.5);
      var textureFromURL = new Texture(this._atlasTexture.baseTexture, this._currentColumnStart, this._currentColumnHeight, e, h / 2 + 8);
      this.toHelper(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 2, 0.5);
      this._currentColumnHeight += h / 2 + 8;
      this.checkRowStep(e, h / 4 + 8);
      this.toAtlas(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 4, 1);
      var toggleSwitchForegroundTexture = new Texture(this._atlasTexture.baseTexture, this._currentColumnStart, this._currentColumnHeight, e, h / 4 + 8);
      this._currentColumnHeight += h / 4 + 8;
      this.checkRowStep(e, h / 8 + 8);
      this.toAtlas(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 4, 0.5);
      var videoControlsTexture = new Texture(this._atlasTexture.baseTexture, this._currentColumnStart, this._currentColumnHeight, e, h / 8 + 8);
      this.toHelper(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 8, 0.5);
      this._currentColumnHeight += h / 8 + 8;
      this.checkRowStep(e, h / 16 + 8);
      this.toAtlas(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 16, 1);
      var videoErrorTexture = new Texture(this._atlasTexture.baseTexture, this._currentColumnStart, this._currentColumnHeight, e, h / 16 + 8);
      this._currentColumnHeight += h / 16 + 8;
      this.checkRowStep(e, h / 32 + 8);
      this.toAtlas(this._currentColumnStart, this._currentColumnHeight + 4, e, h / 16, 0.5);
      var backTexture = new Texture(this._atlasTexture.baseTexture, this._currentColumnStart, this._currentColumnHeight, e, h / 32 + 8);
      return this._currentColumnHeight += h / 32 + 8, [funcInstance, textureFromURL, toggleSwitchForegroundTexture, videoControlsTexture, videoErrorTexture, backTexture];
    }, HTMLSectionBuilder;
  }();
  /** @type {string} */
  var maxheightnewvalue = "precision lowp float;\nattribute vec4 position;\nattribute vec4 color;\nattribute float scale;\nvarying vec4 v01;\nvarying vec4 v23;\nvarying vec2 texcoord;\nvarying vec4 v56;\nvarying vec4 v78;\nvarying vec4 tint;\nvoid main(void) {\nv01 = vec4(position.z, position.w - scale * 4.0, position.z, position.w - scale * 3.0);\nv23 = vec4(position.z, position.w - scale * 2.0, position.z, position.w - scale * 1.0);\ntexcoord = position.zw;\nv56 = vec4(position.z, position.w + scale * 1.0, position.z, position.w + scale * 2.0);\nv78 = vec4(position.z, position.w + scale * 3.0, position.z, position.w + scale * 4.0);\ntint = vec4(color.rgb * color.a, color.a);\ngl_Position = vec4(position.xy, 0.0, 1.0);\n}";
  /** @type {string} */
  var timemod = "precision lowp float;\nvarying vec4 v01;\nvarying vec4 v23;\nvarying vec2 texcoord;\nvarying vec4 v56;\nvarying vec4 v78;\nvarying vec4 tint;\nuniform sampler2D uSampler;\nvoid main() {\ngl_FragColor = texture2D(uSampler, v01.xy) * 0.05;\ngl_FragColor += texture2D(uSampler, v01.zw) * 0.10;\ngl_FragColor += texture2D(uSampler, v23.xy) * 0.12;\ngl_FragColor += texture2D(uSampler, v23.zw) * 0.15;\ngl_FragColor += texture2D(uSampler, texcoord) * 0.16;\ngl_FragColor += texture2D(uSampler, v56.xy) * 0.15;\ngl_FragColor += texture2D(uSampler, v56.zw) * 0.12;\ngl_FragColor += texture2D(uSampler, v78.xy) * 0.10;\ngl_FragColor += texture2D(uSampler, v78.zw) * 0.05;\ngl_FragColor *= tint;\n}";
  var map = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Renderer = function(t) {
    /**
     * @param {number} x
     * @return {?}
     */
    function self(x) {
      var self = t.call(this, 36 * x, 6 * x) || this;
      /** @type {number} */
      var n = 0;
      for (; n < x; ++n) {
        /** @type {number} */
        var i = 6 * n;
        /** @type {number} */
        var n2 = 4 * n;
        /** @type {number} */
        self.elements[i + 0] = n2 + 0;
        /** @type {number} */
        self.elements[i + 1] = n2 + 1;
        /** @type {number} */
        self.elements[i + 2] = n2 + 2;
        /** @type {number} */
        self.elements[i + 3] = n2 + 2;
        /** @type {number} */
        self.elements[i + 4] = n2 + 1;
        /** @type {number} */
        self.elements[i + 5] = n2 + 3;
      }
      return self;
    }
    return map(self, t), self.prototype.initialize = function(ctx) {
      this._vbo = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, this._vbo);
      ctx.bufferData(ctx.ARRAY_BUFFER, this.vertices, ctx.STREAM_DRAW);
      this._ebo = ctx.createBuffer();
      ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, this._ebo);
      ctx.bufferData(ctx.ELEMENT_ARRAY_BUFFER, this.elements, ctx.STATIC_DRAW);
    }, self.prototype.flush = function(ctx) {
      if (this.eCount) {
        ctx.bufferData(ctx.ARRAY_BUFFER, this.vertices.subarray(0, this.vCount), ctx.STREAM_DRAW);
        this._material.apply(ctx);
        ctx.drawElements(ctx.TRIANGLES, this.eCount, ctx.UNSIGNED_SHORT, 0);
        /** @type {number} */
        this.vCount = 0;
        /** @type {number} */
        this.eCount = 0;
      }
    }, self;
  }(options.BatchingWebGLRenderer);
  var RealTester = function(value) {
    /**
     * @param {?} ctx
     * @param {!Array} size
     * @param {!Object} texture
     * @return {?}
     */
    function render(ctx, size, texture) {
      if (void 0 === texture) {
        texture = render.getMaterial();
      }
      var self = value.call(this, ctx) || this;
      return self._textureIndex = 0, self._scale = 0, self._customWebGLRenderer = render.getRenderer(), self._material = texture, self._textures = size, self;
    }
    return map(render, value), render.initializeShader = function(newvalue, lineBuffering) {
      if (void 0 === newvalue) {
        /** @type {string} */
        newvalue = maxheightnewvalue;
      }
      if (void 0 === lineBuffering) {
        /** @type {string} */
        lineBuffering = timemod;
      }
      this._shader = new exports.CustomWebGLShader(newvalue, lineBuffering, [new exports.AttributeItem("position", exports.AttributeType.VEC4), new exports.AttributeItem("color", exports.AttributeType.VEC4), new exports.AttributeItem("scale", exports.AttributeType.FLOAT)]);
    }, render.initializeMaterial = function() {
      this._material = new exports.CustomWebGLMaterial(this._shader, []);
    }, render.initializeRenderer = function(config) {
      this._renderer = new Renderer(config);
    }, render.getMaterial = function() {
      return this._shader || this.initializeShader(), this._material || this.initializeMaterial(), this._material;
    }, render.getRenderer = function() {
      return this._renderer || this.initializeRenderer(256), this._renderer;
    }, render.prototype.renderWebGL = function(renderer) {
      var e = renderer.gl;
      if (this.visible) {
        var options = this._textures[this._textureIndex];
        if (options) {
          options.checkForUpdate();
          var x = this._customWebGLRenderer;
          x.start(e);
          if (x.vCount + 36 > x.vertices.length || this._material.blending !== this.blendMode) {
            x.flush(e);
            this._material.blending = this.blendMode;
          }
          this._material.texture = options;
          x.setMaterial(e, this._material);
          var m = renderer._activeRenderTarget.projectionMatrix;
          var pt = this.worldTransform;
          /** @type {number} */
          var a = pt.a * m.a + pt.b * m.c;
          /** @type {number} */
          var b = pt.a * m.b + pt.b * m.d;
          /** @type {number} */
          var c = pt.c * m.a + pt.d * m.c;
          /** @type {number} */
          var d = pt.c * m.b + pt.d * m.d;
          var videoId = pt.tx * m.a + pt.ty * m.c + m.tx;
          var pluginName = pt.tx * m.b + pt.ty * m.d + m.ty;
          var parentTfrm = this.parent ? this.parent.tint : 16777215;
          if (void 0 === parentTfrm) {
            /** @type {number} */
            parentTfrm = 16777215;
          }
          /** @type {number} */
          var valueName0 = (parentTfrm >> 16 & 255) / 255;
          /** @type {number} */
          var valueName1 = (parentTfrm >> 8 & 255) / 255;
          /** @type {number} */
          var drupal_method_val = (255 & parentTfrm) / 255;
          var tind = this.alpha;
          /** @type {number} */
          var b1 = -options.width / 2;
          /** @type {number} */
          var c1 = -options.height / 2;
          /** @type {number} */
          var a1 = options.width / 2;
          /** @type {number} */
          var d1 = options.height / 2;
          var obj = x.vertices;
          var jr_ = (x.elements, x.vCount);
          x.eCount;
          obj[jr_ + 0] = a * b1 + b * c1 + videoId;
          obj[jr_ + 1] = c * b1 + d * c1 + pluginName;
          obj[jr_ + 2] = options.minU;
          obj[jr_ + 3] = options.minV;
          /** @type {number} */
          obj[jr_ + 4] = valueName0;
          /** @type {number} */
          obj[jr_ + 5] = valueName1;
          /** @type {number} */
          obj[jr_ + 6] = drupal_method_val;
          obj[jr_ + 7] = tind;
          obj[jr_ + 8] = this._scale;
          obj[jr_ + 9] = a * a1 + b * c1 + videoId;
          obj[jr_ + 10] = c * a1 + d * c1 + pluginName;
          obj[jr_ + 11] = options.maxU;
          obj[jr_ + 12] = options.minV;
          /** @type {number} */
          obj[jr_ + 13] = valueName0;
          /** @type {number} */
          obj[jr_ + 14] = valueName1;
          /** @type {number} */
          obj[jr_ + 15] = drupal_method_val;
          obj[jr_ + 16] = tind;
          obj[jr_ + 17] = this._scale;
          obj[jr_ + 18] = a * b1 + b * d1 + videoId;
          obj[jr_ + 19] = c * b1 + d * d1 + pluginName;
          obj[jr_ + 20] = options.minU;
          obj[jr_ + 21] = options.maxV;
          /** @type {number} */
          obj[jr_ + 22] = valueName0;
          /** @type {number} */
          obj[jr_ + 23] = valueName1;
          /** @type {number} */
          obj[jr_ + 24] = drupal_method_val;
          obj[jr_ + 25] = tind;
          obj[jr_ + 26] = this._scale;
          obj[jr_ + 27] = a * a1 + b * d1 + videoId;
          obj[jr_ + 28] = c * a1 + d * d1 + pluginName;
          obj[jr_ + 29] = options.maxU;
          obj[jr_ + 30] = options.maxV;
          /** @type {number} */
          obj[jr_ + 31] = valueName0;
          /** @type {number} */
          obj[jr_ + 32] = valueName1;
          /** @type {number} */
          obj[jr_ + 33] = drupal_method_val;
          obj[jr_ + 34] = tind;
          obj[jr_ + 35] = this._scale;
          x.vCount += 36;
          x.eCount += 6;
        }
      }
      if (this.parent.children[this.parent.children.length - 1] === this) {
        exports.CustomWebGLRendererPixi.getInstance().start(e);
      }
    }, render.prototype.setBlur = function(v) {
      if (v < 1) {
        /** @type {number} */
        this._textureIndex = 0;
        /** @type {number} */
        this.scale.y = 1;
      } else {
        if (v < 2) {
          /** @type {number} */
          this._textureIndex = 1;
          /** @type {number} */
          this.scale.y = 2;
        } else {
          if (v < 4) {
            /** @type {number} */
            this._textureIndex = 2;
            /** @type {number} */
            this.scale.y = 4;
          } else {
            if (v < 8) {
              /** @type {number} */
              this._textureIndex = 3;
              /** @type {number} */
              this.scale.y = 8;
            } else {
              if (v < 16) {
                /** @type {number} */
                this._textureIndex = 4;
                /** @type {number} */
                this.scale.y = 16;
              } else {
                /** @type {number} */
                this._textureIndex = 5;
                /** @type {number} */
                this.scale.y = 32;
              }
            }
          }
        }
      }
      var texture = this._textures[this._textureIndex];
      /** @type {number} */
      this._scale = texture ? v / (this.scale.y * texture.baseTexture.height) : 0;
    }, render;
  }(exports.RenderNodePixi);
  var Condition = function() {
    /**
     * @param {string} renderer
     * @return {undefined}
     */
    function Camera(renderer) {
      var content = renderer ? renderer.renderObject : null;
      this._node = content && content.setBlur ? content : null;
    }
    return Camera.prototype.getType = function() {
      return exports.ComponentType.CUSTOM;
    }, Camera.prototype.bindNode = function(renderer, target) {
      var content = renderer ? renderer.renderObject : null;
      this._node = content && content.setBlur ? content : null;
      this.setBlur(this._blur);
    }, Camera.prototype.setBlur = function(v) {
      /** @type {number} */
      this._blur = v;
      if (this._node) {
        this._node.setBlur(v);
      }
    }, Camera.prototype.dispose = function() {
      /** @type {null} */
      this._node = null;
    }, Camera;
  }();
  var updateSiteUsage = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Task = function(size) {
    /**
     * @return {?}
     */
    function Value() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return updateSiteUsage(Value, size), Value.prototype.getCustomInterface = function(cond) {
      return cond == Value.BLURABLE ? new Condition(this) : null;
    }, Value.BLURABLE = "blurable", Value;
  }(exports.SceneNode);
  var getLimitedLinks = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var StateChange = function(h) {
    /**
     * @param {?} hash
     * @param {?} language
     * @param {?} context
     * @param {?} cb
     * @return {?}
     */
    function init(hash, language, context, cb) {
      var group = h.call(this, hash, language, context, cb) || this;
      /** @type {boolean} */
      group._texturesAvailable = false;
      group._blurManager = new Setting;
      /** @type {null} */
      group._symbolManager = null;
      group._bluredTextures = {};
      var value = group._renderer;
      return group._blurManager.initializeRenderTexture(value), group;
    }
    return getLimitedLinks(init, h), init.prototype.onContextRestored = function(p1__3354_SHARP_) {
      h.prototype.onContextRestored.call(this, p1__3354_SHARP_);
      if (this._texturesAvailable) {
        this.updateAllBluredTextures();
      }
    }, init.prototype.init = function(o, value) {
      var lens2 = this;
      /** @type {string} */
      this._symbolManager = value;
      o.addEventListener(exports.LoaderEvent.LOADER, function(f) {
        return lens2.onLoader(f);
      });
    }, init.prototype.create = function(name, options) {
      var description = this._library[name];
      var instance = new Task(name, description, this, options);
      return this._instances.push(instance), instance;
    }, init.prototype.createByLinkage = function(id) {
      if (id && id.length > 0 && "*" === id.charAt(0)) {
        var indexLookupKey = id.substr(1);
        if (!this._linkages[indexLookupKey]) {
          return null;
        }
        /** @type {string} */
        this._linkages[id] = id;
      }
      return h.prototype.createByLinkage.call(this, id);
    }, init.prototype.createRenderNode = function(s2, n, parentNode) {
      return n && n.length > 0 && "*" === n.charAt(0) ? this.createBluredRenderNode(s2, n) : h.prototype.createRenderNode.call(this, s2, n, parentNode);
    }, init.prototype.createBluredRenderNode = function(t, i) {
      if (!this._bluredTextures.hasOwnProperty(i)) {
        this.generateBluredTextures(i);
      }
      var fixture = this._bluredTextures[i];
      return fixture ? new RealTester(t, fixture) : null;
    }, init.prototype.generateBluredTextures = function(t) {
      var isCreditCard_1 = this._symbolManager.blurWidth;
      var charsetBitSize = this._symbolManager.blurHeight;
      /** @type {!Array} */
      this._bluredTextures[t] = [null, null, null, null, null, null];
      this.updateBluredTextures(t, isCreditCard_1, charsetBitSize);
    }, init.prototype.onLoader = function(primitive) {
      if (!(primitive.id !== exports.LoaderEventType.COMPLETE || this._texturesAvailable)) {
        /** @type {boolean} */
        this._texturesAvailable = true;
        this.updateAllBluredTextures();
      }
    }, init.prototype.updateBluredTextures = function(b, x, y) {
      if (this._texturesAvailable) {
        var comp = b.substr(1);
        var vm = this.createByLinkage(comp);
        if (vm) {
          vm.gotoFirst();
          var node = vm.renderObject;
          if (node) {
            /** @type {number} */
            node.position.x = x / 2;
            /** @type {number} */
            node.position.y = y / 2;
            node.setProperty(exports.ObjectProperty.BLENDMODE, 0);
            var clone = this._blurManager.generateTextureArray(node, x, y);
            /** @type {number} */
            var i = 0;
            for (; i < clone.length; ++i) {
              this._bluredTextures[b][i] = clone[i];
            }
          }
        }
      }
    }, init.prototype.updateAllBluredTextures = function() {
      this._blurManager.initializeRenderTexture(this._renderer);
      var isCreditCard_1 = this._symbolManager.blurWidth;
      var charsetBitSize = this._symbolManager.blurHeight;
      var n;
      for (n in this._bluredTextures) {
        if (this._bluredTextures.hasOwnProperty(n)) {
          this.updateBluredTextures(n, isCreditCard_1, charsetBitSize);
        }
      }
    }, init;
  }(exports.SceneManagerPixi);
  var showAddEntryDialog = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var UserMessageProcessor = function(values) {
    /**
     * @return {?}
     */
    function e() {
      return null !== values && values.apply(this, arguments) || this;
    }
    return showAddEntryDialog(e, values), e.prototype.createSceneManager = function(state, t, n) {
      return new StateChange(state, t, this._loader, n);
    }, e;
  }(exports.ResourceManager);
  var originalIPCMainOnce = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MapView = function(fn) {
    /**
     * @return {?}
     */
    function m2_C3_public() {
      var e = null !== fn && fn.apply(this, arguments) || this;
      return e._inFreeGame = false, e;
    }
    return originalIPCMainOnce(m2_C3_public, fn), Object.defineProperty(m2_C3_public.prototype, "balance", {
      get : function() {
        return this._roundStart && !this._inFreeGame ? this._currentFunds : this._balance;
      },
      enumerable : true,
      configurable : true
    }), m2_C3_public.prototype.onFreegame = function(canCreateDiscussions) {
      /** @type {boolean} */
      this._inFreeGame = canCreateDiscussions;
    }, m2_C3_public;
  }(exports.RoundHandler);
  var done = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ki = function(array) {
    /**
     * @param {!HTMLElement} self
     * @param {?} event
     * @return {?}
     */
    function result(self, event) {
      var n = array.call(this, self, event) || this;
      return self.addEventListener(events.START, event.onFreegame.bind(event, true)), self.addEventListener(events.END, event.onFreegame.bind(event, false)), n;
    }
    return done(result, array), result;
  }(exports.RoundController);
  !function(connection) {
    /** @type {string} */
    connection[connection.none = 0] = "none";
    /** @type {string} */
    connection[connection.highlighted = 1] = "highlighted";
    /** @type {string} */
    connection[connection.faded = 2] = "faded";
  }(changes || (changes = {}));
  var STATES;
  var k = function() {
    /**
     * @param {!Object} val
     * @return {undefined}
     */
    function self(val) {
      /** @type {string} */
      this._id = String(self._cnt++);
      /** @type {!Object} */
      this._manager = val;
      /** @type {number} */
      this._symbolId = 0;
      /** @type {number} */
      this._layer = 0;
      /** @type {null} */
      this._entity = null;
      /** @type {boolean} */
      this._winState = false;
      /** @type {boolean} */
      this._noWinState = false;
      this._anticipationState = changes.none;
    }
    return Object.defineProperty(self.prototype, "symbol", {
      get : function() {
        return this._symbolId;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.getId = function() {
      return this._symbolId;
    }, Object.defineProperty(self.prototype, "reelId", {
      get : function() {
        return this._reelId;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "transform", {
      get : function() {
        return this._entity ? this._entity.getTransform("") : null;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "display", {
      get : function() {
        return this._entity ? this._entity.getDisplay("") : null;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "blurable", {
      get : function() {
        return this._entity ? this._entity.getCustomInterface(Task.BLURABLE) : null;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.setSymbol = function(index, symbol, value) {
      if (void 0 === symbol) {
        symbol = this._reelId;
      }
      if (void 0 === value) {
        value = this._rowId;
      }
      /** @type {number} */
      this._symbolId = index;
      /** @type {number} */
      this._reelId = symbol;
      /** @type {number} */
      this._rowId = value;
      if (this._entity) {
        this._manager.layers[this._layer].remove(this._id);
        this._manager.dispose(this._entity);
      }
      this._entity = this.getEntity();
      this._layer = this.getLayer(index);
      this._manager.layers[this._layer].add(this._id, this._entity);
      this._animation = this._entity.getAnimation("");
      this.stop();
    }, self.prototype.clear = function() {
      this.setSymbol(-1, this._reelId, this._rowId);
    }, self.prototype.changeLayer = function(layer) {
      if (this._entity && this._layer !== layer) {
        this._manager.layers[this._layer].remove(this._id);
        /** @type {number} */
        this._layer = layer;
        this._manager.layers[this._layer].add(this._id, this._entity);
      }
    }, self.prototype.stop = function() {
      if (this._animation) {
        this._animation.play("stop", null, null, null);
      }
      /** @type {boolean} */
      this._noWinState = false;
    }, self.prototype.land = function(textureType) {
      if (void 0 === textureType) {
        textureType = TextureAsset.NORMAL;
      }
      if (this._animation && textureType === TextureAsset.NORMAL) {
        this._animation.play("land", null, null, null);
      }
    }, self.prototype.win = function(e, result) {
      this._animation.play("win");
      /** @type {boolean} */
      this._winState = true;
    }, self.prototype.hideWin = function(b, n) {
      /** @type {boolean} */
      this._winState = false;
    }, self.prototype.noWin = function(targets, i) {
      /** @type {boolean} */
      this._noWinState = true;
    }, self.prototype.hideNoWin = function(targets, i) {
      /** @type {boolean} */
      this._noWinState = false;
    }, self.prototype.anticipate = function(highlighted) {
      this._anticipationState = highlighted ? changes.highlighted : changes.faded;
    }, self.prototype.hideAnticipation = function() {
      this._anticipationState = changes.none;
    }, self.prototype.hide = function(shouldWait, keepCurrentModal) {
      this._animation.play("hide");
    }, self.prototype.idle = function() {
      return false;
    }, self.prototype.copyFrom = function(self, p) {
      if (void 0 === p) {
        /** @type {boolean} */
        p = false;
      }
      if (this !== self) {
        if (self) {
          this._manager.layers[this._layer].remove(this._id);
          if (this._entity) {
            this._manager.dispose(this._entity);
          }
          this._symbolId = self._symbolId;
          this._layer = self._layer;
          this._animation = self._animation;
          this._entity = self._entity;
          this._manager.layers[self._layer].remove(self._id);
          if (this._entity) {
            this._manager.layers[this._layer].add(this._id, this._entity);
          }
          /** @type {number} */
          self._symbolId = -1;
          /** @type {null} */
          self._entity = null;
          /** @type {null} */
          self._animation = null;
        }
        if (p) {
          this._rowId = self._rowId;
        }
      }
    }, self.prototype.getBoundingBox = function(key) {
      return this._entity ? this._entity.getGeometry("").getBoundingBox(key ? this._entity.getTransform(key) : null) : null;
    }, self.prototype.getEntity = function() {
      /** @type {boolean} */
      var t = this._rowId < 0;
      return this._manager.getNew((t ? "*Symbol" : "Symbol") + this._symbolId);
    }, self.prototype.getLayer = function(label) {
      return 0;
    }, self._cnt = 0, self;
  }();
  var BoxTimelineKeyframe = function() {
    /**
     * @return {undefined}
     */
    function MeteorDataManager() {
      this._data = {};
    }
    return MeteorDataManager.prototype.getNew = function(name) {
      var old = this._data[name];
      if (!old) {
        /** @type {!Array} */
        old = [];
        /** @type {!Array} */
        this._data[name] = old;
      }
      var calculatedMap = old.pop();
      return calculatedMap || exports.ResourceManager.getInstance().getEntityManager().create(name);
    }, MeteorDataManager.prototype.dispose = function(result) {
      var name = result.getResourceId();
      this._data[name].push(result);
    }, MeteorDataManager;
  }();
  var JarallaxStatic = function() {
    /**
     * @param {!HTMLElement} global
     * @return {undefined}
     */
    function init(global) {
      var host = this;
      global.addEventListener(e.FREESPIN_START, function() {
        return host.onFreespinStart();
      });
      global.addEventListener(e.FREESPIN_END, function() {
        return host.onFreespinEnd();
      });
      this._state = STATES.NORMAL;
    }
    return Object.defineProperty(init.prototype, "state", {
      get : function() {
        return this._state;
      },
      enumerable : true,
      configurable : true
    }), init.prototype.onFreespinStart = function() {
      this._state |= STATES.FREESPIN;
    }, init.prototype.onFreespinEnd = function() {
      this._state &= ~STATES.FREESPIN;
    }, init;
  }();
  !function(Fonts) {
    /** @type {string} */
    Fonts[Fonts.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    Fonts[Fonts.FREESPIN = 2] = "FREESPIN";
  }(STATES || (STATES = {}));
  var ValueMode;
  var ObservedInfo = function() {
    /**
     * @param {undefined} t
     * @param {?} i
     * @return {undefined}
     */
    function load(t, i) {
      this._symbolCache = new BoxTimelineKeyframe;
      this._symbolLayers = this.createSymbolLayers(i);
      this._symbolAreas = this.createSymbolAreas(i);
      this._symbolStateController = this.createSymbolStateController(t);
      exports.ResourceManager.getInstance().getSceneManager().init(t, this);
    }
    return Object.defineProperty(load.prototype, "symbolAreas", {
      get : function() {
        return this._symbolAreas;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "layers", {
      get : function() {
        return this._symbolLayers;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "state", {
      get : function() {
        return this._symbolStateController.state;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "symbolWidth", {
      get : function() {
        return 195;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "symbolHeight", {
      get : function() {
        return 195;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "blurWidth", {
      get : function() {
        return this.symbolWidth;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "blurHeight", {
      get : function() {
        return this.symbolHeight;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(load.prototype, "numSymbols", {
      get : function() {
        return 10;
      },
      enumerable : true,
      configurable : true
    }), load.prototype.createSymbol = function() {
      return new k(this);
    }, load.prototype.getNew = function(obj) {
      return this._symbolCache.getNew(obj);
    }, load.prototype.dispose = function(result) {
      this._symbolCache.dispose(result);
    }, load.prototype.createSymbolLayers = function(controller) {
      return [controller.getHierarchy("reelOverlay")];
    }, load.prototype.createSymbolAreas = function(p) {
      return [p.getDisplay("reelOverlay")];
    }, load.prototype.createSymbolStateController = function(selector) {
      return new JarallaxStatic(selector);
    }, load;
  }();
  var currentRenderer = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PxLoaderSound = function(helpers) {
    /**
     * @param {?} e
     * @param {undefined} id
     * @param {undefined} value
     * @param {undefined} m
     * @param {?} r
     * @return {?}
     */
    function data(e, id, value, m, r) {
      var s = helpers.call(this, e, value, r) || this;
      s._betSettings = id;
      var afterEvalSha = r.createExpandingWinCounterView();
      s.createWinInfoController(e, m.winCounter, id, afterEvalSha);
      var ex = s.createInfoView(r);
      if (ex) {
        s.createInfoController(e, m, value, s._betSettings, ex);
      }
      var t = s.createJackpotNotificationView(r, value, e);
      return s.createJackpotNotificationController(e, t, value), s.createQuickStopController(e), s;
    }
    return currentRenderer(data, helpers), data.prototype.createInfoView = function(searchElement) {
      return searchElement.createInfoView();
    }, data.prototype.createInfoController = function(e, character, line, func, seconds) {
    }, data.prototype.createWinInfoController = function(ar, fn, initialValue, callback) {
    }, data.prototype.createQuickStopController = function(schema) {
    }, data.prototype.createJackpotNotificationView = function(n, s, e) {
      return s.hasJackpots || s.hasGuaranteedJackpot ? n.createJackpotNotificationView(e, options.JackpotType.Mystery) : n.createJackpotNotificationView(e, options.JackpotType.InGame);
    }, data.prototype.createJackpotNotificationController = function(data, path, propertyName) {
      new options.JackpotNotificationController(data, path, propertyName);
    }, data;
  }(exports.CasinoUIManager);
  var _ = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Expression = function(m) {
    /**
     * @return {?}
     */
    function DefClass() {
      return null !== m && m.apply(this, arguments) || this;
    }
    return _(DefClass, m), DefClass.prototype.init = function(c) {
      m.prototype.init.call(this, c);
      /** @type {!Object} */
      this._config = c;
      var config = exports.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
    }, DefClass.prototype.createInfoView = function() {
      return null;
    }, DefClass.prototype.createFreeGameMessageView = function(conversionId, label, position, index, prop, extra, replace) {
      return void 0 === prop && (prop = "PlayConfirm"), void 0 === extra && (extra = false), void 0 === replace && (replace = false), null;
    }, DefClass.prototype.createFastPlayMessageView = function(onRejection, label, n, froot) {
      return void 0 === froot && (froot = "PlayConfirm"), null;
    }, DefClass.prototype.createMasterView = function() {
      return null;
    }, DefClass.prototype.createExpandingWinCounterView = function() {
      return null;
    }, DefClass.prototype.createInteractionFeedbackView = function(canCreateDiscussions) {
      return null;
    }, DefClass.prototype.createJackpotNotificationView = function(d, propertyName) {
      return propertyName === options.JackpotType.InGame ? new options.JackpotNotificationViewHTML : new options.JackpotNotificationViewCanvas;
    }, DefClass.prototype.createWinCounterScales = function() {
      return [0.5, 0.6, 0.7, 0.85, 1];
    }, DefClass;
  }(exports.CasinoViewFactory);
  var setImageAlignment = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var col = function(img) {
    /**
     * @return {?}
     */
    function $() {
      var e = img.call(this) || this;
      return e._wins = [], e;
    }
    return setImageAlignment($, img), Object.defineProperty($.prototype, "hasWins", {
      get : function() {
        return this._wins.length > 0;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "hasLineWin", {
      get : function() {
        /** @type {boolean} */
        var t = false;
        return this._wins.forEach(function(givenLocation) {
          if (givenLocation.line >= 0) {
            /** @type {boolean} */
            t = true;
          }
        }), t;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "wins", {
      get : function() {
        return this._wins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "showCount", {
      get : function() {
        return this._showCount;
      },
      set : function(mymuted) {
        /** @type {!Array} */
        this._showCount = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "freespinMode", {
      get : function() {
        return this._freespinMode;
      },
      set : function(mymuted) {
        this._freespinMode = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "bigWinMode", {
      get : function() {
        return this._bigWinMode;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._bigWinMode = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "quickViewMode", {
      get : function() {
        return this._quickViewMode;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._quickViewMode = mymuted;
        this.notify($.QUICK_VIEW_MODE);
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "noGambleMode", {
      get : function() {
        return this._noGambleMode;
      },
      set : function(mymuted) {
        /** @type {!Array} */
        this._noGambleMode = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "winData", {
      get : function() {
        return this._winIdx < 0 ? null : this._wins[this._winIdx];
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "totalWin", {
      get : function() {
        return this._totalWin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "totalWinToCount", {
      get : function() {
        return this._totalWinToCount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "hasNext", {
      get : function() {
        return this._winIdx < this._wins.length - 1;
      },
      enumerable : true,
      configurable : true
    }), $.prototype.clear = function() {
      /** @type {number} */
      this._showCount = -1;
      this.hideAll();
      /** @type {number} */
      this._wins.length = 0;
      /** @type {number} */
      this._totalWin = 0;
      /** @type {number} */
      this._totalWinToCount = 0;
      /** @type {number} */
      this._winIdx = -1;
      /** @type {boolean} */
      this._quickViewMode = false;
    }, $.prototype.addWin = function(statistics, playSceneClass) {
      if (void 0 === playSceneClass) {
        /** @type {boolean} */
        playSceneClass = true;
      }
      if (playSceneClass) {
        this._wins.push(statistics);
      }
      this._totalWin += statistics.coins;
      this._totalWinToCount += statistics.coinsToCount;
    }, $.prototype.next = function() {
      return ++this._winIdx >= this._wins.length && (this._winIdx = -1), this._winIdx >= 0;
    }, $.prototype.showAll = function() {
      /** @type {number} */
      this._winIdx = -1;
      for (; this.next();) {
        this.show();
      }
    }, $.prototype.hideAll = function() {
      /** @type {number} */
      this._winIdx = -1;
      for (; this.next();) {
        this.hide();
      }
    }, $.prototype.show = function() {
      this.dispatch(new ComponentEvent(ComponentEvent.WIN_SHOW, this.winData));
    }, $.prototype.hide = function() {
      this.dispatch(new ComponentEvent(ComponentEvent.WIN_HIDE, this.winData));
    }, $.QUICK_VIEW_MODE = 1, $;
  }(self.Model);
  var findHighest = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Receiver = function(t) {
    /**
     * @param {?} subType
     * @param {?} track
     * @param {?} elem
     * @param {number} name
     * @return {?}
     */
    function current(subType, track, elem, name) {
      if (void 0 === name) {
        /** @type {number} */
        name = 0;
      }
      var prototype = t.call(this, "IDS_MSG_CONGRATULATIONS", current.BIGWIN, "", track) || this;
      return prototype._coins = subType, prototype._coinsExt = name, prototype;
    }
    return findHighest(current, t), Object.defineProperty(current.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(current.prototype, "coinsExt", {
      get : function() {
        return this._coinsExt;
      },
      enumerable : true,
      configurable : true
    }), current.BIGWIN = "BIGWIN", current;
  }(exports.InfoEvent);
  var makeUnique = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ParseError = function(cb) {
    /**
     * @param {!HTMLElement} t
     * @param {string} l
     * @param {number} m
     * @param {!Element} val
     * @param {string} s
     * @return {?}
     */
    function set(t, l, m, val, s) {
      var self = cb.call(this, t) || this;
      return self._winCounter = l, self._winState = m, self._view = val, self._betSettings = s, self._delayTask = null, self._view.addListener(function(t) {
        return self.onViewEvent(t);
      }), t.addEventListener(exports.InfoEvent.INFO, function(t) {
        return self.onInfo(t);
      }), s.addListener(function(err) {
        return self.onBetSettings(err);
      }), l.addListener(function(t) {
        return self.onCounter(t);
      }), m.addListener(function(t) {
        return self.onWinState(t);
      }), self;
    }
    return makeUnique(set, cb), set.prototype.onViewEvent = function(type) {
      this._dispatcher.dispatch(type);
    }, set.prototype.onBetSettings = function(gl) {
      if (gl.isChanged(WebGLConstants.COINS) || gl.isChanged(WebGLConstants.LINES) || gl.isChanged(WebGLConstants.DENOM) || gl.isChanged(WebGLConstants.DENOMINATIONS)) {
        this._winCounter.bet = this._betSettings.betCoins;
      }
    }, set.prototype.onCounter = function(e) {
      if (e.type === self.ChangeEvent.CHANGE) {
        this._view.setValue(this._winCounter.value, this._winCounter.level);
      }
    }, set.prototype.onWinState = function(t) {
      if (t.type === self.ChangeEvent.CHANGE && t.isChanged(col.QUICK_VIEW_MODE) && this._winState.quickViewMode) {
        if (this._delayTask) {
          this._delayTask.cancelDelay();
          this._winCounter.stop();
          /** @type {null} */
          this._delayTask = null;
        } else {
          this._view.stopOutro();
        }
      }
    }, set.prototype.onInfo = function(options) {
      var siteManagementRef = this;
      switch(options.infoId) {
        case Receiver.BIGWIN:
          self.Task.createHandler(function(groups) {
            return siteManagementRef.showBigWinHandler(groups);
          }, options).start();
      }
    }, set.prototype.showBigWinHandler = function(value) {
      switch(value.state) {
        case 0:
          this._view.showIntro(value);
          break;
        case 1:
          this._winCounter.reset();
          var item = value.data;
          var hash = this._view.startAnim(item.duration);
          this._winCounter.addValue(item.coins, hash, item.coinsExt / this._betSettings.denomination);
          if (!this._winState.quickViewMode && hash > 0) {
            this._delayTask = value.startDelayMs(hash);
          } else {
            this._winCounter.stop();
            value.startDelayMs(0);
          }
          break;
        case 2:
          /** @type {null} */
          this._delayTask = null;
          this._view.stopAnim();
          this._view.showOutro(this._winState.quickViewMode, value);
          break;
        default:
          this._view.clear();
          value.complete();
      }
    }, set;
  }(self.EventProcessor);
  var _contains = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Scope = function(value) {
    /**
     * @param {!HTMLElement} scale
     * @param {!Object} e
     * @param {!Element} view
     * @param {?} data
     * @return {?}
     */
    function set(scale, e, view, data) {
      var me = value.call(this, scale) || this;
      return me._winState = e, me._view = view, me._betSettings = data, me._betSettings.addListener(function(target) {
        return me.onBetChange(target);
      }), me._betMode = false, e.addListener(function(t) {
        return me.onWinState(t);
      }), scale.addEventListener(ComponentEvent.WIN_SHOW, function() {
        return me.onWinShow();
      }), scale.addEventListener(ComponentEvent.WIN_HIDE, function() {
        return me.onWinHide();
      }), scale.addEventListener(node.GAMBLE_START, function(1) {
        return me.onGamble(1);
      }), me;
    }
    return _contains(set, value), set.prototype.onBetChange = function(gl) {
      if (gl.isChanged(WebGLConstants.COINS) || gl.isChanged(WebGLConstants.LINES) || gl.isChanged(WebGLConstants.DENOM) || gl.isChanged(WebGLConstants.DENOMINATIONS)) {
        this._view.onBetChange();
      }
    }, set.prototype.onGamble = function(isIron) {
      this._view.onGamble();
    }, set.prototype.onWinState = function(message) {
      if (message.type !== self.ChangeEvent.CHANGE) {
        this._dispatcher.dispatch(message);
      }
    }, set.prototype.onWinShow = function() {
      this._view.show(this._winState);
    }, set.prototype.onWinHide = function() {
      this._view.hide(this._winState);
    }, set;
  }(self.EventProcessor);
  var div = function() {
    /**
     * @param {number} board
     * @param {number} red
     * @param {number} green
     * @param {number} blue
     * @return {undefined}
     */
    function initialize(board, red, green, blue) {
      if (void 0 === board) {
        /** @type {number} */
        board = 1;
      }
      if (void 0 === red) {
        /** @type {number} */
        red = 1;
      }
      if (void 0 === green) {
        /** @type {number} */
        green = 1;
      }
      if (void 0 === blue) {
        /** @type {number} */
        blue = 1;
      }
      /** @type {number} */
      this.thickness = board;
      /** @type {number} */
      this.red = red;
      /** @type {number} */
      this.green = green;
      /** @type {number} */
      this.blue = blue;
    }
    return initialize;
  }();
  var fmt = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var gifGallery = function(t) {
    /**
     * @param {number} e
     * @param {number} fn
     * @param {number} delay
     * @param {number} size
     * @param {number} str
     * @param {number} pattern
     * @param {number} value
     * @param {number} objects
     * @param {number} callback
     * @param {number} delimiter
     * @param {number} object
     * @param {number} shape
     * @param {number} center
     * @param {number} radius
     * @param {number} index
     * @param {number} y
     * @param {number} g
     * @param {number} i
     * @param {number} H
     * @param {number} level
     * @param {number} app
     * @param {number} id
     * @param {number} idOther
     * @return {?}
     */
    function exports(e, fn, delay, size, str, pattern, value, objects, callback, delimiter, object, shape, center, radius, index, y, g, i, H, level, app, id, idOther) {
      if (void 0 === e) {
        /** @type {number} */
        e = 5;
      }
      if (void 0 === fn) {
        /** @type {number} */
        fn = 1;
      }
      if (void 0 === delay) {
        /** @type {number} */
        delay = 1;
      }
      if (void 0 === size) {
        /** @type {number} */
        size = 1;
      }
      if (void 0 === str) {
        /** @type {number} */
        str = 100;
      }
      if (void 0 === pattern) {
        /** @type {number} */
        pattern = 100;
      }
      if (void 0 === value) {
        /** @type {number} */
        value = 10;
      }
      if (void 0 === objects) {
        /** @type {number} */
        objects = 1;
      }
      if (void 0 === callback) {
        /** @type {number} */
        callback = 10;
      }
      if (void 0 === delimiter) {
        /** @type {number} */
        delimiter = 9;
      }
      if (void 0 === object) {
        /** @type {number} */
        object = 2;
      }
      if (void 0 === shape) {
        /** @type {number} */
        shape = 0.5;
      }
      if (void 0 === center) {
        /** @type {number} */
        center = 0;
      }
      if (void 0 === radius) {
        /** @type {number} */
        radius = 0;
      }
      if (void 0 === index) {
        /** @type {number} */
        index = 5;
      }
      if (void 0 === y) {
        /** @type {number} */
        y = 0.2;
      }
      if (void 0 === g) {
        /** @type {number} */
        g = 1;
      }
      if (void 0 === i) {
        /** @type {number} */
        i = 100;
      }
      if (void 0 === H) {
        /** @type {number} */
        H = 1;
      }
      if (void 0 === level) {
        /** @type {boolean} */
        level = true;
      }
      if (void 0 === app) {
        /** @type {number} */
        app = -100;
      }
      if (void 0 === id) {
        /** @type {number} */
        id = 200;
      }
      if (void 0 === idOther) {
        /** @type {number} */
        idOther = 1;
      }
      var options = t.call(this, e, fn, delay, size) || this;
      return options.frameWidth = str, options.frameHeight = pattern, options.padding = value, options.sharpness = objects, options.rounding = callback, options.shadowThickness = delimiter, options.shadowSharpness = object, options.shadowStrength = shape, options.shadowX = center, options.shadowY = radius, options.glowThickness = index, options.glowSharpness = y, options.glowStrength = g, options.shineThickness = i, options.shineStrength = H, options.currShinePos = 0, options.drawLines = level, options.minShinePos = 
      app, options.maxShinePos = id, options.shineSpeed = idOther, options;
    }
    return fmt(exports, t), exports;
  }(div);
  var Blob = function() {
    /**
     * @param {!Array} callback
     * @return {undefined}
     */
    function editor(callback) {
      /** @type {!Array} */
      this._points = callback;
      /** @type {boolean} */
      this._hidden = true;
    }
    return editor.prototype.getType = function() {
      return exports.ComponentType.CUSTOM;
    }, editor.prototype.bindNode = function(optional, freshLabels) {
    }, editor.prototype.dispose = function() {
    }, editor.prototype.show = function() {
      /** @type {boolean} */
      this._hidden = false;
    }, editor.prototype.hide = function() {
      /** @type {boolean} */
      this._hidden = true;
    }, editor.prototype.getPoints = function() {
      return this._points;
    }, editor.prototype.isHidden = function() {
      return this._hidden;
    }, editor;
  }();
  var RegExp = function() {
    /**
     * @param {number} x
     * @param {number} y
     * @param {number} data
     * @param {number} size
     * @param {number} initialValue
     * @param {number} value
     * @param {boolean} arg
     * @return {undefined}
     */
    function render(x, y, data, size, initialValue, value, arg) {
      if (void 0 === data) {
        /** @type {number} */
        data = x;
      }
      if (void 0 === size) {
        /** @type {number} */
        size = y;
      }
      if (void 0 === initialValue) {
        /** @type {number} */
        initialValue = 1;
      }
      if (void 0 === value) {
        /** @type {number} */
        value = 1;
      }
      if (void 0 === arg) {
        /** @type {boolean} */
        arg = false;
      }
      /** @type {number} */
      this.positionX = x;
      /** @type {number} */
      this.positionY = y;
      /** @type {number} */
      this.frameX = data;
      /** @type {number} */
      this.frameY = size;
      /** @type {number} */
      this.thickness = initialValue;
      /** @type {number} */
      this.alpha = value;
      /** @type {boolean} */
      this.hidden = arg;
    }
    return render;
  }();
  /** @type {string} */
  var html = "precision lowp float;\nattribute vec2 position;\nattribute vec2 vbegin;\nattribute vec2 vmiddle;\nattribute vec2 vframe;\nattribute vec2 vending;\nattribute vec2 vsize;\nattribute vec4 vcolor;\nvarying vec2 texcoord;\nvarying vec2 fbegin;\nvarying vec2 fmiddle;\nvarying vec2 fframe;\nvarying vec2 fending;\nvarying vec2 fsize;\nvarying vec4 fcolor;\nuniform mat3 transform;\nvoid main() {\ntexcoord = position;\nfbegin = vbegin;\nfmiddle = vmiddle;\nfframe = vframe;\nfending = vending;\nfsize = vsize;\nfcolor = vec4(vcolor.rgb * vcolor.a, vcolor.a);\ngl_Position = vec4(transform * vec3(position, 1.0), 1.0);\n}";
  /** @type {string} */
  var So = "precision lowp float;\nvarying vec2 texcoord;\nvarying vec2 fbegin;\nvarying vec2 fmiddle;\nvarying vec2 fframe;\nvarying vec2 fending;\nvarying vec2 fsize;\nvarying vec4 fcolor;\nuniform float thickness;\nuniform float sharpness;\nuniform float rounding;\nfloat borderDistance(vec2 rect, vec2 line) {\nrect = abs(rect) - fsize;\nfloat condition = min(sign(rect.x), 0.0) * min(sign(rect.y), 0.0);\nfloat returner = condition * max(rect.x, rect.y) + (1.0 - condition) * length(max(rect, 0.0)) - rounding * sign(fsize.x);\ncondition = max(sign(dot(line, fbegin)), 0.0);\nreturner = condition * min(abs(dot(line, vec2(fbegin.y, - fbegin.x))), returner) + (1.0 - condition) * returner;\ncondition = max(sign(dot(line, fending)), 0.0);\nreturner = condition * min(abs(dot(line, vec2(fending.y, - fending.x))), returner) + (1.0 - condition) * returner;\nreturn abs(returner);\n}\nvoid main() {\nvec2 position = texcoord - fmiddle;\nvec2 frame = texcoord - fframe;\nfloat value = max(min((thickness - borderDistance(frame, position)) * sharpness, 1.0), 0.0);\ngl_FragColor = value * fcolor;\n}";
  /** @type {string} */
  var mo = "precision highp float;\nvarying vec2 texcoord;\nvarying vec2 fbegin;\nvarying vec2 fmiddle;\nvarying vec2 fframe;\nvarying vec2 fending;\nvarying vec2 fsize;\nvarying vec4 fcolor;\nuniform float thickness;\nuniform float sharpness;\nuniform float rounding;\nuniform float shadowThickness;\nuniform float shadowSharpness;\nuniform float shadowStrength;\nuniform float shadowX;\nuniform float shadowY;\nuniform float glowThickness;\nuniform float glowSharpness;\nuniform float glowStrength;\nuniform float shineThickness;\nuniform float shineStrength;\nuniform float shinePosition;\nfloat borderDistance(vec2 rect, vec2 line) {\nrect = abs(rect) - fsize;\nfloat condition = min(sign(rect.x), 0.0) * min(sign(rect.y), 0.0);\nfloat returner = condition * max(rect.x, rect.y) + (1.0 - condition) * length(max(rect, 0.0)) - rounding * sign(fsize.x);\ncondition = max(sign(dot(line, fbegin)), 0.0);\nreturner = condition * min(abs(dot(line, vec2(fbegin.y, - fbegin.x))), returner) + (1.0 - condition) * returner;\ncondition = max(sign(dot(line, fending)), 0.0);\nreturner = condition * min(abs(dot(line, vec2(fending.y, - fending.x))), returner) + (1.0 - condition) * returner;\nreturn abs(returner);\n}\nvoid main() {\nvec2 position = texcoord - fmiddle;\nvec2 frame = texcoord - fframe;\nfloat distance = borderDistance(frame, position);\nfloat border = max(min((thickness - distance) * sharpness, 1.0), 0.0);\nfloat glow = max(min((glowThickness - distance) * glowSharpness, 1.0), 0.0) * glowStrength;\nfloat mask = max(min(rounding + thickness - length(max(abs(frame) - fsize, 0.0)) - 1.0, 1.0), 0.0);\nfloat shine = max(min(1.0 - abs(shinePosition - frame.x - frame.y) / shineThickness, 1.0), 0.0) * shineStrength * mask * sign(fsize.x);\nfloat value = border + glow * (1.0 + shine);\ndistance = borderDistance(frame - vec2(shadowX, shadowY), position - vec2(shadowX, shadowY));\nfloat shadow = max(min((shadowThickness - distance) * shadowSharpness, 1.0), 0.0) * shadowStrength;\ngl_FragColor = vec4(vec3(value), value + (1.0 - value) * shadow);\ngl_FragColor = vec4(gl_FragColor.rgb * gl_FragColor.a, gl_FragColor.a) * fcolor;\n}";
  /** @type {string} */
  var bo = "precision highp float;\nvarying vec2 texcoord;\nvarying vec2 fbegin;\nvarying vec2 fmiddle;\nvarying vec2 fframe;\nvarying vec2 fending;\nvarying vec2 fsize;\nvarying vec4 fcolor;\nuniform float thickness;\nuniform float sharpness;\nuniform float rounding;\nuniform float shadowThickness;\nuniform float shadowSharpness;\nuniform float shadowStrength;\nuniform float shadowX;\nuniform float shadowY;\nuniform float glowThickness;\nuniform float glowSharpness;\nuniform float glowStrength;\nuniform float shineThickness;\nuniform float shineStrength;\nuniform float shinePosition;\nfloat borderDistance(vec2 rect, vec2 line) {\nrect = abs(rect) - fsize;\nfloat condition = min(sign(rect.x), 0.0) * min(sign(rect.y), 0.0);\nfloat returner = condition * max(rect.x, rect.y) + (1.0 - condition) * length(max(rect, 0.0)) - rounding * sign(fsize.x);\ncondition = max(sign(dot(line, fbegin)), 0.0);\nreturner = condition * min(abs(dot(line, vec2(fbegin.y, - fbegin.x))), returner) + (1.0 - condition) * returner;\ncondition = max(sign(dot(line, fending)), 0.0);\nreturner = condition * min(abs(dot(line, vec2(fending.y, - fending.x))), returner) + (1.0 - condition) * returner;\nreturn abs(returner);\n}\nvoid main() {\nvec2 position = texcoord - fmiddle;\nvec2 frame = texcoord - fframe;\nfloat distance = borderDistance(frame, position);\nfloat border = max(min((thickness - distance) * sharpness, 1.0), 0.0);\nfloat glow = max(min((glowThickness - distance) * glowSharpness, 1.0), 0.0) * glowStrength;\nfloat shine = max(min(1.0 - abs(shinePosition - texcoord.x) / shineThickness, 1.0), 0.0) * shineStrength;\nfloat value = border + glow * (1.0 + shine);\ndistance = borderDistance(frame - vec2(shadowX, shadowY), position - vec2(shadowX, shadowY));\nfloat shadow = max(min((shadowThickness - distance) * shadowSharpness, 1.0), 0.0) * shadowStrength;\ngl_FragColor = vec4(vec3(value), value + (1.0 - value) * shadow);\ngl_FragColor = vec4(gl_FragColor.rgb * gl_FragColor.a, gl_FragColor.a) * fcolor;\n}";
  var next = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Response = function(User) {
    /**
     * @param {!Object} timeout
     * @param {string} step
     * @param {!Array} ctx
     * @return {?}
     */
    function render(timeout, step, ctx) {
      if (void 0 === ctx) {
        ctx = render.getMaterial();
      }
      var obj = User.call(this, render.getRenderer()) || this;
      /** @type {!Object} */
      obj._winlineBase = timeout;
      /** @type {string} */
      obj._winlineOptions = step;
      /** @type {!Array} */
      obj._material = ctx;
      var a = ctx.getUniform("transform");
      if (a && a.type === exports.UniformType.MAT3) {
        obj._matrix = a.value;
      }
      var js = ctx.getUniform("thickness");
      if (js && js.type === exports.UniformType.FLOAT) {
        obj._thickness = js.value;
      }
      var attrib = ctx.getUniform("sharpness");
      if (attrib && attrib.type === exports.UniformType.FLOAT) {
        obj._sharpness = attrib.value;
      }
      var model = ctx.getUniform("rounding");
      if (model && model.type === exports.UniformType.FLOAT) {
        obj._rounding = model.value;
      }
      var oldObj = ctx.getUniform("shadowThickness");
      if (oldObj && oldObj.type === exports.UniformType.FLOAT) {
        obj._shadowThickness = oldObj.value;
      }
      var subitem = ctx.getUniform("shadowSharpness");
      if (subitem && subitem.type === exports.UniformType.FLOAT) {
        obj._shadowSharpness = subitem.value;
      }
      var ast = ctx.getUniform("shadowStrength");
      if (ast && ast.type === exports.UniformType.FLOAT) {
        obj._shadowStrength = ast.value;
      }
      var info = ctx.getUniform("shadowX");
      if (info && info.type === exports.UniformType.FLOAT) {
        obj._shadowX = info.value;
      }
      var dd = ctx.getUniform("shadowY");
      if (dd && dd.type === exports.UniformType.FLOAT) {
        obj._shadowY = dd.value;
      }
      var opts = ctx.getUniform("glowThickness");
      if (opts && opts.type === exports.UniformType.FLOAT) {
        obj._glowThickness = opts.value;
      }
      var limit = ctx.getUniform("glowSharpness");
      if (limit && limit.type === exports.UniformType.FLOAT) {
        obj._glowSharpness = limit.value;
      }
      var ent = ctx.getUniform("glowStrength");
      if (ent && ent.type === exports.UniformType.FLOAT) {
        obj._glowStrength = ent.value;
      }
      var v = ctx.getUniform("shineThickness");
      if (v && v.type === exports.UniformType.FLOAT) {
        obj._shineThickness = v.value;
      }
      var geometry = ctx.getUniform("shineStrength");
      if (geometry && geometry.type === exports.UniformType.FLOAT) {
        obj._shineStrength = geometry.value;
      }
      var m = ctx.getUniform("shinePosition");
      return m && m.type === exports.UniformType.FLOAT && (obj._shinePosition = m.value), obj;
    }
    return next(render, User), render.initializeShader = function(raw, lineBuffering) {
      if (void 0 === raw) {
        /** @type {string} */
        raw = html;
      }
      if (void 0 === lineBuffering) {
        /** @type {string} */
        lineBuffering = mo;
      }
      this._shader = new exports.CustomWebGLShader(raw, lineBuffering, [new exports.AttributeItem("position", exports.AttributeType.VEC2), new exports.AttributeItem("vbegin", exports.AttributeType.VEC2), new exports.AttributeItem("vmiddle", exports.AttributeType.VEC2), new exports.AttributeItem("vframe", exports.AttributeType.VEC2), new exports.AttributeItem("vending", exports.AttributeType.VEC2), new exports.AttributeItem("vsize", exports.AttributeType.VEC2), new exports.AttributeItem("vcolor", 
      exports.AttributeType.VEC4)]);
    }, render.initializeMaterial = function() {
      this._material = new exports.CustomWebGLMaterial(this._shader, [new exports.UniformValue("transform", exports.UniformType.MAT3, [1, 0, 0, 0, 1, 0, 0, 0, 1]), new exports.UniformValue("thickness", exports.UniformType.FLOAT, [0]), new exports.UniformValue("sharpness", exports.UniformType.FLOAT, [0]), new exports.UniformValue("rounding", exports.UniformType.FLOAT, [0]), new exports.UniformValue("shadowThickness", exports.UniformType.FLOAT, [0]), new exports.UniformValue("shadowSharpness", exports.UniformType.FLOAT, 
      [0]), new exports.UniformValue("shadowStrength", exports.UniformType.FLOAT, [0]), new exports.UniformValue("shadowX", exports.UniformType.FLOAT, [0]), new exports.UniformValue("shadowY", exports.UniformType.FLOAT, [0]), new exports.UniformValue("glowThickness", exports.UniformType.FLOAT, [0]), new exports.UniformValue("glowSharpness", exports.UniformType.FLOAT, [0]), new exports.UniformValue("glowStrength", exports.UniformType.FLOAT, [0]), new exports.UniformValue("shineThickness", exports.UniformType.FLOAT, 
      [0]), new exports.UniformValue("shineStrength", exports.UniformType.FLOAT, [0]), new exports.UniformValue("shinePosition", exports.UniformType.FLOAT, [0])]);
      exports.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        render._material.compile(FeedbackTemplate);
      });
    }, render.initializeRenderer = function(partKeys) {
      this._renderer = new options.BatchingWebGLRenderer(160 * partKeys - 96, 18 * partKeys - 12);
      exports.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        render._renderer.compile(FeedbackTemplate);
      });
    }, render.getMaterial = function() {
      return this._shader || this.initializeShader(), this._material || this.initializeMaterial(), this._material;
    }, render.getRenderer = function() {
      return this._renderer || this.initializeRenderer(32), this._renderer;
    }, render.prototype.onRender = function(c, item, n, err, config, ctx, callback, delay, ct, cmp, date, css) {
      if (!this._winlineBase.isHidden()) {
        User.prototype.onRender.call(this, c, item, n, err, config, ctx, callback, delay, ct, cmp, date, css);
        var p = this._customWebGLRenderer;
        if (this._matrix && exports.CustomWebGLBase.compareMatrix(this._matrix, item, n, err, config, ctx, callback)) {
          p.flush(c);
          this._matrix[0] = item;
          this._matrix[1] = n;
          this._matrix[3] = err;
          this._matrix[4] = config;
          this._matrix[6] = ctx;
          this._matrix[7] = callback;
        }
        if (css !== this._material.blending) {
          p.flush(c);
          /** @type {boolean} */
          this._material.blending = css;
        }
        var items = this._winlineBase.getPoints();
        var options = this._winlineOptions;
        var count = items.length;
        if (p.vCount + 160 * count - 96 > p.vertices.length) {
          p.flush(c);
        }
        var thickness = options.thickness;
        var readOnlyFn = options.sharpness;
        var minSpacing = options.rounding;
        var pagesToDisplay = options.shadowThickness;
        var gen_code_options = options.shadowSharpness;
        var easeVal = options.shadowStrength;
        var offset = options.shadowX;
        var t = options.shadowY;
        var d3version = options.glowThickness;
        var nameVersions = options.glowSharpness;
        var injectAs = options.glowStrength;
        var progressClb = options.shineThickness;
        var includerReg = options.shineStrength;
        var lbit_id = options.currShinePos;
        if (this._thickness) {
          this._thickness[0] = thickness;
        }
        if (this._sharpness) {
          this._sharpness[0] = readOnlyFn;
        }
        if (this._rounding) {
          this._rounding[0] = minSpacing;
        }
        if (this._shadowThickness) {
          this._shadowThickness[0] = pagesToDisplay;
        }
        if (this._shadowSharpness) {
          this._shadowSharpness[0] = gen_code_options;
        }
        if (this._shadowStrength) {
          this._shadowStrength[0] = easeVal;
        }
        if (this._shadowX) {
          this._shadowX[0] = offset;
        }
        if (this._shadowY) {
          this._shadowY[0] = t;
        }
        if (this._glowThickness) {
          this._glowThickness[0] = d3version;
        }
        if (this._glowSharpness) {
          this._glowSharpness[0] = nameVersions;
        }
        if (this._glowStrength) {
          this._glowStrength[0] = injectAs;
        }
        if (this._shineThickness) {
          this._shineThickness[0] = progressClb;
        }
        if (this._shineStrength) {
          this._shineStrength[0] = includerReg;
        }
        if (this._shinePosition) {
          this._shinePosition[0] = lbit_id;
        }
        p.setMaterial(c, this._material);
        var rightRun = options.frameWidth;
        var frameHeight = options.frameHeight;
        var totalWidth = options.padding;
        var st = p.vertices;
        var o = p.elements;
        var x = p.vCount;
        var y = p.eCount;
        var i = options.red;
        var green = options.green;
        var blue = options.blue;
        /** @type {number} */
        var index = 0;
        for (; index < count; ++index) {
          if (!items[index].hidden) {
            var thickness = items[index].thickness;
            if (0 !== thickness || options.drawLines) {
              var X = items[index].positionX;
              var Y = items[index].positionY;
              /** @type {number} */
              var relBubbleX = items[index].frameX * thickness + X * (1 - thickness);
              /** @type {number} */
              var auto = items[index].frameY * thickness + Y * (1 - thickness);
              /** @type {number} */
              st[x + 0] = st[x + 32] = Math.min(X, relBubbleX - thickness * rightRun - minSpacing) - Math.max(options.thickness, options.glowThickness, options.shadowThickness - offset) - totalWidth;
              st[x + 16] = st[x + 48] = Math.max(X, relBubbleX + thickness * rightRun + minSpacing) + Math.max(options.thickness, options.glowThickness, options.shadowThickness + offset) + totalWidth;
              /** @type {number} */
              st[x + 1] = st[x + 17] = Math.min(Y, Y - thickness * frameHeight - minSpacing) - Math.max(options.thickness, options.glowThickness, options.shadowThickness - t) - totalWidth;
              st[x + 33] = st[x + 49] = Math.max(Y, Y + thickness * frameHeight + minSpacing) + Math.max(options.thickness, options.glowThickness, options.shadowThickness + t) + totalWidth;
              /** @type {number} */
              var lightI = 0;
              /** @type {number} */
              var lightJ = 0;
              /** @type {number} */
              var intervalMs = 1;
              if (index > 0 && !items[index - 1].hidden && options.drawLines) {
                /** @type {number} */
                lightI = items[index - 1].positionX - X;
                /** @type {number} */
                lightJ = items[index - 1].positionY - Y;
                /** @type {number} */
                intervalMs = Math.sqrt(lightI * lightI + lightJ * lightJ);
              }
              /** @type {number} */
              st[x + 2] = st[x + 18] = st[x + 34] = st[x + 50] = lightI / intervalMs;
              /** @type {number} */
              st[x + 3] = st[x + 19] = st[x + 35] = st[x + 51] = lightJ / intervalMs;
              st[x + 4] = st[x + 20] = st[x + 36] = st[x + 52] = X;
              st[x + 5] = st[x + 21] = st[x + 37] = st[x + 53] = Y;
              /** @type {number} */
              st[x + 6] = st[x + 22] = st[x + 38] = st[x + 54] = relBubbleX;
              /** @type {number} */
              st[x + 7] = st[x + 23] = st[x + 39] = st[x + 55] = auto;
              /** @type {number} */
              lightI = 0;
              /** @type {number} */
              lightJ = 0;
              /** @type {number} */
              intervalMs = 1;
              if (index < count - 1 && !items[index + 1].hidden && options.drawLines) {
                /** @type {number} */
                lightI = items[index + 1].positionX - X;
                /** @type {number} */
                lightJ = items[index + 1].positionY - Y;
                /** @type {number} */
                intervalMs = Math.sqrt(lightI * lightI + lightJ * lightJ);
              }
              /** @type {number} */
              st[x + 8] = st[x + 24] = st[x + 40] = st[x + 56] = lightI / intervalMs;
              /** @type {number} */
              st[x + 9] = st[x + 25] = st[x + 41] = st[x + 57] = lightJ / intervalMs;
              /** @type {number} */
              st[x + 10] = st[x + 26] = st[x + 42] = st[x + 58] = thickness * rightRun;
              /** @type {number} */
              st[x + 11] = st[x + 27] = st[x + 43] = st[x + 59] = thickness * frameHeight;
              /** @type {number} */
              st[x + 12] = st[x + 28] = st[x + 44] = st[x + 60] = i * delay;
              /** @type {number} */
              st[x + 13] = st[x + 29] = st[x + 45] = st[x + 61] = green * ct;
              /** @type {number} */
              st[x + 14] = st[x + 30] = st[x + 46] = st[x + 62] = blue * cmp;
              /** @type {number} */
              st[x + 15] = st[x + 31] = st[x + 47] = st[x + 63] = items[index].alpha * date;
              /** @type {number} */
              var u = x / 16;
              /** @type {number} */
              o[y + 0] = u + 0;
              /** @type {number} */
              o[y + 1] = u + 1;
              /** @type {number} */
              o[y + 2] = u + 2;
              /** @type {number} */
              o[y + 3] = u + 2;
              /** @type {number} */
              o[y + 4] = u + 1;
              /** @type {number} */
              o[y + 5] = u + 3;
              x = x + 160;
              y = y + 18;
            }
          }
        }
        x = p.vCount;
        y = p.eCount;
        /** @type {number} */
        index = 0;
        for (; index < count - 1; ++index) {
          if (!items[index].hidden && !items[index + 1].hidden) {
            thickness = items[index + 1].thickness;
            if (0 !== thickness || options.drawLines) {
              if (items[index + 1].positionX > items[index].positionX) {
                if (items[index + 1].positionY > items[index].positionY) {
                  st[x + 64] = st[x + 32];
                  st[x + 65] = st[x + 33];
                  st[x + 80] = st[x + 48];
                  st[x + 81] = st[x + 49];
                  st[x + 96] = st[x + 16];
                  st[x + 97] = st[x + 17];
                  st[x + 112] = st[x + 192];
                  st[x + 113] = st[x + 193];
                  st[x + 128] = st[x + 160];
                  st[x + 129] = st[x + 161];
                  st[x + 144] = st[x + 176];
                  st[x + 145] = st[x + 177];
                } else {
                  st[x + 64] = st[x + 0];
                  st[x + 65] = st[x + 1];
                  st[x + 80] = st[x + 16];
                  st[x + 81] = st[x + 17];
                  st[x + 96] = st[x + 48];
                  st[x + 97] = st[x + 49];
                  st[x + 112] = st[x + 160];
                  st[x + 113] = st[x + 161];
                  st[x + 128] = st[x + 192];
                  st[x + 129] = st[x + 193];
                  st[x + 144] = st[x + 208];
                  st[x + 145] = st[x + 209];
                }
              } else {
                if (items[index + 1].positionY > items[index].positionY) {
                  st[x + 64] = st[x + 0];
                  st[x + 65] = st[x + 1];
                  st[x + 80] = st[x + 32];
                  st[x + 81] = st[x + 33];
                  st[x + 96] = st[x + 48];
                  st[x + 97] = st[x + 49];
                  st[x + 112] = st[x + 160];
                  st[x + 113] = st[x + 161];
                  st[x + 128] = st[x + 176];
                  st[x + 129] = st[x + 177];
                  st[x + 144] = st[x + 208];
                  st[x + 145] = st[x + 209];
                } else {
                  st[x + 64] = st[x + 192];
                  st[x + 65] = st[x + 193];
                  st[x + 80] = st[x + 208];
                  st[x + 81] = st[x + 209];
                  st[x + 96] = st[x + 176];
                  st[x + 97] = st[x + 177];
                  st[x + 112] = st[x + 32];
                  st[x + 113] = st[x + 33];
                  st[x + 128] = st[x + 0];
                  st[x + 129] = st[x + 1];
                  st[x + 144] = st[x + 16];
                  st[x + 145] = st[x + 17];
                }
              }
              /** @type {number} */
              st[x + 66] = st[x + 82] = st[x + 98] = st[x + 114] = st[x + 130] = st[x + 146] = 0;
              /** @type {number} */
              st[x + 67] = st[x + 83] = st[x + 99] = st[x + 115] = st[x + 131] = st[x + 147] = 0;
              st[x + 68] = st[x + 84] = st[x + 100] = st[x + 116] = st[x + 132] = st[x + 148] = st[x + 4];
              st[x + 69] = st[x + 85] = st[x + 101] = st[x + 117] = st[x + 133] = st[x + 149] = st[x + 5];
              st[x + 70] = st[x + 86] = st[x + 102] = st[x + 118] = st[x + 134] = st[x + 150] = st[x + 6];
              st[x + 71] = st[x + 87] = st[x + 103] = st[x + 119] = st[x + 135] = st[x + 151] = st[x + 7];
              st[x + 72] = st[x + 88] = st[x + 104] = st[x + 120] = st[x + 136] = st[x + 152] = st[x + 8];
              st[x + 73] = st[x + 89] = st[x + 105] = st[x + 121] = st[x + 137] = st[x + 153] = st[x + 9];
              /** @type {number} */
              st[x + 74] = st[x + 90] = st[x + 106] = st[x + 122] = st[x + 138] = st[x + 154] = 0;
              /** @type {number} */
              st[x + 75] = st[x + 91] = st[x + 107] = st[x + 123] = st[x + 139] = st[x + 155] = 0;
              st[x + 76] = st[x + 92] = st[x + 108] = st[x + 12];
              st[x + 77] = st[x + 93] = st[x + 109] = st[x + 13];
              st[x + 78] = st[x + 94] = st[x + 110] = st[x + 14];
              st[x + 79] = st[x + 95] = st[x + 111] = st[x + 15];
              st[x + 124] = st[x + 140] = st[x + 156] = st[x + 172];
              st[x + 125] = st[x + 141] = st[x + 157] = st[x + 173];
              st[x + 126] = st[x + 142] = st[x + 158] = st[x + 174];
              st[x + 127] = st[x + 143] = st[x + 159] = st[x + 175];
              /** @type {number} */
              u = x / 16;
              /** @type {number} */
              o[y + 6] = u + 4;
              /** @type {number} */
              o[y + 7] = u + 5;
              /** @type {number} */
              o[y + 8] = u + 7;
              /** @type {number} */
              o[y + 9] = u + 7;
              /** @type {number} */
              o[y + 10] = u + 5;
              /** @type {number} */
              o[y + 11] = u + 8;
              /** @type {number} */
              o[y + 12] = u + 5;
              /** @type {number} */
              o[y + 13] = u + 6;
              /** @type {number} */
              o[y + 14] = u + 8;
              /** @type {number} */
              o[y + 15] = u + 8;
              /** @type {number} */
              o[y + 16] = u + 6;
              /** @type {number} */
              o[y + 17] = u + 9;
              x = x + 160;
              y = y + 18;
            }
          }
        }
        p.vCount = x + 64;
        p.eCount = y + 6;
      }
    }, render.prototype.getCustomInterface = function(canCreateDiscussions) {
      return canCreateDiscussions === render.WINLINE ? this._winlineBase : null;
    }, render.WINLINE = "Winline", render;
  }(exports.CustomWebGLBase);
  var ReductionPromiseArray = function() {
    /**
     * @param {!WebGLRenderingContext} el
     * @param {undefined} fn
     * @param {!Object} c
     * @param {number} name
     * @return {undefined}
     */
    function $(el, fn, c, name) {
      if (void 0 === name) {
        /** @type {string} */
        name = "WPSV";
      }
      this.initialize(el, fn, c, name);
    }
    return $.winlineCreator = function(data, options) {
      return new Response(new Blob(data), options);
    }, $.prototype.initialize = function(c, a, i, b) {
      var that = this;
      this._points = this.createWinlinePoints(a, i);
      this._options = this.createWinlineOptions(a);
      var QuickBase = exports.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var val = b + "_" + a;
      QuickBase.registerCustomComponent(val, function() {
        return $.winlineCreator(that._points, that._options);
      });
      var utils = QuickBase.create(val);
      c.getHierarchy("winlines").add(val, utils);
      this._winline = utils.getCustomInterface(Response.WINLINE);
      self.SystemManager.getScheduler().addUpdateListener(function() {
        return that.onUpdate();
      });
    }, $.prototype.show = function(list) {
      var tokens = this._points;
      var len = tokens.length;
      var count = list ? list.winData.cnt : 0;
      /** @type {boolean} */
      tokens[0].hidden = count > 0;
      /** @type {boolean} */
      tokens[len - 1].hidden = count > len - 3;
      /** @type {number} */
      var i = 0;
      for (; i < tokens.length - 2; ++i) {
        /** @type {number} */
        tokens[i + 1].thickness = i < count ? 1 : 0;
      }
      this._winline.show();
      this._startTime = self.SystemManager.getScheduler().getTime();
    }, $.prototype.hide = function(shouldWait) {
      this._winline.hide();
    }, $.prototype.onUpdate = function() {
      var options = this._options;
      /** @type {number} */
      var px_y = this._startTime ? self.SystemManager.getScheduler().getTime() - this._startTime : 0;
      options.currShinePos = options.minShinePos + px_y * options.shineSpeed % (options.maxShinePos - options.minShinePos);
    }, $.prototype.createWinlinePoints = function(name, result) {
      var options = result.symbolManager;
      var oldBin = result.patterns[name];
      /** @type {!Array} */
      var ouput = [];
      ouput.push(new RegExp(result.x0 - 0.5 * (options.symbolWidth + result.xGap), result.y0 + oldBin[0] * (options.symbolHeight + result.yGap), 0, 0, 0, 1));
      /** @type {number} */
      var i = 0;
      for (; i < oldBin.length; i++) {
        ouput.push(new RegExp(result.x0 + i * (options.symbolWidth + result.xGap), result.y0 + oldBin[i] * (options.symbolHeight + result.yGap)));
      }
      return ouput.push(new RegExp(result.x0 + (oldBin.length - 0.5) * (options.symbolWidth + result.xGap), result.y0 + oldBin[oldBin.length - 1] * (options.symbolHeight + result.yGap), 0, 0, 0, 1)), ouput;
    }, $.prototype.createWinlineOptions = function(lC) {
      return new gifGallery(7, 1, 0.5, 0.1, 80, 80, 1, 1, 11, 10, 0.1, 0.3, 3, 6, 7, 0.2, 1, 100, 5, true, -500, 10000, 0.8);
    }, $;
  }();
  var HtmlAttrAst = function() {
    /**
     * @param {(Image|string)} document
     * @param {?} undefined
     * @return {undefined}
     */
    function a(document, undefined) {
      this._reelManager = undefined;
      /** @type {boolean} */
      this._shown = false;
      this.setupEntity(document);
    }
    return a.prototype.show = function(req) {
      if (!this._shown) {
        /** @type {boolean} */
        this._shown = true;
        this.setPos(req.winData);
        this._background.play("show");
        this._value.setText(exports.ResourceManager.getInstance().getCreditFormatter().formatCoinValue(req.winData.coins));
      }
    }, a.prototype.hide = function(shouldWait) {
      if (this._shown) {
        /** @type {boolean} */
        this._shown = false;
        this._background.play("hide");
      }
    }, a.prototype.setupEntity = function(obj) {
      var that = exports.ResourceManager.getInstance().getEntityManager().create("WinLabel");
      this._containerHierarchy = obj.getHierarchy("winLabelOverlay");
      this._containerHierarchy.add("winLabel", that);
      this._background = that.getAnimation(".");
      this._background.play("hidden");
      this._value = that.getTextField("winValue.textfield");
      this._transform = that.getTransform(".");
      this._containerTransform = obj.getTransform("winLabelOverlay");
    }, a.prototype.setPos = function(value) {
      var item = this.getSymbolTransformByPattern(value);
      var x = new exports.Point(0, 0);
      var p = item.localToGlobal(x);
      var details = this._containerTransform.globalToLocal(p);
      this._transform.setX(details.x);
      this._transform.setY(details.y);
    }, a.prototype.getSymbolTransformByPattern = function(tag) {
      /** @type {number} */
      var thisArg = tag.cnt >> 1;
      /** @type {boolean} */
      var noIteratee = -1 === tag.line;
      /** @type {!Array} */
      var boneList = [];
      return boneList = noIteratee ? this._reelManager.getScatterSymbols(tag.symbol) : this._reelManager.getPatternSymbols(tag.line, thisArg, 1), noIteratee && 2 === boneList.length && boneList[1].reelId === this._reelManager.getNumReels() - 1 ? boneList[0].transform : boneList[Math.floor(boneList.length / 2)].transform;
    }, a;
  }();
  var JarallaxObject = function() {
    /**
     * @param {?} manager
     * @return {undefined}
     */
    function RoadsMode(manager) {
      this._reelManager = manager;
      /** @type {boolean} */
      this._shown = false;
    }
    return RoadsMode.prototype.show = function(x) {
      this.internalShow(x, true);
    }, RoadsMode.prototype.emphasize = function(value) {
      this.internalShow(value, false);
    }, RoadsMode.prototype.internalShow = function(t, isTangent) {
      if (!this._shown) {
        var sidemenu;
        var uboard;
        var tag = t.winData;
        if (tag.line < 0) {
          sidemenu = this._reelManager.getScatterSymbols(tag.symbol);
          uboard = this._reelManager.getNonScatterSymbols(tag.symbol);
        } else {
          sidemenu = this._reelManager.getPatternSymbols(tag.line, 0, tag.cnt);
          uboard = this._reelManager.getNonPatternSymbols(tag.line, 0, tag.cnt);
        }
        if (isTangent) {
          this.showWins(t, sidemenu);
        }
        this.showNoWins(t, uboard);
        /** @type {boolean} */
        this._shown = true;
      }
    }, RoadsMode.prototype.hide = function(result) {
      if (this._shown) {
        var startStrat;
        var uboard;
        var tag = result.winData;
        if (tag.line < 0) {
          startStrat = this._reelManager.getScatterSymbols(tag.symbol);
          uboard = this._reelManager.getNonScatterSymbols(tag.symbol);
        } else {
          startStrat = this._reelManager.getPatternSymbols(tag.line, 0, tag.cnt);
          uboard = this._reelManager.getNonPatternSymbols(tag.line, 0, tag.cnt);
        }
        this.hideWins(result, startStrat);
        this.hideNoWins(result, uboard);
        /** @type {boolean} */
        this._shown = false;
      }
    }, RoadsMode.prototype.onBetChange = function() {
      this.stopAllSymbols();
    }, RoadsMode.prototype.onGamble = function() {
      this.stopAllSymbols();
    }, RoadsMode.prototype.stopAllSymbols = function() {
      /** @type {number} */
      var name = 0;
      for (; name < this._reelManager.getNumReels(); name++) {
        /** @type {number} */
        var nodeType = 0;
        for (; nodeType < this._reelManager.getNumRows(name); nodeType++) {
          var structure = this._reelManager.getSymbol(name, nodeType);
          structure.stop();
        }
      }
    }, RoadsMode.prototype.showWins = function(e, dialog) {
      /** @type {number} */
      var i = 0;
      var size = dialog.length;
      for (; i < size; i++) {
        dialog[i].win(e, i);
      }
    }, RoadsMode.prototype.showNoWins = function(t, e) {
      /** @type {number} */
      var n = 0;
      var i = e.length;
      for (; n < i; n++) {
        e[n].noWin(t, n);
      }
    }, RoadsMode.prototype.hideWins = function(t, i) {
      /** @type {number} */
      var c = 0;
      var clen = i.length;
      for (; c < clen; c++) {
        i[c].hideWin(t, c);
      }
    }, RoadsMode.prototype.hideNoWins = function(t, e) {
      /** @type {number} */
      var n = 0;
      var i = e.length;
      for (; n < i; n++) {
        e[n].hideNoWin(t, n);
      }
    }, RoadsMode;
  }();
  var TableGrid = function() {
    /**
     * @param {?} c
     * @param {?} word
     * @return {undefined}
     */
    function t(c, word) {
      var node = this;
      this._reelManager = word;
      var p_rows = word.getNumReels();
      /** @type {!Array} */
      this._points = new Array(p_rows);
      /** @type {number} */
      var i = 0;
      for (; i < p_rows; ++i) {
        this._points[i] = new RegExp(0, 0);
      }
      this._options = this.createWinlineOptions();
      var directory_epub = exports.ResourceManager.getInstance().getEntityManager();
      directory_epub.registerCustomComponent("WSCV", function() {
        return t.winlineCreator(node._points, node._options);
      });
      var utils = directory_epub.create("WSCV");
      c.getHierarchy("winlines").add("WSCV", utils);
      this._winline = utils.getCustomInterface(Response.WINLINE);
      self.SystemManager.getScheduler().addUpdateListener(function() {
        return node.onUpdate();
      });
    }
    return t.winlineCreator = function(data, options) {
      return new Response(new Blob(data), options);
    }, t.prototype.show = function(d) {
      var texts = this._reelManager.getScatterSymbols(d.winData.symbol);
      /** @type {number} */
      var index = 0;
      var lastPoint = this._points.length;
      for (; index < lastPoint; ++index) {
        if (index < texts.length) {
          this._points[index].positionX = this._points[index].frameX = texts[index].transform.getX();
          this._points[index].positionY = this._points[index].frameY = texts[index].transform.getY();
          /** @type {boolean} */
          this._points[index].hidden = false;
        } else {
          /** @type {boolean} */
          this._points[index].hidden = true;
        }
      }
      this._winline.show();
      this._startTime = self.SystemManager.getScheduler().getTime();
    }, t.prototype.hide = function(shouldWait) {
      this._winline.hide();
    }, t.prototype.onUpdate = function() {
      var options = this._options;
      /** @type {number} */
      var time = self.SystemManager.getScheduler().getTime() - this._startTime;
      options.currShinePos = options.minShinePos + time * options.shineSpeed % (options.maxShinePos - options.minShinePos);
    }, t.prototype.createWinlineOptions = function() {
      return new gifGallery(7, 1, 0.5, 0.1, 80, 80, 1, 1, 11, 10, 0.1, 0.3, 3, 6, 7, 0.2, 1, 100, 5, false, -500, 10000, 1.5);
    }, t;
  }();
  var findAnswerInLoadedAIMLFilesWrapper = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SystemNotFoundError = function(cb) {
    /**
     * @param {undefined} start
     * @param {?} data
     * @return {?}
     */
    function path(start, data) {
      var request = cb.call(this) || this;
      return request._mainTask = new self.Task, request._reelManager = data, request._winSymbols = request.createWinSymbols(data), request._winPatterns = request.createWinPatters(start, data), request._winScatter = request.createWinScatter(start, data), request._winLabel = request.createWinLabel(start, data), request;
    }
    return findAnswerInLoadedAIMLFilesWrapper(path, cb), path.prototype.show = function(e) {
      var t = e.winData;
      if (t) {
        if (t.line >= 0) {
          this._winPatterns[t.line].show(e);
        } else {
          this._winScatter.show(e);
        }
        this._winLabel.show(e);
        if (this.isSymbolWinNeeded(e)) {
          this._winSymbols.show(e);
        } else {
          this._winSymbols.emphasize(e);
        }
      }
    }, path.prototype.hide = function(shouldWait) {
      var e = shouldWait.winData;
      if (e) {
        if (e.line >= 0) {
          this._winPatterns[e.line].hide(shouldWait);
        } else {
          this._winScatter.hide(shouldWait);
        }
        this._winLabel.hide(shouldWait);
        this._winSymbols.hide(shouldWait);
      }
    }, path.prototype.onBetChange = function() {
      this._winSymbols.onBetChange();
    }, path.prototype.onGamble = function() {
      this._winSymbols.onGamble();
    }, path.prototype.createWinSymbols = function(selector) {
      return new JarallaxObject(selector);
    }, path.prototype.createWinPatters = function(button, id) {
      /** @type {!Array} */
      var t = [];
      var perlin_octaves = id.getLines();
      /** @type {number} */
      var url = 0;
      for (; url < perlin_octaves; url++) {
        t.push(this.createWinPattern(button, url, id));
      }
      return t;
    }, path.prototype.createWinScatter = function(editor, table) {
      return new TableGrid(editor, table);
    }, path.prototype.createWinPattern = function(type, fn, initialValue) {
      return new ReductionPromiseArray(type, fn, initialValue);
    }, path.prototype.createWinLabel = function(name, value) {
      return new HtmlAttrAst(name, value);
    }, path.prototype.isSymbolWinNeeded = function(o) {
      return o.showCount < 1 && !o.bigWinMode;
    }, path;
  }(self.EventDispatcher);
  var addSection = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var JarallaxAnimation = function(data) {
    /**
     * @param {string} level
     * @return {?}
     */
    function Board(level) {
      var channelMethods = data.call(this) || this;
      return channelMethods._limits = level, channelMethods._level = 0, channelMethods._bet = 1, channelMethods;
    }
    return addSection(Board, data), Object.defineProperty(Board.prototype, "level", {
      get : function() {
        return this._level;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Board.prototype, "bet", {
      get : function() {
        return this._bet;
      },
      set : function(mymuted) {
        this._bet = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Board.prototype, "limits", {
      get : function() {
        return this._limits.concat();
      },
      enumerable : true,
      configurable : true
    }), Board.prototype.getLimit = function(feature) {
      return void 0 === feature && (feature = 0), this._limits[feature];
    }, Board.prototype.reset = function() {
      data.prototype.reset.call(this);
      /** @type {number} */
      this._level = 0;
    }, Board.prototype.updateValue = function(oldValue) {
      /** @type {number} */
      var caveWidth = oldValue / this._bet;
      /** @type {number} */
      caveWidth = Math.floor(100 * caveWidth) / 100;
      for (; this._level < this._limits.length && caveWidth >= this._limits[this._level];) {
        this._level++;
      }
      return oldValue;
    }, Board;
  }(options.WinCounter);
  var gCb = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var states = function(fn) {
    /**
     * @return {?}
     */
    function UploaderQueue() {
      return null !== fn && fn.apply(this, arguments) || this;
    }
    return gCb(UploaderQueue, fn), UploaderQueue.START = "BIGWIN_VIEW_START", UploaderQueue.STARTED = "BIGWIN_VIEW_STARTED", UploaderQueue.LEVEL_UP = "BIGWIN_VIEW_LEVEL_UP", UploaderQueue.STOP = "BIGWIN_VIEW_STOP", UploaderQueue.STOPPED = "BIGWIN_VIEW_STOPPED", UploaderQueue;
  }(self.MegatonEvent);
  var _callPlugins = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var command = function(undefined) {
    /**
     * @param {?} m
     * @param {?} array
     * @return {?}
     */
    function init(m, array) {
      var _self = undefined.call(this) || this;
      return _self._showFastOutroSequence = [], _self._showOutroSequence = [], _self._creditFormatter = exports.ResourceManager.getInstance().getCreditFormatter(), _self._labelSizes = array, _self.createAnimators(), _self.initComponents(m), _self.createBigWinCoinShowerEmitter(m), _self.createBigWinEffectEmitter(m), _self.initSequences(), _self.clear(), _self;
    }
    return _callPlugins(init, undefined), init.prototype.clear = function() {
      /** @type {number} */
      this._textAnimator.target = 0;
      /** @type {number} */
      this._valueAnimator.target = 0;
      this._display.setVisible(false);
      this._bigWinText.setText("");
      this._bigWinValue.setText("");
      /** @type {boolean} */
      this._visible = false;
      /** @type {number} */
      this._levelIdx = -1;
      this._disabler.setAlpha(0);
      this._disablerBtn.enable(false);
      /** @type {null} */
      this._stoppingTask = null;
      this._animator.stop();
    }, init.prototype.createBigWinCoinShowerEmitter = function(opts) {
      var width = options.BigWinCoinShowerEmitter.createPool(opts, "bigwin.emitter");
      this._coinShower = new options.BigWinCoinShowerEmitter(width);
      this._coinShower.setDensity(3);
    }, init.prototype.createBigWinEffectEmitter = function(opts) {
      var server = options.BigWinEffectEmitter.createPool(opts, "effectEmitter");
      this._effectEmitter = new options.BigWinEffectEmitter(server);
      this._effectEmitter.setDensity(3);
      server = options.BigWinEffectEmitter.createDotPool(opts, "effectEmitter");
      this._effectEmitter.setDotPool(server);
    }, init.prototype.initComponents = function(shape) {
      var e = this;
      this._display = shape.getDisplay("bigwin");
      this._bigWinText = shape.getTextField("bigwin.label");
      this._textTransform = shape.getTransform("bigwin.label");
      this._bigWinValue = shape.getTextField("bigwin.value");
      this._valueTransform = shape.getTransform("bigwin.value");
      this._rays = shape.getTransform("bigwin.graphics.rays");
      this._streak = shape.getTransform("bigwin.graphics.streak");
      this._disabler = shape.getDisplay("bigwin.graphics.disabler");
      this._disablerBtn = shape.getButton("bigwin.graphics.disabler");
      this._disablerBtn.addEventListener(exports.ButtonEvent.CLICK, function() {
        return e.onDisablerClick();
      });
    }, init.prototype.createAnimators = function() {
      var colTween = this;
      this._animator = new self.BaseAnimator;
      this._animator.addListener(function() {
        return colTween.onUpdate();
      });
      this._textAnimator = new self.SpringAnimator(0.2, 0.3);
      this._textAnimator.addListener(function() {
        return colTween.onTextAnimate();
      });
      this._valueAnimator = new self.SpringAnimator(0.2, 0.3);
      this._valueAnimator.addListener(function() {
        return colTween.onValueAnimate();
      });
    }, init.prototype.initSequences = function() {
      var touchSystem = this;
      /** @type {!Array} */
      this._showFastOutroSequence = [function(e) {
        return touchSystem.fastOutroWaitHandler(e);
      }, function(e) {
        return touchSystem.outroAnimHandler(e);
      }];
      /** @type {!Array} */
      this._showOutroSequence = [function(e) {
        return touchSystem.outroWaitHandler(e);
      }, function(e) {
        return touchSystem.outroAnimHandler(e);
      }];
    }, init.prototype.showIntro = function(line) {
      var configurator = this;
      this._display.setVisible(true);
      this._streak.setScaleX(0.6);
      this._streak.setScaleY(0.6);
      this._rays.setScaleX(1);
      this._rays.setScaleY(1);
      this._textAnimator.initValue(0.5);
      this._valueAnimator.initValue(0.5);
      var x = line.startDelayMs(init.INTRO_TIME).ctx;
      var o = new self.GeneralTweener(init.INTRO_TIME, function(newConfigs) {
        return configurator.onIntro(newConfigs);
      });
      this.dispatch(new states(states.START));
      o.start(x);
    }, init.prototype.startAnim = function(toValue) {
      this._startTime = self.SystemManager.getScheduler().getTime();
      this._animator.start();
      this._disablerBtn.enable(true);
      this.dispatch(new states(states.STARTED));
      /** @type {number} */
      var val = toValue - init.INTRO_TIME - (init.WAIT_TIME - init.FAST_WAIT_TIME);
      return val > 0 ? val : 0;
    }, init.prototype.showOutro = function(dictionary, writer) {
      var values = dictionary ? this._showFastOutroSequence : this._showOutroSequence;
      writer.startSequence(values);
    }, init.prototype.stopOutro = function() {
      if (this._stoppingTask) {
        this._stoppingTask.cancelDelay();
      }
    }, init.prototype.setValue = function(x, n) {
      var label = this._creditFormatter.formatCoinValue(x, exports.MoneyFormatterFlag.NO_DENOM_DECIMAL);
      this._bigWinValue.setText(label + " ");
      /** @type {number} */
      var 0 = Math.min(init.LABELS.length - 1, Math.max(0, n - 1));
      if (0 !== this._levelIdx) {
        this.setWinLevel(0);
        this.dispatch(new states(states.LEVEL_UP));
      }
    }, init.prototype.stopAnim = function() {
      this._coinShower.stop();
      this._effectEmitter.stop();
      this.dispatch(new states(states.STOP));
    }, init.prototype.onIntro = function(sx) {
      this._display.setAlpha(sx);
      this._disabler.setAlpha(init.DISABLER_ALPHA * sx);
    }, init.prototype.onUpdate = function() {
      this._rays.setScaleX(this._rays.getScaleX() + init.RAYS_SCALE_STEP);
      if (this._rays.getScaleX() > init.RAYS_SCALE_MAX) {
        this._rays.setScaleX(init.RAYS_SCALE_MAX);
      }
      this._rays.setScaleY(this._rays.getScaleX());
      this._streak.setScaleX(this._streak.getScaleX() + init.STREAK_SCALE_STEP);
      if (this._streak.getScaleX() > init.STREAK_SCALE_MAX) {
        this._streak.setScaleX(init.STREAK_SCALE_MAX);
      }
      this._streak.setScaleY(this._streak.getScaleX());
    }, init.prototype.onTextAnimate = function() {
      var newValue = this._textAnimator.value;
      this._textTransform.setScaleX(newValue);
      this._textTransform.setScaleY(newValue);
    }, init.prototype.onValueAnimate = function() {
      var newValue = this._valueAnimator.value;
      this._valueTransform.setScaleX(newValue);
      this._valueTransform.setScaleY(newValue);
    }, init.prototype.fastOutroWaitHandler = function(server) {
      switch(server.state) {
        case 0:
          this._stoppingTask = server.startDelayMs(init.FAST_WAIT_TIME);
          break;
        default:
          /** @type {null} */
          this._stoppingTask = null;
          server.complete();
      }
    }, init.prototype.outroWaitHandler = function(server) {
      switch(server.state) {
        case 0:
          this._stoppingTask = server.startDelayMs(init.WAIT_TIME);
          break;
        default:
          /** @type {null} */
          this._stoppingTask = null;
          server.complete();
      }
    }, init.prototype.outroAnimHandler = function(server) {
      var QuickBase = this;
      var i = server.execDelayMs(init.OUTRO_TIME);
      (new self.GeneralTweener(init.OUTRO_TIME, function(val) {
        return QuickBase.onOutro(val);
      })).start(i);
      this.dispatch(new states(states.STOPPED));
    }, init.prototype.onOutro = function(y) {
      this._display.setAlpha(1 - y);
      this._disabler.setAlpha(init.DISABLER_ALPHA * (1 - y));
    }, init.prototype.onDisablerClick = function() {
      this.dispatch(new v(v.CONTINUE));
    }, init.prototype.setWinLevel = function(addedRenderer) {
      /** @type {number} */
      this._levelIdx = addedRenderer;
      if (0 === this._levelIdx) {
        this._coinShower.start();
        this._effectEmitter.start();
      }
      this._bigWinText.setText(init.LABELS[this._levelIdx]);
      this._coinShower.setDensity(1 + this._levelIdx);
      this._textAnimator.target = this._labelSizes[this._levelIdx];
      this._valueAnimator.target = this._labelSizes[this._levelIdx];
    }, init.LABELS = ["BIG WIN", "SUPER BIG WIN", "MEGA BIG WIN", "ULTRA BIG WIN"], init.INTRO_TIME = 500, init.WAIT_TIME = 4000, init.FAST_WAIT_TIME = 1200, init.OUTRO_TIME = 500, init.RAYS_SCALE_STEP = 0.005, init.RAYS_SCALE_MAX = 2.5, init.STREAK_SCALE_STEP = 0.01, init.STREAK_SCALE_MAX = 3, init.DISABLER_ALPHA = 0.2, init;
  }(self.Dispatcher);
  var Line = function() {
    /**
     * @param {number} val
     * @param {string} s
     * @param {number} hash
     * @param {number} flags
     * @param {number} x
     * @param {number} y
     * @return {undefined}
     */
    function process(val, s, hash, flags, x, y) {
      if (void 0 === y) {
        /** @type {number} */
        y = x;
      }
      /** @type {number} */
      this._line = val;
      /** @type {string} */
      this._symbol = s;
      /** @type {number} */
      this._cnt = hash;
      /** @type {number} */
      this._flags = flags;
      /** @type {number} */
      this._coins = x;
      /** @type {number} */
      this._coinsToCount = y;
    }
    return Object.defineProperty(process.prototype, "line", {
      get : function() {
        return this._line;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(process.prototype, "symbol", {
      get : function() {
        return this._symbol;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(process.prototype, "cnt", {
      get : function() {
        return this._cnt;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(process.prototype, "flags", {
      get : function() {
        return this._flags;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(process.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(process.prototype, "coinsToCount", {
      get : function() {
        return this._coinsToCount;
      },
      enumerable : true,
      configurable : true
    }), process;
  }();
  var parseItem = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Request = function(_self) {
    /**
     * @param {number} v
     * @param {?} n
     * @param {?} t
     * @return {?}
     */
    function line(v, n, t) {
      var o = _self.call(this, v.coins, n, t) || this;
      return o._winData = v, o;
    }
    return parseItem(line, _self), Object.defineProperty(line.prototype, "winData", {
      get : function() {
        return this._winData;
      },
      enumerable : true,
      configurable : true
    }), line;
  }(options.WinInfoEvent);
  var stepToText = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cursor = function(hasChildren) {
    /**
     * @param {!HTMLElement} that
     * @param {number} buffer
     * @param {!Object} result
     * @param {?} done
     * @param {number} num
     * @return {?}
     */
    function step(that, buffer, result, done, num) {
      var context = hasChildren.call(this, that) || this;
      return context._winState = buffer, context._counting = false, context._betSetting = result, context._gameSettings = done, context._bigWinLimit = num, context._delayStartFreeSpin = 500, context._delayStartDefault = 100, context._afterGamble = false, that.addEventListener(v.CONTINUE, function() {
        return context.onContinue();
      }), that.addEventListener(ChangeEvent.FEATUREWIN, function(t) {
        return context.onFeatureWin(t);
      }), that.addEventListener(node.GAMBLE_START, function() {
        return context.onGambleStart();
      }), that.addEventListener(api.GAMBLE_END, function(person) {
        return context.onGambleEnd(person);
      }), that.addEventListener(v.COLLECT, function() {
        return context.onAfterGamble(false);
      }), result.addListener(function(err) {
        return context.onBetSettings(err);
      }), context._idleMainTask = new self.Task, context._counterTask = null, context.reset(), context;
    }
    return stepToText(step, hasChildren), step.prototype.setWinCapHandler = function(canCreateDiscussions) {
      /** @type {string} */
      this._winCapHandler = canCreateDiscussions;
    }, step.prototype.stop = function() {
      if (this._idleTask) {
        this._idleTask.complete();
        this._winState.clear();
        /** @type {null} */
        this._idleTask = null;
        this._dispatcher.dispatch(new exports.InfoEvent("", options.WinInfoEvent.INFO));
      }
      if (this._endEvent) {
        this._dispatcher.dispatch(this._endEvent);
        /** @type {null} */
        this._endEvent = null;
      }
      this._dispatcher.dispatch(new that(that.STOP, this._winState.wins));
      /** @type {number} */
      this._winState.showCount = -1;
    }, step.prototype.onSpinEvent = function(b) {
      var j;
      for (j in b.wins) {
        if (b.wins.hasOwnProperty(j)) {
          var g = b.wins[j];
          this.addLineWin(g.pattern, g.symbol, g.count, g.flags, g.coins);
        }
      }
      /** @type {boolean} */
      this._afterGamble = false;
    }, step.prototype.reset = function() {
      if (this._idleTask) {
        this._idleTask.complete();
        /** @type {null} */
        this._idleTask = null;
      }
      if (this._endEvent) {
        this._dispatcher.dispatch(this._endEvent);
        /** @type {null} */
        this._endEvent = null;
      }
      this._winState.clear();
    }, step.prototype.onFeatureWin = function(b) {
      var f = b.feature;
      var ln = new Line(-1, f.featureData.symbol, f.featureData.numSymbols, 0, f.totalCoins);
      this._winState.addWin(ln);
    }, step.prototype.start = function(t, context, provider, id, height) {
      var allTraps = this;
      if (void 0 === provider) {
        /** @type {boolean} */
        provider = false;
      }
      if (void 0 === id) {
        /** @type {boolean} */
        id = false;
      }
      if (void 0 === height) {
        /** @type {number} */
        height = 0;
      }
      /** @type {number} */
      this._winState.showCount = -1;
      /** @type {number} */
      this._winState.freespinMode = id;
      this._winState.bigWinMode = this.isBigWinNeeded();
      /** @type {boolean} */
      this._winState.quickViewMode = false;
      /** @type {number} */
      this._winState.noGambleMode = provider;
      /** @type {number} */
      this._idleMode = context;
      /** @type {number} */
      this._waitUntil = height;
      this._endEvent = new that(that.DONE);
      this._dispatcher.dispatch(new that(that.INIT));
      if (this._winState.hasWins) {
        t.execHandler(function(t) {
          return allTraps.showWinHandler(t);
        });
      } else {
        t.execHandler(function(t) {
          return allTraps.noWinDelayHandler(t);
        }, id);
      }
    }, step.prototype.showLines = function() {
      var changedRadioControls = this;
      if (null == this._idleTask) {
        this._idleTask = this._idleMainTask.startHandler(function(values) {
          return changedRadioControls.showLinesHandler(values);
        });
      }
    }, step.prototype.addLineWin = function(type, text, x1, y1, x2) {
      var element = new Line(type, text, x1, y1, x2);
      this._winState.addWin(element);
    }, step.prototype.noWinDelayHandler = function(target) {
      switch(target.state) {
        case 0:
          var p = target.data;
          var n = p ? this._delayStartFreeSpin : this._delayStartDefault;
          if (this._waitUntil > 0 && this._idleMode) {
            /** @type {number} */
            n = Math.max(n, this._waitUntil - self.SystemManager.getScheduler().getTime());
          }
          target.startDelayMs(n);
          break;
        default:
          this._dispatcher.dispatch(new that(that.DELAY_DONE));
          target.complete();
      }
    }, step.prototype.onGambleStart = function() {
      this.stop();
    }, step.prototype.onBetSettings = function(gl) {
      if (gl.isChanged(WebGLConstants.COINS) || gl.isChanged(WebGLConstants.LINES) || gl.isChanged(WebGLConstants.DENOM) || gl.isChanged(WebGLConstants.DENOMINATIONS)) {
        this.stop();
      }
    }, step.prototype.isBigWinNeeded = function() {
      return this._winCapHandler.cap(this._winState.totalWin) / this._betSetting.betCoins >= this._bigWinLimit;
    }, step.prototype.showWinHandler = function(self) {
      var allTraps = this;
      switch(self.state) {
        case 0:
          if (this._winState.bigWinMode) {
            self.startHandler(function(t) {
              return allTraps.showBigWinHandler(t);
            });
          } else {
            self.startDelayMs(0);
          }
          break;
        case 1:
          /** @type {number} */
          this._winState.showCount = 0;
          self.startHandler(function(t) {
            return allTraps.showNormalWinHandler(t);
          });
          break;
        default:
          /** @type {number} */
          var row = 0;
          if (this._waitUntil > 0 && this._winState.noGambleMode && this._idleMode) {
            /** @type {number} */
            row = Math.max(row, this._waitUntil - self.SystemManager.getScheduler().getTime());
          }
          self.execDelayMs(row);
      }
    }, step.prototype.showBigWinHandler = function(r) {
      switch(r.state) {
        case 0:
          r.startDelayMs(300);
          break;
        case 1:
          var n = this.getBigWinDuration();
          var password = this._winCapHandler.cap(this._winState.totalWin);
          this._dispatcher.dispatch(new Receiver(password, n, false));
          this._dispatcher.dispatch(new options.WinCounterControlEvent(options.WinCounterControlEvent.HIDE));
          this._dispatcher.dispatch(new exports.InfoEvent("IDS_MSG_CONGRATULATIONS", options.WinInfoEvent.INFO));
          /** @type {number} */
          var l = step.DELAY_BEFORE_QUICKSTOP_ACTIVE_BIGWIN;
          l = n < l ? n : l;
          /** @type {number} */
          this._durationAfterDelay = n - l;
          r.startDelayMs(l);
          break;
        case 2:
          /** @type {boolean} */
          this._enableQuickStop = true;
          this._dispatcher.dispatch(new Tween(Tween.CONTINUE));
          /** @type {boolean} */
          this._winState.quickViewMode = false;
          this._waitTask = r.startDelayMs(this._durationAfterDelay);
          break;
        case 3:
          this.enableQuickStop(false);
          /** @type {null} */
          this._waitTask = null;
          r.startDelayMs(2000);
          break;
        default:
          this._dispatcher.dispatch(new options.WinCounterControlEvent(options.WinCounterControlEvent.SHOW));
          this._dispatcher.dispatch(new options.WinInfoEvent(this._winState.totalWinToCount, 0, options.WinInfoEvent.WIN_NO_COUNT));
          r.complete();
      }
    }, step.prototype.showNormalWinHandler = function(t) {
      switch(t.state) {
        case 0:
          t.startDelayMs(300);
          break;
        case 1:
          this.onStart();
          /** @type {boolean} */
          this._winState.quickViewMode = false;
          this.showLines();
          var fromIndex = this._winState.bigWinMode ? 0 : this.getCountDuration();
          if (!this._winState.bigWinMode) {
            /** @type {boolean} */
            this._counting = true;
            this._dispatcher.dispatch(new options.WinInfoEvent(this._winState.totalWin, fromIndex, options.WinInfoEvent.WIN));
          }
          /** @type {number} */
          var i = step.DELAY_BEFORE_QUICKSTOP_ACTIVE;
          i = fromIndex < i ? fromIndex : i;
          if (this._waitUntil > 0 && this._idleMode && this._winState.noGambleMode) {
            /** @type {number} */
            i = Math.max(i, this._waitUntil - self.SystemManager.getScheduler().getTime());
          }
          /** @type {number} */
          this._durationAfterDelay = fromIndex - i;
          t.startDelayMs(i);
          break;
        case 2:
          /** @type {number} */
          var offset = this._winState.quickViewMode ? 50 : 500;
          var position = this._durationAfterDelay + offset;
          if (position > 0) {
            this.enableQuickStop(true);
          }
          this._waitTask = t.startDelayMs(position > 0 ? position : 0);
          break;
        default:
          /** @type {boolean} */
          this._counting = false;
          /** @type {null} */
          this._waitTask = null;
          if (this._idleMode || this._winState.quickViewMode || this._winState.showCount > 0) {
            this.enableQuickStop(false);
            t.complete();
          } else {
            /** @type {!Object} */
            this._counterTask = t;
          }
          if (this._showPostWin) {
            this.showPostWinIntro(t);
          }
      }
    }, step.prototype.onStart = function() {
      this._dispatcher.dispatch(new that(that.START, this._winState.wins, this._winState.bigWinMode));
      if (this._winState.hasLineWin) {
        this._dispatcher.dispatch(new that(that.WIN_PAYLINE));
      }
    }, step.prototype.idle = function() {
    }, step.prototype.showLinesHandler = function(args) {
      var allTraps = this;
      switch(args.state) {
        case 0:
          args.startHandler(function(t) {
            return allTraps.showMainWinsHandler(t);
          });
          break;
        default:
          if (this._endEvent) {
            this._dispatcher.dispatch(this._endEvent);
            /** @type {null} */
            this._endEvent = null;
          }
          if (this._counterTask) {
            this.enableQuickStop(false);
            this._counterTask.complete();
            /** @type {null} */
            this._counterTask = null;
          }
          if (this._idleMode) {
            this.idle();
            args.execLoop([function(t) {
              return allTraps.showMainWinsHandler(t);
            }]);
          }
      }
    }, step.prototype.showMainWinsHandler = function(args) {
      var QuickBase = this;
      if (this._afterGamble) {
        this.stop();
      }
      if (0 === args.state && this._winState.showCount > 0) {
        /** @type {boolean} */
        this._showPostWin = true;
        this.showPostWinIntro(args);
      } else {
        if (this._winState.next() && (!this._winState.quickViewMode || this._winState.showCount > 0)) {
          args.startHandler(function(val) {
            return QuickBase.showMainWinHandler(val);
          });
        } else {
          this._winState.showCount++;
          args.complete();
        }
      }
    }, step.prototype.showPostWinIntro = function(pieces) {
      pieces.startDelayMs(1000);
      if (!this._counting) {
        /** @type {boolean} */
        this._showPostWin = false;
        this._dispatcher.dispatch(new options.WinInfoEvent(null, 0, options.WinInfoEvent.IDLE));
      }
    }, step.prototype.showMainWinHandler = function(model) {
      var id = this._winState.winData;
      /** @type {boolean} */
      var n = this._winState.showCount > 0;
      switch(model.state) {
        case 0:
          this._winState.show();
          var duration = this.getDuration(id);
          if (n && !this._counting) {
            this.dispatchWinEvent(id, duration, options.WinInfoEvent.IDLE);
          }
          this._patternTask = model.startDelayMs(duration);
          break;
        case 1:
          this._winState.hide();
          this._patternTask = model.startDelayMs(0);
          break;
        default:
          /** @type {null} */
          this._patternTask = null;
          model.complete();
      }
    }, step.prototype.dispatchWinEvent = function(index, callback, method) {
      this._dispatcher.dispatch(new Request(index, callback, method));
    }, step.prototype.quickStop = function() {
      if (this._waitTask) {
        this._waitTask.cancelDelay();
        /** @type {null} */
        this._waitTask = null;
      }
      if (this._patternTask) {
        this._patternTask.cancelDelay();
        /** @type {null} */
        this._patternTask = null;
      }
      if (this._counterTask) {
        this.enableQuickStop(false);
        this._counterTask.complete();
        /** @type {null} */
        this._counterTask = null;
      }
    }, step.prototype.enableQuickStop = function(mode) {
      /** @type {boolean} */
      this._enableQuickStop = mode;
      var options = mode ? this._winState.noGambleMode && this._idleMode && (!this._winState.bigWinMode || this._winState.showCount >= 0) ? Tween.CONTINUE_SPIN_NOAUTOPLAY : Tween.CONTINUE : Tween.NONE;
      this._dispatcher.dispatch(new Tween(options));
    }, step.prototype.getDuration = function(video) {
      var e = this._winState.showCount > 0 || this._winState.bigWinMode;
      return 1 === this._winState.wins.length ? this._winState.showCount > 0 ? Number.POSITIVE_INFINITY : this.getCountDuration() : e ? 2000 : this._gameSettings.fastPlay ? 750 : 1500;
    }, step.prototype.getCountDuration = function() {
      /** @type {number} */
      var start = this._winState.totalWin / this._betSetting.betCoins * 0.5 * 1000;
      return this._gameSettings.fastPlay && (start = start * 0.5), start < 100 ? 100 : start > 5000 ? 5000 : start;
    }, step.prototype.getDelayBetweenLines = function(canCreateDiscussions) {
      return 0;
    }, step.prototype.getBigWinDuration = function() {
      /** @type {number} */
      var t = this._winState.totalWin / this._betSetting.betCoins;
      /** @type {number} */
      var column = 5000 * t / this._bigWinLimit;
      return Math.min(30000, column) + command.INTRO_TIME + command.WAIT_TIME + command.OUTRO_TIME;
    }, step.prototype.onContinue = function() {
      if (this._enableQuickStop) {
        /** @type {boolean} */
        this._winState.quickViewMode = true;
        this.enableQuickStop(false);
        this.quickStop();
        if (this._winState.noGambleMode && !this._winState.freespinMode && (!this._winState.bigWinMode || this._winState.showCount >= 0) && this._idleMode) {
          this._dispatcher.dispatch(new v(v.SPIN));
        }
      }
    }, step.prototype.onGambleEnd = function(type) {
      this.onAfterGamble(type.isWinCap);
    }, step.prototype.onAfterGamble = function(addedRenderer) {
      if (!addedRenderer) {
        if (1 === this._winState.wins.length) {
          this.reset();
        }
        /** @type {boolean} */
        this._afterGamble = true;
        this._dispatcher.dispatch(new exports.InfoEvent(null, options.WinInfoEvent.INFO));
      }
    }, step.DELAY_BEFORE_QUICKSTOP_ACTIVE = 300, step.DELAY_BEFORE_QUICKSTOP_ACTIVE_BIGWIN = 500, step;
  }(self.EventProcessor);
  var addListener = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SuggestionsBuilder = function(func) {
    /**
     * @param {!HTMLElement} doc
     * @return {?}
     */
    function load(doc) {
      var self = func.call(this, doc) || this;
      return self._soundManager = exports.ResourceManager.getInstance().getSndManager(), self.createSounds(), self._volume = 0.8, self._inMenu = false, self._shouldPlayOnMenuClose = false, doc.addEventListener(options.WinCounterEvent.START, function() {
        return self.onWinCounterStart();
      }), doc.addEventListener(options.WinCounterEvent.STOP, function() {
        return self.onWinCounterStop();
      }), doc.addEventListener(exports.InfoEvent.INFO, function(t) {
        return self.onInfo(t);
      }), doc.addEventListener(v.MENUSHOW, function() {
        return self.onMenu(true);
      }), doc.addEventListener(v.MENUHIDE, function() {
        return self.onMenu(false);
      }), doc.addEventListener(v.SHOW_PAYTABLE, function() {
        return self.onMenu(true);
      }), doc.addEventListener(v.HIDE_PAYTABLE, function() {
        return self.onMenu(false);
      }), self;
    }
    return addListener(load, func), load.prototype.onInfo = function(data) {
      switch(data.infoId) {
        case options.WinInfoEvent.WIN:
        case options.WinInfoEvent.WIN_NO_COUNT:
          /** @type {number} */
          this._volume = 0.8;
          break;
        default:
          /** @type {number} */
          this._volume = 0;
      }
    }, load.prototype.onMenu = function(container) {
      /** @type {boolean} */
      this._inMenu = container;
      if (this._inMenu) {
        if (this._winCounterLoop.isPlaying()) {
          this._winCounterLoop.stopLoop();
        }
      } else {
        if (this._shouldPlayOnMenuClose && !this._winCounterLoop.isPlaying()) {
          this._winCounterLoop.playForever(this._volume);
        }
      }
    }, load.prototype.createSounds = function() {
      this._winCounterLoop = this._soundManager.create("wincounter_loop");
    }, load.prototype.onWinCounterStart = function() {
      /** @type {boolean} */
      this._shouldPlayOnMenuClose = true;
      if (!(this._inMenu || this._winCounterLoop.isPlaying())) {
        this._winCounterLoop.playForever(this._volume);
      }
    }, load.prototype.onWinCounterStop = function() {
      /** @type {boolean} */
      this._shouldPlayOnMenuClose = false;
      if (!this._inMenu) {
        if (this._winCounterLoop.isPlaying()) {
          this._winCounterLoop.stopLoop();
        }
      }
    }, load;
  }(self.EventProcessor);
  var directorGo = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var DragEvent = function(step) {
    /**
     * @param {undefined} target
     * @param {?} o
     * @param {?} settings
     * @param {undefined} callback
     * @param {!Object} props
     * @return {?}
     */
    function iframe(target, o, settings, callback, props) {
      var _ = step.call(this) || this;
      _._winState = _.createWinState();
      var errors = _.createBigWinLimits();
      return _._winLogicController = _.createWinLogicController(target, _._winState, callback, props, errors[0]), _._winPresentationController = _.createWinPresentationController(target, _._winState, o, settings, callback), _._bigWinPresentationController = _.createBigWinPresentationController(target, _._winState, o, callback, errors), _._winSoundController = _.createWinSoundController(target), _;
    }
    return directorGo(iframe, step), Object.defineProperty(iframe.prototype, "winLogicController", {
      get : function() {
        return this._winLogicController;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(iframe.prototype, "bigWinController", {
      get : function() {
        return this._bigWinPresentationController;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(iframe.prototype, "winState", {
      get : function() {
        return this._winState;
      },
      enumerable : true,
      configurable : true
    }), iframe.prototype.createWinCounter = function() {
      return new JarallaxAnimation(this.createLimits());
    }, iframe.prototype.createBigWinCounter = function(selector) {
      return new JarallaxAnimation(selector);
    }, iframe.prototype.createWinState = function() {
      return new col;
    }, iframe.prototype.createWinLogicController = function(position, container, selector, options, key) {
      return new Cursor(position, container, selector, options, key);
    }, iframe.prototype.createWinPresentationController = function(options, scope, themeJson, name, o) {
      var file = this.createMasterView(themeJson, name);
      return new Scope(options, scope, file, o);
    }, iframe.prototype.createBigWinPresentationController = function(identifier, pos, c, name, selector) {
      var start = this.createBigWinCounter(selector);
      var ofs = this.createBigWinView(c);
      return new ParseError(identifier, start, pos, ofs, name);
    }, iframe.prototype.createWinSoundController = function(request) {
      return new SuggestionsBuilder(request);
    }, iframe.prototype.createMasterView = function(themeJson, name) {
      return new SystemNotFoundError(themeJson, name);
    }, iframe.prototype.createBigWinView = function(n) {
      return new command(n, this.createBigWinLabelSizes());
    }, iframe.prototype.createLimits = function() {
      return [1, 3, 7, 15];
    }, iframe.prototype.createBigWinLimits = function() {
      return [20, 100, 250, 500];
    }, iframe.prototype.createBigWinLabelSizes = function() {
      return [0.9, 1.3, 1.65, 2];
    }, iframe;
  }(options.WinManager);
  var handlerFactory = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Jo = function(self) {
    /**
     * @param {?} o
     * @param {?} n
     * @param {?} context
     * @param {?} e
     * @return {?}
     */
    function i(o, n, context, e) {
      var that = self.call(this, o, n, context, e) || this;
      return options.GuaranteedJackpotManager.create(that._config, that._dispatcher).init(), that;
    }
    return handlerFactory(i, self), i.prototype.createResourceManager = function(userEffigy) {
      return new UserMessageProcessor(this._config, userEffigy, this._dispatcher);
    }, i.prototype.createConfig = function() {
      return new BuddhaConfig;
    }, i.prototype.createGameSetting = function() {
      return new Un;
    }, i.prototype.createExternalInterface = function() {
      return new re(this._dispatcher, this._gameSettings, this._roundHandler, this._betSettings, this._autoplaySettings, this._config);
    }, i.prototype.createRoundHandler = function() {
      return new MapView(this._config);
    }, i.prototype.createRoundController = function() {
      return new Ki(this._dispatcher, this._roundHandler);
    }, i.prototype.initGame = function() {
      self.prototype.initGame.call(this);
      var cx = exports.ResourceManager.getInstance().getEntityManager();
      this._entity = cx.create("?");
      cx.add("main", this._entity);
      this.createBetCommandConverter();
      this.createJackpotCommandConverter();
      this.createFeatureCommandConverter();
      this.createFreespinCommandConverter();
      this.createGambleCommandConverter();
      this.createLogicCommandConverter();
      this.createFreeGameCommandConverter();
      var dir = event.NONE;
      if (this._config.betMode === result.FIXED) {
        /** @type {number} */
        dir = event.LINE | event.COIN | event.FIXED_BET;
      }
      this._betSettings = this.createBetSettings(dir);
      this.createBetController(this._betSettings);
      this._autoplaySettings = this.createAutoplaySettings();
      this._autoplayHandler = this.createAutoplayHandler(this._autoplaySettings, this._roundHandler);
      this.createRealityCheckManager();
      this.createMainGameHandler();
      this._bonusBalanceManager = this.createBonusBalanceManager();
      this._freeGameManager = this.createFreeGameManager();
      this._paytableData = this.createPaytableHandler(this._betSettings);
      if (!(this._config.hideFastPlay || this._config.disableFastPlay || this._config.disableFastPlayQuestion)) {
        this.createFastPlayQuestionManager();
      }
    }, i.prototype.createPaytableHandler = function(name) {
      return new CallChain(name, 1);
    }, i.prototype.createBetCommandConverter = function() {
      new exports.BetCommandConverter(this._dispatcher);
    }, i.prototype.createJackpotCommandConverter = function() {
      new options.JackpotCommandConverter(this._dispatcher);
    }, i.prototype.createFeatureCommandConverter = function() {
      new Ke(this._dispatcher);
    }, i.prototype.createFreespinCommandConverter = function() {
      new Nn(this._dispatcher);
    }, i.prototype.createGambleCommandConverter = function() {
      new yt(this._dispatcher);
    }, i.prototype.createLogicCommandConverter = function() {
      var config = this._config;
      new SequelizeAuto(this._dispatcher, config.numberOfRealServerSymbolsPerReel, config.numberOfAdjacentServerSymbols);
    }, i.prototype.createFreeGameCommandConverter = function() {
      new ComponentManager(this._dispatcher, this._config);
    }, i.prototype.createFreeGameManager = function() {
      return new ReferenceList(this._dispatcher, this._betSettings, this._config, this._roundHandler);
    }, i.prototype.createBonusBalanceManager = function() {
      return new Dt(this._dispatcher, this._roundHandler);
    }, i.prototype.createJackpotManager = function() {
      return new options.JackpotManager(this._dispatcher, this._config);
    }, i.prototype.createBetController = function(name) {
      new DooberTooltip(this._dispatcher, this._roundHandler, name, this._config);
    }, i.prototype.createMainGameHandler = function() {
      new Fn(this._dispatcher, this._entity, "mainGame");
    }, i.prototype.createAutoplayHandler = function(important, order) {
      return new Klass(this._dispatcher, important, order, this._config);
    }, i.prototype.createBetSettings = function(dirMagnitude) {
      return new WebGLConstants(20, 5, 0, dirMagnitude);
    }, i.prototype.createAutoplaySettings = function() {
      var config = this._config;
      return new RuleContext(true, true, false, true, config.autoplayReset, config.autoplayLimits, config.autoPlayResume);
    }, i.prototype.createLogicManager = function() {
      var level = this.createJackpotManager();
      this._freespinManager = this.createFreespinManager();
      this._symbolManager = this.createSymbolManager(this._entity);
      this._reelManager = this.createReelManager(this._symbolManager, this._freespinManager, this._gameSettings);
      this._winManager = this.createWinManager(this._reelManager, this._betSettings, this._gameSettings);
      var adjustedLevel = this.createFeatureManager(level);
      var triangleUVs = this.createGambleManager();
      var triangleVAO = this.createIdleManager();
      return new SimplicialMesh(this._dispatcher, this._logicQueue, this._roundHandler, this._gameSettings, this._config, this._betSettings, this._reelManager, this._symbolManager, adjustedLevel, this._winManager, this._freespinManager, triangleUVs, this._freeGameManager, triangleVAO);
    }, i.prototype.createSymbolManager = function(context) {
      return new ObservedInfo(this._dispatcher, context);
    }, i.prototype.createReelManager = function(type, name, n) {
      return new LogicGate(this._dispatcher, type, name, this._config, this._entity, n);
    }, i.prototype.createWinManager = function(s, id, n) {
      return new DragEvent(this._dispatcher, this._entity, s, id, n);
    }, i.prototype.createFeatureManager = function(options) {
      return new SwarmMeta(this._dispatcher, this._logicQueue, options, this._config);
    }, i.prototype.createFreespinManager = function() {
      return new Hn(this._dispatcher, this._logicQueue, this._entity);
    }, i.prototype.createGambleManager = function() {
      return new individual(this._dispatcher, this._logicQueue, this._roundHandler, this._betSettings);
    }, i.prototype.createIdleManager = function() {
      return new Gn(this._reelManager);
    }, i.prototype.createUI = function(options) {
      return new PxLoaderSound(this._dispatcher, this._betSettings, this._config, this._winManager, options);
    }, i.prototype.createUIByChannel = function(callback) {
      return this.createUI(callback);
    }, i.prototype.createViewFactory = function() {
      return new Expression;
    }, i.prototype.createRealityCheckManager = function() {
      new options.RealityCheckManager(this._dispatcher, this._config);
    }, i.prototype.createServerMessageHandler = function() {
      return new xt(this._dispatcher);
    }, i.prototype.onDestroy = function(actor) {
      self.prototype.onDestroy.call(this, actor);
      if (this._autoplayHandler) {
        this._autoplayHandler.stop();
      }
    }, i.prototype.createFastPlayQuestionManager = function() {
      return new pe(this._dispatcher, this._gameSettings);
    }, i;
  }(exports.CasinoGame);
  var getModule = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var zo = function(loader) {
    /**
     * @param {?} params
     * @param {?} progress
     * @return {?}
     */
    function base(params, progress) {
      var i = loader.call(this, params, progress) || this;
      return i._freeSpinMode = false, i;
    }
    return getModule(base, loader), base.prototype.attachEventListeners = function(p) {
      var options = this;
      p.addEventListener(panel.SPIN_START, function() {
        return options.onSpin();
      });
      p.addEventListener(exports.RoundEvent.ROUNDEND, function(t) {
        return options.onRoundEnd(t);
      });
      p.addEventListener(v.SHOW_PAYTABLE, function() {
        return options.onPaytableShow();
      });
      p.addEventListener(v.HIDE_PAYTABLE, function() {
        return options.onPaytableHide();
      });
      p.addEventListener(e.FREESPIN_START, function() {
        return options.onFreeSpinStart();
      });
      p.addEventListener(e.FREESPIN_END, function() {
        return options.onFreeSpinEnd();
      });
      p.addEventListener(that.START, function() {
        return options.onWin();
      });
    }, base.prototype.onSpin = function() {
      /** @type {boolean} */
      this._isInIdle = false;
      if (this._freeSpinMode) {
        this.hide();
      }
    }, base.prototype.onRoundEnd = function(result) {
      /** @type {boolean} */
      this._isInIdle = true;
    }, base.prototype.onFreeSpinStart = function() {
      /** @type {boolean} */
      this._freeSpinMode = true;
    }, base.prototype.onFreeSpinEnd = function() {
      /** @type {boolean} */
      this._freeSpinMode = false;
      this.show();
    }, base.prototype.onPaytableShow = function() {
      this.show();
    }, base.prototype.onPaytableHide = function() {
      if (this._freeSpinMode) {
        this.hide();
      }
    }, base.prototype.onWin = function() {
      /** @type {boolean} */
      this._isInIdle = false;
      this._logoInnerAnim.play("win");
    }, base.prototype.onIdle = function() {
      if (!this._freeSpinMode) {
        loader.prototype.onIdle.call(this);
      }
    }, base;
  }(options.Logo);
  var qo = function() {
    /**
     * @param {?} itemClassName
     * @param {number} itemDis
     * @param {?} vW
     * @param {?} vH
     * @param {number} isVertical
     * @param {string} size
     * @param {!Object} intSetSource
     * @param {boolean} numberOfSets
     * @param {!Array} numberOfPairs
     * @return {undefined}
     */
    function ScrollList(itemClassName, itemDis, vW, vH, isVertical, size, intSetSource, numberOfSets, numberOfPairs) {
      if (void 0 === numberOfPairs) {
        /** @type {!Array} */
        numberOfPairs = [];
      }
      this._stageNum = itemClassName;
      /** @type {number} */
      this._numItems = itemDis;
      this._numSelections = vW;
      this._hasAward = vH;
      /** @type {number} */
      this._needsComm = isVertical;
      /** @type {string} */
      this._selectionAwards = size;
      /** @type {!Object} */
      this._awardIndices = intSetSource;
      /** @type {boolean} */
      this._isFinal = numberOfSets;
      /** @type {!Array} */
      this._data = numberOfPairs;
    }
    return Object.defineProperty(ScrollList.prototype, "stageNum", {
      get : function() {
        return this._stageNum;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "numItems", {
      get : function() {
        return this._numItems;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "numSelections", {
      get : function() {
        return this._numSelections;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "hasAward", {
      get : function() {
        return this._hasAward;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "needsComm", {
      get : function() {
        return this._needsComm;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "final", {
      get : function() {
        return this._isFinal;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "availableSelections", {
      get : function() {
        return this._awardIndices.length;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "selectionAwards", {
      get : function() {
        return this._selectionAwards.concat();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "data", {
      get : function() {
        return this._data.concat();
      },
      enumerable : true,
      configurable : true
    }), ScrollList.prototype.getSelectionAward = function(ballNumber) {
      return this._selectionAwards[ballNumber];
    }, ScrollList.prototype.getAwardIndex = function(ballNumber) {
      return this._awardIndices[ballNumber];
    }, ScrollList.prototype.getAwardBySelectionIndex = function(ballNumber) {
      return this._selectionAwards[this._awardIndices[ballNumber]];
    }, ScrollList;
  }();
  var DowngradeNg2ComponentAdapter = function() {
    /**
     * @param {?} state
     * @param {number} section
     * @param {?} version
     * @param {?} meta
     * @param {number} insert_value
     * @return {undefined}
     */
    function t(state, section, version, meta, insert_value) {
      if (void 0 === insert_value) {
        /** @type {boolean} */
        insert_value = true;
      }
      this._stageNum = state;
      /** @type {number} */
      this._numItems = section;
      this._numSelections = version;
      this._hasAward = meta;
      /** @type {number} */
      this._needsComm = insert_value;
      this.reset();
    }
    return Object.defineProperty(t.prototype, "hasAward", {
      get : function() {
        return this._hasAward;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "inited", {
      get : function() {
        return this._inited;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "final", {
      get : function() {
        return this._isFinal;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "needsComm", {
      get : function() {
        return this._needsComm;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "numSelections", {
      get : function() {
        return this._numSelections;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "numItems", {
      get : function() {
        return this._numItems;
      },
      enumerable : true,
      configurable : true
    }), t.prototype.reset = function() {
      /** @type {!Array} */
      this._data = [];
      /** @type {!Array} */
      this._selectionAwards = [];
      /** @type {!Array} */
      this._awardIndices = [];
      /** @type {boolean} */
      this._isFinal = false;
      /** @type {boolean} */
      this._inited = false;
    }, t.prototype.init = function(ast, text, name) {
      if (void 0 === name && (name = []), this.inited) {
        throw new Error("Wrong call order!");
      }
      /** @type {string} */
      this._selectionAwards = ast;
      /** @type {string} */
      this._awardIndices = text;
      /** @type {!Object} */
      this._data = name;
      /** @type {boolean} */
      this._isFinal = true;
      /** @type {boolean} */
      this._inited = true;
    }, t.prototype.nonFinal = function() {
      if (!this._inited) {
        throw new Error("Wrong call order!");
      }
      /** @type {boolean} */
      this._isFinal = false;
    }, t.prototype.createRepresentation = function() {
      if (!this._inited) {
        throw new Error("Wrong call order!");
      }
      return new qo(this._stageNum, this._numItems, this._numSelections, this._hasAward, this._needsComm, this._selectionAwards, this._awardIndices, this._isFinal, this._data);
    }, t.prototype.getAward = function(subsubkey) {
      return this._selectionAwards[this._awardIndices[subsubkey]];
    }, t;
  }();
  var reactContains = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Model = function(instance) {
    /**
     * @param {number} viewer
     * @param {number} width
     * @return {?}
     */
    function DisplayObject(viewer, width) {
      var o = instance.call(this) || this;
      return o._stageCountStart = viewer, o._selectionCountStart = width, o._stages = [], o;
    }
    return reactContains(DisplayObject, instance), Object.defineProperty(DisplayObject.prototype, "numStages", {
      get : function() {
        return this._stages.length;
      },
      enumerable : true,
      configurable : true
    }), DisplayObject.prototype.addStage = function(port, host, name, key) {
      if (void 0 === name) {
        /** @type {boolean} */
        name = true;
      }
      if (void 0 === key) {
        /** @type {boolean} */
        key = true;
      }
      var i = this._stages.length;
      return this._stages.push(this.createBonusStage(i, port, host, name, key)), i;
    }, DisplayObject.prototype.init = function(n, s, value, type) {
      if (void 0 === type) {
        /** @type {!Array} */
        type = [];
      }
      /** @type {number} */
      var i = n - this._stageCountStart;
      if (this._stages[i - 1]) {
        this._stages[i - 1].nonFinal();
      }
      this._stages[i].init(s, value, type);
    }, DisplayObject.prototype.createRepresentation = function(type) {
      return this._stages[type].createRepresentation();
    }, DisplayObject.prototype.getStage = function(name) {
      return this._stages[name];
    }, DisplayObject.prototype.getIsFinal = function(code) {
      return this._stages[code] && this._stages[code].final;
    }, DisplayObject.prototype.getNeedsComm = function(ballNumber) {
      return this._stages[ballNumber].needsComm;
    }, DisplayObject.prototype.getData = function(metric) {
      return this._stages[metric].data;
    }, DisplayObject.prototype.getNumItems = function(n) {
      return this._stages[n].numItems;
    }, DisplayObject.prototype.getNumSelections = function(ballNumber) {
      return this._stages[ballNumber].numSelections;
    }, DisplayObject.prototype.getHasAward = function(ballNumber) {
      return this._stages[ballNumber].hasAward;
    }, DisplayObject.prototype.getAward = function(ownerId, userId) {
      return this._stages[ownerId].getAward(userId);
    }, DisplayObject.prototype.isLastSelection = function(url, whensCollection) {
      return whensCollection === this._stages[url].numSelections - 1;
    }, DisplayObject.prototype.anyMoreSelection = function(data, type) {
      return type < this._stages[data].numSelections - 1;
    }, DisplayObject.prototype.createBonusStage = function(eachIndex, type, element, attrs, scope) {
      return void 0 === scope && (scope = true), new DowngradeNg2ComponentAdapter(eachIndex, type, element, attrs, scope);
    }, DisplayObject;
  }(self.Model);
  var Adapter = function() {
    /**
     * @param {number} eta
     * @param {?} lmbda
     * @param {number} n
     * @param {number} froot
     * @return {undefined}
     */
    function TodoAppPM(eta, lmbda, n, froot) {
      if (void 0 === n) {
        /** @type {number} */
        n = 1;
      }
      if (void 0 === froot) {
        /** @type {number} */
        froot = 1;
      }
      /** @type {number} */
      this._sendsStage = eta;
      this._sendsSelection = lmbda;
      /** @type {number} */
      this._stageCountStart = n;
      /** @type {number} */
      this._selectionCountStart = froot;
    }
    return Object.defineProperty(TodoAppPM.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), TodoAppPM.prototype.update = function(data) {
      if (this._sendsStage) {
        /** @type {number} */
        this._stage = data.value - this._stageCountStart;
        if (this._sendsSelection) {
          /** @type {number} */
          this._selection = Number(data.data[0]) - this._selectionCountStart;
          /** @type {number} */
          this._value = Number(data.data[1]);
        } else {
          /** @type {number} */
          this._selection = -1;
          /** @type {number} */
          this._value = Number(data.data[0]);
        }
      } else {
        /** @type {number} */
        this._stage = -1;
        if (this._sendsSelection) {
          /** @type {number} */
          this._selection = data.value - this._selectionCountStart;
          /** @type {number} */
          this._value = Number(data.data[0]);
        } else {
          /** @type {number} */
          this._selection = -1;
          this._value = data.value;
        }
      }
    }, TodoAppPM.prototype.isCurrentAnswer = function(depsOptions, node) {
      return this._sendsStage ? this._stage === depsOptions && (!this._sendsSelection || this._selection === node) : !this._sendsSelection || this._selection === node;
    }, TodoAppPM;
  }();
  var Actions = function() {
    /**
     * @param {number} eta
     * @param {?} lmbda
     * @param {number} n
     * @param {number} froot
     * @return {undefined}
     */
    function TodoAppPM(eta, lmbda, n, froot) {
      if (void 0 === n) {
        /** @type {number} */
        n = 1;
      }
      if (void 0 === froot) {
        /** @type {number} */
        froot = 1;
      }
      /** @type {number} */
      this._sendsStage = eta;
      this._sendsSelection = lmbda;
      /** @type {number} */
      this._stageCountStart = n;
      /** @type {number} */
      this._selectionCountStart = froot;
    }
    return Object.defineProperty(TodoAppPM.prototype, "featureData", {
      get : function() {
        return [this._value, this._data];
      },
      enumerable : true,
      configurable : true
    }), TodoAppPM.prototype.update = function(newValue, index, data) {
      if (this._sendsStage) {
        if (this._sendsSelection) {
          this._value = newValue + this._stageCountStart;
          /** @type {!Array} */
          this._data = [(index + this._selectionCountStart).toString(), data.toString()];
        } else {
          this._value = newValue + this._stageCountStart;
          /** @type {!Array} */
          this._data = [data.toString()];
        }
      } else {
        if (this._sendsSelection) {
          this._value = index + this._selectionCountStart;
          /** @type {!Array} */
          this._data = [data.toString()];
        } else {
          /** @type {string} */
          this._value = data;
          /** @type {!Array} */
          this._data = [];
        }
      }
    }, TodoAppPM;
  }();
  var exists = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var fileConstructor = function(handle) {
    /**
     * @param {?} data
     * @param {number} e
     * @param {number} canvas
     * @param {number} text
     * @param {number} type
     * @return {?}
     */
    function Tooltip(data, e, canvas, text, type) {
      if (void 0 === e) {
        /** @type {number} */
        e = -1;
      }
      if (void 0 === canvas) {
        /** @type {number} */
        canvas = -1;
      }
      if (void 0 === text) {
        /** @type {number} */
        text = -1;
      }
      if (void 0 === type) {
        /** @type {number} */
        type = -1;
      }
      var self = handle.call(this, data) || this;
      return self._stage = e, self._selection = canvas, self._value = text, self._award = type, self;
    }
    return exists(Tooltip, handle), Object.defineProperty(Tooltip.prototype, "stage", {
      get : function() {
        return this._stage;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Tooltip.prototype, "selection", {
      get : function() {
        return this._selection;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Tooltip.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Tooltip.prototype, "award", {
      get : function() {
        return this._award;
      },
      enumerable : true,
      configurable : true
    }), Tooltip.INTRO = "BONUS_INTRO", Tooltip.OUTRO = "BONUS_OUTRO", Tooltip.STAGE_INTRO = "BONUS_STAGE_INTRO", Tooltip.STAGE_OUTRO = "BONUS_STAGE_OUTRO", Tooltip.SELECTION_INTRO = "BONUS_SELECTION_INTRO", Tooltip.SELECTION_OUTRO = "BONUS_SELECTION_OUTRO", Tooltip.SELECTION = "BONUS_SELECTION", Tooltip;
  }(self.MegatonEvent);
  var func = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var rr = function(co) {
    /**
     * @param {!Array} options
     * @return {?}
     */
    function exports(options) {
      if (void 0 === options) {
        /** @type {null} */
        options = null;
      }
      var self = co.call(this) || this;
      if (options) {
        /** @type {!Array} */
        self._entity = options;
      } else {
        var app = exports.ResourceManager.getInstance().getEntityManager();
        self._entity = app.create("?");
        app.add("bonus", self._entity);
      }
      return self._boundBonusHandlers = {
        intro : function(params) {
          return self.bonusIntroHandler(params);
        },
        outro : function(play) {
          return self.bonusOutroHandler(play);
        }
      }, self._boundStageHandlers = {
        intro : function(params) {
          return self.stageIntroHandler(params);
        },
        outro : function(t) {
          return self.stageOutroHandler(t);
        }
      }, self._boundSelectionHandlers = {
        intro : function(time) {
          return self.selectionIntroHandler(time);
        },
        process : function(obj) {
          return self.selectionProcessHandler(obj);
        },
        present : function(f) {
          return self.selectionPresentHandler(f);
        },
        outro : function(play) {
          return self.selectionOutroHandler(play);
        }
      }, self;
    }
    return func(exports, co), Object.defineProperty(exports.prototype, "entity", {
      get : function() {
        return this._entity;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "selection", {
      set : function(value) {
        this._selection = value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "onSelection", {
      set : function(onSelectionCallback) {
        this._onSelection = onSelectionCallback;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "currentStage", {
      set : function(mymuted) {
        /** @type {number} */
        this._currentStage = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "currentStageData", {
      set : function(mymuted) {
        /** @type {number} */
        this._currentStageData = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "currentSelection", {
      set : function(entry) {
        this._currentSelection = entry;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "availableSelections", {
      set : function(mymuted) {
        /** @type {!Object} */
        this._availableSelections = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "totalCoins", {
      set : function(mymuted) {
        /** @type {number} */
        this._totalCoins = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "pickInfoMessage", {
      get : function() {
        return "IDS_MSG_PICKONE";
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "goodLuckInfoMessage", {
      get : function() {
        return "IDS_MSG_GOODLUCK";
      },
      enumerable : true,
      configurable : true
    }), exports.prototype.initButton = function(id, element) {
      var $scope = this;
      var control = this.getButton(id, element);
      control.addEventListener(exports.ButtonEvent.CLICK, function(serviceTypeId) {
        return $scope.onUISelection(element, serviceTypeId);
      });
      if (this.onHover) {
        control.addEventListener(exports.ButtonHoverEvent.HOVER, function(item) {
          return $scope.onHover(element, item);
        });
      }
      control.enable(false);
    }, exports.prototype.enableInteraction = function() {
      /** @type {number} */
      var date = 0;
      var end = this._currentStageData.numItems;
      for (; date < end; date++) {
        if (this._availableSelections.indexOf(date) > -1) {
          this.getButton(this._currentStage, date).enable(true);
        }
      }
    }, exports.prototype.disableInteraction = function() {
      if (this._timeoutTask) {
        this._timeoutTask.complete();
      }
      /** @type {number} */
      var z = 0;
      var end = this._currentStageData.numItems;
      for (; z < end; z++) {
        this.getButton(this._currentStage, z).enable(false);
      }
    }, exports.prototype.reset = function() {
      if (this._timeoutTask) {
        this._timeoutTask.complete();
      }
    }, exports.prototype.selectionProcessHandler = function(args) {
      switch(args.state) {
        case 0:
          args.startHandler(this._boundSelectionHandlers.present);
          break;
        default:
          /** @type {number} */
          var index = 0;
          var n = this._currentStageData.numItems;
          for (; index < n; index++) {
            this.getButton(this._currentStage, index).select(false);
          }
          args.complete();
      }
    }, exports.prototype.execBonusIntro = function(object) {
      object.execHandler(this._boundBonusHandlers.intro);
    }, exports.prototype.bonusIntroHandler = function(second) {
      second.complete();
    }, exports.prototype.execBonusOutro = function(value) {
      value.execHandler(this._boundBonusHandlers.outro);
    }, exports.prototype.bonusOutroHandler = function(s) {
      s.complete();
    }, exports.prototype.execStageIntro = function(object) {
      object.execHandler(this._boundStageHandlers.intro);
    }, exports.prototype.stageIntroHandler = function(second) {
      second.complete();
    }, exports.prototype.startStageOutro = function(args) {
      args.startHandler(this._boundStageHandlers.outro);
    }, exports.prototype.stageOutroHandler = function(result) {
      result.complete();
    }, exports.prototype.startSelectionIntro = function(args) {
      args.startHandler(this._boundSelectionHandlers.intro);
    }, exports.prototype.selectionIntroHandler = function(defaults) {
      defaults.complete();
    }, exports.prototype.execSelectionOutro = function(value) {
      value.execHandler(this._boundSelectionHandlers.outro);
    }, exports.prototype.selectionOutroHandler = function(s) {
      s.complete();
    }, exports.prototype.onUISelection = function(parent, project) {
      this.getButton(this._currentStage, parent).select(true);
      this._onSelection(parent);
    }, exports.prototype.startSelectionPresent = function(self) {
      self.startHandler(this._boundSelectionHandlers.process);
    }, exports.prototype.selectionPresentHandler = function(a) {
      a.complete();
    }, exports.HIDE_WIN_COUNTER = "BV_HIDE_WIN_COUNTER", exports.SHOW_WIN_COUNTER = "BV_SHOW_WIN_COUNTER", exports.SHOW_PICK_INFO = "BV_SHOW_PICK_INFO", exports.SHOW_GOOD_LUCK_INFO = "BV_SHOW_GOOD_LUCK_INFO", exports.CLEAR_INFO = "BV_CLEAR_INFO", exports.SHOW_INFO = "BV_SHOW_INFO", exports;
  }(self.Dispatcher);
  var extend = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var tCell = function(transition) {
    /**
     * @param {?} scene
     * @param {?} options
     * @param {?} callback
     * @param {!Element} name
     * @param {number} client
     * @param {number} actions
     * @param {number} config
     * @param {number} args
     * @param {!Array} duration
     * @return {?}
     */
    function constructor(scene, options, callback, name, client, actions, config, args, duration) {
      if (void 0 === client) {
        /** @type {boolean} */
        client = false;
      }
      if (void 0 === actions) {
        /** @type {boolean} */
        actions = false;
      }
      if (void 0 === config) {
        /** @type {number} */
        config = 1;
      }
      if (void 0 === args) {
        /** @type {number} */
        args = 1;
      }
      if (void 0 === duration) {
        /** @type {boolean} */
        duration = false;
      }
      var self = transition.call(this, scene, options, callback) || this;
      /** @type {boolean} */
      self._running = false;
      /** @type {boolean} */
      self._disabled = false;
      /** @type {boolean} */
      self._waitingInteraction = false;
      /** @type {!Array} */
      self._forwardNotifications = duration;
      self._model = self.createModel(config, args);
      /** @type {!Element} */
      self._view = name;
      /**
       * @param {?} e
       * @return {?}
       */
      self._view.onSelection = function(e) {
        return self.onSelection(e);
      };
      self._view.addListener(function(t) {
        return self.onViewNotify(t);
      });
      self._bonusAnswerData = new Adapter(client, actions, config, args);
      self._bonusSendData = new Actions(client, actions, config, args);
      /**
       * @param {?} e
       * @return {?}
       */
      var on_captionView_click = function(e) {
        return self.onGameDisabled(e);
      };
      self._dispatcher.addEventListener(exports.GameStatusEvent.DISABLE, on_captionView_click);
      self._dispatcher.addEventListener(exports.GameStatusEvent.DISABLED, on_captionView_click);
      self._dispatcher.addEventListener(v.SHOW_PAYTABLE, on_captionView_click);
      self._dispatcher.addEventListener(v.MENUSHOW, on_captionView_click);
      /**
       * @param {?} e
       * @return {?}
       */
      var setDragMove = function(e) {
        return self.onGameEnabled(e);
      };
      return self._dispatcher.addEventListener(exports.GameStatusEvent.ENABLE, setDragMove), self._dispatcher.addEventListener(exports.GameStatusEvent.ENABLED, setDragMove), self._dispatcher.addEventListener(v.HIDE_PAYTABLE, setDragMove), self._dispatcher.addEventListener(v.MENUHIDE, setDragMove), self.reset(), self._boundBonusHandlers = {
        intro : function(params) {
          return self.bonusIntroHandler(params);
        },
        process : function(link) {
          return self.bonusProcessHandler(link);
        },
        outro : function(play) {
          return self.bonusOutroHandler(play);
        }
      }, self._boundStageHandlers = {
        intro : function(params) {
          return self.stageIntroHandler(params);
        },
        process : function(link) {
          return self.stageProcessHandler(link);
        },
        outro : function(t) {
          return self.stageOutroHandler(t);
        }
      }, self._boundSelectionHandlers = {
        intro : function(time) {
          return self.selectionIntroHandler(time);
        },
        process : function(target) {
          return self.processIOHandler(target);
        },
        clear : function(cat) {
          return self.clearIOHandler(cat);
        },
        outro : function(play) {
          return self.selectionOutroHandler(play);
        }
      }, self._boundExtraOutroHandler = function(data) {
        return self.extraOutroHandler(data);
      }, self;
    }
    return extend(constructor, transition), Object.defineProperty(constructor.prototype, "view", {
      get : function() {
        return this._view;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "currentStageData", {
      get : function() {
        return this._currentStageData;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "currentStage", {
      get : function() {
        return this._currentStage;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "currentSelection", {
      get : function() {
        return this._currentSelection;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(constructor.prototype, "selection", {
      get : function() {
        return this._selection;
      },
      enumerable : true,
      configurable : true
    }), constructor.prototype.addStage = function(name, callback, options, host) {
      if (void 0 === options) {
        /** @type {boolean} */
        options = true;
      }
      if (void 0 === host) {
        /** @type {boolean} */
        host = true;
      }
      var id = this._model.addStage(name, callback, options, host);
      /** @type {number} */
      var start = 0;
      for (; start < name; start++) {
        this._view.initButton(id, start);
      }
    }, constructor.prototype.initStage = function(a, e, n, options) {
      var data;
      data = "number" == typeof e ? [e] : e;
      var value;
      if (n) {
        value = "number" == typeof n ? [n] : n;
      } else {
        /** @type {!Array} */
        value = [];
        /** @type {number} */
        var i = 0;
        var nbElts = data.length;
        for (; i < nbElts; i++) {
          value.push(i);
        }
      }
      this._model.init(a, data, value, options);
    }, constructor.prototype.reset = function() {
      /** @type {number} */
      this._currentStage = -1;
      /** @type {number} */
      this._currentSelection = -1;
      /** @type {number} */
      this._selection = -1;
      this._currentStageData = void 0;
      /** @type {number} */
      var i = 0;
      var records = this._model.numStages;
      for (; i < records; i++) {
        this._model.getStage(i).reset();
      }
      /** @type {number} */
      this._view.totalCoins = -1;
      this._view.reset();
    }, constructor.prototype.hasNextSelection = function(result, value) {
      return this._model.anyMoreSelection(result, value);
    }, constructor.prototype.createServerData = function(canCreateDiscussions) {
      return canCreateDiscussions;
    }, constructor.prototype.createAward = function(canCreateDiscussions) {
      return canCreateDiscussions;
    }, constructor.prototype.createModel = function(args, data) {
      return new Model(args, data);
    }, constructor.prototype.processDataHandler = function(self) {
      switch(self.state) {
        case 0:
          if (0 === this._model.numStages) {
            throw new Error("No added stages to work with! Use 'this.addStage' in overridden constructor!");
          }
          this._view.totalCoins = this.totalCoins;
          self.startHandler(this._boundBonusHandlers.intro);
          break;
        case 1:
          if (!this._model.getIsFinal(this._currentStage)) {
            this._currentStage++;
            this._currentStageData = this._model.createRepresentation(this._currentStage);
            self.startHandler(this._boundBonusHandlers.process);
            self.next(1);
            break;
          }
          self.startHandler(this._boundBonusHandlers.outro);
          break;
        default:
          this.reset();
          self.complete();
      }
    }, constructor.prototype.bonusIntroHandler = function(a) {
      this._dispatcher.dispatch(new ProgressEvent(fileConstructor.INTRO));
      this._view.execBonusIntro(a);
    }, constructor.prototype.bonusProcessHandler = function(self) {
      switch(self.state) {
        case 0:
          if (!this._model.getStage(this._currentStage).inited) {
            throw new Error("Stage" + this._currentStage.toString() + "not inited! Use 'this.initStage' in overridden 'onAward' method!");
          }
          self.startHandler(this._boundStageHandlers.intro);
          break;
        case 1:
          if (this.hasNextSelection(this._currentStage, this._currentSelection)) {
            this._currentSelection++;
            self.startHandler(this._boundStageHandlers.process);
            self.next(1);
            break;
          }
          self.startHandler(this._boundStageHandlers.outro);
          break;
        default:
          /** @type {number} */
          this._currentSelection = -1;
          self.complete();
      }
    }, constructor.prototype.bonusOutroHandler = function(status) {
      this._dispatcher.dispatch(new ProgressEvent(fileConstructor.OUTRO));
      this._view.execBonusOutro(status);
    }, constructor.prototype.stageIntroHandler = function(a) {
      /** @type {!Array} */
      this._availableSelections = [];
      /** @type {number} */
      var total = 0;
      var total_icons = this._model.getNumItems(this._currentStage);
      for (; total < total_icons; total++) {
        this._availableSelections.push(total);
      }
      this._view.currentStage = this._currentStage;
      this._view.currentStageData = this._currentStageData;
      this._dispatcher.dispatch(new ProgressEvent(fileConstructor.STAGE_INTRO));
      this._view.execStageIntro(a);
    }, constructor.prototype.stageProcessHandler = function(self) {
      switch(self.state) {
        case 0:
          self.startHandler(this._boundSelectionHandlers.intro);
          break;
        case 1:
          /** @type {boolean} */
          this._waitingInteraction = true;
          self.startHandler(this._boundSelectionHandlers.process);
          break;
        case 2:
          /** @type {boolean} */
          this._waitingInteraction = false;
          if (this._model.getNeedsComm(this._currentStage)) {
            self.startHandler(this._boundSelectionHandlers.clear);
          } else {
            this._view.startSelectionPresent(self);
            self.next(4);
          }
          break;
        case 3:
          this._view.startSelectionPresent(self);
          break;
        case 4:
          self.startHandler(this._boundSelectionHandlers.outro);
          break;
        default:
          /** @type {number} */
          this._selection = -1;
          self.complete();
      }
    }, constructor.prototype.stageOutroHandler = function(a) {
      switch(a.state) {
        case 0:
          this._dispatcher.dispatch(new ProgressEvent(fileConstructor.STAGE_OUTRO));
          this._view.startStageOutro(a);
          break;
        case 1:
          this._availableSelections = void 0;
          this._view.availableSelections = void 0;
          this._view.currentSelection = void 0;
          this._view.currentStageData = void 0;
          a.complete();
      }
    }, constructor.prototype.selectionIntroHandler = function(a) {
      switch(a.state) {
        case 0:
          this._view.currentSelection = this._currentSelection;
          this._dispatcher.dispatch(new ProgressEvent(fileConstructor.SELECTION_INTRO));
          this._view.startSelectionIntro(a);
          break;
        case 1:
          this._view.availableSelections = this._availableSelections;
          if (!this._disabled) {
            this._view.enableInteraction();
          }
          this._dispatcher.dispatch(new s(this._featureId, this._availableSelections));
          a.complete();
      }
    }, constructor.prototype.processIOHandler = function(state) {
      var dgo;
      var item = this._input.read(state);
      for (; item;) {
        if (item.type === obj.FEATUREDATAANSWER && (this._bonusAnswerData.update(item), this._bonusAnswerData.isCurrentAnswer(this._currentStage, this._currentSelection))) {
          if (this._selection = this._bonusAnswerData.value, this._availableSelections.indexOf(this._selection) < 0) {
            throw new Error("Invalid bonus selection!");
          }
          break;
        }
        if (this._input.next(), item.type === types.FEATUREUISELECTED) {
          if (this._selection = item.value, this._availableSelections.indexOf(this._selection) < 0) {
            throw new Error("Invalid bonus selection!");
          }
          if (this._model.getNeedsComm(this._currentStage)) {
            this._bonusSendData.update(this._currentStage, this._currentSelection, this._selection);
            var checked = void 0;
            var historyID = void 0;
            dgo = this.createServerData(this._bonusSendData.featureData);
            checked = dgo[0];
            historyID = dgo[1];
            this._dispatcher.dispatch(new obj(false, checked, historyID));
          }
          break;
        }
        item = this._input.read(state);
      }
      if (-1 !== this._selection) {
        this._dispatcher.dispatch(new s(this._featureId, []));
        this._availableSelections.splice(this._availableSelections.indexOf(this._selection), 1);
        var blobConstructor = this.createAward(this._model.getAward(this._currentStage, this._currentSelection));
        this._dispatcher.dispatch(new fileConstructor(fileConstructor.SELECTION, this._currentStage, this._currentSelection, this._selection, blobConstructor));
        this._view.selection = this._selection;
        this._view.disableInteraction();
        /** @type {boolean} */
        this._waitingInteraction = false;
        state.complete();
      }
    }, constructor.prototype.clearIOHandler = function(name) {
      var file = this._input.read(name);
      for (; file && (this._input.next(), file.type !== obj.FEATUREDATAANSWER);) {
        file = this._input.read(name);
      }
      if (file && file.type === obj.FEATUREDATAANSWER) {
        name.complete();
      }
    }, constructor.prototype.selectionOutroHandler = function(status) {
      this._dispatcher.dispatch(new ProgressEvent(fileConstructor.SELECTION_OUTRO));
      this._view.execSelectionOutro(status);
    }, constructor.prototype.processFeatureHandler = function(isBgroundImg) {
      /** @type {boolean} */
      this._running = true;
      transition.prototype.processFeatureHandler.call(this, isBgroundImg);
    }, constructor.prototype.outroHandler = function(args) {
      switch(args.state) {
        case 0:
          args.startHandler(this._boundExtraOutroHandler);
          break;
        default:
          /** @type {boolean} */
          this._running = false;
          this._dispatcher.dispatch(new ProgressEvent(ProgressEvent.BONUS_ENDED));
          transition.prototype.outroHandler.call(this, args);
      }
    }, constructor.prototype.extraOutroHandler = function(subgoal) {
      subgoal.complete();
    }, constructor.prototype.onStart = function(event) {
      transition.prototype.onStart.call(this, event);
      this._dispatcher.dispatch(new ProgressEvent(ProgressEvent.BONUSWIN));
      this._dispatcher.dispatch(new ProgressEvent(ProgressEvent.BONUS_STARTED, event.symbol));
    }, constructor.prototype.onSelection = function(item) {
      this._view.disableInteraction();
      this._dispatcher.dispatch(new types(item));
    }, constructor.prototype.onViewNotify = function(type) {
      if (type instanceof self.MegatonEvent) {
        if (this._forwardNotifications) {
          this._dispatcher.dispatch(type);
        }
      } else {
        switch(type) {
          case rr.HIDE_WIN_COUNTER:
            this._dispatcher.dispatch(new options.WinCounterControlEvent(options.WinCounterControlEvent.HIDE));
            break;
          case rr.SHOW_WIN_COUNTER:
            this._dispatcher.dispatch(new options.WinCounterControlEvent(options.WinCounterControlEvent.SHOW));
            break;
          case rr.CLEAR_INFO:
            this._dispatcher.dispatch(new exports.InfoEvent("", options.WinInfoEvent.INFO));
            break;
          case rr.SHOW_INFO:
            this._dispatcher.dispatch(new options.WinInfoEvent(0, 0, options.WinInfoEvent.WIN_NO_COUNT));
            break;
          case rr.SHOW_PICK_INFO:
            this._dispatcher.dispatch(new exports.InfoEvent(this._view.pickInfoMessage, options.WinInfoEvent.INFO));
            break;
          case rr.SHOW_GOOD_LUCK_INFO:
            this._dispatcher.dispatch(new exports.InfoEvent(this._view.goodLuckInfoMessage, options.WinInfoEvent.INFO));
        }
      }
    }, constructor.prototype.onGameDisabled = function(a22) {
      /** @type {boolean} */
      this._disabled = true;
      if (this._running && this._waitingInteraction) {
        this._view.disableInteraction();
      }
    }, constructor.prototype.onGameEnabled = function(a22) {
      /** @type {boolean} */
      this._disabled = false;
      if (this._running && this._waitingInteraction) {
        this._view.enableInteraction();
      }
    }, constructor;
  }(c);
  var overrideSetFunctions = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var common2 = function(self) {
    /**
     * @param {?} datum
     * @param {?} order
     * @param {?} t
     * @param {number} b
     * @param {!Object} view
     * @return {?}
     */
    function set(datum, order, t, b, view) {
      var me = self.call(this, datum, order, t) || this;
      /** @type {number} */
      me._numItems = b;
      /** @type {!Object} */
      me._view = view;
      /** @type {!Array} */
      me._possibleValues = [];
      /** @type {!Array} */
      me._pickAwards = [];
      /** @type {!Array} */
      me._picks = [];
      /** @type {!Array} */
      me._processItemSequence = [function(data) {
        return me.processItemSelectIntroHandler(data);
      }, function(key) {
        return me.processItemSelectWaitHandler(key);
      }, function(data) {
        return me.processItemSelectOutroHandler(data);
      }, function(t) {
        return me.processItemPrepareShowHandler(t);
      }, function(key) {
        return me.processItemSelectedWaitHandler(key);
      }, function(data) {
        return me.processItemShowHandler(data);
      }];
      /** @type {number} */
      var g = 0;
      for (; g < b; g++) {
        !function(item) {
          var parser = view.getItem(item);
          parser.initButton(function() {
            return me.onSelected(item);
          });
          parser.addListener(function(t) {
            return me.onItemEvent(t);
          });
        }(g);
      }
      return me._view.addListener(function(t) {
        return me.onItemEvent(t);
      }), me.disableItems(), me;
    }
    return overrideSetFunctions(set, self), set.prototype.onItemEvent = function(type) {
      this._dispatcher.dispatch(type);
    }, set.prototype.introHandler = function(isBgroundImg) {
      this._view.introHandler(isBgroundImg);
    }, set.prototype.disableItems = function() {
      /** @type {number} */
      var status = 0;
      for (; status < this._numItems; status++) {
        this._view.enableItem(status, false);
      }
    }, set.prototype.onStart = function(event) {
      self.prototype.onStart.call(this, event);
      /** @type {!Array} */
      this._pickAwards = [];
      /** @type {!Array} */
      this._picks = [];
      /** @type {!Array} */
      this._possibleValues = [];
      /** @type {number} */
      var item = 0;
      for (; item < this._numItems; item++) {
        this._possibleValues.push(item);
      }
      this._view.clear();
      /** @type {number} */
      item = 0;
      var min = this._numItems;
      for (; item < min; item++) {
        this._view.clearItem(item);
      }
      this._dispatcher.dispatch(new ProgressEvent(ProgressEvent.BONUS_STARTED, event.symbol));
    }, set.prototype.onFeatureProcessed = function() {
      if (self.prototype.onFeatureProcessed.call(this), this._pickAwards.length !== this._numItems) {
        var readersLength = this._pickAwards.length;
        var statistics = readersLength > 0 ? this._pickAwards[readersLength - 1] : null;
        if (!statistics || statistics.coins > 0) {
          this._pickAwards.push(new action(0));
        }
      }
    }, set.prototype.onAward = function(state) {
      self.prototype.onAward.call(this, state);
      if (state.awardType === action.COINS) {
        this._pickAwards.push(state);
      }
    }, set.prototype.processDataHandler = function(args) {
      var ArgsHandler = this;
      switch(args.state) {
        case 0:
          if (this._pickAwards.length <= this._picks.length || !this._needsCollect) {
            return void args.complete();
          }
        default:
          args.startHandler(function(element) {
            return ArgsHandler.processItemHandler(element);
          });
          args.next(0);
      }
    }, set.prototype.onSelected = function(item) {
      this._dispatcher.dispatch(new types(item));
    }, set.prototype.processItemHandler = function(suppressDisabledCheck) {
      suppressDisabledCheck.execSequence(this._processItemSequence);
    }, set.prototype.processItemSelectIntroHandler = function(subgoal) {
      var item = this.getPickItemIntroMessage();
      this._dispatcher.dispatch(new exports.InfoEvent(item, options.WinInfoEvent.INFO));
      this._dispatcher.dispatch(new s(this._featureId, this._possibleValues));
      this.disableItems();
      /** @type {number} */
      var i = 0;
      var ncells = this._possibleValues.length;
      for (; i < ncells; i++) {
        this._view.enableItem(this._possibleValues[i], true);
      }
      subgoal.complete();
    }, set.prototype.getPickItemIntroMessage = function() {
      return "PICK AN ITEM";
    }, set.prototype.processItemSelectWaitHandler = function(state) {
      var item;
      /** @type {number} */
      var checked = -1;
      for (; item = this._input.read(state);) {
        if (item.type === obj.FEATUREDATAANSWER) {
          checked = item.value;
          break;
        }
        if (this._input.next(), item.type === types.FEATUREUISELECTED) {
          checked = item.value;
          this._dispatcher.dispatch(new obj(false, checked, []));
          break;
        }
      }
      if (item) {
        this.onProcessItem(checked);
        state.complete();
      }
    }, set.prototype.onProcessItem = function(val) {
      this._picks.push(val);
      var indexOfId = this._possibleValues.indexOf(val);
      if (indexOfId >= 0) {
        this._possibleValues.splice(indexOfId, 1);
      }
    }, set.prototype.processItemSelectOutroHandler = function(subgoal) {
      this._dispatcher.dispatch(new exports.InfoEvent("", this._featureId));
      this._dispatcher.dispatch(new s(this._featureId, []));
      this.disableItems();
      subgoal.complete();
    }, set.prototype.processItemPrepareShowHandler = function(stream) {
      /** @type {number} */
      var name = this._picks.length - 1;
      var signal = this._picks[name];
      var val = this._pickAwards[name];
      switch(stream.state) {
        case 0:
          this._view.showAward(signal, val, stream);
          break;
        case 1:
          var checked = this.getCountDuration(val);
          var p = val;
          if (p.coins) {
            this._dispatcher.dispatch(new options.WinInfoEvent(p.coins, checked, options.WinInfoEvent.WIN));
          }
          stream.startDelayMs(checked + 1);
          break;
        default:
          stream.complete();
      }
    }, set.prototype.getCountDuration = function(to) {
      return 1500;
    }, set.prototype.processItemSelectedWaitHandler = function(key) {
      var file;
      for (; (file = this._input.read(key)) && (this._input.next(), file.type !== obj.FEATUREDATAANSWER);) {
      }
      if (file) {
        key.complete();
      }
    }, set.prototype.processItemShowHandler = function(subgoal) {
      subgoal.complete();
    }, set.prototype.summaryHandler = function(s) {
      switch(s.state) {
        case 0:
          this._view.setWin(this._totalCoins);
          this._view.summary(s);
          break;
        default:
          s.complete();
      }
    }, set.prototype.outroHandler = function(args) {
      switch(args.state) {
        case 0:
          args.startHandler(this._view.outroHandler.bind(this._view));
          break;
        default:
          this.dispatchBonusEvent(ProgressEvent.BONUS_ENDED);
          self.prototype.outroHandler.call(this, args);
      }
    }, set;
  }(c);
  var diff = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var hr = function(current) {
    /**
     * @param {!Object} options
     * @return {?}
     */
    function self(options) {
      if (void 0 === options) {
        /** @type {null} */
        options = null;
      }
      var self = current.call(this) || this;
      if (!options) {
        var app = exports.ResourceManager.getInstance().getEntityManager();
        options = app.create("?");
        app.add("bonus", options);
      }
      return self._entity = options, self._items = [], self;
    }
    return diff(self, current), Object.defineProperty(self.prototype, "entity", {
      get : function() {
        return this._entity;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.getItem = function(i) {
      var b = this._items[i] ? this._items[i] : this.createItem(i);
      return this._items[i] = b, b;
    }, self.prototype.introHandler = function(isBgroundImg) {
      /** @type {number} */
      var i = 0;
      var items = this._items;
      for (; i < items.length; i++) {
        items[i].start();
      }
      isBgroundImg.complete();
    }, self.prototype.clear = function() {
    }, self.prototype.clearItem = function(index) {
      return this._items[index].clear();
    }, self.prototype.enableItem = function(name, enabled) {
      this._items[name].enableButton(enabled);
    }, self.prototype.showAward = function(name, url, target) {
      this._items[name].win(url, target);
    }, self.prototype.setWin = function(setProto) {
      /** @type {string} */
      this._totalWin = setProto;
    }, self.prototype.summary = function(en) {
      var allTraps = this;
      en.startHandler(function(t) {
        return allTraps.summaryHandler(t);
      });
    }, self.prototype.outroHandler = function(t) {
      t.complete();
    }, self.prototype.summaryHandler = function(result) {
      result.complete();
    }, self;
  }(self.Dispatcher);
  var getPreceedingAndSucceedingTokens = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var _r = function(bufferPosition) {
    /**
     * @param {string} text
     * @param {!Function} data
     * @return {?}
     */
    function editor(text, data) {
      var that = bufferPosition.call(this) || this;
      return that._button = that.getButton(text, data), that;
    }
    return getPreceedingAndSucceedingTokens(editor, bufferPosition), editor.prototype.initButton = function(value) {
      this._button.addEventListener(exports.ButtonEvent.CLICK, value);
    }, editor.prototype.enableButton = function(enable) {
      this._button.enable(enable);
    }, editor.prototype.clear = function() {
    }, editor.prototype.start = function() {
    }, editor.prototype.win = function(e, result) {
    }, editor.prototype.getButton = function(id, key) {
    }, editor;
  }(self.Dispatcher);
  var dr = function() {
    /**
     * @param {!HTMLElement} context
     * @return {undefined}
     */
    function init(context) {
      var e = this;
      var directory_epub = exports.ResourceManager.getInstance().getSndManager();
      this._fireworkExplode = new options.List([directory_epub.create("mjFireworkSmall"), directory_epub.create("mjFireworkMedium"), directory_epub.create("mjFireworkLarge")], options.Order.RandomUnique);
      this._fireworksFly = directory_epub.create("mjFireworkFly");
      this._coinshowerLoop = directory_epub.create("mjCoinshowerLoop");
      this._coinshowerStart = directory_epub.create("mjCoinshowerStart");
      context.addEventListener(options.MJFireworkEvent.FLY, function() {
        return e.playFireworkFly();
      });
      context.addEventListener(options.MJFireworkEvent.EXPLODE, function() {
        return e.playFireworkExplode();
      });
      context.addEventListener(batch.COUNTER_START, function() {
        return e.playCoinShower();
      });
      context.addEventListener(batch.COUNTER_STOP, function() {
        return e.stopCoinShower();
      });
    }
    return init.prototype.playFireworkExplode = function() {
      this._fireworkExplode.next.play();
    }, init.prototype.playFireworkFly = function() {
      this._fireworksFly.play();
    }, init.prototype.playCoinShower = function() {
      this._coinshowerStart.playFadeIn(1, 0.5);
      if (!this._coinshowerLoop.isPlaying()) {
        this._coinshowerLoop.playFadeIn(1, 2, void 0, true);
      }
    }, init.prototype.stopCoinShower = function() {
      this._coinshowerStart.play();
      if (this._coinshowerLoop.isPlaying()) {
        this._coinshowerLoop.fadeOut(0.5);
      }
    }, init;
  }();
  var applyIpsumToElement = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var yr = function(o) {
    /**
     * @param {?} value
     * @param {?} i
     * @param {?} it
     * @return {?}
     */
    function data(value, i, it) {
      var that = o.call(this, value, i, it) || this;
      return that._jackpotMessages = [], that._scrollMessages = [], that._currentAmount = 0, that._state = data.SHOWAMOUNT, that._jackpotTimer = 0, that._jackpotWon = 0, that._jackpotMessage = 0, that._scollSpeed = 800, that._ctx = self.Context.newContext(null, null, null), self.SystemManager.getScheduler().addUpdateListener(function() {
        return that.update();
      }, that._ctx), that;
    }
    return applyIpsumToElement(data, o), data.prototype.AddScrollMessage = function(width, height) {
      if (null != width) {
        this._scrollMessages.push(new options.JackpotMessage(width, height));
      }
    }, data.prototype.AddJackpotMessage = function(width, height) {
      this._jackpotMessages.push(new options.JackpotMessage(width, height));
    }, data.prototype.ShowJackpotWin = function(lmbda, n) {
      if (void 0 === lmbda && (lmbda = -1), this._demoMode = n, this._jackpotMessages.length > 0) {
        var tracer = this._jackpotMessages[this._jackpotMessage];
        this.InitScroll(this._jackpotWon, tracer.color, tracer.s);
        this._jackpotMessage++;
        this._jackpotMessage %= this._jackpotMessages.length;
        /** @type {number} */
        this._state = data.SCROLLJP;
      } else {
        /** @type {number} */
        this._jackpotTimer = Math.floor(3000 / data._speed);
        /** @type {number} */
        this._state = data.BLINKAMOUNT;
      }
    }, data.prototype.InitScroll = function(t, xgh2, suppressDisabledCheck) {
    }, data.prototype.NextAnim = function() {
      var signature;
      switch(this._state === data.SCROLLWIN ? signature = data.WAIT : this._state === data.SCROLLJP || this._jackpotMessage > 0 ? this._state === data.BLINKAMOUNT ? signature = data.SCROLLJP : this._state === data.SCROLLJP && (0 === this._jackpotMessage ? (signature = data.WAIT, this._jackpotWon = 0) : signature = data.BLINKAMOUNT) : (this._state === data.WAIT || this._state === data.SHOWAMOUNT) && this._scrollMessages.length > 0 ? signature = data.SCROLL : this._state === data.SCROLL ? signature = 
      data.BLINKAMOUNT : (signature = this._jackpotWon > 0 ? data.WAIT : data.SHOWAMOUNT, this._jackpotWon = 0), signature) {
        case data.WAIT:
          /** @type {number} */
          this._jackpotTimer = Math.floor(80 / data._speed);
          /** @type {number} */
          this._scrollMessage = 0;
          break;
        case data.BLINKAMOUNT:
          if (!(this._state === data.SCROLL)) {
            this._state;
            data.SCROLLJP;
          }
          /** @type {number} */
          this._jackpotTimer = Math.floor(32 / data._speed);
          break;
        case data.SHOWAMOUNT:
          if (!(this._state === data.BLINKAMOUNT)) {
            this._state;
            data.WAIT;
          }
          if (!(this._state === data.SCROLL)) {
            this._state;
            data.SCROLLJP;
          }
          /** @type {number} */
          this._jackpotTimer = Math.floor(this._scollSpeed / data._speed);
          break;
        case data.SCROLL:
          var tracer = this._scrollMessages[this._scrollMessage];
          this.InitScroll(this._currentAmount, tracer.color, tracer.s);
          this._scrollMessage++;
          this._scrollMessage %= this._scrollMessages.length;
          break;
        case data.SCROLLJP:
          var qr = this._jackpotMessages[this._jackpotMessage];
          this.InitScroll(this._jackpotWon, qr.color, qr.s);
          this._jackpotMessage++;
          this._jackpotMessage %= this._jackpotMessages.length;
      }
      this._state = signature;
    }, data.prototype.AddWinMessage = function(width, height) {
      this._winMessage = new options.JackpotMessage(width, height);
    }, data.prototype.ShowWinMessage = function(s2, n) {
      var element = this._winMessage.s.replace("%h", n);
      this.InitScroll(s2, this._winMessage.color, element);
      /** @type {number} */
      this._state = data.SCROLLWIN;
      /** @type {number} */
      this._scrollMessage = 0;
    }, data.prototype.setValue = function(num) {
      /** @type {number} */
      this._currentAmount = num;
    }, data.prototype.update = function() {
      this.AnimHandler();
      this.PaintText();
    }, data.prototype.AnimHandler = function() {
      switch(this._state) {
        case data.SHOWAMOUNT:
        case data.BLINKAMOUNT:
        case data.WAIT:
          this._jackpotTimer--;
          if (this._jackpotTimer <= 0) {
            this.NextAnim();
          }
          break;
        case data.SCROLL:
        case data.SCROLLJP:
        case data.SCROLLWIN:
          this._scrollTicks--;
          if (0 === this._scrollTicks) {
            this.NextAnim();
          }
      }
    }, data.prototype.PaintText = function() {
      switch(this._state) {
        case data.BLINKAMOUNT:
        case data.SHOWAMOUNT:
          this._demoMode;
          break;
        case data.SCROLL:
      }
    }, data.dotSize = 2.2, data._speed = 2, data.SHOWAMOUNT = 0, data.SCROLL = 1, data.BLINKAMOUNT = 2, data.SCROLLJP = 3, data.WAIT = 4, data.SCROLLWIN = 5, data;
  }(options.JackpotDisplayViewBase);
  var jQuery = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var info = function(self) {
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} width
     * @param {?} data
     * @param {?} height
     * @param {!Object} options
     * @return {?}
     */
    function popup(a, b, width, data, height, options) {
      var _this2 = self.call(this, a, b, width, data, height) || this;
      return _this2._handlers = options, _this2;
    }
    return jQuery(popup, self), Object.defineProperty(popup.prototype, "quickStopEnabled", {
      get : function() {
        return !(this._quickStop > 1) && (!(this._quickStop > 0) || this._suspenseMode);
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(popup.prototype, "stopMode", {
      get : function() {
        return this._quickStop > 1 || this._fastPlay ? TextureAsset.FAST : this.getSuspenseHandlerAt(this._idx) ? TextureAsset.SLOW : this._quickStop > 0 ? TextureAsset.FAST : TextureAsset.NORMAL;
      },
      enumerable : true,
      configurable : true
    }), popup.prototype.notify = function(event) {
      if (0 === this._quickStop && this.getSuspenseHandlerAt(this._idx)) {
        this._quickStop++;
      }
      self.prototype.notify.call(this, event);
    }, popup.prototype.onSuspense = function() {
      if (0 === this._quickStop && this.getSuspenseHandlerAt(this._idx)) {
        this._quickStop++;
      }
    }, popup.prototype.setSymbols = function(symbols) {
      /** @type {!Array} */
      var d = [];
      /** @type {number} */
      var n = (symbols[0].length - this._reelData[0].rows) / 2;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var checkFor = symbols;
      for (; i < checkFor.length; i++) {
        var r = checkFor[i];
        var result = r.concat();
        result.splice(0, n);
        result.splice(-n, n);
        d.push(result);
      }
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._handlers;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].setSymbols(d);
      }
      /** @type {number} */
      var c = 0;
      var eclevels = this._reelData;
      for (; c < eclevels.length; c++) {
        var eclevel = eclevels[c];
        eclevel.suspenseHandler = this.getSuspenseHandlerAt(eclevel.reelIdx);
      }
    }, popup.prototype.update = function() {
      /** @type {boolean} */
      this._suspenseMode = false;
      var e = this._fastPlay;
      var value = this.getStopDelayOffset();
      if (e) {
        self.prototype.update.call(this);
      } else {
        /** @type {number} */
        var position = 0;
        /** @type {number} */
        var i = 0;
        for (; i < this._reelOrder.length; i++) {
          value = value + position;
          var layer = this._reelOrder[i];
          /** @type {number} */
          position = 0;
          var f = i > 0 ? this._quickStop ? this._quickDiff : this._diff : 0;
          var layerRecord = this.getSuspenseHandlerAt(layer);
          if (layerRecord && this._quickStop < 2) {
            f = layerRecord.getDelayAt(layer);
            position = layerRecord.getNextAt(layer);
            /** @type {boolean} */
            this._suspenseMode = true;
          }
          value = value + f;
          this._stopTimes[i] = value;
        }
      }
    }, popup.prototype.getSuspenseHandlerAt = function(layerModel) {
      if (!this._fastPlay) {
        /** @type {number} */
        var layer_i = 0;
        var crossfilterable_layers = this._handlers;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          var layer = crossfilterable_layers[layer_i];
          if (layer.isSuspenseAt(layerModel)) {
            return layer;
          }
        }
      }
      return null;
    }, popup.prototype.getScatterSymbolsIDs = function() {
      /** @type {!Array} */
      var loadedAddons = [];
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._reelData;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        var layer = crossfilterable_layers[layer_i];
        var tobj = this.getSuspenseHandlerAt(layer.reelIdx);
        if (tobj) {
          loadedAddons.push(tobj.getSymbolId());
        }
      }
      return 0 === loadedAddons.length ? null : loadedAddons;
    }, popup;
  }(Connection);
  var vr = function() {
    /**
     * @param {?} fn
     * @param {!Object} after
     * @param {number} context
     * @param {?} params
     * @return {undefined}
     */
    function t(fn, after, context, params) {
      this._scatterSymbolId = fn;
      /** @type {!Object} */
      this._scatterReelIndices = after;
      /** @type {number} */
      this._minTriggerCnt = context;
      this._maxTriggerCnt = params;
      /** @type {!Array} */
      this._suspenseAt = [];
      /** @type {number} */
      this._suspenseAt.length = Math.max(0, this._scatterReelIndices.length - 1);
    }
    return t.prototype.getSymbolId = function() {
      return this._scatterSymbolId;
    }, t.prototype.getScatterReelIndices = function() {
      return this._scatterReelIndices;
    }, t.prototype.setSymbols = function(_strings) {
      var managementcommandsdns = this._scatterReelIndices.length;
      /** @type {number} */
      var siteName = 0;
      /** @type {number} */
      var i = 0;
      var _overlays = this._scatterReelIndices;
      for (; i < _overlays.length; i++) {
        var o = _overlays[i];
        /** @type {boolean} */
        this._suspenseAt[o] = siteName >= this._minTriggerCnt && this._maxTriggerCnt <= managementcommandsdns + siteName;
        var s = _strings && _strings[o] ? _strings[o] : [];
        /** @type {number} */
        var layer_i = 0;
        var crossfilterable_layers = s;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          if (crossfilterable_layers[layer_i] === this._scatterSymbolId) {
            siteName++;
            break;
          }
        }
        managementcommandsdns--;
      }
    }, t.prototype.isSuspenseAt = function(layer) {
      return layer < this._suspenseAt.length && true === this._suspenseAt[layer];
    }, t.prototype.getDelayAt = function(oskariLayer) {
      return 300;
    }, t.prototype.getNextAt = function(oskariLayer) {
      return 3000;
    }, t;
  }();
  var Sr = function() {
    /**
     * @param {?} component
     * @return {undefined}
     */
    function MeteorDataManager(component) {
      this._symbolManager = component;
      this._data = {};
    }
    return MeteorDataManager.prototype.getNew = function(name) {
      return this._symbolManager && name.match(/^Symbol[0-9]+$/) ? this._symbolManager.getNew(name) : (this._data[name] = this._data[name] || [], this._data[name].pop() || exports.ResourceManager.getInstance().getEntityManager().create(name));
    }, MeteorDataManager.prototype.dispose = function(result) {
      if (result) {
        var name = result.getResourceId();
        if (this._symbolManager && name.match(/^Symbol[0-9]+$/)) {
          this._symbolManager.dispose(result);
        } else {
          this._data[name].push(result);
        }
      }
    }, MeteorDataManager;
  }();
  /** @type {string} */
  var json = "precision lowp float;\nattribute vec4 position;\nattribute vec4 color;\nvarying vec2 texcoord;\nvarying vec4 tint;\nuniform mat3 transform;\nvoid main() {\ntexcoord = position.zw;\ntint = vec4(color.rgb * color.a, color.a);\ngl_Position = vec4(transform * vec3(position.xy, 1.0), 1.0);\n}";
  /** @type {string} */
  var br = "precision lowp float;\nvarying vec2 texcoord;\nvarying vec4 tint;\nuniform sampler2D uSampler;\nvoid main() {\ngl_FragColor = texture2D(uSampler, texcoord) * tint;\n}";
  var eqPartial = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var region = function(Widget) {
    /**
     * @param {!Object} img
     * @param {string} canvas
     * @param {!Array} r
     * @return {?}
     */
    function render(img, canvas, r) {
      if (void 0 === img) {
        /** @type {null} */
        img = null;
      }
      if (void 0 === canvas) {
        /** @type {null} */
        canvas = null;
      }
      if (void 0 === r) {
        r = render.getMaterial();
      }
      var a = Widget.call(this, render.getRenderer()) || this;
      /** @type {!Object} */
      a._winlineBase = img;
      /** @type {string} */
      a._winlineOptions = canvas;
      /** @type {!Array} */
      a._material = r;
      var x = r.getUniform("transform");
      return x && x.type === exports.UniformType.MAT3 && (a._matrix = x.value), exports.ResourceManager.getInstance().getSceneManager().addListener(function() {
        return a.onSceneLoaded();
      }), a;
    }
    return eqPartial(render, Widget), render.initializeShader = function(raw, lineBuffering) {
      if (void 0 === raw) {
        /** @type {string} */
        raw = json;
      }
      if (void 0 === lineBuffering) {
        /** @type {string} */
        lineBuffering = br;
      }
      this._shader = new exports.CustomWebGLShader(raw, lineBuffering, [new exports.AttributeItem("position", exports.AttributeType.VEC4), new exports.AttributeItem("color", exports.AttributeType.VEC4)]);
    }, render.initializeMaterial = function() {
      this._material = new exports.CustomWebGLMaterial(this._shader, [new exports.UniformValue("transform", exports.UniformType.MAT3, [1, 0, 0, 0, 1, 0, 0, 0, 1])]);
      exports.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        render._material.compile(FeedbackTemplate);
      });
    }, render.initializeRenderer = function(partKeys) {
      this._renderer = new options.BatchingWebGLRenderer(16 * partKeys, 6 * partKeys - 6);
      exports.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        render._renderer.compile(FeedbackTemplate);
      });
    }, render.getMaterial = function() {
      return this._shader || this.initializeShader(), this._material || this.initializeMaterial(), this._material;
    }, render.getRenderer = function() {
      return this._renderer || this.initializeRenderer(512), this._renderer;
    }, render.prototype.onSceneLoaded = function() {
      if (!this._texture) {
        var blockHostsStr = exports.ResourceManager.getInstance().getSceneManager().getCustomWebGLTexturesForTemplate(this._winlineOptions.texture);
        if (blockHostsStr && blockHostsStr.length) {
          this._texture = blockHostsStr[0];
        }
      }
    }, render.prototype.onRender = function(c, position, index, state, data, n, g, callback, css, options, el, activation) {
      if (!this._winlineBase.isHidden() && this._texture) {
        var expRecords = this._winlineBase.getPoints();
        var pos = (this._winlineOptions, expRecords.length);
        if (!(pos < 2)) {
          Widget.prototype.onRender.call(this, c, position, index, state, data, n, g, callback, css, options, el, activation);
          this._texture.checkForUpdate();
          var obj = this._customWebGLRenderer;
          if (this._matrix && exports.CustomWebGLBase.compareMatrix(this._matrix, position, index, state, data, n, g)) {
            obj.flush(c);
            this._matrix[0] = position;
            this._matrix[1] = index;
            this._matrix[3] = state;
            this._matrix[4] = data;
            this._matrix[6] = n;
            this._matrix[7] = g;
          }
          if (obj.vCount + 16 * pos > obj.vertices.length || activation !== this._material.blending || exports.CustomWebGLBase.compareTexture(c, this._texture, this._material.texture)) {
            obj.flush(c);
            /** @type {boolean} */
            this._material.blending = activation;
          }
          this._material.texture = this._texture;
          obj.setMaterial(c, this._material);
          this.insertMesh(callback, css, options, el);
        }
      }
    }, render.prototype.insertMesh = function(i, value, p, n) {
      var items = this._winlineBase.getPoints();
      var options = this._winlineOptions;
      var length = items.length;
      var t = this._customWebGLRenderer;
      var data = t.vertices;
      var x = t.elements;
      var b = t.vCount;
      var j = t.eCount;
      /** @type {number} */
      var v = i * options.red;
      /** @type {number} */
      var val = value * options.green;
      /** @type {number} */
      var brightness = p * options.green;
      var width = this._texture.minU;
      var offlineforum = this._texture.minV;
      var height = this._texture.maxU;
      var maxV = this._texture.maxV;
      var size = width + (height - width) * this._texture.cropMinX;
      var lta = offlineforum + (maxV - offlineforum) * this._texture.cropMinY;
      var l = width + (height - width) * this._texture.cropMaxX;
      var forumFolderPath = offlineforum + (maxV - offlineforum) * this._texture.cropMaxY;
      /** @type {number} */
      var ratioA = 1 - 2 * this._texture.cropMinX;
      /** @type {number} */
      var H = 2 * this._texture.cropMaxX - 1;
      var target = items[0];
      /** @type {number} */
      var y = items[1].positionX - target.positionX;
      /** @type {number} */
      var w = items[1].positionY - target.positionY;
      /** @type {number} */
      var scale = Math.sqrt(y * y + w * w);
      if (scale > 0) {
        /** @type {number} */
        y = y * target.thickness / scale;
        /** @type {number} */
        w = w * target.thickness / scale;
      } else {
        /** @type {number} */
        y = w = 0;
      }
      data[b + 0] = target.positionX + w * ratioA;
      /** @type {number} */
      data[b + 1] = target.positionY - y * ratioA;
      data[b + 2] = size;
      data[b + 3] = lta;
      /** @type {number} */
      data[b + 8] = target.positionX - w * H;
      data[b + 9] = target.positionY + y * H;
      data[b + 10] = size;
      data[b + 11] = forumFolderPath;
      /** @type {number} */
      data[b + 4] = data[b + 12] = v * i;
      /** @type {number} */
      data[b + 5] = data[b + 13] = val * value;
      /** @type {number} */
      data[b + 6] = data[b + 14] = brightness * p;
      /** @type {number} */
      data[b + 7] = data[b + 15] = target.alpha * n;
      t.vCount = b = b + 16;
      /** @type {number} */
      var index = 1;
      for (; index < length - 1; ++index) {
        target = items[index];
        /** @type {number} */
        y = items[index - 1].positionX - target.positionX;
        /** @type {number} */
        w = items[index - 1].positionY - target.positionY;
        /** @type {number} */
        var p = items[index + 1].positionX - target.positionX;
        /** @type {number} */
        var r = items[index + 1].positionY - target.positionY;
        if (scale = Math.sqrt(y * y + w * w), scale > 0 ? (y = y / scale, w = w / scale) : y = w = 0, scale = 1 / Math.sqrt(p * p + r * r), scale > 0 ? (p = p * scale, r = r * scale) : p = r = 0, y = y + p, w = w + r, y * y + w * w < 0.5) {
          /** @type {number} */
          var j = y;
          /** @type {number} */
          y = r + r - w;
          /** @type {number} */
          w = j - p - p;
        }
        /** @type {number} */
        scale = y * r - w * p;
        if (scale) {
          /** @type {number} */
          scale = target.thickness / scale;
        }
        /** @type {number} */
        y = y * scale;
        /** @type {number} */
        w = w * scale;
        /** @type {number} */
        p = index / (length - 1);
        data[b + 0] = target.positionX + y * ratioA;
        data[b + 1] = target.positionY + w * ratioA;
        /** @type {number} */
        data[b + 2] = Math.min(l, Math.max(size, width + (height - width) * p));
        data[b + 3] = lta;
        /** @type {number} */
        data[b + 8] = target.positionX - y * H;
        /** @type {number} */
        data[b + 9] = target.positionY - w * H;
        /** @type {number} */
        data[b + 10] = Math.min(l, Math.max(size, width + (height - width) * p));
        data[b + 11] = forumFolderPath;
        /** @type {number} */
        data[b + 4] = data[b + 12] = v;
        /** @type {number} */
        data[b + 5] = data[b + 13] = val;
        /** @type {number} */
        data[b + 6] = data[b + 14] = brightness;
        /** @type {number} */
        data[b + 7] = data[b + 15] = n * target.alpha;
        /** @type {number} */
        var t2 = b / 8;
        /** @type {number} */
        x[j + 0] = t2 - 2;
        /** @type {number} */
        x[j + 1] = t2 - 1;
        /** @type {number} */
        x[j + 2] = t2 + 0;
        /** @type {number} */
        x[j + 3] = t2 + 0;
        /** @type {number} */
        x[j + 4] = t2 - 1;
        /** @type {number} */
        x[j + 5] = t2 + 1;
        b = b + 16;
        j = j + 6;
      }
      t.vCount = b;
      t.eCount = j;
      target = items[length - 1];
      /** @type {number} */
      y = target.positionX - items[length - 2].positionX;
      /** @type {number} */
      w = target.positionY - items[length - 2].positionY;
      /** @type {number} */
      scale = Math.sqrt(y * y + w * w);
      if (scale > 0) {
        /** @type {number} */
        y = y * target.thickness / scale;
        /** @type {number} */
        w = w * target.thickness / scale;
      } else {
        /** @type {number} */
        y = w = 0;
      }
      data[b + 0] = target.positionX + w * ratioA;
      /** @type {number} */
      data[b + 1] = target.positionY - y * ratioA;
      data[b + 2] = l;
      data[b + 3] = lta;
      /** @type {number} */
      data[b + 8] = target.positionX - w * H;
      data[b + 9] = target.positionY + y * H;
      data[b + 10] = l;
      data[b + 11] = forumFolderPath;
      /** @type {number} */
      data[b + 4] = data[b + 12] = v;
      /** @type {number} */
      data[b + 5] = data[b + 13] = val;
      /** @type {number} */
      data[b + 6] = data[b + 14] = brightness;
      /** @type {number} */
      data[b + 7] = data[b + 15] = n * target.alpha;
      /** @type {number} */
      var t2 = b / 8;
      /** @type {number} */
      x[j + 0] = t2 - 2;
      /** @type {number} */
      x[j + 1] = t2 - 1;
      /** @type {number} */
      x[j + 2] = t2 + 0;
      /** @type {number} */
      x[j + 3] = t2 + 0;
      /** @type {number} */
      x[j + 4] = t2 - 1;
      /** @type {number} */
      x[j + 5] = t2 + 1;
      t.vCount += 16;
      t.eCount += 6;
    }, render.prototype.getCustomInterface = function(canCreateDiscussions) {
      return canCreateDiscussions === render.WINLINE ? this._winlineBase : null;
    }, render.WINLINE = "Winline", render;
  }(exports.CustomWebGLBase);
  var j = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var giphyControlWrap = function(t) {
    /**
     * @param {string} value
     * @param {number} dim
     * @param {number} n
     * @param {number} s
     * @param {number} name
     * @param {number} val
     * @return {?}
     */
    function n(value, dim, n, s, name, val) {
      if (void 0 === dim) {
        /** @type {number} */
        dim = 10;
      }
      if (void 0 === n) {
        /** @type {number} */
        n = 100;
      }
      if (void 0 === s) {
        /** @type {number} */
        s = 10;
      }
      if (void 0 === name) {
        /** @type {number} */
        name = 5;
      }
      if (void 0 === val) {
        /** @type {number} */
        val = 1;
      }
      var o = t.call(this, dim) || this;
      return o.texture = value, o.length = n, o.speed = s, o.roundness = name, o.iterations = val, o;
    }
    return j(n, t), n;
  }(div);
  !function(canCreateDiscussions) {
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.COINS = 0] = "COINS";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.BET_MULTIPLIER = 1] = "BET_MULTIPLIER";
  }(ValueMode || (ValueMode = {}));
  var tile = function() {
    /**
     * @param {!Object} value
     * @param {!Array} changes
     * @param {number} mode
     * @return {undefined}
     */
    function set(value, changes, mode) {
      if (void 0 === mode) {
        mode = ValueMode.COINS;
      }
      var s = this;
      /** @type {!Object} */
      this._dispatcher = value;
      /** @type {!Array} */
      this._sounds = [];
      /** @type {!Array} */
      this._triggerLevels = [];
      /** @type {!Array} */
      this._volumes = [];
      changes.forEach(function(data) {
        s._sounds.push(data.sound);
        s._triggerLevels.push(data.triggerLevel);
        s._volumes.push(data.volume || 1);
      });
      /** @type {number} */
      this._mode = mode;
      value.addEventListener(entry.SPIN, function(t) {
        return s.onSpin(t);
      });
    }
    return set.prototype.onSpin = function(p) {
      /** @type {number} */
      this._betCoins = p.lines * p.coins;
    }, set.prototype.formatWin = function(Px) {
      /** @type {number} */
      var P2x = -1;
      switch(this._mode) {
        case ValueMode.COINS:
          /** @type {number} */
          P2x = Px;
          break;
        case ValueMode.BET_MULTIPLIER:
          /** @type {number} */
          P2x = Px / this._betCoins;
      }
      return P2x;
    }, set.prototype.getWinSoundIndex = function(rating) {
      /** @type {number} */
      var e = -1;
      /** @type {number} */
      var i = 0;
      for (; i < this._triggerLevels.length; i++) {
        if (rating >= this._triggerLevels[i]) {
          e++;
        }
      }
      return e;
    }, set.prototype.getSoundVolume = function(id) {
      return this._volumes[id];
    }, set;
  }();
  var MD5_apply_round = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var AudioContext = function(s) {
    /**
     * @param {?} m
     * @param {number} key
     * @param {boolean} value
     * @return {?}
     */
    function x(m, key, value) {
      var that = s.call(this, m) || this;
      return that._index = key, that._sound = value, that;
    }
    return MD5_apply_round(x, s), Object.defineProperty(x.prototype, "index", {
      get : function() {
        return this._index;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(x.prototype, "sound", {
      get : function() {
        return this._sound;
      },
      enumerable : true,
      configurable : true
    }), x.SOUND_STARTED = "SOUND_STARTED", x;
  }(self.MegatonEvent);
  var snoise = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var rT = function(t) {
    /**
     * @param {!HTMLElement} k
     * @param {?} v
     * @param {?} o
     * @return {?}
     */
    function s(k, v, o) {
      var tl = t.call(this, k, v, o) || this;
      return tl._enabled = true, k.addEventListener(that.START, function(i) {
        return tl.onWinsStart(i);
      }), tl;
    }
    return snoise(s, t), s.prototype.enable = function() {
      /** @type {boolean} */
      this._enabled = true;
    }, s.prototype.disable = function() {
      /** @type {boolean} */
      this._enabled = false;
    }, s.prototype.onWinsStart = function(result) {
      if (this._enabled && !result.bigWinMode) {
        /** @type {number} */
        var x = 0;
        if (result.winsData.forEach(function(p) {
          x = x + p.coins;
        }), x > 0) {
          var i = this.formatWin(x);
          var sound = this.getWinSoundIndex(i);
          this.playSound(sound);
        }
      }
    }, s.prototype.playSound = function(sound) {
      var thisSound = this._sounds[sound];
      if (thisSound) {
        thisSound.play(this.getSoundVolume(sound));
        this._dispatcher.dispatch(new AudioContext(AudioContext.SOUND_STARTED, sound, thisSound));
      }
    }, s;
  }(tile);
  var emit = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cell = function(url) {
    /**
     * @param {?} format
     * @param {?} width
     * @param {?} range
     * @param {!Object} o
     * @param {?} store
     * @param {?} settings
     * @return {?}
     */
    function create(format, width, range, o, store, settings) {
      var self = url.call(this, format) || this;
      return self._betAmount = 0, self._gameSettings = width, self._betSettings = range, self._config = o, self._reelManager = store, self._winManager = settings, self.createSounds(), self.startAmbianceSounds(), self;
    }
    return emit(create, url), create.prototype.createSounds = function() {
      this._soundManager = exports.ResourceManager.getInstance().getSndManager();
    }, create.prototype.startAmbianceSounds = function() {
    }, create.prototype.onReelStarting = function(canCreateDiscussions) {
    }, create.prototype.onReelStopped = function(aRoundNumber) {
    }, create.prototype.onWinStart = function(dappid) {
    }, create.prototype.onWinShow = function(canCreateDiscussions) {
    }, create.prototype.getSymbolWinSound = function(eta, lmbda, n) {
    }, create.prototype.getAmountWinSound = function(formatters, customFormatters) {
    }, create;
  }(self.EventProcessor);
  var Dr = function() {
    /**
     * @param {!Function} a
     * @param {string} name
     * @param {undefined} n
     * @param {undefined} s
     * @param {boolean} id
     * @param {undefined} type
     * @return {undefined}
     */
    function one(a, name, n, s, id, type) {
      this.createSoundController(a, name, n, s, id, type);
    }
    return one.prototype.createSoundController = function(node, options, value, i, color, name) {
      return new Cell(node, options, value, i, color, name);
    }, one;
  }();
  var resolveGrpsDef = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var objectsThere = function(t) {
    /**
     * @param {!HTMLElement} self
     * @param {?} msg
     * @param {number} n
     * @return {?}
     */
    function d(self, msg, n) {
      if (void 0 === n) {
        n = ValueMode.BET_MULTIPLIER;
      }
      var allTraps = t.call(this, self, msg, n) || this;
      return allTraps._currentStemIndex = -1, allTraps._fadeInTime = 1, allTraps._fadeToTime = 25, allTraps._fadeOutTime = 1, self.addEventListener(that.DONE, function(t) {
        return allTraps.onWinsDone(t);
      }), self.addEventListener(that.START, function(t) {
        return allTraps.onWinsStart(t);
      }), allTraps;
    }
    return resolveGrpsDef(d, t), d.prototype.start = function() {
      this.playSounds();
    }, d.prototype.stop = function() {
      this.stopSounds();
    }, d.prototype.playSounds = function() {
      /** @type {number} */
      this._currentStemIndex = -1;
      /** @type {number} */
      var i = 0;
      for (; i < this._sounds.length; i++) {
        this._sounds[i].playForever(0);
      }
    }, d.prototype.stopSounds = function() {
      /** @type {number} */
      var i = 0;
      for (; i < this._sounds.length; i++) {
        this._sounds[i].fadeOut(this._fadeOutTime);
      }
    }, d.prototype.onWinsStart = function(result) {
      /** @type {number} */
      var X = 0;
      result.winsData.forEach(function(p) {
        X = X + p.coins;
      });
      var C = this.formatWin(X);
      var i = this.getWinSoundIndex(C);
      this.fadeInStems(i);
      this._currentStemIndex = i;
    }, d.prototype.onWinsDone = function(result) {
      this.fadeOutStems();
    }, d.prototype.fadeInStems = function(header_level) {
      /** @type {number} */
      var i = 0;
      for (; i <= header_level; i++) {
        var t = this.getSoundVolume(i);
        this._sounds[i].fadeTo(t, this._fadeInTime);
      }
      /** @type {number} */
      this._currentStemIndex = header_level;
    }, d.prototype.fadeOutStems = function() {
      /** @type {number} */
      var i = 0;
      for (; i <= this._currentStemIndex; i++) {
        this._sounds[i].fadeTo(0, this._fadeToTime);
      }
      /** @type {number} */
      this._currentStemIndex = -1;
    }, d;
  }(tile);
  var verify = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Hr = function(t) {
    /**
     * @param {!HTMLElement} db
     * @param {?} name
     * @param {number} element
     * @return {?}
     */
    function View(db, name, element) {
      if (void 0 === element) {
        /** @type {number} */
        element = 1;
      }
      var self = t.call(this, db, name) || this;
      return db.addEventListener(me.SPINANSWER, function() {
        return self.onGameStarted();
      }), db.addEventListener(v.SPIN_OR_CONTINUE, function() {
        return self.hideOnSpin();
      }), db.addEventListener(options.AutoplayEvent.AUTOPLAY_START, function() {
        return self.hideOnSpin();
      }), self._carouselManager = self.createCarouselManger(self._entity, element), self;
    }
    return verify(View, t), View.prototype.hideOnSpin = function() {
      if (this._running && this._enabled) {
        this.onContinue();
      }
    }, View.prototype.show = function(str) {
      t.prototype.show.call(this, str);
      if (str) {
        this.activate();
      } else {
        this.deactivate();
      }
    }, View.prototype.createCarouselManger = function(object, path) {
      return new options.CarouselManager(object, path, 800);
    }, View.prototype.activate = function() {
      this._carouselManager.controller.activate();
    }, View.prototype.deactivate = function() {
      this._carouselManager.controller.deactivate();
    }, View;
  }(exports.SplashManager);
  var preventer = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ur = function(t) {
    /**
     * @param {!HTMLElement} c
     * @param {?} val
     * @param {number} data
     * @return {?}
     */
    function e(c, val, data) {
      if (void 0 === data) {
        /** @type {number} */
        data = 1;
      }
      var o = t.call(this, c, val, data) || this;
      return c.addEventListener(me.SPINANSWER, function() {
        return o.onGameStarted();
      }), c.addEventListener(v.SPIN_OR_CONTINUE, function() {
        return o.hideOnSpin();
      }), c.addEventListener(options.AutoplayEvent.AUTOPLAY_START, function() {
        return o.hideOnSpin();
      }), o;
    }
    return preventer(e, t), e.prototype.hideOnSpin = function() {
      if (this._running && this._enabled) {
        this.onContinue();
      }
    }, e;
  }(options.CommonSplashManager);
  var requestAnimationFrame = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var resourceAmount = function(e) {
    /**
     * @param {?} name
     * @return {?}
     */
    function animation(name) {
      var n = e.call(this, name) || this;
      return n._isFaded = false, n._fader = n.createFader(), n;
    }
    return requestAnimationFrame(animation, e), animation.prototype.createFader = function() {
      return new options.Fader(this);
    }, animation.prototype.noWin = function(fun, n) {
      this.fade(true);
      e.prototype.noWin.call(this, fun, n);
    }, animation.prototype.hideNoWin = function(fun, n) {
      this.fade(false);
      e.prototype.hideNoWin.call(this, fun, n);
    }, animation.prototype.anticipate = function(question) {
      this.fade(!question);
      e.prototype.anticipate.call(this, question);
    }, animation.prototype.hideAnticipation = function() {
      if (this._anticipationState == changes.faded) {
        this.fade(false);
      }
      e.prototype.hideAnticipation.call(this);
    }, animation.prototype.setSymbol = function(s, settings, elem) {
      e.prototype.setSymbol.call(this, s, settings, elem);
      this.fade(this._isFaded);
    }, animation.prototype.fade = function(endOpacity) {
      /** @type {boolean} */
      this._isFaded = endOpacity;
      this._fader.fade(this._isFaded);
    }, animation.prototype.stop = function() {
      e.prototype.stop.call(this);
      this.fade(false);
    }, animation;
  }(k);
  var run = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Gr = function(t) {
    /**
     * @param {number} a
     * @return {?}
     */
    function exports(a) {
      var m = t.call(this, exports.QUICKSTOP) || this;
      return m._state = a, m;
    }
    return run(exports, t), Object.defineProperty(exports.prototype, "state", {
      get : function() {
        return this._state;
      },
      enumerable : true,
      configurable : true
    }), exports.QUICKSTOP = "QUICKSTOP", exports;
  }(self.MegatonEvent);
  var isVueComponent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var catArr = function(fn) {
    /**
     * @param {?} selector
     * @param {?} event
     * @param {!Function} a
     * @param {?} b
     * @return {?}
     */
    function selector(selector, event, a, b) {
      var m = fn.call(this, selector, event, b) || this;
      return m._winManager = a, m;
    }
    return isVueComponent(selector, fn), selector.prototype.processAwardHandler = function(result) {
      switch(result.state) {
        case 0:
          var state = this._awards[this._awards.length - 1];
          switch(state.awardType) {
            case buffer.WINLINE:
              var obj = state;
              this._winManager.winLogicController.addLineWin(obj.winLine, obj.symbol, obj.numSymbols, obj.flags, obj.coins);
              result.complete();
          }break;
        default:
          fn.prototype.processAwardHandler.call(this, result);
      }
    }, selector.prototype.processDataHandler = function(t) {
      this._winManager.winLogicController.start(t, false);
    }, selector;
  }(c);
  var Jr = function() {
    /**
     * @param {(Image|string)} html
     * @param {string} xsl
     * @param {?} xmlorig
     * @return {undefined}
     */
    function OncoprintToolTip(html, xsl, xmlorig) {
      this._reelManager = xmlorig;
      this.setupEntity(html, xsl);
    }
    return OncoprintToolTip.prototype.show = function(str) {
    }, OncoprintToolTip.prototype.hide = function(shouldWait) {
    }, OncoprintToolTip.prototype.setupEntity = function(obj, string) {
    }, OncoprintToolTip;
  }();
  var Kr = function() {
    /**
     * @param {!WebGLRenderingContext} data
     * @param {undefined} instance
     * @return {undefined}
     */
    function t(data, instance) {
      this.initialize(data, instance);
    }
    return t.prototype.show = function(str) {
      if (!(this._state > 0)) {
        /** @type {number} */
        this._state = 1;
        this._animation.play("showWin");
      }
    }, t.prototype.hide = function(shouldWait) {
      if (!(this._state < 1)) {
        /** @type {number} */
        this._state = 0;
        this._animation.play("stop");
      }
    }, t.prototype.initialize = function(s, doc) {
      /** @type {number} */
      this._state = 0;
      this._animation = s.getAnimation("winlines.winline" + (doc + 1));
      this._animation.play("stop");
    }, t;
  }();
  var makeBorder = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var qr = function() {
    /**
     * @param {!WebGLRenderingContext} url
     * @param {undefined} fn
     * @param {!Object} options
     * @param {number} target
     * @return {undefined}
     */
    function options(url, fn, options, target) {
      if (void 0 === target) {
        /** @type {string} */
        target = "WPPV";
      }
      this.initialize(url, fn, options, target);
    }
    return options.winlineCreator = function(isSlidingUp, $cont) {
      return new options.ParticlePoolWebGLComponent(module.create, isSlidingUp, $cont);
    }, options.prototype.initialize = function(c, i, x, elem) {
      var result = this;
      this._points = this.createWinlinePoints(i, x);
      this._options = this.createWinlineOptions(i);
      this._emitterX = this._points[0].positionX;
      this._emitterY = this._points[0].positionY;
      /** @type {number} */
      this._targetIndex = 1;
      /** @type {number} */
      this._iterations = 0;
      /** @type {number} */
      this._stopState = 2;
      this.setupParticleOptions(i);
      var RPGUI = exports.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var p = elem + "_" + i;
      RPGUI.registerCustomComponent(p, function() {
        return options.winlineCreator(result._template, result._capacity);
      });
      var uploadInfoEl = RPGUI.create(p);
      c.getHierarchy("winlines").add(p, uploadInfoEl);
      this._pool = uploadInfoEl.getCustomInterface(options.ParticlePoolWebGLComponent.POOL);
      self.SystemManager.getScheduler().addUpdateListener(function() {
        return result.onUpdate();
      });
    }, options.prototype.show = function(str) {
      switch(this._stopState) {
        case 0:
          break;
        default:
          this.resetEmitter();
          /** @type {number} */
          this._stopState = 0;
      }
    }, options.prototype.hide = function(shouldWait) {
      switch(shouldWait && -1 === shouldWait.showCount && 0 === this._stopState && (this._stopState = 2), this._stopState) {
        case 2:
          break;
        default:
          /** @type {number} */
          this._stopState = 1;
      }
    }, options.prototype.resetEmitter = function() {
      this._emitterX = this._points[0].positionX;
      this._emitterY = this._points[0].positionY;
      this._startTime = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      this._targetIndex = 1;
      /** @type {number} */
      this._iterations = 0;
    }, options.prototype.animateEmitter = function() {
      var _ref2 = this._points;
      var start = _ref2.length;
      var o = this._options;
      /** @type {number} */
      var elapsed = self.SystemManager.getScheduler().getTime() - this._startTime;
      /** @type {number} */
      var r = this._density * o.iterations * elapsed * 60 / 1000;
      for (; this._iterations < r;) {
        if (this._targetIndex < start) {
          var node = _ref2[this._targetIndex - 1];
          var x = node.positionX;
          var Y = node.positionY;
          node = _ref2[this._targetIndex];
          var H = node.positionX;
          var y = node.positionY;
          var chunkSizeSquared = this.interpolator((this._emitterX - x) / (H - x));
          this._emitterY = (y - Y) * chunkSizeSquared + Y;
          this._emitterX += o.speed / this._density;
          x = this._emitterX + (Math.random() - 0.5) * this._spread;
          Y = this._emitterY + (Math.random() - 0.5) * this._spread;
          this._pool.emit(new exports.Point(x, Y), this._particleProps);
          if (this._emitterX > node.positionX) {
            ++this._targetIndex;
          }
        }
        ++this._iterations;
      }
    }, options.prototype.onUpdate = function() {
      switch(this._stopState) {
        case 0:
          this.animateEmitter();
          break;
        case 1:
          if (this._emitterX > this._points[this._points.length - 1].positionX) {
            /** @type {number} */
            this._stopState = 2;
          } else {
            this.animateEmitter();
          }
      }
    }, options.prototype.interpolator = function(t) {
      var speed = this._options.roundness;
      return speed * t * t * t * t * t - 2.5 * speed * t * t * t * t + (2 * speed - 2) * t * t * t + (3 - 0.5 * speed) * t * t;
    }, options.prototype.createWinlinePoints = function(name, result) {
      var options = result.symbolManager;
      var oldBin = result.patterns[name];
      /** @type {!Array} */
      var ouput = [];
      ouput.push(new RegExp(result.x0 - (options.symbolWidth + result.xGap), result.y0 + oldBin[0] * (options.symbolHeight + result.yGap), 0, 0, 1, 0));
      /** @type {number} */
      var i = 0;
      for (; i < oldBin.length; i++) {
        ouput.push(new RegExp(result.x0 + i * (options.symbolWidth + result.xGap), result.y0 + oldBin[i] * (options.symbolHeight + result.yGap)));
      }
      return ouput.push(new RegExp(result.x0 + oldBin.length * (options.symbolWidth + result.xGap), result.y0 + oldBin[oldBin.length - 1] * (options.symbolHeight + result.yGap), 0, 0, 1, 0)), ouput;
    }, options.prototype.createWinlineOptions = function(lC) {
      return new giphyControlWrap(null, 0, 0, 10, 3, 3);
    }, options.prototype.setupParticleOptions = function(varNum) {
      /** @type {string} */
      this._template = "WinlineParticleTexture";
      /** @type {number} */
      this._capacity = 100;
      /** @type {number} */
      this._density = 10;
      /** @type {number} */
      this._spread = 10;
      this._particleProps = {
        numtex : 1,
        lifetime : 100,
        speed : 1,
        size : 100
      };
    }, options;
  }();
  var module = function(t) {
    /**
     * @return {?}
     */
    function me() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return makeBorder(me, t), me.create = function() {
      return new me;
    }, me.prototype.init = function(x, obj) {
      t.prototype.init.call(this, x, obj);
      if (obj) {
        this._numtex = obj.numtex || 1;
        this._total = obj.lifetime || 100;
        this._cnt = this._total;
        /** @type {number} */
        this._vx = (Math.random() - 0.5) * (obj.speed || 1);
        /** @type {number} */
        this._vy = (Math.random() - 0.5) * (obj.speed || 1);
        this.size = obj.size || 100;
      } else {
        /** @type {number} */
        this._numtex = 1;
        /** @type {number} */
        this._total = 100;
        /** @type {number} */
        this._cnt = this._total;
        /** @type {number} */
        this._vx = Math.random() - 0.5;
        /** @type {number} */
        this._vy = Math.random() - 0.5;
        /** @type {number} */
        this.size = 100;
      }
      /** @type {number} */
      this.alpha = 1;
      /** @type {number} */
      this.texture = Math.floor(Math.random() * this._numtex);
    }, me.prototype.advance = function(i) {
      this.positionX += i * this._vx;
      this.positionY += i * this._vy;
      /** @type {number} */
      this.alpha = this._cnt / this._total;
    }, me.prototype.tick = function() {
      return this.texture = (this.texture + 1) % this._numtex, this._cnt-- > 0;
    }, me;
  }(options.Particle);
  var Zr = function() {
    /**
     * @param {!WebGLRenderingContext} el
     * @param {undefined} fn
     * @param {!Object} c
     * @param {number} name
     * @return {undefined}
     */
    function $(el, fn, c, name) {
      if (void 0 === name) {
        /** @type {string} */
        name = "WPRV";
      }
      this.initialize(el, fn, c, name);
    }
    return $.winlineCreator = function(data, options) {
      return new region(new Blob(data), options);
    }, $.prototype.initialize = function(c, i, input, selector) {
      var that = this;
      this._basePoints = this.createWinlinePoints(i, input);
      this._options = this.createWinlineOptions(i);
      var options = this._basePoints[0];
      var name = this._options.length;
      /** @type {!Array} */
      this._points = new Array(name);
      for (; name--;) {
        this._points[name] = new RegExp(options.positionX, options.positionY, options.thickness * this._options.thickness);
      }
      /** @type {number} */
      this._targetIndex = 1;
      /** @type {number} */
      this._iterations = 0;
      /** @type {number} */
      this._stopState = 2;
      /** @type {number} */
      this._fadeOut = 0;
      var testOlmAccount = exports.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var j = selector + "_" + i;
      testOlmAccount.registerCustomComponent(j, function() {
        return $.winlineCreator(that._points, that._options);
      });
      var data = testOlmAccount.create(j);
      c.getHierarchy("winlines").add(j, data);
      this._winline = data.getCustomInterface(region.WINLINE);
      self.SystemManager.getScheduler().addUpdateListener(function() {
        return that.onUpdate();
      });
    }, $.prototype.show = function(str) {
      switch(this._stopState) {
        case 0:
          break;
        default:
          this.resetPoints();
          this._winline.show();
          /** @type {number} */
          this._stopState = 0;
          /** @type {number} */
          this._fadeOut = 0;
      }
    }, $.prototype.hide = function(shouldWait) {
      if (shouldWait && -1 === shouldWait.showCount && 0 === this._stopState) {
        /** @type {number} */
        this._stopState = 1;
        /** @type {number} */
        this._fadeOut = 0.1;
      } else {
        switch(this._stopState) {
          case 2:
            break;
          default:
            /** @type {number} */
            this._stopState = 1;
        }
      }
    }, $.prototype.resetPoints = function() {
      var options = this._basePoints[0];
      var positionX = options.positionX;
      var positionY = options.positionY;
      /** @type {number} */
      var value = options.thickness * this._options.thickness;
      var alpha = options.alpha;
      var items = this._points;
      var index = items.length;
      for (; index--;) {
        items[index].positionX = positionX;
        items[index].positionY = positionY;
        /** @type {number} */
        items[index].thickness = value;
        items[index].alpha = alpha;
      }
      this._startTime = self.SystemManager.getScheduler().getTime();
      /** @type {number} */
      this._targetIndex = 1;
      /** @type {number} */
      this._iterations = 0;
    }, $.prototype.animatePoints = function() {
      var results = this._basePoints;
      var custom_meta_to_complete = results.length;
      var items = this._points;
      var length = items.length;
      var options = this._options;
      /** @type {number} */
      var mb = self.SystemManager.getScheduler().getTime() - this._startTime;
      /** @type {number} */
      var a = options.iterations * mb * 60 / 1000;
      for (; this._iterations < a;) {
        /** @type {number} */
        var index = 0;
        for (; index < items.length - 1; ++index) {
          items[index].positionX = items[index + 1].positionX;
          items[index].positionY = items[index + 1].positionY;
          items[index].thickness = items[index + 1].thickness;
          items[index].alpha = items[index + 1].alpha;
        }
        if (this._targetIndex < custom_meta_to_complete) {
          var settings = results[this._targetIndex - 1];
          var projFovLow = settings.positionX;
          var start = settings.positionY;
          /** @type {number} */
          var endH = settings.thickness * options.thickness;
          var min = settings.alpha;
          settings = results[this._targetIndex];
          var projFovHigh = settings.positionX;
          var end = settings.positionY;
          /** @type {number} */
          var startH = settings.thickness * options.thickness;
          var x = settings.alpha;
          var data = items[length - 1];
          var step = this.interpolator((data.positionX - projFovLow) / (projFovHigh - projFovLow));
          data.positionY = (end - start) * step + start;
          /** @type {number} */
          data.thickness = (startH - endH) * step + endH;
          if (this._fadeOut) {
            data.alpha -= this._fadeOut;
          } else {
            data.alpha = (x - min) * step + min;
          }
          data.positionX += options.speed;
          if (data.positionX > settings.positionX) {
            ++this._targetIndex;
          }
        }
        ++this._iterations;
      }
    }, $.prototype.onUpdate = function() {
      switch(this._stopState) {
        case 0:
          this.animatePoints();
          break;
        case 1:
          if (this._points[0].positionX > this._basePoints[this._basePoints.length - 1].positionX) {
            this._winline.hide();
            /** @type {number} */
            this._stopState = 2;
          } else {
            this.animatePoints();
          }
      }
    }, $.prototype.interpolator = function(t) {
      var speed = this._options.roundness;
      return speed * t * t * t * t * t - 2.5 * speed * t * t * t * t + (2 * speed - 2) * t * t * t + (3 - 0.5 * speed) * t * t;
    }, $.prototype.createWinlinePoints = function(i, s) {
      var legendOptions = s.symbolManager;
      var nearParticles = s.patterns[i];
      /** @type {!Array} */
      var ouput = [];
      ouput.push(new RegExp(s.x0 - (legendOptions.symbolWidth + s.xGap), s.y0 + nearParticles[0] * (legendOptions.symbolHeight + s.yGap), 0, 0, 1, 0));
      /** @type {number} */
      var j = 0;
      for (; j < nearParticles.length; j++) {
        ouput.push(new RegExp(s.x0 + j * (legendOptions.symbolWidth + s.xGap), s.y0 + nearParticles[j] * (legendOptions.symbolHeight + s.yGap)));
      }
      return ouput.push(new RegExp(s.x0 + nearParticles.length * (legendOptions.symbolWidth + s.xGap), s.y0 + nearParticles[nearParticles.length - 1] * (legendOptions.symbolHeight + s.yGap), 0, 0, 1, 0)), ouput;
    }, $.prototype.createWinlineOptions = function(lC) {
      return new giphyControlWrap("WinlineRopeTexture", 20, 100, 10, 3, 3);
    }, $;
  }();
  var $r = function() {
    /**
     * @param {!WebGLRenderingContext} data
     * @param {undefined} instance
     * @return {undefined}
     */
    function t(data, instance) {
      this.initialize(data, instance);
    }
    return t.prototype.show = function(d) {
      var hullLocators = this._reelManager.getScatterSymbols(d.winData.symbol);
      /** @type {number} */
      var i = 0;
      for (; i < hullLocators.length; i++) {
        this._transforms[i].setX(hullLocators[i].transform.getX());
        this._transforms[i].setY(hullLocators[i].transform.getY());
        this._animations[i].play("showWin");
      }
    }, t.prototype.hide = function(shouldWait) {
      /** @type {number} */
      var i = 0;
      for (; i < this._animations.length; i++) {
        this._animations[i].play("stop");
      }
    }, t.prototype.initialize = function(node, scope) {
      /** @type {!Array} */
      this._animations = [];
      /** @type {!Array} */
      this._transforms = [];
      /** @type {!Object} */
      this._reelManager = scope;
      /** @type {number} */
      var i = 0;
      for (; i < this._reelManager.getNumReels(); i++) {
        this._animations[i] = node.getAnimation("winframes.winframe" + (i + 1));
        this._transforms[i] = node.getTransform("winframes.winframe" + (i + 1));
        this._animations[i].play("stop");
      }
    }, t;
  }();
  var ts = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var es = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.KeyUpValues = ["space"], t;
  }();
  var ns = function(x) {
    /**
     * @return {?}
     */
    function $() {
      return null !== x && x.apply(this, arguments) || this;
    }
    return ts($, x), $.prototype.onKey = function(isDown, isLargeScroll) {
      var promise = this.keyboardButtonNode;
      switch(isDown) {
        case "space":
          if (this.buttons.length >= 2) {
            this.buttons[0].trigger();
            this.buttons[1].trigger();
          }
      }
      return promise;
    }, $;
  }(exports.KeyboardHandlerNode);
}, function(mixin, canCreateDiscussions, saveNotifs) {
  mixin.exports = saveNotifs(7)(4);
}, function(mixin, canCreateDiscussions, saveNotifs) {
  mixin.exports = saveNotifs(7)(1);
}, function(canCreateDiscussions, n, require) {
  Object.defineProperty(n, "__esModule", {
    value : true
  });
  var kb;
  var self = require(1);
  var exports = require(2);
  var tree = require(5);
  var presenter = require(0);
  var parseSwagger2Json = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var file = function(url) {
    /**
     * @param {?} value
     * @return {?}
     */
    function data(value) {
      var elem = url.call(this, data.BETLIMITS) || this;
      return elem._betLimits = value, elem;
    }
    return parseSwagger2Json(data, url), Object.defineProperty(data.prototype, "betLimits", {
      get : function() {
        return this._betLimits;
      },
      enumerable : true,
      configurable : true
    }), data.BETLIMITS = "BETLIMITS", data;
  }(exports.MegatonEvent);
  var insertMentionedTimeline = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ProgressEvent = function(cb) {
    /**
     * @param {!Array} value
     * @return {?}
     */
    function message(value) {
      var elem = cb.call(this, message.BETROUNDLIMIT) || this;
      return elem._roundLimit = value, elem;
    }
    return insertMentionedTimeline(message, cb), Object.defineProperty(message.prototype, "betRoundLimit", {
      get : function() {
        return this._roundLimit;
      },
      enumerable : true,
      configurable : true
    }), message.BETROUNDLIMIT = "BETROUNDLIMIT", message;
  }(exports.MegatonEvent);
  var _ = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SpriteImage = function(type) {
    /**
     * @param {?} data
     * @return {?}
     */
    function Sign(data) {
      return type.call(this, data) || this;
    }
    return _(Sign, type), Sign.prototype.onCommand = function(event) {
      switch(type.prototype.onCommand.call(this, event), event.command.type) {
        case self.ServerCommand.SSPBETLIMITS:
          var data = event.command;
          var enmlHash = data.getString(0).split(" ");
          /** @type {number} */
          var indent = parseInt(enmlHash[0]);
          /** @type {!Array} */
          var c = new Array(indent);
          if (1 === enmlHash.length && 0 !== indent) {
            /** @type {number} */
            var i = 0;
            for (; i < indent; i++) {
              c[i] = data.getInt(i + 1);
            }
          } else {
            /** @type {number} */
            i = 0;
            for (; i < indent; i++) {
              /** @type {number} */
              c[i] = parseInt(enmlHash[i]);
            }
          }
          this._dispatcher.dispatch(new self.LogicEvent(new file(c)));
          break;
        case self.ServerCommand.SSPCUSTOMDATA:
          try {
            var menuipopup = event.command.getXML(0);
            var p = void 0;
            /** @type {number} */
            i = 0;
            for (; i < menuipopup.childNodes.length; i++) {
              if ("custom" === menuipopup.childNodes[i].nodeName) {
                p = menuipopup.childNodes[i];
                break;
              }
            }
            if (p) {
              /** @type {number} */
              i = 0;
              for (; i < p.childNodes.length; i++) {
                if ("RoundLimit" === p.childNodes[i].nodeName) {
                  var xmlCell = p.childNodes[i];
                  /** @type {number} */
                  var state = parseInt(xmlCell.getAttribute("Value"));
                  this._dispatcher.dispatch(new ProgressEvent(state));
                  break;
                }
              }
            }
          } catch (e) {
          }
      }
    }, Sign;
  }(self.BetCommandConverter);
  var traverse = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var IASNoneLeftExtension = function(selector) {
    /**
     * @param {!Function} n
     * @return {?}
     */
    function data(n) {
      var _this = selector.call(this) || this;
      return _this._chipValues = data._chipSet, _this.chip = n, _this;
    }
    return traverse(data, selector), Object.defineProperty(data.prototype, "chipIndex", {
      get : function() {
        return this._chipIndex;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "chip", {
      get : function() {
        return this._chipValues[this._chipIndex];
      },
      set : function(resolution) {
        var tmp;
        var patches = this._chipValues;
        /** @type {number} */
        var minValue = Math.abs(patches[0] - resolution);
        /** @type {number} */
        var commonIndex = 0;
        var patchLen = patches.length;
        /** @type {number} */
        var i = 1;
        for (; i < patchLen; i++) {
          if ((tmp = Math.abs(patches[i] - resolution)) < minValue) {
            /** @type {number} */
            minValue = tmp;
            /** @type {number} */
            commonIndex = i;
          }
        }
        /** @type {number} */
        this._chipIndex = commonIndex;
        this.notify(data.FIELD_CHIPINDEX);
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "chipValues", {
      get : function() {
        return this._chipValues;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.setChips = function(result, setname1) {
      var i = this.chip;
      var length = result.length;
      if (0 !== length) {
        /** @type {!Array} */
        this._chipValues = [0];
        var to = setname1.getMaxLimit();
        /** @type {number} */
        var patchLen = data._chipSet.length;
        /** @type {number} */
        var j = 0;
        for (; j < length; j++) {
          var value = result[j];
          /** @type {number} */
          var i = 0;
          for (; i < patchLen; i++) {
            if (value <= to && value === data._chipSet[i]) {
              this._chipValues.push(value);
            }
          }
        }
        this.notify(data.FIELD_CHIPVALUES);
        this.chip = i;
        if (0 === this.chip && 0 !== i && this._chipValues.length > 1) {
          this.chip = this._chipValues[1];
        }
      }
    }, data.prototype.setChipIndex = function(canCreateDiscussions) {
      /** @type {!Array} */
      this._chipIndex = canCreateDiscussions;
      this.notify(data.FIELD_CHIPINDEX);
    }, data._chipSet = [0, 1, 2, 5, 10, 25, 50, 100, 500, 1000, 2500, 5000, 10000, 50000, 100000, 200000, 300000, 500000, 1000000], data.FIELD_CHIPVALUES = 1, data.FIELD_CHIPINDEX = 2, data;
  }(exports.Model);
  var __extends = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var BuddhaConfig = function(_super) {
    /**
     * @return {?}
     */
    function WorkerDomAdapter() {
      var e = _super.call(this) || this;
      return e._denom = 1, e;
    }
    return __extends(WorkerDomAdapter, _super), Object.defineProperty(WorkerDomAdapter.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "quickStop", {
      get : function() {
        return this._quickStop;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "minSpinningTime", {
      get : function() {
        return this._minSpinningTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "disableFastPlay", {
      get : function() {
        return this._disableFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "defaultFastPlay", {
      get : function() {
        return this._defaultFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "hideFastPlay", {
      get : function() {
        return this._hideFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "baccaratHistory", {
      get : function() {
        return this._baccaratHistory;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "insideLimits", {
      get : function() {
        return this._insideLimits;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "outsideLimits", {
      get : function() {
        return this._outsideLimits;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "voiceoverLang", {
      get : function() {
        return this._voiceoverLang;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "gameRoundBalanceCheck", {
      get : function() {
        return this._gameRoundBalanceCheck;
      },
      enumerable : true,
      configurable : true
    }), WorkerDomAdapter.prototype.parse = function(result) {
      if (null == result) {
        return false;
      }
      /** @type {string} */
      result.fps = "24";
      this._denom = self.Config.parseInt(result.denom, 1);
      this._quickStop = self.Config.parseBoolean(result.quickStop, true);
      this._minSpinningTime = self.Config.parseInt(result.minSpinningTime, 2000);
      this._disableFastPlay = self.Config.parseBoolean(result.disableFastplay, false);
      this._defaultFastPlay = self.Config.parseBoolean(result.defaultFastPlay, false);
      this._hideFastPlay = self.Config.parseBoolean(result.hideFastplay, false);
      this._baccaratHistory = self.Config.parseInt(result.baccaratHistory, 7);
      this._insideLimits = self.Config.parseString(result.insideLimits, "100,10000");
      this._outsideLimits = self.Config.parseString(result.outsideLimits, "100,10000");
      this._voiceoverLang = self.Config.parseString(result.voiceoverLang, "");
      this._gameRoundBalanceCheck = self.Config.parseBoolean(result.gameroundbalancecheck, false);
      if (this._minSpinningTime < 1000) {
        /** @type {number} */
        this._minSpinningTime = 1000;
      } else {
        if (this._minSpinningTime > 3000) {
          /** @type {number} */
          this._minSpinningTime = 3000;
        }
      }
      var doCameraTransform = _super.prototype.parse.call(this, result);
      return "" === this._passedLimits && (this._passedLimits = "100,100000"), doCameraTransform;
    }, WorkerDomAdapter;
  }(self.CasinoConfig);
  var extend = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Reply = function(fn) {
    /**
     * @return {?}
     */
    function Folder() {
      var e = fn.call(this) || this;
      return e._voiceOver = true, e._wasVoiceOver = true, e._music = true, e._wasMusic = true, e._autoClearWin = true, e._autoClearLose = true, e._autoClearRoundEnd = true, e._autoDeal = false, e._gameHistorySimple = false, e._gameHistoryAdvanced = false, e;
    }
    return extend(Folder, fn), Object.defineProperty(Folder.prototype, "voiceOver", {
      get : function() {
        return this._voiceOver;
      },
      set : function(mymuted) {
        if (this.sound) {
          /** @type {boolean} */
          this._voiceOver = mymuted;
          this.notify();
        }
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "wasVoiceOver", {
      set : function(mymuted) {
        /** @type {boolean} */
        this._wasVoiceOver = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "wasMusic", {
      set : function(mymuted) {
        /** @type {boolean} */
        this._wasMusic = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "music", {
      get : function() {
        return this._music;
      },
      set : function(value) {
        /** @type {boolean} */
        this._music = value;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoClearWin", {
      get : function() {
        return this._autoClearWin;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._autoClearWin = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoClearLose", {
      get : function() {
        return this._autoClearLose;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._autoClearLose = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoClearRoundEnd", {
      get : function() {
        return this._autoClearRoundEnd;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._autoClearRoundEnd = mymuted;
        /** @type {boolean} */
        this._autoClearWin = mymuted;
        /** @type {boolean} */
        this._autoClearLose = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "autoDeal", {
      get : function() {
        return this._autoDeal;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._autoDeal = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "gameHistorySimple", {
      get : function() {
        return this._gameHistorySimple;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._gameHistorySimple = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Folder.prototype, "gameHistoryAdvanced", {
      get : function() {
        return this._gameHistoryAdvanced;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._gameHistoryAdvanced = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Folder.prototype.setSound = function(name) {
      if (name) {
        this._voiceOver = this._wasVoiceOver;
        this._music = this._wasMusic;
      } else {
        this._wasVoiceOver = this._voiceOver;
        this._wasMusic = this._music;
        /** @type {boolean} */
        this._voiceOver = false;
        /** @type {boolean} */
        this._music = false;
      }
      fn.prototype.setSound.call(this, name);
    }, Folder.prototype.toggleSound = function() {
      if (this.sound) {
        this._wasVoiceOver = this._voiceOver;
        this._wasMusic = this._music;
        /** @type {boolean} */
        this._voiceOver = false;
        /** @type {boolean} */
        this._music = false;
      } else {
        this._voiceOver = this._wasVoiceOver;
        this._music = this._wasMusic;
      }
      fn.prototype.toggleSound.call(this);
    }, Folder.prototype.toggleVoiceOver = function() {
      if (this.sound) {
        /** @type {boolean} */
        this._voiceOver = !this._voiceOver;
        this.notify();
      }
    }, Folder.prototype.toggleMusic = function() {
      if (this.sound) {
        /** @type {boolean} */
        this._music = !this._music;
        this.notify();
      }
    }, Folder.prototype.toggleAutoClearWin = function() {
      /** @type {boolean} */
      this._autoClearWin = !this._autoClearWin;
      this.notify();
    }, Folder.prototype.toggleAutoClearLose = function() {
      /** @type {boolean} */
      this._autoClearLose = !this._autoClearLose;
      this.notify();
    }, Folder.prototype.toggleAutoClearRoundEnd = function() {
      /** @type {boolean} */
      this._autoClearRoundEnd = !this.autoClearRoundEnd;
      /** @type {boolean} */
      this._autoClearWin = this._autoClearRoundEnd;
      /** @type {boolean} */
      this._autoClearLose = this._autoClearRoundEnd;
      this.notify();
    }, Folder.prototype.toggleAutoDeal = function() {
      /** @type {boolean} */
      this._autoDeal = !this._autoDeal;
      this.notify();
    }, Folder.prototype.toggleGameHistorySimple = function() {
      /** @type {boolean} */
      this._gameHistorySimple = !this._gameHistorySimple;
      this.notify();
    }, Folder.prototype.toggleGameHistoryAdvanced = function() {
      /** @type {boolean} */
      this._gameHistoryAdvanced = !this._gameHistoryAdvanced;
      this.notify();
    }, Folder.prototype.serialize = function(glue) {
      fn.prototype.serialize.call(this, glue);
      glue.serializeBoolean("_voiceOver", this);
      glue.serializeBoolean("_music", this);
      glue.serializeBoolean("_autoClearWin", this);
      glue.serializeBoolean("_autoClearLose", this);
      glue.serializeBoolean("_autoClearRoundEnd", this);
      glue.serializeBoolean("_autoDeal", this);
    }, Folder;
  }(self.GameSettings);
  var String = function() {
    /**
     * @return {undefined}
     */
    function DBObject() {
    }
    return DBObject.prototype.countDown = function(flag, list, value, i) {
      var allTraps = this;
      if (void 0 === i) {
        /** @type {number} */
        i = -1;
      }
      /** @type {!Object} */
      this._chipStack = list;
      /** @type {number} */
      this._value = value;
      /** @type {number} */
      this._win = i;
      this._offset = list.getHeight(i < 0 ? value : i, i >= 0);
      this._duration = this._offset;
      flag.startHandler(function(t) {
        return allTraps.countDownHandler(t);
      });
    }, DBObject.prototype.countUp = function(duration, options, count, data) {
      var HVQ = this;
      if (void 0 === data) {
        /** @type {number} */
        data = -1;
      }
      /** @type {!Object} */
      this._chipStack = options;
      /** @type {number} */
      this._value = count;
      /** @type {number} */
      this._win = data;
      this._duration = options.getHeight(data < 0 ? count : data, data >= 0);
      /** @type {number} */
      this._offset = 0;
      duration.startHandler(function(hvqView) {
        return HVQ.countUpHandler(hvqView);
      });
    }, DBObject.prototype.count = function(object, list, value, name, i) {
      var HVQ = this;
      if (void 0 === i) {
        /** @type {number} */
        i = -1;
      }
      /** @type {!Object} */
      this._chipStack = list;
      /** @type {number} */
      this._win = i;
      var index = list.getHeight(value);
      var position = list.getHeight(i < 0 ? name : i, i >= 0);
      this._offset = index;
      /** @type {number} */
      this._duration = Math.abs(index - position);
      this._value = index > position ? value : name;
      object.startHandler(index < position ? function(hvqView) {
        return HVQ.countUpHandler(hvqView);
      } : function(hvqView) {
        return HVQ.countDownWithoutClearingHandler(hvqView);
      });
    }, DBObject.prototype.countDownHandler = function(result) {
      if (result.state >= this._duration) {
        result.complete();
        /** @type {number} */
        var e = (this._win, 0);
        var width = this._win < 0 ? this._win : 0;
        return void this._chipStack.setValue(e, 0, width);
      }
      this._chipStack.setValue(this._value, this._offset - result.state, this._win);
      result.startDelayMs(1000 / 24 * 1);
    }, DBObject.prototype.countDownWithoutClearingHandler = function(jobItem) {
      if (jobItem.state >= this._duration) {
        jobItem.complete();
      }
      this._chipStack.setValue(this._value, this._offset - jobItem.state, this._win);
      jobItem.startDelayMs(1000 / 24 * 1);
    }, DBObject.prototype.countUpHandler = function(buffer) {
      if (buffer.state >= this._duration) {
        buffer.complete();
      }
      this._chipStack.setValue(this._value, this._offset + buffer.state, this._win);
      buffer.startDelayMs(1000 / 24 * 1);
    }, DBObject;
  }();
  var findAnswerInLoadedAIMLFilesWrapper = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var FCKToolbarButtonUI = function(cb) {
    /**
     * @param {number} i
     * @param {number} index
     * @param {number} data
     * @return {?}
     */
    function message(i, index, data) {
      if (void 0 === index) {
        /** @type {number} */
        index = 0;
      }
      if (void 0 === data) {
        /** @type {boolean} */
        data = true;
      }
      var div = cb.call(this, message.VOICEOVER) || this;
      return div._idx = i, div._silenceAtEnd = index, div._flushable = data, div;
    }
    return findAnswerInLoadedAIMLFilesWrapper(message, cb), Object.defineProperty(message.prototype, "idx", {
      get : function() {
        return this._idx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(message.prototype, "silenceAtEnd", {
      get : function() {
        return this._silenceAtEnd;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(message.prototype, "flushable", {
      get : function() {
        return this._flushable;
      },
      enumerable : true,
      configurable : true
    }), message.VOICEOVER = "voiceover", message.FLUSHABLE = true, message.NOT_FLUSHABLE = false, message.NO_SILENCE = 0, message;
  }(exports.MegatonEvent);
  !function(Key) {
    /** @type {string} */
    Key[Key.ZERO = 0] = "ZERO";
    /** @type {string} */
    Key[Key.ONE = 1] = "ONE";
    /** @type {string} */
    Key[Key.TWO = 2] = "TWO";
    /** @type {string} */
    Key[Key.THREE = 3] = "THREE";
    /** @type {string} */
    Key[Key.FOUR = 4] = "FOUR";
    /** @type {string} */
    Key[Key.FIVE = 5] = "FIVE";
    /** @type {string} */
    Key[Key.SIX = 6] = "SIX";
    /** @type {string} */
    Key[Key.SEVEN = 7] = "SEVEN";
    /** @type {string} */
    Key[Key.EIGHT = 8] = "EIGHT";
    /** @type {string} */
    Key[Key.NINE = 9] = "NINE";
    /** @type {string} */
    Key[Key.TEN = 10] = "TEN";
    /** @type {string} */
    Key[Key.ELEVEN = 11] = "ELEVEN";
    /** @type {string} */
    Key[Key.TWELEVE = 12] = "TWELEVE";
    /** @type {string} */
    Key[Key.THIRTEEN = 13] = "THIRTEEN";
    /** @type {string} */
    Key[Key.FORTEEN = 14] = "FORTEEN";
    /** @type {string} */
    Key[Key.FIFTEEN = 15] = "FIFTEEN";
    /** @type {string} */
    Key[Key.SIXTEEN = 16] = "SIXTEEN";
    /** @type {string} */
    Key[Key.SEVENTEEN = 17] = "SEVENTEEN";
    /** @type {string} */
    Key[Key.EIGHTEEN = 18] = "EIGHTEEN";
    /** @type {string} */
    Key[Key.NINETEEN = 19] = "NINETEEN";
    /** @type {string} */
    Key[Key.TWENTY = 20] = "TWENTY";
    /** @type {string} */
    Key[Key.TWENTYONE = 21] = "TWENTYONE";
    /** @type {string} */
    Key[Key.TWENTYTWO = 22] = "TWENTYTWO";
    /** @type {string} */
    Key[Key.TWENTYTHREE = 23] = "TWENTYTHREE";
    /** @type {string} */
    Key[Key.TWENTYFOUR = 24] = "TWENTYFOUR";
    /** @type {string} */
    Key[Key.TWENTYFIVE = 25] = "TWENTYFIVE";
    /** @type {string} */
    Key[Key.TWENTYSIX = 26] = "TWENTYSIX";
    /** @type {string} */
    Key[Key.TWENTYSEVEN = 27] = "TWENTYSEVEN";
    /** @type {string} */
    Key[Key.TWENTYEIGHT = 28] = "TWENTYEIGHT";
    /** @type {string} */
    Key[Key.TWENTYNINE = 29] = "TWENTYNINE";
    /** @type {string} */
    Key[Key.THIRTY = 30] = "THIRTY";
    /** @type {string} */
    Key[Key.THIRTYONE = 31] = "THIRTYONE";
    /** @type {string} */
    Key[Key.THIRTYTWO = 32] = "THIRTYTWO";
    /** @type {string} */
    Key[Key.THIRTYTHREE = 33] = "THIRTYTHREE";
    /** @type {string} */
    Key[Key.THIRTYFOUR = 34] = "THIRTYFOUR";
    /** @type {string} */
    Key[Key.THIRTYFIVE = 35] = "THIRTYFIVE";
    /** @type {string} */
    Key[Key.THIRTYSIX = 36] = "THIRTYSIX";
    /** @type {string} */
    Key[Key.DOUBLEZERO = 37] = "DOUBLEZERO";
    /** @type {string} */
    Key[Key.BA_BANKERHAS = 38] = "BA_BANKERHAS";
    /** @type {string} */
    Key[Key.BA_BANERWINSNATRUAL = 39] = "BA_BANERWINSNATRUAL";
    /** @type {string} */
    Key[Key.BA_BANKERWINS = 40] = "BA_BANKERWINS";
    /** @type {string} */
    Key[Key.BA_NATURAL = 41] = "BA_NATURAL";
    /** @type {string} */
    Key[Key.BA_ONECARDBANKER = 42] = "BA_ONECARDBANKER";
    /** @type {string} */
    Key[Key.BA_ONECARDPLAYER = 43] = "BA_ONECARDPLAYER";
    /** @type {string} */
    Key[Key.BA_OVER = 44] = "BA_OVER";
    /** @type {string} */
    Key[Key.BA_PLAYERHAS = 45] = "BA_PLAYERHAS";
    /** @type {string} */
    Key[Key.BA_PLAYERWINSNATURAL = 46] = "BA_PLAYERWINSNATURAL";
    /** @type {string} */
    Key[Key.BA_PLAYWINS = 47] = "BA_PLAYWINS";
    /** @type {string} */
    Key[Key.BA_TIEWINS = 48] = "BA_TIEWINS";
    /** @type {string} */
    Key[Key.BJ_BUST = 49] = "BJ_BUST";
    /** @type {string} */
    Key[Key.BJ_CHECKBJ = 50] = "BJ_CHECKBJ";
    /** @type {string} */
    Key[Key.BJ_DEALERBUSTS = 51] = "BJ_DEALERBUSTS";
    /** @type {string} */
    Key[Key.BJ_DEALERHASBJ = 52] = "BJ_DEALERHASBJ";
    /** @type {string} */
    Key[Key.BJ_DEALERNOTBJ = 53] = "BJ_DEALERNOTBJ";
    /** @type {string} */
    Key[Key.BJ_INSURANCEAVAIL = 54] = "BJ_INSURANCEAVAIL";
    /** @type {string} */
    Key[Key.BJ_INSURANCENOTPAY = 55] = "BJ_INSURANCENOTPAY";
    /** @type {string} */
    Key[Key.BJ_INSURANCEPAYS = 56] = "BJ_INSURANCEPAYS";
    /** @type {string} */
    Key[Key.BJ_PLAYERHASBJ = 57] = "BJ_PLAYERHASBJ";
    /** @type {string} */
    Key[Key.CI_ANTEPLS = 58] = "CI_ANTEPLS";
    /** @type {string} */
    Key[Key.CI_CONG = 59] = "CI_CONG";
    /** @type {string} */
    Key[Key.CI_DEALERACEKING = 60] = "CI_DEALERACEKING";
    /** @type {string} */
    Key[Key.CI_DEALERHAS = 61] = "CI_DEALERHAS";
    /** @type {string} */
    Key[Key.CI_DEALERNOTQUAL = 62] = "CI_DEALERNOTQUAL";
    /** @type {string} */
    Key[Key.CI_DEALERWINS = 63] = "CI_DEALERWINS";
    /** @type {string} */
    Key[Key.CI_MAKECHOICE = 64] = "CI_MAKECHOICE";
    /** @type {string} */
    Key[Key.CI_NOMOREBETS = 65] = "CI_NOMOREBETS";
    /** @type {string} */
    Key[Key.CI_PLACEBETS = 66] = "CI_PLACEBETS";
    /** @type {string} */
    Key[Key.CI_PLAYERWINS = 67] = "CI_PLAYERWINS";
    /** @type {string} */
    Key[Key.CI_PUSH = 68] = "CI_PUSH";
    /** @type {string} */
    Key[Key.CI_YOUHAVEA = 69] = "CI_YOUHAVEA";
    /** @type {string} */
    Key[Key.CI_YOUHAVE = 70] = "CI_YOUHAVE";
    /** @type {string} */
    Key[Key.PK_ACE = 71] = "PK_ACE";
    /** @type {string} */
    Key[Key.PK_FLUSH = 72] = "PK_FLUSH";
    /** @type {string} */
    Key[Key.PK_4OAK = 73] = "PK_4OAK";
    /** @type {string} */
    Key[Key.PK_HIGHCARD = 74] = "PK_HIGHCARD";
    /** @type {string} */
    Key[Key.PK_JACK = 75] = "PK_JACK";
    /** @type {string} */
    Key[Key.PK_KICKER = 76] = "PK_KICKER";
    /** @type {string} */
    Key[Key.PK_KING = 77] = "PK_KING";
    /** @type {string} */
    Key[Key.PK_ONEPAIR = 78] = "PK_ONEPAIR";
    /** @type {string} */
    Key[Key.PK_QUEEN = 79] = "PK_QUEEN";
    /** @type {string} */
    Key[Key.PK_ROYASTRTFLUSH = 80] = "PK_ROYASTRTFLUSH";
    /** @type {string} */
    Key[Key.PK_STRAIGTH = 81] = "PK_STRAIGTH";
    /** @type {string} */
    Key[Key.PK_STRTFLUSH = 82] = "PK_STRTFLUSH";
    /** @type {string} */
    Key[Key.PK_3OAK = 83] = "PK_3OAK";
    /** @type {string} */
    Key[Key.PK_TWOPAIR = 84] = "PK_TWOPAIR";
    /** @type {string} */
    Key[Key.PK_FULLHOUSE = 85] = "PK_FULLHOUSE";
    /** @type {string} */
    Key[Key.PK_HIGH = 86] = "PK_HIGH";
    /** @type {string} */
    Key[Key.CP_CENTERFIELD = 87] = "CP_CENTERFIELD";
    /** @type {string} */
    Key[Key.CP_COMEAWAY = 88] = "CP_COMEAWAY";
    /** @type {string} */
    Key[Key.CP_CRAPS = 89] = "CP_CRAPS";
    /** @type {string} */
    Key[Key.CP_DICEOUT = 90] = "CP_DICEOUT";
    /** @type {string} */
    Key[Key.CP_DOUBLEFIELD = 91] = "CP_DOUBLEFIELD";
    /** @type {string} */
    Key[Key.CP_EASY = 92] = "CP_EASY";
    /** @type {string} */
    Key[Key.CP_FRONTLINEWINNER = 93] = "CP_FRONTLINEWINNER";
    /** @type {string} */
    Key[Key.CP_GOODFIELDCOME = 94] = "CP_GOODFIELDCOME";
    /** @type {string} */
    Key[Key.CP_HARD = 95] = "CP_HARD";
    /** @type {string} */
    Key[Key.CP_LINEAWAY = 96] = "CP_LINEAWAY";
    /** @type {string} */
    Key[Key.CP_NOFIELD = 97] = "CP_NOFIELD";
    /** @type {string} */
    Key[Key.CP_OUTSEVEN = 98] = "CP_OUTSEVEN";
    /** @type {string} */
    Key[Key.CP_PAYNOTLASTCOME = 99] = "CP_PAYNOTLASTCOME";
    /** @type {string} */
    Key[Key.CP_PAYNOT = 100] = "CP_PAYNOT";
    /** @type {string} */
    Key[Key.CP_SHOOTINGFOR = 101] = "CP_SHOOTINGFOR";
    /** @type {string} */
    Key[Key.CP_SINGLEFIELD = 102] = "CP_SINGLEFIELD";
    /** @type {string} */
    Key[Key.CP_POINTIS = 103] = "CP_POINTIS";
    /** @type {string} */
    Key[Key.CP_THEYCOMINGOUT = 104] = "CP_THEYCOMINGOUT";
    /** @type {string} */
    Key[Key.CP_WINNER = 105] = "CP_WINNER";
    /** @type {string} */
    Key[Key.CP_YO = 106] = "CP_YO";
    /** @type {string} */
    Key[Key.CP_BARNOT = 107] = "CP_BARNOT";
    /** @type {string} */
    Key[Key.PG_FIRSTHANDLOSE = 108] = "PG_FIRSTHANDLOSE";
    /** @type {string} */
    Key[Key.PG_FIRSTHANDWIN = 109] = "PG_FIRSTHANDWIN";
    /** @type {string} */
    Key[Key.PG_SECONDHANDLOSE = 110] = "PG_SECONDHANDLOSE";
    /** @type {string} */
    Key[Key.PG_SECONDHANDWIN = 111] = "PG_SECONDHANDWIN";
    /** @type {string} */
    Key[Key.RL_BLACK = 112] = "RL_BLACK";
    /** @type {string} */
    Key[Key.RL_EVEN = 113] = "RL_EVEN";
    /** @type {string} */
    Key[Key.RL_ODD = 114] = "RL_ODD";
    /** @type {string} */
    Key[Key.RL_RED = 115] = "RL_RED";
    /** @type {string} */
    Key[Key.NUMBEROFVO = 116] = "NUMBEROFVO";
    /** @type {string} */
    Key[Key.FLUSH_VOICE = 117] = "FLUSH_VOICE";
    /** @type {string} */
    Key[Key.FLUSH_QUEUE = 118] = "FLUSH_QUEUE";
    /** @type {string} */
    Key[Key.FLUSH_TO_LAST = 119] = "FLUSH_TO_LAST";
  }(kb || (kb = {}));
  var TokenType;
  var fieldSpecificFormatter = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var State = function(f) {
    /**
     * @return {?}
     */
    function UploaderQueue() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return fieldSpecificFormatter(UploaderQueue, f), UploaderQueue.NONE = 0, UploaderQueue.BET = 1, UploaderQueue.CONTINUE = 2, UploaderQueue.CLEAR = 5, UploaderQueue;
  }(self.ShowButtonsEvent);
  var coveredByRange = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var obj = function(end) {
    /**
     * @return {?}
     */
    function UploaderQueue() {
      return null !== end && end.apply(this, arguments) || this;
    }
    return coveredByRange(UploaderQueue, end), UploaderQueue.PLAY = "UIPLAY", UploaderQueue.CONTINUE = "UICONTINUE", UploaderQueue.REBET = "UIREBET", UploaderQueue.CLEARTABLE = "UICLEARTABLE", UploaderQueue.MOBILE_MENU = "UIMOBILEMENU", UploaderQueue.SETTINGS_CHANGE = "UISETTINGSCHANGE", UploaderQueue.TOGGLE_FAST_PLAY = "UITOGGLEFASTPLAY", UploaderQueue.CHIPTRAY_MOVE = "CHIPTRAYMOVE", UploaderQueue.HIT = "HIT", UploaderQueue.STAND = "STAND", UploaderQueue.DOUBLE = "DOUBLE", UploaderQueue.SPLIT = 
    "SPLIT", UploaderQueue.SURRENDER = "SURRENDER", UploaderQueue.INSURANCE_YES = "INSURANCE_YES", UploaderQueue.INSURANCE_NO = "INSURANCE_NO", UploaderQueue.INSURANCE_YES_TO_ALL = "INSURANCE_YES_TO_ALL", UploaderQueue.INSURANCE_NO_TO_ALL = "INSURANCE_NO_TO_ALL", UploaderQueue.CALL = "UICALL", UploaderQueue.FOLD = "UIFOLD", UploaderQueue.UNDO = "UIUNDO", UploaderQueue.STATISTICS = "UISTATISTICS", UploaderQueue.PRESET = "UIFAVOURITE", UploaderQueue;
  }(self.MegatonUIEvent);
  var isSourcedFromRequire = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Tokenizer = function(Widget) {
    /**
     * @param {string} context
     * @param {?} widget
     * @param {?} id
     * @param {?} host
     * @param {!Object} config
     * @param {!Object} settings
     * @return {?}
     */
    function init(context, widget, id, host, config, settings) {
      var me = Widget.call(this, widget) || this;
      /** @type {!Array} */
      me._roundsSequence = [function(t) {
        return me.betHandler(t);
      }, function(canCreateDiscussions) {
        return me.gameHandler(canCreateDiscussions);
      }, function(t) {
        return me.winHandler(t);
      }, function(t) {
        return me.waitHandler(t);
      }, function(propertyValue) {
        return me.clearHandler(propertyValue);
      }, function(data) {
        return me.roundEndHandler(data);
      }];
      /** @type {string} */
      me._dispatcher = context;
      me._roundHandler = id;
      me._betHandler = host.betHandler;
      me._betView = host.betView;
      /** @type {!Object} */
      me._settings = settings;
      /** @type {!Object} */
      me._config = config;
      widget.registerEvent(obj.PLAY);
      widget.registerEvent(obj.REBET);
      widget.registerEvent(obj.CLEARTABLE);
      widget.registerEvent(self.SPFundsErrorEvent.SPFUNDSERROR);
      context.addEventListener(obj.CONTINUE, function() {
        return me.onContinue();
      });
      var directory_epub = self.ResourceManager.getInstance().getSndManager();
      return me._rebetSnd = directory_epub.create("placeChip"), me;
    }
    return isSourcedFromRequire(init, Widget), init.prototype.roundsHandler = function(canCreateDiscussions) {
      canCreateDiscussions.execLoop(this._roundsSequence);
    }, init.prototype.betHandler = function(state) {
      switch(state.state) {
        case 0:
          this._roundHandler.startRound(false);
          this._betHandler.checkBalanceForRebet(this._roundHandler.balance);
          this._dispatcher.dispatch(new self.ShowButtonsEvent(State.BET));
        case 1:
          /** @type {null} */
          var s = null;
          for (; s = this._input.read(state);) {
            if (s.type === self.ReconnectEndEvent.RECONNECTEND) {
              this._input.next();
            } else {
              if (s.type === obj.REBET) {
                this._rebetSnd.play();
                var hasSomeGrouping = this._betHandler.loadBets(this._roundHandler.balance);
                if (hasSomeGrouping && this._settings.autoDeal && this.checkRoundBalance()) {
                  return this.sendDeal(), this._dispatcher.dispatch(new self.ShowButtonsEvent(State.NONE)), this._roundHandler.startRound(true), this.onRoundStart(), void state.complete();
                }
                this._input.next();
              } else {
                if (s.type !== self.SPFundsErrorEvent.SPFUNDSERROR) {
                  if (this.checkRoundBalance()) {
                    return this._dispatcher.dispatch(new self.ShowButtonsEvent(State.NONE)), this._roundHandler.startRound(true), this.onRoundStart(), void state.complete();
                  }
                  this._input.next();
                } else {
                  this._input.next();
                }
              }
            }
          }
          state.next(1);
      }
    }, init.prototype.checkRoundBalance = function() {
      return true;
    }, init.prototype.gameHandler = function(canCreateDiscussions) {
      canCreateDiscussions.complete();
    }, init.prototype.winHandler = function(result) {
      result.complete();
    }, init.prototype.waitHandler = function(state) {
      switch(state.state) {
        case 0:
          if (!this._roundHandler.running) {
            state.complete();
            break;
          }
          if (this._settings.autoClearWin && this._roundHandler.win >= this._roundHandler.bet || this._settings.autoClearLose && this._roundHandler.win < this._roundHandler.bet) {
            state.startDelayMs(this.getWaitForAutoClearMs());
            state.next(2);
            break;
          }
          this._roundHandler.endRound(true);
          this._dispatcher.dispatch(new self.ShowButtonsEvent(State.CLEAR));
        case 1:
          var handler = this._input.read(state);
          if (handler) {
            if (handler.type === obj.CLEARTABLE) {
              this._input.next();
            }
            this._dispatcher.dispatch(new self.ShowButtonsEvent(State.NONE));
            state.complete();
          } else {
            state.next(1);
          }
          break;
        default:
          this._roundHandler.endRound(false);
          state.complete();
      }
    }, init.prototype.clearHandler = function(loop) {
      loop.complete();
    }, init.prototype.roundEndHandler = function(subgoal) {
      this.onRoundEnd();
      subgoal.complete();
    }, init.prototype.onRoundStart = function() {
    }, init.prototype.onRoundEnd = function() {
      this._betHandler.clearBets();
    }, init.prototype.onContinue = function() {
      this.enableQuickStop(false);
    }, init.prototype.enableQuickStop = function(err) {
      if (!this._config.quickStop) {
        /** @type {boolean} */
        err = false;
      }
      var state = err ? State.CONTINUE : State.NONE;
      this._dispatcher.dispatch(new State(state));
    }, init.prototype.playChipSound = function() {
      var YM = this;
      return exports.Task.createHandler(function(completionNotifier) {
        YM._rebetSnd.play();
        completionNotifier.complete();
      });
    }, init.prototype.moveChipStack = function(t, i, from, next) {
      var damas = this;
      return exports.Task.createHandler(function(canCreateDiscussions) {
        if (next > 0) {
          damas._betHandler.move(t, i, from, next);
        }
        canCreateDiscussions.execDelayMs(next > 0 ? 200 : 0);
      });
    }, init.prototype.countChipStack = function(i, value, id, callback) {
      var o = this;
      var context = new String;
      return exports.Task.createHandler(function(r) {
        switch(r.state) {
          case 0:
            context.count(r, o._betView.getChipStack(i, value), id, callback);
            break;
          default:
            r.complete();
        }
      });
    }, init.prototype.countChipAmountUp = function(type, key, n, channel) {
      return void 0 === channel && (channel = false), this._betView.getChipStack(type, key, channel).count(0, n);
    }, init.prototype.countChipAmountDown = function(type, key, prop, to) {
      return void 0 === to && (to = false), this._betView.getChipStack(type, key, to).count(prop, 0);
    }, init.prototype.wait = function(t) {
      return exports.Task.createHandler(function(MapTrailLayer) {
        MapTrailLayer.execDelayMs(t);
      });
    }, init.prototype.getBet = function(t, e) {
      return this._betHandler.getBet(t, e);
    }, init.prototype.setBet = function(t, e, n) {
      var i = this;
      return exports.Task.createHandler(function(completionNotifier) {
        i._betHandler.setBet(t, e, n);
        completionNotifier.complete();
      });
    }, init.prototype.getValue = function(i, item) {
      return this._betHandler.getValue(i, item);
    }, init.prototype.setValue = function(e, s, v) {
      var ShaderEditor = this;
      return exports.Task.createHandler(function(completionNotifier) {
        ShaderEditor._betHandler.setValue(e, s, v);
        completionNotifier.complete();
      });
    }, init.prototype.putBet = function(t, index, n) {
      var slice = this;
      return exports.Task.createHandler(function(gracePeriodRestangularService) {
        /** @type {!Array} */
        var tasks = [];
        tasks.push(slice.setBet(t, index, n));
        tasks.push(slice.countChipAmountUp(t, index, n));
        gracePeriodRestangularService.execSequence(tasks);
      });
    }, init.prototype.addBet = function(t, index, counter) {
      var assert = this;
      return exports.Task.createHandler(function(gracePeriodRestangularService) {
        var i = assert.getBet(t, index);
        /** @type {!Array} */
        var tasks = [];
        tasks.push(assert.setBet(t, index, i + counter));
        tasks.push(assert.countChipAmountUp(t, index, i + counter));
        gracePeriodRestangularService.execSequence(tasks);
      });
    }, init.prototype.doubleBet = function(t, e) {
      var _self = this;
      return exports.Task.createHandler(function(strUtil) {
        var n = _self.getBet(t, e);
        /** @type {!Array} */
        var s = [];
        s.push(_self.setBet(t, e, 2 * n));
        s.push(_self.countChipAmountUp(t, e, n, true));
        s.push(_self.wait(300));
        /** @type {!Array} */
        var enterAnimation = [_self.countChipAmountDown(t, e, n, false), _self.countChipAmountDown(t, e, n, true)];
        s.push(exports.Task.createHandler(function($fxMakeAnimation) {
          $fxMakeAnimation.execGroup(enterAnimation);
        }));
        s.push(_self.countChipAmountUp(t, e, 2 * n));
        strUtil.execSequence(s);
      });
    }, init.prototype.addVoiceOver = function(name, checked, tooltip) {
      var self = this;
      return void 0 === checked && (checked = 0), void 0 === tooltip && (tooltip = false), exports.Task.createHandler(function(completionNotifier) {
        self._dispatcher.dispatch(new FCKToolbarButtonUI(name, checked, tooltip));
        completionNotifier.complete();
      });
    }, init.prototype.sendDeal = function() {
    }, init.prototype.getWaitForAutoClearMs = function() {
      return 2000;
    }, init;
  }(self.LogicManager);
  var on = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var matrix = function(test) {
    /**
     * @param {!HTMLElement} e
     * @param {!Object} options
     * @param {?} metadata
     * @return {?}
     */
    function update(e, options, metadata) {
      var that = test.call(this, e) || this;
      /** @type {!Object} */
      that._settings = options;
      e.addEventListener(FCKToolbarButtonUI.VOICEOVER, function(t) {
        return that.onVoiceOver(t);
      });
      e.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return that.start();
      });
      self.ResourceManager.getInstance().getSndManager();
      return that._volume = 0.5, that._voices = metadata, that._playList = new Array, that._enabled = false, that._waitTask = null, that._isPlaying = false, exports.Task.createHandler(function(person) {
        return that.initSoundLoop(person);
      }).start(), that;
    }
    return on(update, test), Object.defineProperty(update.prototype, "current", {
      get : function() {
        return this._current;
      },
      enumerable : true,
      configurable : true
    }), update.prototype.start = function() {
      /** @type {boolean} */
      this._enabled = true;
    }, update.prototype.onVoiceOver = function(b) {
      if (this._settings.voiceOver && this._enabled) {
        if (b.idx === kb.FLUSH_QUEUE) {
          /** @type {number} */
          this._playList.length = 0;
        } else {
          if (b.idx === kb.FLUSH_TO_LAST) {
            for (; this._playList.length > 1;) {
              this._playList.shift();
            }
          } else {
            this._playList.push(b);
            if (this._currentFlushable) {
              this._current.stop();
              if (this._waitTask) {
                this._waitTask.cancelDelay();
                /** @type {null} */
                this._waitTask = null;
              }
            } else {
              if (!this._isPlaying) {
                if (this._waitTask) {
                  this._waitTask.cancelDelay();
                  /** @type {null} */
                  this._waitTask = null;
                }
              }
            }
          }
        }
      }
    }, update.prototype.initSoundLoop = function(type) {
      var foreignControls = this;
      type.execLoop([function(primaryTxHex) {
        return foreignControls.soundHandler(primaryTxHex);
      }]);
    }, update.prototype.soundHandler = function(primaryTxHex) {
      if (this._waitTask = primaryTxHex, this._playList.length > 0) {
        var note = this._playList.shift();
        if (this._playList.length > 0 && note.flushable) {
          primaryTxHex.execDelayMs(exports.SystemManager.getScheduler().tickToTime(1));
        } else {
          if (note.idx === kb.FLUSH_VOICE) {
            this._currentFlushable = note.flushable;
            /** @type {boolean} */
            this._isPlaying = true;
            primaryTxHex.execDelayMs(note.silenceAtEnd);
          } else {
            this._current = this._voices[note.idx];
            this._currentFlushable = note.flushable;
            this._current.play();
            /** @type {boolean} */
            this._isPlaying = true;
            primaryTxHex.execDelayMs(1000 * this._current.getDuration() + note.silenceAtEnd);
          }
        }
      } else {
        /** @type {boolean} */
        this._isPlaying = false;
        primaryTxHex.execDelayMs(1000);
      }
    }, update;
  }(exports.EventProcessor);
  var regenerate = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var M = function(b) {
    /**
     * @param {?} m
     * @param {?} n
     * @param {?} c
     * @param {!Object} g
     * @param {?} status
     * @return {?}
     */
    function set(m, n, c, g, status) {
      var me = b.call(this, m, n, c) || this;
      return me._betWaitingTime = set.BET_VOICE_WAITING, me._betIsWaiting = false, me._betVoiceOver = status, me._betHandler = g, me._betHandler.addListener(function() {
        return me.onBetChanged();
      }), me._dispatcher.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return me.onGameStart();
      }), me;
    }
    return regenerate(set, b), set.prototype.onGameStart = function() {
      var _this = this;
      exports.SystemManager.getScheduler().wait(20, null, function() {
        if (0 == _this._betHandler.getTotalBet()) {
          _this._dispatcher.dispatch(_this._betVoiceOver);
        }
        _this.onBetChanged();
      }, null);
    }, set.prototype.onBetChanged = function() {
      if (0 == this._betHandler.getTotalBet()) {
        this._betWaitTimeStamp = exports.SystemManager.getScheduler().getTime();
        /** @type {boolean} */
        this._betIsWaiting = true;
      } else {
        /** @type {boolean} */
        this._betIsWaiting = false;
      }
    }, set.prototype.soundHandler = function(primaryTxHex) {
      b.prototype.soundHandler.call(this, primaryTxHex);
      if (this._betIsWaiting && exports.SystemManager.getScheduler().getTime() - this._betWaitTimeStamp > this._betWaitingTime) {
        this._betWaitTimeStamp = exports.SystemManager.getScheduler().getTime();
        this._dispatcher.dispatch(this._betVoiceOver);
      }
    }, set.BET_VOICE_WAITING = 30000, set;
  }(matrix);
  var D = function() {
    /**
     * @param {!Function} e
     * @param {!Function} file
     * @param {!Function} window
     * @param {!Function} error
     * @return {undefined}
     */
    function reportException(e, file, window, error) {
      this.createVoiceOverController(e, file, window, error);
    }
    return reportException.prototype.createVoiceOverController = function(selector, id, namespace, key) {
      this._voiceOverController = new M(selector, id, this.buildVoices(), namespace, key);
    }, reportException.prototype.buildVoices = function() {
      var directory_epub = self.ResourceManager.getInstance().getSndManager();
      /** @type {!Array} */
      var abEnum = new Array;
      return abEnum[kb.ZERO] = directory_epub.create("vo_zero"), abEnum[kb.ONE] = directory_epub.create("vo_one"), abEnum[kb.TWO] = directory_epub.create("vo_two"), abEnum[kb.THREE] = directory_epub.create("vo_three"), abEnum[kb.FOUR] = directory_epub.create("vo_four"), abEnum[kb.FIVE] = directory_epub.create("vo_five"), abEnum[kb.SIX] = directory_epub.create("vo_six"), abEnum[kb.SEVEN] = directory_epub.create("vo_seven"), abEnum[kb.EIGHT] = directory_epub.create("vo_eight"), abEnum[kb.NINE] = directory_epub.create("vo_nine"), 
      abEnum[kb.TEN] = directory_epub.create("vo_ten"), abEnum[kb.ELEVEN] = directory_epub.create("vo_eleven"), abEnum[kb.TWELEVE] = directory_epub.create("vo_twelve"), abEnum[kb.THIRTEEN] = directory_epub.create("vo_thirteen"), abEnum[kb.FORTEEN] = directory_epub.create("vo_fourteen"), abEnum[kb.FIFTEEN] = directory_epub.create("vo_fifteen"), abEnum[kb.SIXTEEN] = directory_epub.create("vo_sixteen"), abEnum[kb.SEVENTEEN] = directory_epub.create("vo_seventeen"), abEnum[kb.EIGHTEEN] = directory_epub.create("vo_eighteen"), 
      abEnum[kb.NINETEEN] = directory_epub.create("vo_nineteen"), abEnum[kb.TWENTY] = directory_epub.create("vo_twenty"), abEnum[kb.TWENTYONE] = directory_epub.create("vo_twentyOne"), abEnum[kb.TWENTYTWO] = directory_epub.create("vo_twentyTwo"), abEnum[kb.TWENTYTHREE] = directory_epub.create("vo_twentyThree"), abEnum[kb.TWENTYFOUR] = directory_epub.create("vo_twentyFour"), abEnum[kb.TWENTYFIVE] = directory_epub.create("vo_twentyFive"), abEnum[kb.TWENTYSIX] = directory_epub.create("vo_twentySix"), 
      abEnum[kb.TWENTYSEVEN] = directory_epub.create("vo_twentySeven"), abEnum[kb.TWENTYEIGHT] = directory_epub.create("vo_twentyEight"), abEnum[kb.TWENTYNINE] = directory_epub.create("vo_twentyNine"), abEnum[kb.THIRTY] = directory_epub.create("vo_thirty"), abEnum[kb.THIRTYONE] = directory_epub.create("vo_thirtyOne"), abEnum[kb.THIRTYTWO] = directory_epub.create("vo_thirtyTwo"), abEnum[kb.THIRTYTHREE] = directory_epub.create("vo_thirtyThree"), abEnum[kb.THIRTYFOUR] = directory_epub.create("vo_thirtyFour"), 
      abEnum[kb.THIRTYFIVE] = directory_epub.create("vo_thirtyFive"), abEnum[kb.THIRTYSIX] = directory_epub.create("vo_thirtySix"), abEnum[kb.DOUBLEZERO] = directory_epub.create("vo_doubleZero"), abEnum[kb.BA_BANKERHAS] = directory_epub.create("vo_bankerHas"), abEnum[kb.BA_BANERWINSNATRUAL] = directory_epub.create("vo_bankerWinsNatural"), abEnum[kb.BA_BANKERWINS] = directory_epub.create("vo_bankerWins"), abEnum[kb.BA_NATURAL] = directory_epub.create("vo_natural"), abEnum[kb.BA_ONECARDBANKER] = directory_epub.create("vo_oneCardBanker"), 
      abEnum[kb.BA_ONECARDPLAYER] = directory_epub.create("vo_oneCardPlayer"), abEnum[kb.BA_OVER] = directory_epub.create("vo_over"), abEnum[kb.BA_PLAYERHAS] = directory_epub.create("vo_playerHas"), abEnum[kb.BA_PLAYERWINSNATURAL] = directory_epub.create("vo_playerWinsNatural"), abEnum[kb.BA_PLAYWINS] = directory_epub.create("vo_playerWins"), abEnum[kb.BA_TIEWINS] = directory_epub.create("vo_tieWins"), abEnum[kb.BJ_BUST] = directory_epub.create("vo_bust"), abEnum[kb.BJ_CHECKBJ] = directory_epub.create("vo_checkingForBlackjack"), 
      abEnum[kb.BJ_DEALERBUSTS] = directory_epub.create("vo_dealerBusts"), abEnum[kb.BJ_DEALERHASBJ] = directory_epub.create("vo_dealerHasBlackjack"), abEnum[kb.BJ_DEALERNOTBJ] = directory_epub.create("vo_dealerNotBlackjack"), abEnum[kb.BJ_INSURANCEAVAIL] = directory_epub.create("vo_insuranceAvailable"), abEnum[kb.BJ_INSURANCENOTPAY] = directory_epub.create("vo_insuranceDoesntPay"), abEnum[kb.BJ_INSURANCEPAYS] = directory_epub.create("vo_insurancePays"), abEnum[kb.BJ_PLAYERHASBJ] = directory_epub.create("vo_playerHasBlackjack"), 
      abEnum[kb.CI_ANTEPLS] = directory_epub.create("vo_antePlsCommon"), abEnum[kb.CI_CONG] = directory_epub.create("vo_congratCommon"), abEnum[kb.CI_DEALERACEKING] = directory_epub.create("vo_dealerAceKingCommon"), abEnum[kb.CI_DEALERHAS] = directory_epub.create("vo_dealerHasCommon"), abEnum[kb.CI_DEALERNOTQUAL] = directory_epub.create("vo_dealerNotQualCommon"), abEnum[kb.CI_DEALERWINS] = directory_epub.create("vo_dealerWinsCommon"), abEnum[kb.CI_MAKECHOICE] = directory_epub.create("vo_makeYourChoiceCommon"), 
      abEnum[kb.CI_NOMOREBETS] = directory_epub.create("vo_noMoreBetsCommon"), abEnum[kb.CI_PLACEBETS] = directory_epub.create("vo_placeYourBetsCommon"), abEnum[kb.CI_PLAYERWINS] = directory_epub.create("vo_playerWinsCommon"), abEnum[kb.CI_PUSH] = directory_epub.create("vo_pushCommon"), abEnum[kb.CI_YOUHAVEA] = directory_epub.create("vo_youHaveACommon"), abEnum[kb.CI_YOUHAVE] = directory_epub.create("vo_youHaveCommon"), abEnum[kb.PK_ACE] = directory_epub.create("vo_ace"), abEnum[kb.PK_FLUSH] = directory_epub.create("vo_flush"), 
      abEnum[kb.PK_4OAK] = directory_epub.create("vo_fourOfAKind"), abEnum[kb.PK_HIGH] = directory_epub.create("vo_highCard"), abEnum[kb.PK_JACK] = directory_epub.create("vo_jack"), abEnum[kb.PK_KICKER] = directory_epub.create("vo_kicker"), abEnum[kb.PK_KING] = directory_epub.create("vo_king"), abEnum[kb.PK_ONEPAIR] = directory_epub.create("vo_onePair"), abEnum[kb.PK_QUEEN] = directory_epub.create("vo_queen"), abEnum[kb.PK_ROYASTRTFLUSH] = directory_epub.create("vo_royalStraightFlush"), abEnum[kb.PK_STRAIGTH] = 
      directory_epub.create("vo_straight"), abEnum[kb.PK_STRTFLUSH] = directory_epub.create("vo_straightFlush"), abEnum[kb.PK_3OAK] = directory_epub.create("vo_threeOfAKind"), abEnum[kb.PK_TWOPAIR] = directory_epub.create("vo_twoPair"), abEnum[kb.PK_FULLHOUSE] = directory_epub.create("vo_fullHouse"), abEnum[kb.PK_HIGH] = directory_epub.create("vo_high"), abEnum[kb.CP_CENTERFIELD] = directory_epub.create("vo_centerField"), abEnum[kb.CP_COMEAWAY] = directory_epub.create("vo_comeAway"), abEnum[kb.CP_CRAPS] = 
      directory_epub.create("vo_craps"), abEnum[kb.CP_DICEOUT] = directory_epub.create("vo_diceAreOut"), abEnum[kb.CP_DOUBLEFIELD] = directory_epub.create("vo_doubleTheField"), abEnum[kb.CP_EASY] = directory_epub.create("vo_easy"), abEnum[kb.CP_FRONTLINEWINNER] = directory_epub.create("vo_frontlineWinner"), abEnum[kb.CP_GOODFIELDCOME] = directory_epub.create("vo_goodFieldCome"), abEnum[kb.CP_HARD] = directory_epub.create("vo_hard"), abEnum[kb.CP_LINEAWAY] = directory_epub.create("vo_lineAway"), abEnum[kb.CP_NOFIELD] = 
      directory_epub.create("vo_noField"), abEnum[kb.CP_OUTSEVEN] = directory_epub.create("vo_outSeven"), abEnum[kb.CP_PAYNOTLASTCOME] = directory_epub.create("vo_payDontLastCome"), abEnum[kb.CP_PAYNOT] = directory_epub.create("vo_payTheDont"), abEnum[kb.CP_SHOOTINGFOR] = directory_epub.create("vo_shootingForThe"), abEnum[kb.CP_SINGLEFIELD] = directory_epub.create("vo_singleTheField"), abEnum[kb.CP_POINTIS] = directory_epub.create("vo_thePointIs"), abEnum[kb.CP_THEYCOMINGOUT] = directory_epub.create("vo_theyreComingOut"), 
      abEnum[kb.CP_WINNER] = directory_epub.create("vo_winner"), abEnum[kb.CP_YO] = directory_epub.create("vo_yo"), abEnum[kb.CP_BARNOT] = directory_epub.create("vo_barTheDont"), abEnum[kb.PG_FIRSTHANDLOSE] = directory_epub.create("vo_firstHandLoses"), abEnum[kb.PG_FIRSTHANDWIN] = directory_epub.create("vo_firstHandWins"), abEnum[kb.PG_SECONDHANDLOSE] = directory_epub.create("vo_secondHandLoses"), abEnum[kb.PG_SECONDHANDWIN] = directory_epub.create("vo_secondHandWins"), abEnum[kb.RL_BLACK] = directory_epub.create("vo_black"), 
      abEnum[kb.RL_EVEN] = directory_epub.create("vo_even"), abEnum[kb.RL_ODD] = directory_epub.create("vo_odd"), abEnum[kb.RL_RED] = directory_epub.create("vo_Red"), abEnum;
    }, reportException;
  }();
  var QueryBuilder = function() {
    /**
     * @param {?} gridName
     * @param {?} params
     * @return {undefined}
     */
    function init(gridName, params) {
      this.initTable(gridName, params);
    }
    return init.prototype.initTable = function(gridName, params) {
    }, init;
  }();
  var JQLoader = function() {
    /**
     * @param {?} group
     * @param {string} user
     * @return {undefined}
     */
    function userToGroup(group, user) {
      this.createTableView(group, user);
    }
    return userToGroup.prototype.createTableView = function(options, params) {
      new QueryBuilder(options, params);
    }, userToGroup;
  }();
  var define = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Nlint = function(util) {
    /**
     * @param {?} i
     * @param {?} msg
     * @param {?} n
     * @return {?}
     */
    function e(i, msg, n) {
      return util.call(this, i, msg, n) || this;
    }
    return define(e, util), e.prototype.show = function(result) {
      this._viewFactory.show(result);
    }, e.prototype.destroy = function() {
      util.prototype.destroy.call(this);
      this._viewFactory.destroy();
    }, e;
  }(self.CasinoUIManager);
  var xml2jsonImpl = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Expression = function(options) {
    /**
     * @return {?}
     */
    function node() {
      return null !== options && options.apply(this, arguments) || this;
    }
    return xml2jsonImpl(node, options), node.prototype.init = function(b) {
      options.prototype.init.call(this, b);
      var config = self.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
    }, node.prototype.show = function(str) {
    }, node.prototype.destroy = function() {
    }, node;
  }(self.CasinoViewFactory);
  var renderSubNavigationList = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var sampleApis = function(util) {
    /**
     * @param {?} version
     * @param {?} params
     * @param {?} fn
     * @param {?} uid
     * @return {?}
     */
    function list(version, params, fn, uid) {
      return util.call(this, version, params, fn, uid) || this;
    }
    return renderSubNavigationList(list, util), list.prototype.createConfig = function() {
      return new BuddhaConfig;
    }, list.prototype.createGameSetting = function() {
      return new Reply;
    }, list.prototype.initGame = function() {
      if (!this._betVoice) {
        this._betVoice = new FCKToolbarButtonUI(kb.CI_PLACEBETS, FCKToolbarButtonUI.NO_SILENCE, FCKToolbarButtonUI.NOT_FLUSHABLE);
      }
      util.prototype.initGame.call(this);
      var cx = self.ResourceManager.getInstance().getEntityManager();
      this._entity = cx.create("?");
      cx.add("main", this._entity);
      this._betSettings = this.createBetSettings();
      this._betManager = this.createBetManager();
      this._bonusBalanceManager = this.createBonusBalanceManager();
      this.createVoiceOverManager();
      new SpriteImage(this._dispatcher);
      this.createRealityCheckManager();
      this._entity.getDisplay("logo").setVisible(this._config.showPoweredBy);
      this.createTableViewManager(this._entity, this._config);
    }, list.prototype.createVoiceOverManager = function() {
      return new D(this._dispatcher, this._gameSettings, this._betManager.betHandler, this._betVoice);
    }, list.prototype.createBonusBalanceManager = function() {
      return new tree.BonusBalanceManager(this._dispatcher, this._roundHandler);
    }, list.prototype.createBetSettings = function() {
      var config = this._config;
      return new IASNoneLeftExtension(config.denom);
    }, list.prototype.createLogicManager = function() {
      return new Tokenizer(this._dispatcher, this._logicQueue, this._roundHandler, this._betManager, this._config, this._gameSettings);
    }, list.prototype.createUI = function(callback) {
      return new Nlint(this._dispatcher, this._config, callback);
    }, list.prototype.createViewFactory = function() {
      return new Expression;
    }, list.prototype.onFundsError = function(p1__3354_SHARP_) {
      util.prototype.onFundsError.call(this, p1__3354_SHARP_);
    }, list.prototype.createRealityCheckManager = function() {
      new tree.RealityCheckManager(this._dispatcher, this._config);
    }, list.prototype.createTableViewManager = function(clientClass, options) {
      new JQLoader(clientClass, options);
    }, list;
  }(self.CasinoGame);
  var p = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var panel = function(text) {
    /**
     * @param {string} key
     * @param {?} value
     * @return {?}
     */
    function child(key, value) {
      var Hoptoad = text.call(this, child.SHOWAVATAR) || this;
      return Hoptoad._seatIdx = key, Hoptoad._posIdx = value, Hoptoad;
    }
    return p(child, text), Object.defineProperty(child.prototype, "seatIdx", {
      get : function() {
        return this._seatIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(child.prototype, "posIdx", {
      get : function() {
        return this._posIdx;
      },
      enumerable : true,
      configurable : true
    }), child.SHOWAVATAR = "SHOWAVATAR", child;
  }(exports.MegatonEvent);
  var _handleCollectionClone = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var props = function(output) {
    /**
     * @return {?}
     */
    function input() {
      return output.call(this, input.HIDEAVATAR) || this;
    }
    return _handleCollectionClone(input, output), input.HIDEAVATAR = "HIDEAVATAR", input;
  }(exports.MegatonEvent);
  var ensureStartEnd = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RQShare = function(end) {
    /**
     * @param {!HTMLElement} e
     * @param {!Element} view
     * @return {?}
     */
    function Tooltip(e, view) {
      var me = end.call(this, e) || this;
      return me._view = view, e.addEventListener(panel.SHOWAVATAR, function(change) {
        return me.onShowAvatar(change);
      }), e.addEventListener(props.HIDEAVATAR, function(element) {
        return me.onHideAvatar(element);
      }), me;
    }
    return ensureStartEnd(Tooltip, end), Tooltip.prototype.onShowAvatar = function(e) {
      this._view.show(e.seatIdx, e.posIdx);
    }, Tooltip.prototype.onHideAvatar = function(suppressDisabledCheck) {
      this._view.hide();
    }, Tooltip;
  }(exports.EventProcessor);
  var Notification = function() {
    /**
     * @param {?} args
     * @param {!NodeList} values
     * @return {undefined}
     */
    function t(args, values) {
      /** @type {!Array} */
      this._avatarAnimations = new Array(values.length);
      /** @type {number} */
      var i = 0;
      var l = values.length;
      for (; i < l; i++) {
        /** @type {!Array} */
        this._avatarAnimations[i] = new Array(values[i]);
        /** @type {number} */
        var key = 0;
        var upper = values[i];
        for (; key < upper; key++) {
          this._avatarAnimations[i][key] = this.locateAvatarAnimation(args, i, key);
          this._avatarAnimations[i][key].play("hidden");
        }
      }
    }
    return t.prototype.locateAvatarAnimation = function(asyncFunction, positions, result) {
      return null;
    }, t.prototype.show = function(i, e) {
      this.hide();
      /** @type {null} */
      var element = null;
      var extnds = i < this._avatarAnimations.length ? this._avatarAnimations[i] : null;
      if (extnds && e < extnds.length) {
        element = extnds[e];
      }
      if (element) {
        element.play("start");
      }
      this._lastAnimation = element;
    }, t.prototype.hide = function() {
      if (this._lastAnimation) {
        this._lastAnimation.play("hidden");
        /** @type {null} */
        this._lastAnimation = null;
      }
    }, t;
  }();
  var q = function() {
    /**
     * @param {string} props
     * @param {undefined} name
     * @return {undefined}
     */
    function Tab(props, name) {
      this._avatarView = this.createView(name);
      this._controller = this.createController(props, this._avatarView);
    }
    return Tab.prototype.createController = function(name, config) {
      return new RQShare(name, config);
    }, Tab.prototype.createView = function(name) {
      return new Notification(name, []);
    }, Tab;
  }();
  var log_error = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var _breakNode = (function(util) {
    /**
     * @param {?} total
     * @param {?} text
     * @param {?} val
     * @param {?} stat
     * @return {?}
     */
    function error(total, text, val, stat) {
      var s = util.call(this, total, text, val, stat) || this;
      var a = self.ResourceManager.getInstance().getSceneManager();
      s._renderOntoTexture = a.createRenderOntoTexture();
      a.addOnContextRestored(function() {
        return s.renderCardBack();
      });
      /** @type {number} */
      var u = Math.sin(-0.468);
      /** @type {number} */
      var c = Math.cos(-0.468);
      return s._tableBrandingProjection = [0.58, 0, 0, 0, 0, 0.58 * c, 0.58 * u, u / 60, 0, 0.58 * -u, 0.58 * c, c / 60, 0, 0, 0, 1], s;
    }
    log_error(error, util);
    /**
     * @return {undefined}
     */
    error.prototype.initGame = function() {
      util.prototype.initGame.call(this);
      this._gameSettings.toggleAutoDeal();
      this._cardManager = this.createCardManager();
      this._avatarManager = this.createAvatarManager();
    };
    /**
     * @return {?}
     */
    error.prototype.createAvatarManager = function() {
      return new q(this._dispatcher, this._entity);
    };
    /**
     * @param {string} e
     * @return {undefined}
     */
    error.prototype.onLoader = function(e) {
      util.prototype.onLoader.call(this, e);
      if ("common" != this._config.brand && "" != this._config.brand && e.id == self.LoaderEventType.COMPLETE) {
        this.renderCardBack();
      }
    };
    /**
     * @return {undefined}
     */
    error.prototype.renderCardBack = function() {
      var t = self.ResourceManager.getInstance();
      var api = t.getSceneManager();
      var originalArticleNode = api.getCustomWebGLTexturesForTemplate("Cards");
      var IMG = api.getCustomWebGLTexturesForTemplate("BrandedCardBack");
      if (null !== originalArticleNode && null !== IMG) {
        var div = originalArticleNode[0];
        var s = IMG[0];
        this._renderOntoTexture.render(div, s, true);
        div.addWebGLRefreshListener(this._renderOntoTexture.render.bind(this._renderOntoTexture, div, s, true));
      }
      var shopSwords = api.getCustomWebGLTexturesForTemplate("BrandedTableLogo");
      var divs = api.getCustomWebGLTexturesForTemplate("TableLogo");
      if (null !== shopSwords && null !== divs) {
        div = divs[0];
        s = shopSwords[0];
        this._renderOntoTexture.render(div, s, true, this._tableBrandingProjection);
        div.addWebGLRefreshListener(this._renderOntoTexture.render.bind(this._renderOntoTexture, div, s, true, this._tableBrandingProjection));
      }
    };
  }(sampleApis), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var PortalDeleteDialog = function(Color) {
    /**
     * @param {!Object} fn
     * @return {?}
     */
    function self(fn) {
      if (void 0 === fn) {
        /** @type {null} */
        fn = null;
      }
      var $ = Color.call(this) || this;
      return $._meshHandler = fn, $;
    }
    return _breakNode(self, Color), self.prototype.attach = function(opt_zscale) {
      if (this._meshHandler && this._task) {
        this._meshHandler(1);
      }
      /** @type {!Object} */
      this._meshHandler = opt_zscale;
    }, self.prototype.setValues = function(a) {
      Color.prototype.setValues.call(this, a);
      if (this._meshHandler) {
        this._meshHandler(a);
      }
    }, self;
  }(tree.TransformAnimator);
  var render = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Token = function(_) {
    /**
     * @param {?} key
     * @param {!Object} index
     * @param {!Object} context
     * @param {?} tpl
     * @param {?} id
     * @param {!Object} data
     * @return {?}
     */
    function Component(key, index, context, tpl, id, data) {
      var me = _.call(this, Component.BETANIMATION) || this;
      return me._animationType = key, me._from = index, me._to = context, me._currentFrom = tpl, me._currentTo = id, me._value = data, me;
    }
    return render(Component, _), Object.defineProperty(Component.prototype, "animationType", {
      get : function() {
        return this._animationType;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Component.prototype, "from", {
      get : function() {
        return this._from;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Component.prototype, "to", {
      get : function() {
        return this._to;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Component.prototype, "currentFrom", {
      get : function() {
        return this._currentFrom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Component.prototype, "currentTo", {
      get : function() {
        return this._currentTo;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Component.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), Component.BETANIMATION = "BETANIMATION", Component;
  }(exports.MegatonEvent);
  var findNextInParents = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(fn) {
    /** @type {string} */
    fn[fn.MOVE = 0] = "MOVE";
    /** @type {string} */
    fn[fn.COUNT = 1] = "COUNT";
  }(TokenType || (TokenType = {}));
  var style;
  var PromoSlide = function(selector) {
    /**
     * @param {number} i
     * @param {number} name
     * @return {?}
     */
    function element(i, name) {
      var that = selector.call(this) || this;
      /** @type {number} */
      that._index = i;
      /** @type {!Array} */
      that._bets = new Array(name);
      /** @type {!Array} */
      that._values = new Array(name);
      /** @type {null} */
      that._prevBets = null;
      /** @type {number} */
      var lastItem = 0;
      for (; lastItem < name; lastItem++) {
        /** @type {number} */
        that._bets[lastItem] = 0;
        /** @type {number} */
        that._values[lastItem] = 0;
      }
      return that;
    }
    return findNextInParents(element, selector), Object.defineProperty(element.prototype, "numBets", {
      get : function() {
        return this._bets.length;
      },
      enumerable : true,
      configurable : true
    }), element.prototype.isValid = function(val) {
      var ppDist = this.getTotalBet();
      /** @type {number} */
      var i = 0;
      var patchLen = this._bets.length;
      for (; i < patchLen; i++) {
        if (!val.isValid(this._bets[i], i, ppDist - this._bets[i] == 0, true)) {
          return false;
        }
      }
      return true;
    }, element.prototype.handleBet = function(value, start, m, i, obj) {
      var a;
      var c = this._bets[start];
      if (value > 0) {
        /** @type {number} */
        a = this.getTotalBet() - c;
        value = m.cap(value, start, 0 === a, i + c, obj, true);
      }
      this.setBet(start, value);
      a = this.getTotalBet();
      /** @type {number} */
      var i = 0;
      var patchLen = this._bets.length;
      for (; i < patchLen; i++) {
        if (start !== i) {
          if (!m.isValid(this._bets[i], i, a - this._bets[i] == 0, true)) {
            /** @type {number} */
            a = a - this._bets[i];
            this.setBet(i, 0);
          }
        }
      }
      return value;
    }, element.prototype.getTotalBet = function() {
      /** @type {number} */
      var above_thresh_counter = 0;
      /** @type {number} */
      var j = 0;
      var imagesLen = this._bets.length;
      for (; j < imagesLen; j++) {
        above_thresh_counter = above_thresh_counter + this._bets[j];
      }
      return above_thresh_counter;
    }, element.prototype.getPrevTotalBet = function() {
      /** @type {number} */
      var above_thresh_counter = 0;
      if (this._prevBets) {
        /** @type {number} */
        var j = 0;
        var imagesLen = this._bets.length;
        for (; j < imagesLen; j++) {
          above_thresh_counter = above_thresh_counter + this._prevBets[j];
        }
      }
      return above_thresh_counter;
    }, element.prototype.getBet = function(b) {
      return this._bets[b];
    }, element.prototype.getValue = function(pos) {
      return this._values[pos];
    }, element.prototype.setBet = function(x, y) {
      /** @type {number} */
      this._bets[x] = y;
      /** @type {number} */
      this._values[x] = y;
    }, element.prototype.move = function(i, index, offset) {
      /** @type {number} */
      var value = 0;
      if (i < this._values.length) {
        this._values[i] -= offset;
        value = this._values[i];
      }
      var greedy = index < this._values.length ? this._values[index] : 0;
      this.dispatch(new Token(TokenType.MOVE, i, index, value, greedy, offset));
    }, element.prototype.setValue = function(key, value) {
      /** @type {number} */
      this._values[key] = value;
    }, element.prototype.clearBets = function() {
      /** @type {number} */
      var i = 0;
      var patchLen = this._bets.length;
      for (; i < patchLen; i++) {
        /** @type {number} */
        this._bets[i] = 0;
        /** @type {number} */
        this._values[i] = 0;
      }
    }, element.prototype.saveBets = function() {
      if (!this._prevBets) {
        /** @type {!Array} */
        this._prevBets = new Array(this._bets.length);
      }
      /** @type {number} */
      var i = 0;
      var patchLen = this._bets.length;
      for (; i < patchLen; i++) {
        this._prevBets[i] = this._bets[i];
      }
    }, element.prototype.hasSavedBets = function() {
      return !!this._prevBets;
    }, element.prototype.loadBets = function(pointer, value) {
      /** @type {number} */
      var maxThreshold = 0;
      if (this._prevBets) {
        /** @type {number} */
        var input = 0;
        var floor = this._bets.length;
        for (; input < floor; input++) {
          maxThreshold = maxThreshold + pointer.handleBet(this._index, input, this._prevBets[input], value - maxThreshold, null);
        }
      }
      return maxThreshold;
    }, element.prototype.clearPrevBets = function() {
      /** @type {null} */
      this._prevBets = null;
    }, element;
  }(exports.Model);
  !function(s) {
    /** @type {string} */
    s[s.TOTAL_MIN = 0] = "TOTAL_MIN";
    /** @type {string} */
    s[s.TOTAL_MAX = 1] = "TOTAL_MAX";
    /** @type {string} */
    s[s.MIN = 2] = "MIN";
    /** @type {string} */
    s[s.MAX = 3] = "MAX";
    /** @type {string} */
    s[s.INSIDE_MIN = 4] = "INSIDE_MIN";
    /** @type {string} */
    s[s.INSIDE_MAX = 5] = "INSIDE_MAX";
    /** @type {string} */
    s[s.OUTSIDE_MIN = 6] = "OUTSIDE_MIN";
    /** @type {string} */
    s[s.OUTSIDE_MAX = 7] = "OUTSIDE_MAX";
    /** @type {string} */
    s[s.NO_BALANCE = 8] = "NO_BALANCE";
  }(style || (style = {}));
  var module;
  var Vector = function() {
    /**
     * @return {undefined}
     */
    function WorkerDomAdapter() {
      /** @type {!Array} */
      this._caps = [];
    }
    return Object.defineProperty(WorkerDomAdapter.prototype, "numCaps", {
      get : function() {
        return this._caps.length;
      },
      enumerable : true,
      configurable : true
    }), WorkerDomAdapter.prototype.getCap = function(str) {
      return this._caps[str];
    }, WorkerDomAdapter.prototype.clear = function() {
      /** @type {number} */
      this._caps.length = 0;
    }, WorkerDomAdapter.prototype.addCap = function(cap) {
      this._caps.push(cap);
    }, WorkerDomAdapter;
  }();
  var getLoadedRefs = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var History = function(root) {
    /**
     * @param {!NodeList} data
     * @param {string} elem
     * @return {?}
     */
    function data(data, elem) {
      var that = root.call(this) || this;
      /** @type {!Array} */
      that._seatBets = new Array(data.length);
      /** @type {string} */
      that._limits = elem;
      /** @type {number} */
      var i = 0;
      var tldCount = data.length;
      for (; i < tldCount; i++) {
        that._seatBets[i] = that.createSeatBet(i, data[i]);
      }
      return that;
    }
    return getLoadedRefs(data, root), Object.defineProperty(data.prototype, "numSeats", {
      get : function() {
        return this._seatBets.length;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "limits", {
      get : function() {
        return this._limits;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.getSeatBet = function(areanumber) {
      return this._seatBets[areanumber];
    }, data.prototype.getNumBets = function(clazz) {
      return this._seatBets[clazz].numBets;
    }, data.prototype.getBet = function(t, e) {
      return this._seatBets[t].getBet(e);
    }, data.prototype.getValue = function(n, i) {
      return this._seatBets[n].getValue(i);
    }, data.prototype.setBet = function(b, n, amount) {
      this._seatBets[b].setBet(n, amount);
      this.notify(data.CHANGED);
    }, data.prototype.move = function(s, index, c, to) {
      this._seatBets[s].move(index, c, to);
    }, data.prototype.setValue = function(type, s, v, force) {
      if (void 0 === force) {
        /** @type {boolean} */
        force = true;
      }
      this._seatBets[type].setValue(s, v);
      if (force) {
        this.notify(data.CHANGED);
      }
    }, data.prototype.handleBet = function(obj, a, i, k, e) {
      if (e) {
        e.clear();
      }
      if (i > 0 && i < this._limits.getMinLimit()) {
        i = this._limits.getMinLimit();
      }
      /** @type {number} */
      var row = i - this._seatBets[obj].getBet(a);
      if (k < row) {
        i = k + this._seatBets[obj].getBet(a);
        /** @type {number} */
        row = k;
      }
      var index = this.getTotalBet() + row;
      if (index > this._limits.getMaxTotal()) {
        if (e && e.addCap(style.TOTAL_MAX), this._seatBets[obj].getBet(a) < this._limits.getMinLimit() && this.getTotalBet() + this._limits.getMinLimit() > this._limits.getMaxTotal()) {
          return 0;
        }
        if ((i = i - (index - this._limits.getMaxTotal())) < 0) {
          return 0;
        }
      }
      return i = this._seatBets[obj].handleBet(i, a, this._limits, k, e), this.notify(data.CHANGED), i;
    }, data.prototype.setLimits = function(limits) {
      this._limits.setLimits(limits);
    }, data.prototype.isValid = function() {
      var t = this.getTotalBet();
      if (t < this._limits.getMinTotal()) {
        return false;
      }
      if (t > this._limits.getMaxTotal()) {
        return false;
      }
      /** @type {number} */
      var i = 0;
      var cell_amount = this.numSeats;
      for (; i < cell_amount; i++) {
        if (!this._seatBets[i].isValid(this._limits)) {
          return false;
        }
      }
      return true;
    }, data.prototype.getTotalSeatBet = function(t) {
      return this._seatBets[t].getTotalBet();
    }, data.prototype.getTotalBet = function() {
      /** @type {number} */
      var tt = 0;
      /** @type {number} */
      var j = 0;
      var imagesLen = this._seatBets.length;
      for (; j < imagesLen; j++) {
        tt = tt + this._seatBets[j].getTotalBet();
      }
      return tt;
    }, data.prototype.getPrevTotalBet = function() {
      /** @type {number} */
      var tt = 0;
      /** @type {number} */
      var j = 0;
      var imagesLen = this._seatBets.length;
      for (; j < imagesLen; j++) {
        tt = tt + this._seatBets[j].getPrevTotalBet();
      }
      return tt;
    }, data.prototype.setPrevTotalBet = function(canCreateDiscussions) {
    }, data.prototype.clearBets = function() {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._seatBets.length;
      for (; j < imagesLen; j++) {
        this._seatBets[j].clearBets();
      }
      this.notify(data.CLEAR);
    }, data.prototype.saveBets = function() {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._seatBets.length;
      for (; j < imagesLen; j++) {
        this._seatBets[j].saveBets();
      }
    }, data.prototype.hasSavedBets = function() {
      return 0 !== this._seatBets.length && this._seatBets[0].hasSavedBets();
    }, data.prototype.loadBets = function(idx) {
      if (idx < this.getPrevTotalBet()) {
        return false;
      }
      /** @type {number} */
      var thatpos = 0;
      var i = this._seatBets.length;
      for (; thatpos < i; thatpos++) {
        /** @type {number} */
        idx = idx - this._seatBets[thatpos].loadBets(this, idx);
      }
      return this.notify(data.CHANGED), true;
    }, data.prototype.checkBalanceForRebet = function(canCreateDiscussions) {
      if (canCreateDiscussions < this.getPrevTotalBet()) {
        /** @type {number} */
        var j = 0;
        var imagesLen = this._seatBets.length;
        for (; j < imagesLen; j++) {
          this._seatBets[j].clearPrevBets();
        }
      }
    }, data.prototype.setRoundLimit = function(isBgroundImg) {
      this._limits.setRoundLimit(isBgroundImg);
    }, data.prototype.checkRoundLimit = function(canCreateDiscussions) {
      return !(this.getTotalBet() + canCreateDiscussions > this.limits.roundLimit);
    }, data.prototype.createSeatBet = function(element, options) {
      return new PromoSlide(element, options);
    }, data.CHANGED = 1, data.CLEAR = 2, data;
  }(exports.Model);
  var make_forecast = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RFIDEvent = function(t) {
    /**
     * @param {string} key
     * @param {?} value
     * @param {number} type
     * @return {?}
     */
    function model(key, value, type) {
      if (void 0 === type) {
        /** @type {string} */
        type = model.BETBUTTON;
      }
      var Hoptoad = t.call(this, type) || this;
      return Hoptoad._seatIdx = key, Hoptoad._posIdx = value, Hoptoad;
    }
    return make_forecast(model, t), Object.defineProperty(model.prototype, "seatIdx", {
      get : function() {
        return this._seatIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(model.prototype, "posIdx", {
      get : function() {
        return this._posIdx;
      },
      enumerable : true,
      configurable : true
    }), model.BETBUTTON = "TG_BETBUTTON", model.ERASEBUTTON = "TG_ERASEBUTTON", model;
  }(exports.MegatonEvent);
  var sendMessageToWorker = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Job = function(item) {
    /**
     * @param {!HTMLElement} form
     * @param {!Object} s
     * @param {?} w
     * @param {?} h
     * @param {!Object} param
     * @return {?}
     */
    function load(form, s, w, h, param) {
      var p = item.call(this, form) || this;
      /** @type {!Object} */
      p._betHandler = s;
      p._roundHandler = w;
      p._betSettings = h;
      /** @type {!Object} */
      p._betView = param;
      p._placeBetSnd = self.ResourceManager.getInstance().getSndManager().create("placeChip");
      p._capInfo = new Vector;
      /** @type {boolean} */
      p._betMode = false;
      form.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return p.onShowButtons(m);
      });
      form.addEventListener(file.BETLIMITS, function(f) {
        return p.onBetLimits(f);
      });
      form.addEventListener(self.DenominationsEvent.DENOMINATIONS, function(inlets) {
        return p.onDenominations(inlets);
      });
      form.addEventListener(self.CurrencyEvent.CURRENCY, function(f) {
        return p.onCurrency(f);
      });
      form.addEventListener(ProgressEvent.BETROUNDLIMIT, function(f) {
        return p.onBetRoundLimit(f);
      });
      var obj = param.seatBetViews;
      /** @type {number} */
      var i = 0;
      var l = s.numSeats;
      for (; i < l; i++) {
        !function(i, canCreateDiscussions) {
          s.getSeatBet(i).addListener(function(e) {
            return p.onSeatBet(obj[i], e);
          });
        }(i);
      }
      /** @type {number} */
      i = 0;
      l = obj.length;
      for (; i < l; i++) {
        obj[i].addListener(function(t) {
          return p.onViewEvent(t);
        });
      }
      return p._betHandler.addListener(function(t) {
        return p.onBetHandler(t);
      }), p._betHandler.limits.addListener(function() {
        return p.onLimitsChanged();
      }), p.updateChipStacks(), p;
    }
    return sendMessageToWorker(load, item), Object.defineProperty(load.prototype, "betView", {
      get : function() {
        return this._betView;
      },
      enumerable : true,
      configurable : true
    }), load.prototype.onSeatBet = function(t, schema) {
      /** @type {!Object} */
      var node = schema;
      t.move(node.from, node.to, node.currentFrom, node.currentTo, node.value);
    }, load.prototype.onLimitsChanged = function() {
      /** @type {number} */
      var c = 0;
      var boardSize = this._betHandler.numSeats;
      for (; c < boardSize; c++) {
        /** @type {number} */
        var n = 0;
        var tDeformVecticesLen = this._betHandler.getNumBets(c);
        for (; n < tDeformVecticesLen; n++) {
          this._betView.onLimits(c, n, this._betHandler.limits);
        }
      }
    }, load.prototype.onShowButtons = function(match) {
      /** @type {boolean} */
      this._betMode = 1 === match.groupId;
      this._betView.enable(this._betMode);
      this.updateEraseButtons();
      this.updateClickToPlayAnims();
    }, load.prototype.updateChipStacks = function() {
      /** @type {number} */
      var c = 0;
      var complexSize = this._betHandler.numSeats;
      for (; c < complexSize; c++) {
        /** @type {number} */
        var n = 0;
        var tDeformVecticesLen = this._betHandler.getNumBets(c);
        for (; n < tDeformVecticesLen; n++) {
          var m = this._betHandler.getValue(c, n);
          this._betView.setChipValue(c, n, m);
        }
      }
    }, load.prototype.onBetLimits = function(i) {
      this._betHandler.setLimits(i.betLimits);
    }, load.prototype.onCurrency = function(a) {
      this._betHandler.limits.notify();
    }, load.prototype.onDenominations = function(state) {
      this._betSettings.setChips(state.denominations, this._betHandler.limits);
    }, load.prototype.onViewEvent = function(value) {
      switch(value.type) {
        case RFIDEvent.BETBUTTON:
          this.onSelect(value);
          break;
        case RFIDEvent.ERASEBUTTON:
          this.onErase(value);
      }
    }, load.prototype.onSelect = function(elem) {
      if (0 == this._roundHandler.bet && this._roundHandler.balance < this._betHandler.limits.getMinLimit()) {
        return void this._dispatcher.dispatch(new self.SPFundsErrorEvent(new self.BalanceFunds(0, 0), 0, "", ""));
      }
      var id = elem.seatIdx;
      var index = elem.posIdx;
      var i = this._betHandler.getBet(id, index);
      var size = this._betSettings.chip;
      var _activeFade = size > 0 ? i + size : 0;
      this._capInfo.clear();
      this._betHandler.handleBet(id, index, _activeFade, this._roundHandler.balance, this._capInfo);
      this._betView.showCaps(id, index, this._capInfo);
      if (size > 0 && i !== this._betHandler.getBet(id, index)) {
        this._placeBetSnd.play();
      }
    }, load.prototype.onErase = function(device) {
      this._betHandler.handleBet(device.seatIdx, device.posIdx, 0, this._roundHandler.balance, this._capInfo);
    }, load.prototype.onBetHandler = function(topic) {
      if (topic.isChanged(History.CLEAR)) {
        this._betView.clear();
      }
      if (topic.isChanged(History.CHANGED)) {
        this.updateChipStacks();
      }
      var e = this._betHandler.getTotalBet();
      this._roundHandler.setBet(e);
      this.updateEraseButtons();
      this.updateClickToPlayAnims();
    }, load.prototype.updateClickToPlayAnims = function() {
      /** @type {number} */
      var j = 0;
      var rown = this._betHandler.numSeats;
      for (; j < rown; j++) {
        this._betView.seatBetViews[j].showClickToPlay(0 === this._betHandler.getTotalSeatBet(j) && this._betMode);
      }
    }, load.prototype.updateEraseButtons = function() {
      /** @type {number} */
      var t = 0;
      for (; t < this._betView.seatBetViews.length; t++) {
        /** @type {boolean} */
        var e = this._betHandler.getTotalSeatBet(t) > 0;
        this._betView.seatBetViews[t].enableErase(e && this._betMode);
      }
    }, load.prototype.onBetRoundLimit = function(i) {
      /** @type {number} */
      var isBground = 100 * i.betRoundLimit;
      this._betHandler.setRoundLimit(isBground);
    }, load;
  }(exports.EventProcessor);
  var mixin = (function() {
    /**
     * @param {!Object} status
     * @param {!Function} body
     * @param {!Object} dt
     * @param {!Entity} entity
     * @return {undefined}
     */
    function set(status, body, dt, entity) {
      this._limits = this.createLimits();
      this._betHandler = this.createBetHandler(this._limits);
      this._betView = this.createBetView(entity);
      /** @type {!Object} */
      this._betSettings = dt;
      /** @type {!Entity} */
      this._entity = entity;
      this._betController = this.createBetController(status, body, this._betHandler, this._betSettings, this._betView);
    }
    Object.defineProperty(set.prototype, "limits", {
      get : function() {
        return this._limits;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(set.prototype, "betHandler", {
      get : function() {
        return this._betHandler;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(set.prototype, "betController", {
      get : function() {
        return this._betController;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(set.prototype, "betView", {
      get : function() {
        return this._betView;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @param {!Object} name
     * @param {!Function} type
     * @param {string} data
     * @param {!Function} params
     * @param {!Object} options
     * @return {?}
     */
    set.prototype.createBetController = function(name, type, data, params, options) {
      return new Job(name, data, type, params, options);
    };
  }(), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var sendAdd = (function(extraUniforms) {
    /**
     * @return {?}
     */
    function Model() {
      var e = extraUniforms.call(this) || this;
      return e._limits = [], e._roundLimit = 10000000, e;
    }
    mixin(Model, extraUniforms);
    Object.defineProperty(Model.prototype, "limits", {
      get : function() {
        return this._limits;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(Model.prototype, "roundLimit", {
      get : function() {
        return this._roundLimit;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @param {string} limits
     * @return {undefined}
     */
    Model.prototype.setLimits = function(limits) {
      /** @type {string} */
      this._limits = limits;
      this.notify();
    };
    /**
     * @param {number} n
     * @param {number} right
     * @param {boolean} i
     * @param {boolean} val
     * @return {?}
     */
    Model.prototype.isValid = function(n, right, i, val) {
      return !(n > 0 && n < this.getMinLimit() && val) && n <= this.getMaxLimit();
    };
    /**
     * @param {number} b
     * @param {number} obj
     * @param {boolean} length
     * @param {number} d
     * @param {!Object} t
     * @param {boolean} min
     * @return {?}
     */
    Model.prototype.cap = function(b, obj, length, d, t, min) {
      return b < this.getMinLimit() && min && (b = this.getMinLimit(), t.addCap(style.MIN)), b > this.getMaxLimit() && (b = this.getMaxLimit(), t.addCap(style.MAX)), b > d && (b = d), b;
    };
    /**
     * @param {number} isBgroundImg
     * @return {undefined}
     */
    Model.prototype.setRoundLimit = function(isBgroundImg) {
      /** @type {number} */
      this._roundLimit = isBgroundImg;
      this.notify();
    };
  }(exports.Model), function() {
    /**
     * @param {!Entity} file
     * @param {!NodeList} e
     * @return {undefined}
     */
    function set(file, e) {
      /** @type {!Entity} */
      this._entity = file;
      /** @type {!Array} */
      this._seatBetViews = new Array(e.length);
      /** @type {number} */
      var i = 0;
      for (; i < e.length; i++) {
        this._seatBetViews[i] = this.createSeatBetView(file, i, e[i]);
      }
    }
    Object.defineProperty(set.prototype, "seatBetViews", {
      get : function() {
        return this._seatBetViews;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @param {!Object} data
     * @param {number} tag
     * @param {number} input
     * @return {?}
     */
    set.prototype.getChipStack = function(data, tag, input) {
      return void 0 === input && (input = false), this._seatBetViews[data].getChipStack(tag, input);
    };
    /**
     * @param {number} layer
     * @param {?} type
     * @param {undefined} s
     * @param {number} width
     * @return {undefined}
     */
    set.prototype.setChipValue = function(layer, type, s, width) {
      if (void 0 === width) {
        /** @type {number} */
        width = -1;
      }
      this._seatBetViews[layer].getChipStack(type).setValue(s, void 0, width);
    };
    /**
     * @param {?} areanumber
     * @param {?} i
     * @param {?} n
     * @return {undefined}
     */
    set.prototype.showCaps = function(areanumber, i, n) {
      this._seatBetViews[areanumber].showCaps(i, n);
    };
    /**
     * @param {boolean} value
     * @return {undefined}
     */
    set.prototype.enable = function(value) {
      /** @type {number} */
      var i = 0;
      var patchLen = this._seatBetViews.length;
      for (; i < patchLen; i++) {
        this._seatBetViews[i].enable(value);
      }
    };
    /**
     * @param {number} n
     * @param {number} e
     * @param {?} islongclick
     * @return {undefined}
     */
    set.prototype.onLimits = function(n, e, islongclick) {
    };
    /**
     * @return {undefined}
     */
    set.prototype.clear = function() {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._seatBetViews.length;
      for (; j < imagesLen; j++) {
        this._seatBetViews[j].clear();
      }
    };
  }(), function() {
    /**
     * @param {!Image} c
     * @param {string} name
     * @param {number} win
     * @param {!Array} id
     * @param {number} state
     * @param {string} result
     * @return {undefined}
     */
    function $(c, name, win, id, state, result) {
      if (void 0 === win) {
        /** @type {boolean} */
        win = false;
      }
      if (void 0 === id) {
        /** @type {boolean} */
        id = false;
      }
      if (void 0 === state) {
        /** @type {boolean} */
        state = false;
      }
      if (void 0 === result) {
        /** @type {string} */
        result = "Low";
      }
      /** @type {boolean} */
      this._lowRoller = true;
      /** @type {number} */
      this._oneStack = win;
      /** @type {!Array} */
      this._winStack = id;
      /** @type {string} */
      this._chipAngle = result;
      /** @type {!Array} */
      this._containers = [];
      /** @type {!Array} */
      this._stackTransforms = [];
      this._stackLayoutAnim = c.getAnimation(name);
      var directory_epub = self.ResourceManager.getInstance().getEntityManager();
      var shape = directory_epub.create("");
      c.getHierarchy(name + (state ? ".pos3" : ".pos1")).add("pos1", shape);
      var p = directory_epub.create("");
      c.getHierarchy(name + (state ? ".pos4" : ".pos2")).add("pos2", p);
      /** @type {!Array} */
      this._containers = [shape.getHierarchy(""), p.getHierarchy("")];
      /** @type {!Array} */
      this._stackTransforms = [shape.getTransform(""), p.getTransform("")];
      /** @type {!Array} */
      this._stackDisplays = [shape.getDisplay(""), p.getDisplay("")];
      this.createChipStack();
      /** @type {!Array} */
      this._betCaptions = [c.getTextField(name + (state ? ".none" : ".betBoxAnim.textfield")), c.getTextField(name + (state ? ".none" : ".winBoxAnim.textfield"))];
      /** @type {!Array} */
      this._betBoxAnims = [c.getAnimation(name + (state ? ".none" : ".betBoxAnim")), c.getAnimation(name + (state ? ".none" : ".winBoxAnim"))];
      this._betBoxAnims[0].play("l0");
      this._betBoxAnims[1].play("l0");
      c.getAnimation(".");
      /** @type {!Array} */
      this._animators = [new tree.TransformAlphaAnimator, new tree.TransformAlphaAnimator];
    }
    Object.defineProperty($.prototype, "transforms", {
      get : function() {
        return this._stackTransforms;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @param {string} name
     * @return {?}
     */
    $.prototype.getTransform = function(name) {
      return this._stackTransforms[name];
    };
    /**
     * @param {string} value
     * @return {?}
     */
    $.prototype.getDisplay = function(value) {
      return this._stackDisplays[value];
    };
    /**
     * @return {undefined}
     */
    $.prototype.clear = function() {
      this.setValue(0);
      this.refreshRotationAndPos();
      var i;
      for (i in this._stackTransforms) {
        if (this._stackTransforms.hasOwnProperty(i)) {
          var wave = this._stackTransforms[i];
          wave.setX(0);
          wave.setY(0);
        }
      }
      for (i in this._stackDisplays) {
        if (this._stackTransforms.hasOwnProperty(i)) {
          var v = this._stackDisplays[i];
          v.setAlpha(1);
        }
      }
    };
    /**
     * @param {number} x
     * @param {number} s
     * @param {number} n
     * @return {undefined}
     */
    $.prototype.setValue = function(x, s, n) {
      if (void 0 === s) {
        /** @type {number} */
        s = 16;
      }
      if (void 0 === n) {
        /** @type {number} */
        n = -1;
      }
      if (!this._animators[0].isRunning) {
        this.setChipStack(x, s, n);
      }
      var val = x + (n < 0 ? 0 : n);
      if (this._betCaptions[0]) {
        if (val > 0) {
          var QuickBase = self.ResourceManager.getInstance().getMoneyFormatter();
          var s = QuickBase.MoneyToString(val, self.MoneyFormatterFlag.NO_CURRENCY);
          this._betBoxAnims[0].play("l" + Math.min(s.length, 9));
          this._betCaptions[0].setText(s);
        } else {
          this._betCaptions[0].setText("");
          this._betBoxAnims[0].play("l0");
        }
      }
      if (this._betCaptions[1] && n >= 0) {
        if (n > 0) {
          var PersonModel = self.ResourceManager.getInstance().getTextManager();
          s = PersonModel.getByName("IDS_HUD_WIN").getText();
          this._betBoxAnims[1].play("l" + Math.min(s.length, 9));
          this._betCaptions[1].setText(s);
        } else {
          this._betCaptions[1].setText("");
          this._betBoxAnims[1].play("l0");
        }
      }
    };
    /**
     * @param {number} str
     * @param {number} e
     * @param {number} n
     * @return {undefined}
     */
    $.prototype.setChipStack = function(str, e, n) {
      if (void 0 === e) {
        /** @type {number} */
        e = 16;
      }
      if (void 0 === n) {
        /** @type {number} */
        n = -1;
      }
      var i = this.countChips(n < 0 ? str : n);
      if (i > 8 && !this._oneStack && !this._winStack && n < 0) {
        /** @type {number} */
        var ok = Math.min(Math.ceil(i / 2), e);
        this.buildStack(this.buildStack(str, ok), ok, true);
        this._stackLayoutAnim.play("twoStacks");
      } else {
        this.buildStack(n >= 0 ? n : str, Math.min(i, e), n >= 0);
        if (!this._oneStack && !this._winStack && n < 0) {
          this.buildStack(0, 0, true);
        }
        this._stackLayoutAnim.play("oneStack");
      }
    };
    /**
     * @param {!Array} height
     * @param {number} width
     * @return {?}
     */
    $.prototype.getHeight = function(height, width) {
      if (void 0 === width) {
        /** @type {boolean} */
        width = false;
      }
      var arc_distance_miles = this.countChips(height);
      return arc_distance_miles > 8 && !this._oneStack && !this._winStack && !width ? Math.ceil(arc_distance_miles / 2) : arc_distance_miles;
    };
    /**
     * @return {undefined}
     */
    $.prototype.createChipStack = function() {
      var p;
      /** @type {number} */
      var offset = 0;
      var directory_epub = self.ResourceManager.getInstance().getEntityManager();
      if (this._chipAnims = new Array(16), this._shadowAnims = new Array(2), this._chipTransforms = new Array(16), this._chipEntity = new Array(16), p = directory_epub.create($.CHIP_SHADOW + this._chipAngle), this._containers[0].add("shadow_mc1", p), this._shadowAnims[0] = p.getAnimation(""), this._shadowAnims[0].play("level0"), this._oneStack) {
        /** @type {number} */
        var i = 0;
        for (; i < 16; i++) {
          p = directory_epub.create($.CHIP_ENTITY + this._chipAngle);
          this._chipEntity[i] = p;
          this._containers[0].add("chip_mc" + i, p);
          this._chipAnims[i] = p.getAnimation("");
          this._chipTransforms[i] = p.getTransform("");
          this._chipAnims[i].play("empty");
          this._chipTransforms[i].setY(0 - offset);
          /** @type {number} */
          offset = offset + 4.3;
        }
      } else {
        p = directory_epub.create($.CHIP_SHADOW + this._chipAngle);
        this._containers[1].add("shadow_mc2", p);
        this._shadowAnims[1] = p.getAnimation("");
        this._shadowAnims[1].play("level0");
        /** @type {number} */
        i = 0;
        for (; i < 8; i++) {
          p = directory_epub.create($.CHIP_ENTITY + this._chipAngle);
          this._chipEntity[i + 8] = p;
          this._containers[1].add("chip_mc" + (i + 8), p);
          this._chipAnims[i + 8] = p.getAnimation("");
          this._chipTransforms[i + 8] = p.getTransform("");
          this._chipAnims[i + 8].play("empty");
          this._chipTransforms[i + 8].setY(0 - offset);
          /** @type {number} */
          offset = offset + 4.3;
        }
        /** @type {number} */
        offset = 0;
        /** @type {number} */
        i = 0;
        for (; i < 8; i++) {
          p = directory_epub.create($.CHIP_ENTITY + this._chipAngle);
          this._chipEntity[i] = p;
          this._containers[0].add("chip_mc" + i, p);
          this._chipAnims[i] = p.getAnimation("");
          this._chipTransforms[i] = p.getTransform("");
          this._chipAnims[i].play("empty");
          this._chipTransforms[i].setY(0 - offset);
          /** @type {number} */
          offset = offset + 4.3;
        }
      }
      this.refreshRotationAndPos();
    };
    /**
     * @param {!Image} sprite
     * @return {undefined}
     */
    $.prototype.rotate = function(sprite) {
      /** @type {number} */
      var farID = Math.floor(5 * Math.random()) + 1;
      sprite.getAnimation("chip0").play("rot" + farID);
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var patchLen = $._chipValues.length;
      for (; i < patchLen; i++) {
        var diff = $._chipValues[i];
        sprite.getAnimation("chip" + diff).play("rot" + farID);
      }
    };
    /**
     * @param {number} val
     * @return {?}
     */
    $.prototype.countChips = function(val) {
      /** @type {number} */
      var playerEnergy = 0;
      /** @type {number} */
      var i = $._chipValues.length;
      for (; i > 0; i--) {
        for (; val >= $._chipValues[i - 1];) {
          /** @type {number} */
          val = val - $._chipValues[i - 1];
          playerEnergy++;
        }
      }
      if (val > 0) {
        playerEnergy++;
      }
      /** @type {number} */
      var MAX_ENERGY = this._oneStack ? 16 : 8;
      return playerEnergy > MAX_ENERGY ? MAX_ENERGY : playerEnergy;
    };
    /**
     * @param {number} stack
     * @param {number} name
     * @param {number} view
     * @return {?}
     */
    $.prototype.buildStack = function(stack, name, view) {
      if (void 0 === view) {
        /** @type {boolean} */
        view = false;
      }
      /** @type {number} */
      var t = 0;
      /** @type {number} */
      var d = 8;
      if (this._oneStack) {
        if (view) {
          return 0;
        }
        /** @type {number} */
        d = 16;
      } else {
        if (view) {
          /** @type {number} */
          t = 8;
          name = name + 8;
          /** @type {number} */
          d = d + 8;
        }
      }
      /** @type {number} */
      var curNbTics = $._chipValues.length;
      for (; curNbTics > 0 && t < name; curNbTics--) {
        for (; stack >= $._chipValues[curNbTics - 1] && t < name && t < d && (this._lowRoller || !(stack < 50));) {
          this._chipAnims[t].play("chip" + $._chipValues[curNbTics - 1]);
          /** @type {number} */
          stack = stack - $._chipValues[curNbTics - 1];
          t++;
        }
      }
      if (t === d && stack > 0) {
        this._chipAnims[t - 1].play("chip0");
        /** @type {number} */
        stack = 0;
      }
      if (view && !this._oneStack) {
        this._shadowAnims[1].play(t > 8 ? "level" + (t - 8) : "level0");
      } else {
        this._shadowAnims[0].play("level" + t);
      }
      for (; t < d; t++) {
        this._chipAnims[t].play("empty");
      }
      return stack;
    };
    /**
     * @return {undefined}
     */
    $.prototype.refreshRotationAndPos = function() {
      /** @type {number} */
      var i = 0;
      var patchLen = this._chipEntity.length;
      for (; i < patchLen; i++) {
        this.rotate(this._chipEntity[i]);
        this._chipTransforms[i].setX(i > 0 ? 3.6 * (Math.random() - 0.5) : 0);
      }
    };
    /**
     * @param {?} name
     * @param {!Array} n
     * @param {boolean} table
     * @param {boolean} cb
     * @return {?}
     */
    $.prototype.move = function(name, n, table, cb) {
      var shape = this;
      return exports.Task.createHandler(function(r) {
        switch(r.state) {
          case 0:
            shape.setChipStack(name);
            /** @type {number} */
            var i = 0;
            for (; i < 2; i++) {
              shape._animators[i].move(r, shape._stackTransforms[i], null, n[i], shape.getDisplay(i), $.posTransition, cb ? $.fadeTransition : $.noTransition, 300, table);
            }
            break;
          default:
            r.complete();
        }
      });
    };
    /**
     * @param {number} b
     * @param {number} c
     * @param {number} r
     * @return {?}
     */
    $.posTransition = function(b, c, r) {
      /** @type {number} */
      var d = r * (0.1 + r * (2.7 + r * (-1.8 * r)));
      return b * (1 - d) + c * d;
    };
    /**
     * @param {number} fromChild
     * @return {?}
     */
    $.fadeTransition = function(fromChild) {
      return fromChild > 0.8 ? 5 * (1 - fromChild) : 1;
    };
    /**
     * @param {?} fromChild
     * @return {?}
     */
    $.noTransition = function(fromChild) {
      return 1;
    };
    /**
     * @param {?} index
     * @param {number} v
     * @return {?}
     */
    $.prototype.count = function(index, v) {
      var node = this;
      var s = new String;
      return exports.Task.createHandler(function(cache) {
        switch(cache.state) {
          case 0:
            s.count(cache, node, index, v);
            break;
          default:
            node.setValue(v);
            cache.complete();
        }
      });
    };
    /** @type {!Array} */
    $._chipValues = [1, 2, 5, 10, 25, 50, 100, 500, 1000, 2500, 5000, 10000, 50000, 100000, 200000, 300000, 500000, 1000000];
    /** @type {string} */
    $.CHIP_SHADOW = "ChipShadow";
    /** @type {string} */
    $.CHIP_ENTITY = "Chip";
  }(), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var setTimeout = (function(title) {
    /**
     * @param {?} node
     * @param {string} bindings
     * @param {number} v
     * @param {number} total
     * @return {?}
     */
    function init(node, bindings, v, total) {
      if (void 0 === total) {
        /** @type {boolean} */
        total = true;
      }
      var me = title.call(this) || this;
      /** @type {string} */
      me._seatIdx = bindings;
      /** @type {number} */
      me._useHelpers = total;
      /** @type {!Array} */
      me._betFields = new Array(v);
      /** @type {!Array} */
      me._betFieldLight = new Array(v);
      /** @type {!Array} */
      me._betFieldLightVisible = new Array(v);
      /** @type {!Array} */
      me._chipStacks = new Array(v);
      /** @type {!Array} */
      me._helperChipStacks = new Array(v);
      /** @type {!Array} */
      me._capAnims = new Array(v);
      var a = this;
      /** @type {number} */
      var u = 0;
      for (; u < v; u++) {
        !function(i) {
          a._betFields[i] = a.locateBetField(node, i);
          if (a._betFields[i]) {
            a._betFields[i].addEventListener(self.ButtonEvent.CLICK, function() {
              return me.onBetClick(i);
            });
            a._betFieldLight[i] = a.locateBetFieldLight(node, i);
            /** @type {boolean} */
            a._betFieldLightVisible[i] = false;
          }
          a._chipStacks[i] = a.createChipStack(node, i, false);
          if (a._useHelpers) {
            a._helperChipStacks[i] = a.createChipStack(node, i, true);
          }
          a._capAnims[i] = a.locateCapAnims(node, i);
          /** @type {number} */
          var s = 0;
          var selCount = a._capAnims[i].length;
          for (; s < selCount; s++) {
            if (a._capAnims[i][s]) {
              a._capAnims[i][s].play("stop");
            }
          }
        }(u);
      }
      return me._eraseBtn = me.locateEraseBtn(node), me._eraseBg = me.locateEraseBackground(node), me._eraseBtn && me._eraseBtn.addEventListener(self.ButtonEvent.CLICK, function() {
        return me.onEraseClick();
      }), me._clickToPlay = me.locateClickToPlay(node), me._clickToPlayVisible = false, me._dealerPos = [], me._dealerPos.push(node.getTransform("dealer.pos1")), me._dealerPos.push(node.getTransform("dealer.pos2")), me;
    }
    sendAdd(init, title);
    /**
     * @param {number} tag
     * @return {undefined}
     */
    init.prototype.onBetClick = function(tag) {
      this.dispatch(new RFIDEvent(this._seatIdx, tag));
    };
    /**
     * @return {undefined}
     */
    init.prototype.onEraseClick = function() {
      this.dispatch(new RFIDEvent(this._seatIdx, 0, RFIDEvent.ERASEBUTTON));
    };
    /**
     * @param {!Object} key
     * @param {number} mode
     * @return {?}
     */
    init.prototype.getChipStack = function(key, mode) {
      return void 0 === mode && (mode = false), mode ? this._helperChipStacks[key] : this._chipStacks[key];
    };
    /**
     * @param {number} axis
     * @param {number} i
     * @param {number} v
     * @return {undefined}
     */
    init.prototype.setChipValue = function(axis, i, v) {
      if (void 0 === v) {
        /** @type {number} */
        v = -1;
      }
      this._chipStacks[axis].setValue(i, void 0, v);
    };
    /**
     * @param {?} t
     * @param {?} i
     * @return {undefined}
     */
    init.prototype.showCaps = function(t, i) {
      /** @type {number} */
      var counter = 0;
      var a = i.numCaps;
      for (; counter < a; counter++) {
        this.showCap(t, i.getCap(counter));
      }
    };
    /**
     * @param {?} k
     * @param {?} v
     * @return {undefined}
     */
    init.prototype.showCap = function(k, v) {
      var parent = this._capAnims[k][v];
      if (this._lastCapAnim) {
        this._lastCapAnim.stop();
      }
      if (parent) {
        parent.play("show");
      }
      this._lastCapAnim = parent;
    };
    /**
     * @param {boolean} value
     * @return {undefined}
     */
    init.prototype.enable = function(value) {
      /** @type {number} */
      var i = 0;
      var inputsSize = this._betFields.length;
      for (; i < inputsSize; i++) {
        if (this._betFields[i]) {
          this._betFields[i].enable(value);
          if (this._betFieldLightVisible[i] !== value) {
            if (this._betFieldLight[i]) {
              this._betFieldLight[i].play(value ? "show" : "hide");
            }
            /** @type {boolean} */
            this._betFieldLightVisible[i] = value;
          }
        }
      }
    };
    /**
     * @param {boolean} value
     * @return {undefined}
     */
    init.prototype.enableErase = function(value) {
      if (this._eraseBtn) {
        this._eraseBtn.enable(value);
        this._eraseBg.setVisible(value);
      }
    };
    /**
     * @param {boolean} right
     * @return {undefined}
     */
    init.prototype.showClickToPlay = function(right) {
      if (this._clickToPlayVisible !== right) {
        if (this._clickToPlay) {
          this._clickToPlay.play(right ? "start" : "end");
        }
        /** @type {boolean} */
        this._clickToPlayVisible = right;
      }
    };
    /**
     * @param {number} n22
     * @param {number} n23
     * @return {undefined}
     */
    init.prototype.onLimits = function(n22, n23) {
    };
    /**
     * @return {undefined}
     */
    init.prototype.clear = function() {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._chipStacks.length;
      for (; j < imagesLen; j++) {
        this._chipStacks[j].clear();
        if (this._useHelpers) {
          this._helperChipStacks[j].clear();
        }
      }
    };
    /**
     * @param {number} i
     * @param {number} key
     * @param {number} n
     * @param {number} name
     * @param {number} start
     * @return {undefined}
     */
    init.prototype.move = function(i, key, n, name, start) {
      if (!this._useHelpers) {
        throw new Error("Method not supported without helper stacks");
      }
      var c = this._chipStacks.length;
      /** @type {!Array} */
      var g = [];
      /** @type {null} */
      var ctx = null;
      if (n > 0) {
        ctx = this._helperChipStacks[i];
        /** @type {!Array} */
        var enterAnimation = [this._chipStacks[i].count(n + start, n), ctx.count(0, start)];
        g.push(exports.Task.createHandler(function($fxMakeAnimation) {
          $fxMakeAnimation.execGroup(enterAnimation);
        }));
        g.push(exports.Task.createHandler(function(canCreateDiscussions) {
          canCreateDiscussions.execDelayMs(200);
        }));
      }
      if (i < c && this._chipStacks[i].setValue(n), n > 0) {
        /** @type {boolean} */
        var y = key >= c;
        if (name > 0) {
          g.push(ctx.move(start, this._helperChipStacks[key].transforms, false, false));
        } else {
          g.push(ctx.move(start, y ? this._dealerPos : this._chipStacks[key].transforms, false, y));
        }
      } else {
        /** @type {boolean} */
        y = i >= c;
        if (name > 0) {
          ctx = this._helperChipStacks[key];
          g.push(ctx.move(start, y ? this._dealerPos : this._chipStacks[i].transforms, true, y));
        } else {
          if (y) {
            g.push(this._chipStacks[key].move(start, this._dealerPos, true, y));
          } else {
            g.push(this._chipStacks[i].move(start, key >= c ? this._dealerPos : this._chipStacks[key].transforms, false, key >= c));
          }
        }
      }
      if (name > 0) {
        g.push(exports.Task.createHandler(function(canCreateDiscussions) {
          canCreateDiscussions.execDelayMs(200);
        }));
        ctx = ctx || this._helperChipStacks[key];
        /** @type {!Array} */
        var enterAnimation = [ctx.count(start, 0), this._chipStacks[key].count(name, 0)];
        g.push(exports.Task.createHandler(function($fxMakeAnimation) {
          $fxMakeAnimation.execGroup(enterAnimation);
        }));
        g.push(this._chipStacks[key].count(0, name + start));
      }
      (new exports.Task).execSequence(g);
    };
  }(exports.Dispatcher), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var IteratorArray = function(t) {
    /**
     * @param {string} a
     * @return {?}
     */
    function b(a) {
      var m = t.call(this, b.CARDHIGHLIGHT) || this;
      return m._state = a, m;
    }
    return setTimeout(b, t), Object.defineProperty(b.prototype, "state", {
      get : function() {
        return this._state;
      },
      enumerable : true,
      configurable : true
    }), b.CARDHIGHLIGHT = "CARDHIGHLIGHT", b;
  }(exports.MegatonEvent);
  var loadOptionsRecursively = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Date = function(value) {
    /**
     * @param {?} key
     * @param {number} index
     * @param {?} data
     * @return {?}
     */
    function set(key, index, data) {
      if (void 0 === data) {
        /** @type {number} */
        data = 0;
      }
      var that = value.call(this, set.CARDANIMATION) || this;
      return that._animationType = key, that._duration = index, that._data = data, that;
    }
    return loadOptionsRecursively(set, value), Object.defineProperty(set.prototype, "animationType", {
      get : function() {
        return this._animationType;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "duration", {
      get : function() {
        return this._duration;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), set.CARDANIMATION = "CARDANIMATION", set;
  }(exports.MegatonEvent);
  var vt = function() {
    /**
     * @param {!NodeList} w
     * @param {?} i
     * @param {!NodeList} state
     * @param {?} token
     * @return {undefined}
     */
    function t(w, i, state, token) {
      /** @type {number} */
      var j = 0;
      var n = w.length;
      for (; j < n; j++) {
        this.configureHandHolder(w[j], state[j]);
      }
      this.configureHandHolder(i, token);
    }
    return t.prototype.configureHandHolder = function(game, view) {
      var angular = this;
      /** @type {number} */
      var mainCanvas = 0;
      var oldNation = game.numHands;
      for (; mainCanvas < oldNation; mainCanvas++) {
        !function(i, canCreateDiscussions) {
          var field = game.getHand(i);
          var person = view.getHandView(i);
          field.addListener(function(obj) {
            return angular.onHand(field, person, obj);
          });
          /** @type {number} */
          var clientApiUrl = 0;
          for (; clientApiUrl < 11; clientApiUrl++) {
            !function(url) {
              var obj = field.getCard(url);
              var size = person.getCardView(url);
              obj.addListener(function(modalOptions) {
                return angular.onCard(obj, size, modalOptions);
              });
            }(clientApiUrl);
          }
        }(mainCanvas);
      }
    }, t.prototype.onCard = function(result, $, options) {
      switch(options.type) {
        case Date.CARDANIMATION:
          /** @type {!Object} */
          var data = options;
          $.play(data.animationType, data.duration, result.card, data.data);
          break;
        case IteratorArray.CARDHIGHLIGHT:
          /** @type {!Object} */
          var json = options;
          $.setHighlightState(json.state);
      }
    }, t.prototype.onHand = function(type, instance, extension) {
    }, t;
  }();
  var _fileReplace = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Renderer = function(item) {
    /**
     * @return {?}
     */
    function Snake() {
      return null !== item && item.apply(this, arguments) || this;
    }
    return _fileReplace(Snake, item), Snake.prototype.setup = function(gl) {
      item.prototype.setup.call(this, gl);
      gl.enable(gl.CULL_FACE);
      gl.cullFace(gl.FRONT);
    }, Snake.prototype.reset = function(ctx) {
      item.prototype.reset.call(this, ctx);
      ctx.disable(ctx.CULL_FACE);
    }, Snake;
  }(tree.BatchingWebGLRenderer);
  var eqPartial = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var OffsetAt = function(Widget) {
    /**
     * @param {string} state
     * @param {string} template
     * @param {!Object} path
     * @return {?}
     */
    function render(state, template, path) {
      if (void 0 === path) {
        path = render.getMaterial();
      }
      var _this = Widget.call(this, render.getRenderer()) || this;
      /** @type {string} */
      _this._card3D = state;
      /** @type {!Object} */
      _this._material = path;
      var c = path.getUniform("transform");
      if (c && c.type === self.UniformType.MAT4) {
        _this._matrix = c.value;
      }
      var result = path.getUniform("projection");
      if (result && result.type === self.UniformType.MAT4) {
        var opt = result.value;
        var events = _this._card3D.projectionMatrix;
        events[0] = opt[0];
        events[1] = opt[1];
        events[2] = opt[3];
        events[3] = opt[4];
        events[4] = opt[5];
        events[5] = opt[7];
        events[6] = opt[12];
        events[7] = opt[13];
        events[8] = opt[15];
      }
      return _this._template = template, _this._textures = self.ResourceManager.getInstance().getSceneManager().getCustomWebGLTexturesForTemplate(_this._template), self.ResourceManager.getInstance().getSceneManager().addListener(function() {
        return _this.onSceneLoaded();
      }), _this;
    }
    return eqPartial(render, Widget), render.compareMatrix = function(p2, d, e, event, prop, obj, p) {
      return d !== p2[0] || e !== p2[1] || event !== p2[4] || prop !== p2[5] || obj !== p2[12] || p !== p2[13];
    }, render.initializeShader = function(username, options) {
      if (void 0 === username) {
        /** @type {string} */
        username = "precision highp float;\nattribute vec3 vposition;\nattribute vec3 vnormal;\nattribute vec2 vtexcoord;\nattribute vec2 vboxcoord;\nattribute vec2 vstrength;\nattribute vec4 vcolor;\nvarying vec3 fposition;\nvarying vec3 fnormal;\nvarying vec2 ftexcoord;\nvarying vec2 fboxcoord;\nvarying vec2 fstrength;\nvarying vec4 fcolor;\nuniform mat4 transform;\nuniform mat4 projection;\nvoid main() {\nfposition = vposition;\nftexcoord = vtexcoord;\nfboxcoord = vboxcoord;\nfstrength = vstrength;\nfcolor\t   = vec4(vcolor.rgb * vcolor.a, vcolor.a);\nfnormal = normalize(vnormal);\ngl_Position = projection * transform * vec4(vposition, 1);\n}";
      }
      if (void 0 === options) {
        /** @type {string} */
        options = "precision highp float;\nvarying vec3 fposition;\nvarying vec3 fnormal;\nvarying vec2 ftexcoord;\nvarying vec2 fboxcoord;\nvarying vec2 fstrength;\nvarying vec4 fcolor;\nuniform vec3 lightPosition;\nuniform float lightStrength;\nuniform float shineStrength;\nuniform float shineExponent;\nuniform vec3 additiveColor;\nuniform vec3 borderColor;\nuniform vec2 borderParams;\nuniform sampler2D uSampler;\nvoid main() {\nvec4 texture = texture2D(uSampler, ftexcoord);\nif(texture.a < 0.15)\ndiscard;\nvec3 normal = normalize(fnormal);\nvec3 lightDirection = lightPosition;\nvec3 lightNormal = normalize(lightDirection);\nfloat lambert = max(dot(lightNormal, normal), 0.0) + 0.5;\nfloat specular = pow(max(dot(normalize(lightNormal + vec3(0, 0, 1)), normal), 0.0), shineExponent);\ngl_FragColor = vec4((texture.rgb * lambert * lightStrength + specular * shineStrength) + additiveColor * fstrength.y, texture.a) * fcolor;\nfloat border = clamp((fboxcoord.x * fboxcoord.x + fboxcoord.y * fboxcoord.y) * borderParams.x - borderParams.y, 0.0, 1.0) * fstrength.x;\ngl_FragColor.rgb = borderColor * border + gl_FragColor.rgb * (1.0 - border);\n}";
      }
      this._shader = new self.CustomWebGLShader(username, options, [new self.AttributeItem("vposition", self.AttributeType.VEC3), new self.AttributeItem("vnormal", self.AttributeType.VEC3), new self.AttributeItem("vtexcoord", self.AttributeType.VEC2), new self.AttributeItem("vboxcoord", self.AttributeType.VEC2), new self.AttributeItem("vstrength", self.AttributeType.VEC2), new self.AttributeItem("vcolor", self.AttributeType.VEC4)]);
    }, render.initializeMaterial = function() {
      /** @type {number} */
      var t = Math.sin(0.468);
      /** @type {number} */
      var e = Math.cos(0.468);
      this._material = new self.CustomWebGLMaterial(this._shader, [new self.UniformValue("transform", self.UniformType.MAT4, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1]), new self.UniformValue("projection", self.UniformType.MAT4, [1, 0, 0, 0, 0, e, t, t / 5, 0, -t, e, e / 5, 0, 0, 0, 1]), new self.UniformValue("lightPosition", self.UniformType.VEC3, [-5, 20, 30]), new self.UniformValue("lightStrength", self.UniformType.FLOAT, [0.8]), new self.UniformValue("shineStrength", self.UniformType.FLOAT, 
      [0.5]), new self.UniformValue("shineExponent", self.UniformType.FLOAT, [128]), new self.UniformValue("additiveColor", self.UniformType.VEC3, [1, 1, 1]), new self.UniformValue("borderColor", self.UniformType.VEC3, [1, 0.1, 0.2]), new self.UniformValue("borderParams", self.UniformType.VEC2, [6, 2])]);
    }, render.initializeRenderer = function(n) {
      this._renderer = new Renderer(n * n * 64, n * n * 24);
    }, render.getMaterial = function() {
      return this._shader || this.initializeShader(), this._material || this.initializeMaterial(), this._material;
    }, render.getRenderer = function() {
      return this._renderer || this.initializeRenderer(50), this._renderer;
    }, render.prototype.onSceneLoaded = function() {
      if (!this._textures) {
        this._textures = self.ResourceManager.getInstance().getSceneManager().getCustomWebGLTexturesForTemplate(this._template);
      }
    }, render.prototype.onUpdateTransform = function(_qg, id, n, name, latLong, i) {
      var values = this._card3D.transformMatrix;
      values[0] = _qg;
      values[1] = id;
      values[2] = n;
      values[3] = name;
      values[4] = latLong;
      values[5] = i;
    }, render.prototype.onRender = function(c, x, data, width, height, ctx, value, callback, index, options, envs, fn) {
      var centerAlpha = this._card3D.alpha;
      if (this._textures && !(centerAlpha < 0.01)) {
        Widget.prototype.onRender.call(this, c, x, data, width, height, ctx, value, callback, index, options, envs, fn);
        var tls = this._customWebGLRenderer;
        this._card3D.getWidth();
        this._card3D.getHeight();
        if (this._matrix && render.compareMatrix(this._matrix, x, data, width, height, ctx, value)) {
          tls.flush(c);
          this._matrix[0] = x;
          this._matrix[1] = data;
          this._matrix[4] = width;
          this._matrix[5] = height;
          /** @type {number} */
          this._matrix[10] = -Math.sqrt(width * width + height * height);
          this._matrix[12] = ctx;
          this._matrix[13] = value;
        }
        this.renderShadow(c, x, data, width, height, ctx, value, envs * centerAlpha, fn, false);
        this.renderShadow(c, x, data, width, height, ctx, value, envs * centerAlpha, fn, true);
        this.renderFace(c, x, data, width, height, ctx, value, callback, index, options, envs * centerAlpha, fn, false);
        this.renderFace(c, x, data, width, height, ctx, value, callback, index, options, envs * centerAlpha, fn, true);
      }
    }, render.prototype.renderFace = function(e, url, command, label, type, s, q, value, i, val, scale, opacity, force) {
      var opts;
      var options = this._card3D;
      opts = force ? this._textures[options.backFace] : this._textures[options.frontFace];
      opts.checkForUpdate();
      var obj = this._customWebGLRenderer;
      var width = options.getWidth();
      var length = options.getHeight();
      if (obj.vCount + width * length * 16 > obj.vertices.length || opacity !== this._material.blending || self.CustomWebGLBase.compareTexture(e, opts, this._material.texture)) {
        obj.flush(e);
        /** @type {boolean} */
        this._material.blending = opacity;
      }
      this._material.texture = opts;
      obj.setMaterial(e, this._material);
      var r = opts.minU;
      var min = opts.minV;
      var max = opts.maxU;
      /** @type {number} */
      var concurrents = (opts.maxU - r) / (width - 1);
      /** @type {number} */
      var units = (opts.maxV - min) / (length - 1);
      var flatIndexes = options.getMesh();
      var data = obj.vertices;
      var v = obj.elements;
      var w = obj.vCount;
      var map = obj.eCount;
      /** @type {number} */
      var index = 0;
      /** @type {number} */
      var x = 0;
      for (; x < width; ++x) {
        /** @type {number} */
        var i = 0;
        for (; i < length; ++i) {
          var v2y = void 0;
          var uv2u = void 0;
          var uv2v = void 0;
          if (0 === x) {
            /** @type {number} */
            v2y = flatIndexes[index + 3 * length + 0] - flatIndexes[index + 0];
            /** @type {number} */
            uv2u = flatIndexes[index + 3 * length + 1] - flatIndexes[index + 1];
            /** @type {number} */
            uv2v = flatIndexes[index + 3 * length + 2] - flatIndexes[index + 2];
          } else {
            if (x === width - 1) {
              /** @type {number} */
              v2y = flatIndexes[index + 0] - flatIndexes[index - 3 * length + 0];
              /** @type {number} */
              uv2u = flatIndexes[index + 1] - flatIndexes[index - 3 * length + 1];
              /** @type {number} */
              uv2v = flatIndexes[index + 2] - flatIndexes[index - 3 * length + 2];
            } else {
              /** @type {number} */
              v2y = flatIndexes[index + 3 * length + 0] - flatIndexes[index - 3 * length + 0];
              /** @type {number} */
              uv2u = flatIndexes[index + 3 * length + 1] - flatIndexes[index - 3 * length + 1];
              /** @type {number} */
              uv2v = flatIndexes[index + 3 * length + 2] - flatIndexes[index - 3 * length + 2];
            }
          }
          var v3y = void 0;
          var uv3u = void 0;
          var uv3v = void 0;
          if (0 === i) {
            /** @type {number} */
            v3y = flatIndexes[index + 3 + 0] - flatIndexes[index + 0];
            /** @type {number} */
            uv3u = flatIndexes[index + 3 + 1] - flatIndexes[index + 1];
            /** @type {number} */
            uv3v = flatIndexes[index + 3 + 2] - flatIndexes[index + 2];
          } else {
            if (i === length - 1) {
              /** @type {number} */
              v3y = flatIndexes[index + 0] - flatIndexes[index - 3 + 0];
              /** @type {number} */
              uv3u = flatIndexes[index + 1] - flatIndexes[index - 3 + 1];
              /** @type {number} */
              uv3v = flatIndexes[index + 2] - flatIndexes[index - 3 + 2];
            } else {
              /** @type {number} */
              v3y = flatIndexes[index + 3 + 0] - flatIndexes[index - 3 + 0];
              /** @type {number} */
              uv3u = flatIndexes[index + 3 + 1] - flatIndexes[index - 3 + 1];
              /** @type {number} */
              uv3v = flatIndexes[index + 3 + 2] - flatIndexes[index - 3 + 2];
            }
          }
          data[w + 0] = flatIndexes[index + 0];
          data[w + 1] = flatIndexes[index + 1];
          data[w + 2] = flatIndexes[index + 2];
          if (force) {
            /** @type {number} */
            data[w + 3] = uv3u * uv2v - uv2u * uv3v;
            /** @type {number} */
            data[w + 4] = uv3v * v2y - uv2v * v3y;
            /** @type {number} */
            data[w + 5] = v3y * uv2u - v2y * uv3u;
          } else {
            /** @type {number} */
            data[w + 3] = uv2u * uv3v - uv3u * uv2v;
            /** @type {number} */
            data[w + 4] = uv2v * v3y - uv3v * v2y;
            /** @type {number} */
            data[w + 5] = v2y * uv3u - v3y * uv2u;
          }
          if (force) {
            data[w + 6] = r + i * concurrents;
            data[w + 7] = min + x * units;
          } else {
            /** @type {number} */
            data[w + 6] = max - i * concurrents;
            data[w + 7] = min + x * units;
          }
          /** @type {number} */
          data[w + 8] = 0 === x ? -1 : x === width - 1 ? 1 : 0;
          /** @type {number} */
          data[w + 9] = 0 === i ? -1 : i === length - 1 ? 1 : 0;
          if (force) {
            /** @type {number} */
            data[w + 10] = 0;
            /** @type {number} */
            data[w + 11] = 0;
            data[w + 12] = value;
            data[w + 13] = i;
            data[w + 14] = val;
            /** @type {number} */
            data[w + 15] = scale;
          } else {
            data[w + 10] = options.border;
            data[w + 11] = options.highlight;
            /** @type {number} */
            data[w + 12] = value * options.graying;
            /** @type {number} */
            data[w + 13] = i * options.graying;
            /** @type {number} */
            data[w + 14] = val * options.graying;
            /** @type {number} */
            data[w + 15] = scale;
          }
          w = w + 16;
          /** @type {number} */
          index = index + 3;
        }
      }
      /** @type {number} */
      var out = obj.vCount / 16;
      /** @type {number} */
      x = 0;
      for (; x < width - 1; ++x) {
        /** @type {number} */
        i = 0;
        for (; i < length - 1; ++i) {
          if (force) {
            /** @type {number} */
            v[map + 0] = out + (x + 0) * length + (i + 0);
            /** @type {number} */
            v[map + 1] = out + (x + 0) * length + (i + 1);
            /** @type {number} */
            v[map + 2] = out + (x + 1) * length + (i + 0);
            /** @type {number} */
            v[map + 3] = out + (x + 1) * length + (i + 0);
            /** @type {number} */
            v[map + 4] = out + (x + 0) * length + (i + 1);
            /** @type {number} */
            v[map + 5] = out + (x + 1) * length + (i + 1);
          } else {
            /** @type {number} */
            v[map + 0] = out + (x + 0) * length + (i + 0);
            /** @type {number} */
            v[map + 1] = out + (x + 1) * length + (i + 0);
            /** @type {number} */
            v[map + 2] = out + (x + 0) * length + (i + 1);
            /** @type {number} */
            v[map + 3] = out + (x + 0) * length + (i + 1);
            /** @type {number} */
            v[map + 4] = out + (x + 1) * length + (i + 0);
            /** @type {number} */
            v[map + 5] = out + (x + 1) * length + (i + 1);
          }
          map = map + 6;
        }
      }
      obj.vCount = w;
      obj.eCount = map;
    }, render.prototype.renderShadow = function(c, width, height, x, text, y, context, translucentBlending, cache, entity) {
      var tile = this._card3D;
      var options = this._textures[53];
      options.checkForUpdate();
      var me = this._customWebGLRenderer;
      var len = tile.getWidth();
      var h = tile.getHeight();
      if (me.vCount + len * h * 16 > me.vertices.length || cache !== this._material.blending || self.CustomWebGLBase.compareTexture(c, options, this._material.texture)) {
        me.flush(c);
        /** @type {boolean} */
        this._material.blending = cache;
      }
      this._material.texture = options;
      me.setMaterial(c, this._material);
      var file = options.minU;
      var d3version = options.minV;
      var num = options.maxU;
      var SEGMENT_B = options.maxV;
      var m = tile.getMesh();
      var points = me.vertices;
      var el = me.elements;
      var j = me.vCount;
      var offset = me.eCount;
      /** @type {number} */
      var y = 0;
      /** @type {number} */
      var i = 0;
      for (; i < len; ++i) {
        /** @type {number} */
        var easbMax = 0;
        for (; easbMax < h; ++easbMax) {
          var maxX = m[y + 0] + 0.2 * m[y + 2];
          /** @type {number} */
          var maxY = m[y + 1] - 0.3 * m[y + 2];
          var lightI = void 0;
          var lightJ = void 0;
          if (0 === i) {
            /** @type {number} */
            lightI = maxX - m[y + 3 * h + 0] - 0.2 * m[y + 3 * h + 2];
            /** @type {number} */
            lightJ = maxY - m[y + 3 * h + 1] + 0.3 * m[y + 3 * h + 2];
          } else {
            if (i === len - 1) {
              /** @type {number} */
              lightI = maxX - m[y - 3 * h + 0] - 0.2 * m[y - 3 * h + 2];
              /** @type {number} */
              lightJ = maxY - m[y - 3 * h + 1] + 0.3 * m[y - 3 * h + 2];
            } else {
              /** @type {number} */
              lightI = 0;
              /** @type {number} */
              lightJ = 0;
            }
          }
          var w = void 0;
          var x = void 0;
          if (0 === easbMax) {
            /** @type {number} */
            w = maxX - m[y + 3 + 0] - 0.2 * m[y + 3 + 2];
            /** @type {number} */
            x = maxY - m[y + 3 + 1] + 0.3 * m[y + 3 + 2];
          } else {
            if (easbMax === h - 1) {
              /** @type {number} */
              w = maxX - m[y - 3 + 0] - 0.2 * m[y - 3 + 2];
              /** @type {number} */
              x = maxY - m[y - 3 + 1] + 0.3 * m[y - 3 + 2];
            } else {
              /** @type {number} */
              w = 0;
              /** @type {number} */
              x = 0;
            }
          }
          /** @type {number} */
          var ARG = lightI ? lightI / Math.sqrt(lightI * lightI + lightJ * lightJ) : 0;
          /** @type {number} */
          var _sort_ = lightJ ? lightJ / Math.sqrt(lightI * lightI + lightJ * lightJ) : 0;
          /** @type {number} */
          var t = w ? w / Math.sqrt(w * w + x * x) : 0;
          /** @type {number} */
          var property = x ? x / Math.sqrt(w * w + x * x) : 0;
          points[j + 0] = maxX + (ARG + t) * m[y + 2] * 0.2;
          /** @type {number} */
          points[j + 1] = maxY + (_sort_ + property) * m[y + 2] * 0.2;
          /** @type {number} */
          points[j + 2] = 0;
          /** @type {number} */
          points[j + 3] = 0;
          /** @type {number} */
          points[j + 4] = 0;
          /** @type {number} */
          points[j + 5] = 0;
          points[j + 6] = 0 === i ? num : i === len - 1 ? file : (file + num) / 2;
          points[j + 7] = 0 === easbMax ? d3version : easbMax === h - 1 ? SEGMENT_B : (d3version + SEGMENT_B) / 2;
          /** @type {number} */
          points[j + 8] = 0;
          /** @type {number} */
          points[j + 9] = 0;
          /** @type {number} */
          points[j + 10] = 0;
          /** @type {number} */
          points[j + 11] = 0;
          /** @type {number} */
          points[j + 12] = 0;
          /** @type {number} */
          points[j + 13] = 0;
          /** @type {number} */
          points[j + 14] = 0;
          /** @type {number} */
          points[j + 15] = 0.5 * translucentBlending;
          j = j + 16;
          /** @type {number} */
          y = y + 3;
        }
      }
      /** @type {number} */
      var t = me.vCount / 16;
      /** @type {number} */
      i = 0;
      for (; i < len - 1; ++i) {
        /** @type {number} */
        easbMax = 0;
        for (; easbMax < h - 1; ++easbMax) {
          if (entity) {
            /** @type {number} */
            el[offset + 0] = t + (i + 0) * h + (easbMax + 0);
            /** @type {number} */
            el[offset + 1] = t + (i + 0) * h + (easbMax + 1);
            /** @type {number} */
            el[offset + 2] = t + (i + 1) * h + (easbMax + 0);
            /** @type {number} */
            el[offset + 3] = t + (i + 1) * h + (easbMax + 0);
            /** @type {number} */
            el[offset + 4] = t + (i + 0) * h + (easbMax + 1);
            /** @type {number} */
            el[offset + 5] = t + (i + 1) * h + (easbMax + 1);
          } else {
            /** @type {number} */
            el[offset + 0] = t + (i + 0) * h + (easbMax + 0);
            /** @type {number} */
            el[offset + 1] = t + (i + 1) * h + (easbMax + 0);
            /** @type {number} */
            el[offset + 2] = t + (i + 0) * h + (easbMax + 1);
            /** @type {number} */
            el[offset + 3] = t + (i + 0) * h + (easbMax + 1);
            /** @type {number} */
            el[offset + 4] = t + (i + 1) * h + (easbMax + 0);
            /** @type {number} */
            el[offset + 5] = t + (i + 1) * h + (easbMax + 1);
          }
          offset = offset + 6;
        }
      }
      me.vCount = j;
      me.eCount = offset;
    }, render.prototype.getCustomInterface = function(canCreateDiscussions) {
      return canCreateDiscussions === render.CARD3D ? this._card3D : null;
    }, render.CARD3D = "Card3D", render;
  }(self.CustomWebGLBase);
  var InternalDecodedString = function() {
    /**
     * @param {number} height
     * @param {number} width
     * @return {undefined}
     */
    function Node(height, width) {
      /** @type {!Array} */
      this._transformMatrix = [1, 0, 0, 1, 0, 0];
      /** @type {!Array} */
      this._projectionMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      /** @type {number} */
      this._width = height;
      /** @type {number} */
      this._height = width;
      /** @type {!Float32Array} */
      this._mesh = new Float32Array(height * width * 3);
      /** @type {number} */
      this._alpha = 0;
      /** @type {number} */
      this._frontFace = 0;
      /** @type {number} */
      this._backFace = 0;
      /** @type {number} */
      this._border = 0;
      /** @type {number} */
      this._highlight = 0;
      /** @type {number} */
      this._graying = 1;
    }
    return Object.defineProperty(Node.prototype, "alpha", {
      get : function() {
        return this._alpha;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "frontFace", {
      get : function() {
        return this._frontFace;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "backFace", {
      get : function() {
        return this._backFace;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "border", {
      get : function() {
        return this._border;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "highlight", {
      get : function() {
        return this._highlight;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "graying", {
      get : function() {
        return this._graying;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "transformMatrix", {
      get : function() {
        return this._transformMatrix;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "projectionMatrix", {
      get : function() {
        return this._projectionMatrix;
      },
      enumerable : true,
      configurable : true
    }), Node.prototype.getWidth = function() {
      return this._width;
    }, Node.prototype.getHeight = function() {
      return this._height;
    }, Node.prototype.getMesh = function() {
      return this._mesh;
    }, Node.prototype.setAlpha = function(a) {
      /** @type {number} */
      this._alpha = a;
    }, Node.prototype.setFrontFace = function(value) {
      /** @type {number} */
      this._frontFace = value;
    }, Node.prototype.setBackFace = function(canCreateDiscussions) {
      /** @type {number} */
      this._backFace = canCreateDiscussions;
    }, Node.prototype.setBorder = function(border) {
      /** @type {number} */
      this._border = border;
    }, Node.prototype.setHighlight = function(highlight) {
      /** @type {boolean} */
      this._highlight = highlight;
    }, Node.prototype.setGraying = function(actual_score) {
      /** @type {number} */
      this._graying = actual_score;
    }, Node.prototype.projectBack = function(t) {
      var m = this._transformMatrix;
      var props = this._projectionMatrix;
      var c = t.x * m[0] + t.y * m[2] + m[4];
      var s = t.x * m[1] + t.y * m[3] + m[5];
      /** @type {number} */
      var a = props[0] - props[2] * c;
      /** @type {number} */
      var g = props[1] - props[2] * s;
      /** @type {number} */
      var b = props[3] - props[5] * c;
      /** @type {number} */
      var y = props[4] - props[5] * s;
      /** @type {number} */
      var e = props[6] - props[8] * c;
      /** @type {number} */
      var d = props[7] - props[8] * s;
      /** @type {number} */
      var f = 1 / (a * y - g * b);
      return c = (b * d - y * e) * f, s = (g * e - a * d) * f, f = 1 / (m[0] * m[3] - m[1] * m[2]), a = m[3] * f, g = -m[1] * f, b = -m[2] * f, y = m[0] * f, e = (m[2] * m[5] - m[3] * m[4]) * f, d = (m[1] * m[4] - m[0] * m[5]) * f, new self.Point(c * a + s * b + e, c * g + s * y + d);
    }, Node.prototype.getType = function() {
      return self.ComponentType.CUSTOM;
    }, Node.prototype.bindNode = function(optional, freshLabels) {
    }, Node.prototype.dispose = function() {
    }, Node;
  }();
  var getTranspilerModule = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(C) {
    /** @type {string} */
    C[C.DEAL = 0] = "DEAL";
    /** @type {string} */
    C[C.SHRINK = 1] = "SHRINK";
    /** @type {string} */
    C[C.FLIP = 2] = "FLIP";
    /** @type {string} */
    C[C.SPLIT = 3] = "SPLIT";
    /** @type {string} */
    C[C.MOVE = 4] = "MOVE";
    /** @type {string} */
    C[C.SORT = 5] = "SORT";
    /** @type {string} */
    C[C.HIDE = 6] = "HIDE";
    /** @type {string} */
    C[C.PEEK = 7] = "PEEK";
    /** @type {string} */
    C[C.COLLECT = 8] = "COLLECT";
    /** @type {string} */
    C[C.TRASH = 9] = "TRASH";
    /** @type {string} */
    C[C.CLEAR = 10] = "CLEAR";
  }(module || (module = {}));
  var state;
  !function(Fonts) {
    /** @type {string} */
    Fonts[Fonts.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    Fonts[Fonts.GREYED = 1] = "GREYED";
    /** @type {string} */
    Fonts[Fonts.HIGHLIGHTED = 2] = "HIGHLIGHTED";
  }(state || (state = {}));
  var attributes;
  var CandidateElement = function(babel) {
    /**
     * @param {number} index
     * @return {?}
     */
    function self(index) {
      var thumbDiv = babel.call(this) || this;
      /** @type {number} */
      thumbDiv._index = index;
      var directory_epub = self.ResourceManager.getInstance().getSndManager();
      return thumbDiv._dealSnd = directory_epub.create("dealSnd"), thumbDiv._turnSnd = directory_epub.create("turnSnd"), thumbDiv;
    }
    return getTranspilerModule(self, babel), Object.defineProperty(self.prototype, "card", {
      get : function() {
        return this._cardId;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(self.prototype, "value", {
      get : function() {
        return this._cardId % 13;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.setCard = function(name) {
      /** @type {number} */
      this._cardId = name;
    }, self.prototype.reset = function() {
      /** @type {number} */
      this._cardId = -1;
    }, self.prototype.shrink = function(index) {
      this.dispatch(new Date(module.SHRINK, 200, index));
    }, self.prototype.deal = function(b) {
      var e = this;
      return exports.Task.createHandler(function(timelineCanvas) {
        /** @type {number} */
        var g = b ? 200 : 300;
        e.dispatch(new Date(module.DEAL, g));
        e._dealSnd.play();
        timelineCanvas.execDelayMs(g);
      });
    }, self.prototype.flipCard = function(card) {
      var e = this;
      return exports.Task.createHandler(function(timelineCanvas) {
        /** @type {number} */
        var g = card ? 100 : 200;
        e.dispatch(new Date(module.FLIP, g));
        e._turnSnd.play();
        timelineCanvas.execDelayMs(g);
      });
    }, self.prototype.peekCard = function(a22) {
      var inst = this;
      return exports.Task.createHandler(function(canCreateDiscussions) {
        inst.dispatch(new Date(module.PEEK, 800));
        canCreateDiscussions.execDelayMs(800);
      });
    }, self.prototype.collect = function(index, value) {
      var self = this;
      return exports.Task.createHandler(function($changedItem) {
        /** @type {number} */
        var checked = index ? 100 : 200;
        self.dispatch(new Date(module.COLLECT, checked, value));
        $changedItem.execDelayMs(checked);
      });
    }, self.prototype.move = function(name, value) {
      var self = this;
      return exports.Task.createHandler(function($changedItem) {
        /** @type {number} */
        var checked = name ? 100 : 320;
        self.dispatch(new Date(module.MOVE, checked, value));
        $changedItem.execDelayMs(checked);
      });
    }, self.prototype.sort = function(value, xpath) {
      var self = this;
      return exports.Task.createHandler(function($changedItem) {
        /** @type {number} */
        var checked = value ? 100 : 320;
        self.dispatch(new Date(module.SORT, checked, xpath));
        $changedItem.execDelayMs(checked);
      });
    }, self.prototype.hideCard = function() {
      var inst = this;
      return exports.Task.createHandler(function(completionNotifier) {
        inst.dispatch(new Date(module.HIDE, 1));
        completionNotifier.complete();
      });
    }, self.prototype.trash = function(callback, params) {
      var self = this;
      return exports.Task.createHandler(function($changedItem) {
        /** @type {number} */
        var checked = callback ? params ? 200 : 300 : 0;
        self.dispatch(new Date(module.TRASH, checked));
        $changedItem.execDelayMs(checked);
      });
    }, self.prototype.clear = function(value, pref) {
      var self = this;
      return exports.Task.createHandler(function(canCreateDiscussions) {
        /** @type {number} */
        var checked = value ? 500 : 0;
        self.dispatch(new Date(module.CLEAR, checked));
        canCreateDiscussions.execDelayMs(0);
      });
    }, self.prototype.setHighlightState = function(arr) {
      this.dispatch(new IteratorArray(arr));
    }, self;
  }(exports.Model);
  var JarallaxStatic = function() {
    /**
     * @param {!Entity} file
     * @param {string} row
     * @param {number} column
     * @param {number} value
     * @param {number} start1
     * @return {undefined}
     */
    function init(file, row, column, value, start1) {
      if (void 0 === start1) {
        /** @type {number} */
        start1 = 4;
      }
      /** @type {!Entity} */
      this._entity = file;
      /** @type {string} */
      this._seatIdx = row;
      /** @type {number} */
      this._handIdx = column;
      /** @type {number} */
      this._cardIdx = value;
      this._transform = new self.TransformImpl(null);
      this._cardAnimator = new PortalDeleteDialog;
      this._animatorTask = new exports.Task;
      this.registerComponent("card");
      var bank = self.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var identifier = "card_" + row + "_" + column + "_" + value;
      var type = bank.create("card");
      file.getHierarchy("cardLayer").add(identifier, type);
      this._card3D = type.getCustomInterface(OffsetAt.CARD3D);
      /** @type {number} */
      this._cardWidth = 113;
      /** @type {number} */
      this._cardHeight = 163;
      /** @type {!Array} */
      this._ctrlPointsX = new Array(16);
      /** @type {!Array} */
      this._ctrlPointsY = new Array(16);
      /** @type {!Array} */
      this._ctrlPointsZ = new Array(16);
      /** @type {number} */
      this._peekAngle = 0;
      /** @type {number} */
      this._rotation = 0;
      /** @type {number} */
      this._maxNumCards = start1;
    }
    return init.calculateBezierCoefficients = function(t, w) {
      /** @type {!Array} */
      var map = Array(t * w * 4 * 4);
      /** @type {number} */
      var k = 0;
      /** @type {number} */
      var idx = 0;
      for (; idx < t; idx++) {
        /** @type {number} */
        var percent = idx / (t - 1);
        /** @type {number} */
        var scale = 1 - percent;
        /** @type {number} */
        var width = 1 * scale * scale * scale;
        /** @type {number} */
        var v = 3 * percent * scale * scale;
        /** @type {number} */
        var delta = 3 * percent * percent * scale;
        /** @type {number} */
        var px = 1 * percent * percent * percent;
        /** @type {number} */
        var x = 0;
        for (; x < w; x++) {
          /** @type {number} */
          var y = x / (w - 1);
          /** @type {number} */
          var z = 1 - y;
          /** @type {number} */
          var j = 1 * z * z * z;
          /** @type {number} */
          var scale = 3 * y * z * z;
          /** @type {number} */
          var i = 3 * y * y * z;
          /** @type {number} */
          var precision = 1 * y * y * y;
          /** @type {number} */
          map[k++] = width * j;
          /** @type {number} */
          map[k++] = v * j;
          /** @type {number} */
          map[k++] = delta * j;
          /** @type {number} */
          map[k++] = px * j;
          /** @type {number} */
          map[k++] = width * scale;
          /** @type {number} */
          map[k++] = v * scale;
          /** @type {number} */
          map[k++] = delta * scale;
          /** @type {number} */
          map[k++] = px * scale;
          /** @type {number} */
          map[k++] = width * i;
          /** @type {number} */
          map[k++] = v * i;
          /** @type {number} */
          map[k++] = delta * i;
          /** @type {number} */
          map[k++] = px * i;
          /** @type {number} */
          map[k++] = width * precision;
          /** @type {number} */
          map[k++] = v * precision;
          /** @type {number} */
          map[k++] = delta * precision;
          /** @type {number} */
          map[k++] = px * precision;
        }
      }
      return map;
    }, init.cardCreator = function(startYear, i) {
      return new OffsetAt(new InternalDecodedString(startYear, i), "Cards");
    }, init.prototype.registerComponent = function(key) {
      self.ResourceManager.getInstance().getEntityManager().registerCustomComponent(key, function() {
        return init.cardCreator(10, 10);
      });
    }, init.prototype.getShoe = function() {
      return this._entity.getTransform("shoe");
    }, init.prototype.getTrash = function() {
      return this._entity.getTransform("trash");
    }, init.prototype.getCard = function(model, state, callback) {
      return null;
    }, init.prototype.onUpdateMeshDeal = function(primaryTxHex) {
      /** @type {number} */
      this._flipAngle = this._card >= 0 ? 0.322 - 1.322 * primaryTxHex : 0.322 - 0.322 * primaryTxHex;
      /** @type {number} */
      this._rotation = 0.733 - 0.733 * primaryTxHex;
      this.onUpdate();
    }, init.prototype.onUpdateMeshPeek = function(b) {
      /** @type {number} */
      this._peekAngle = b < 0.25 ? 4 * b : b > 0.75 ? 4 * (1 - b) : 1;
      this.onUpdate();
    }, init.prototype.onUpdateMeshFlip = function(primaryTxHex) {
      /** @type {number} */
      this._flipAngle = primaryTxHex;
      this.onUpdate();
    }, init.prototype.onUpdateMeshSplit = function(primaryTxHex) {
      this.onUpdate();
    }, init.prototype.onUpdateMeshCollect = function(primaryTxHex) {
      this.onUpdate();
    }, init.prototype.onUpdateMeshTrash = function(primaryTxHex) {
      this._flipAngle = 1 + primaryTxHex;
      this.onUpdate();
    }, init.prototype.onUpdateMeshClear = function(y) {
      this._card3D.setAlpha(1 - y);
      this.onUpdate();
    }, init.prototype.onUpdate = function() {
      this.updateBezierPatch();
      this.updateMesh();
    }, init.prototype.updateBezierPatch = function() {
      /** @type {number} */
      var dir = this._flipAngle % 2;
      if (dir > 1) {
        /** @type {number} */
        dir = -dir * Math.PI;
      } else {
        /** @type {number} */
        dir = dir * Math.PI;
      }
      /** @type {number} */
      var ICON_ENTER_ANIMATION_SPEED = Math.cos(dir) * this._cardWidth / 2;
      /** @type {number} */
      var length_delta = this._cardHeight / 2;
      /** @type {number} */
      var width = Math.sin(dir) * this._cardWidth / 2;
      var data = this._ctrlPointsX;
      var d = this._ctrlPointsY;
      var gBuffer = this._ctrlPointsZ;
      /** @type {number} */
      var dx = Math.abs(width);
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var delta = -3;
      for (; delta <= 3; delta = delta + 2) {
        /** @type {number} */
        var occurences = -3;
        for (; occurences <= 3; occurences = occurences + 2) {
          /** @type {number} */
          data[i] = ICON_ENTER_ANIMATION_SPEED * delta / 3;
          /** @type {number} */
          d[i] = length_delta * occurences / 3;
          /** @type {number} */
          gBuffer[i] = dx + width * delta / 3;
          i++;
        }
      }
      /** @type {number} */
      var v = Math.cos(this._peekAngle);
      /** @type {number} */
      var quantError = Math.sin(this._peekAngle);
      gBuffer[0] += Math.sqrt(data[0] * data[0] + d[0] * d[0]) * quantError;
      data[0] *= v;
      d[0] *= v;
      /** @type {number} */
      v = Math.cos(this._peekAngle / 2);
      /** @type {number} */
      quantError = Math.sin(this._peekAngle / 2);
      gBuffer[1] += Math.sqrt(data[1] * data[1] + d[1] * d[1]) * quantError;
      data[1] *= v;
      d[1] *= v;
      gBuffer[4] += Math.sqrt(data[4] * data[4] + d[4] * d[4]) * quantError;
      data[4] *= v;
      d[4] *= v;
    }, init.prototype.updateMesh = function() {
      var px = this._transform.getX();
      var y = this._transform.getY();
      var r = new self.Point(px, y);
      r = this._card3D.projectBack(r);
      px = r.x;
      y = r.y;
      /** @type {number} */
      var s = Math.cos(this._rotation);
      /** @type {number} */
      var c = Math.sin(this._rotation);
      var vx = this._ctrlPointsX;
      var vy = this._ctrlPointsY;
      var num1 = this._ctrlPointsZ;
      var clientHeight = this._card3D.getWidth();
      var h = this._card3D.getHeight();
      var p = this._card3D.getMesh();
      var uy = init.BEZIERCOEFFICIENTS;
      /** @type {number} */
      var n = 0;
      /** @type {number} */
      var j = 0;
      /** @type {number} */
      var targetOffsetHeight = 0;
      for (; targetOffsetHeight < clientHeight; targetOffsetHeight++) {
        /** @type {number} */
        var destY = 0;
        for (; destY < h; destY++) {
          /** @type {number} */
          var m10 = 0;
          /** @type {number} */
          var m12 = 0;
          /** @type {number} */
          var captures = 0;
          /** @type {number} */
          var i = 0;
          for (; i < 16; i++) {
            /** @type {number} */
            m10 = m10 + vx[i] * uy[j];
            /** @type {number} */
            m12 = m12 + vy[i] * uy[j];
            /** @type {number} */
            captures = captures + num1[i] * uy[j];
            j++;
          }
          p[n++] = m10 * s + m12 * c + px;
          p[n++] = -m10 * c + m12 * s + y;
          /** @type {number} */
          p[n++] = captures;
        }
      }
    }, init.prototype.showInShoe = function() {
      var opacity = this._entity.getTransform("cardLayer");
      this._card3D.setAlpha(1);
      /** @type {number} */
      this._rotation = 0.733;
      /** @type {number} */
      this._flipAngle = 0.322;
      this._cardAnimator.move(this._animatorTask, this._transform, this.getShoe(), this.getShoe(), 0, opacity, 0);
      this.onUpdate();
    }, init.prototype.playDeal = function(callback, bind, name, isForArray) {
      var foreignControls = this;
      if (void 0 === name) {
        /** @type {null} */
        name = null;
      }
      if (void 0 === isForArray) {
        /** @type {null} */
        isForArray = null;
      }
      var opacity = this._entity.getTransform("cardLayer");
      /** @type {number} */
      this._card = bind;
      this._card3D.setFrontFace(bind + 1);
      this._card3D.setAlpha(1);
      this._cardAnimator.attach(function(reverseControl) {
        return foreignControls.onUpdateMeshDeal(reverseControl);
      });
      this._cardAnimator.setupEase(name, isForArray);
      this._cardAnimator.move(this._animatorTask, this._transform, this.getShoe(), this.getCard(this._seatIdx, this._handIdx, this._cardIdx), callback, opacity);
    }, init.prototype.playShrink = function(callback, data) {
      var foreignControls = this;
      var opacity = this._entity.getTransform("cardLayer");
      /** @type {!Array} */
      var x = data;
      if (x > this._maxNumCards) {
        /** @type {number} */
        var xmx3 = x - 1;
        this._cardAnimator.attach(function(reverseControl) {
          return foreignControls.onUpdateMeshCollect(reverseControl);
        });
        this._cardAnimator.setupEase(new self.Point(0.33, 0.33), new self.Point(0.66, 0.66));
        this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, this._maxNumCards - 1), this.getCard(this._seatIdx, this._handIdx, 0), callback, opacity, (xmx3 - 1 - this._cardIdx) / (xmx3 - 1), (xmx3 - this._cardIdx) / xmx3);
      }
    }, init.prototype.playPeek = function(callback) {
      var QuickBase = this;
      var opacity = this._entity.getTransform("cardLayer");
      this._cardAnimator.attach(function(val) {
        return QuickBase.onUpdateMeshPeek(val);
      });
      this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, this._cardIdx), this.getCard(this._seatIdx, this._handIdx, this._cardIdx), callback, opacity);
    }, init.prototype.playFlip = function(callback, bind) {
      var foreignControls = this;
      var opacity = this._entity.getTransform("cardLayer");
      /** @type {number} */
      this._card = bind;
      this._card3D.setFrontFace(bind + 1);
      this._cardAnimator.attach(function(reverseControl) {
        return foreignControls.onUpdateMeshFlip(reverseControl);
      });
      this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, this._cardIdx), this.getCard(this._seatIdx, this._handIdx, this._cardIdx), callback, opacity);
    }, init.prototype.playSplit = function(callback, bind) {
      var foreignControls = this;
      var opacity = this._entity.getTransform("cardLayer");
      /** @type {number} */
      this._card = bind;
      /** @type {number} */
      this._flipAngle = 1;
      this._card3D.setAlpha(1);
      this._card3D.setFrontFace(bind + 1);
      this._cardAnimator.attach(function(reverseControl) {
        return foreignControls.onUpdateMeshSplit(reverseControl);
      });
      this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, 0, this._handIdx - 1), this.getCard(this._seatIdx, this._handIdx, this._cardIdx), callback, opacity);
    }, init.prototype.playCollect = function(callback, promise, path, tr, data) {
      var foreignControls = this;
      var opacity = this._entity.getTransform("cardLayer");
      /** @type {!Array} */
      var index = path;
      /** @type {number} */
      var size = index - 1;
      this._card3D.setFrontFace(promise + 1);
      this._cardAnimator.attach(function(reverseControl) {
        return foreignControls.onUpdateMeshCollect(reverseControl);
      });
      this._cardAnimator.setupEase(tr, data);
      this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, index > this._maxNumCards ? this._maxNumCards - 1 : this._cardIdx), this.getCard(this._seatIdx, this._handIdx, 0), callback, opacity, index > this._maxNumCards ? (size - this._cardIdx) / size : 0);
    }, init.prototype.playMove = function(transition, mv, type, name, color, value, j, i, data) {
      var foreignControls = this;
      var opacity = this._entity.getTransform("cardLayer");
      /** @type {number} */
      this._card = mv;
      /** @type {number} */
      this._flipAngle = 1;
      this._card3D.setAlpha(1);
      this._card3D.setFrontFace(mv + 1);
      this._cardAnimator.attach(function(reverseControl) {
        return foreignControls.onUpdateMeshSplit(reverseControl);
      });
      this._cardAnimator.setupEase(name, color);
      if (null != value && void 0 != value || null != i && void 0 != i) {
        this._cardAnimator.bezierMove(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, this._cardIdx), this.getCard(this._seatIdx, this._handIdx, type), transition, opacity, value, j, i, data);
      } else {
        this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, this._cardIdx), this.getCard(this._seatIdx, this._handIdx, type), transition, opacity);
      }
    }, init.prototype.playSort = function(transition, mv, type, ratio, id, sat, v, a, fn) {
      this.playMove(transition, mv, type, ratio, id, sat, v, a, fn);
    }, init.prototype.playHide = function() {
      this._card3D.setAlpha(0);
    }, init.prototype.playTrash = function(callback, id, n) {
      var foreignControls = this;
      var opacity = this._entity.getTransform("cardLayer");
      this._cardAnimator.attach(function(reverseControl) {
        return foreignControls.onUpdateMeshTrash(reverseControl);
      });
      this._cardAnimator.setupEase(id, n);
      this._cardAnimator.move(this._animatorTask, this._transform, this.getCard(this._seatIdx, this._handIdx, 0), this.getTrash(), callback, opacity);
    }, init.prototype.playClear = function(callback) {
      var QuickBase = this;
      var opacity = this._entity.getTransform("cardLayer");
      this._cardAnimator.attach(function(val) {
        return QuickBase.onUpdateMeshClear(val);
      });
      this._cardAnimator.move(this._animatorTask, this._transform, this.getTrash(), this.getTrash(), callback, opacity);
    }, init.prototype.play = function(name, args, self, type) {
      switch(name) {
        case module.DEAL:
          this.playDeal(args, self, null, null);
          break;
        case module.SHRINK:
          this.playShrink(args, type);
          break;
        case module.PEEK:
          this.playPeek(args);
          break;
        case module.FLIP:
          this.playFlip(args, self);
          break;
        case module.SPLIT:
          this.playSplit(args, self);
          break;
        case module.COLLECT:
          this.playCollect(args, self, type, null, null);
          break;
        case module.MOVE:
          this.playMove(args, self, type, null, null, null, null, null, null);
          break;
        case module.SORT:
          this.playSort(args, self, type, null, null, null, null, null, null);
          break;
        case module.HIDE:
          this.playHide();
          break;
        case module.TRASH:
          this.playTrash(args, null, null);
          break;
        case module.CLEAR:
          this.playClear(args);
      }
    }, init.prototype.setHighlightState = function(canCreateDiscussions) {
      switch(canCreateDiscussions) {
        case state.NORMAL:
          this._card3D.setBorder(0);
          this._card3D.setHighlight(0);
          this._card3D.setGraying(1);
          break;
        case state.GREYED:
          this._card3D.setBorder(0);
          this._card3D.setHighlight(0);
          this._card3D.setGraying(0.5);
          break;
        case state.HIGHLIGHTED:
          this._card3D.setBorder(1);
          this._card3D.setHighlight(0);
          this._card3D.setGraying(1);
      }
    }, init.prototype.update = function() {
      this.onUpdate();
    }, init.BEZIERCOEFFICIENTS = init.calculateBezierCoefficients(10, 10), init;
  }();
  var containsPort = (function() {
    /**
     * @param {string} info
     * @param {number} i
     * @return {undefined}
     */
    function init(info, i) {
      this._dealer = this.createDealer();
      this._shoeCardView = this.createShoeCardView(info);
      this._dealerView = this.createDealerView(info);
      /** @type {!Array} */
      this._seats = new Array(i);
      /** @type {!Array} */
      this._seatViews = new Array(i);
      /** @type {number} */
      var n = 0;
      for (; n < i; n++) {
        this._seats[n] = this.createSeat(n);
        this._seatViews[n] = this.createSeatView(info, n);
      }
      this._cardController = this.createController();
    }
    Object.defineProperty(init.prototype, "dealer", {
      get : function() {
        return this._dealer;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(init.prototype, "seats", {
      get : function() {
        return this._seats;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @return {undefined}
     */
    init.prototype.update = function() {
      this._shoeCardView.showInShoe();
      this._dealerView.update();
      /** @type {number} */
      var r = 0;
      var readersLength = this._seatViews.length;
      for (; r < readersLength; r++) {
        this._seatViews[r].update();
      }
    };
    /**
     * @param {string} selector
     * @return {?}
     */
    init.prototype.createShoeCardView = function(selector) {
      return new JarallaxStatic(selector, 4, 0, 0, 1);
    };
    /**
     * @return {?}
     */
    init.prototype.createController = function() {
      return new vt(this.seats, this.dealer, this._seatViews, this._dealerView);
    };
  }(), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var getVendorCSSPropertyName = (function(size) {
    /**
     * @param {?} e
     * @param {number} val
     * @param {number} p
     * @return {?}
     */
    function self(e, val, p) {
      var self = size.call(this) || this;
      self._seat = e;
      /** @type {number} */
      self._handIdx = val;
      /** @type {!Array} */
      self._cards = new Array(p);
      /** @type {number} */
      var n = 0;
      for (; n < p; n++) {
        self._cards[n] = self.createCard(n);
      }
      return self._numCards = 0, self;
    }
    containsPort(self, size);
    Object.defineProperty(self.prototype, "seat", {
      get : function() {
        return this._seat;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(self.prototype, "handIdx", {
      get : function() {
        return this._handIdx;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @return {?}
     */
    self.prototype.isDealer = function() {
      return this._seat.isDealer();
    };
    Object.defineProperty(self.prototype, "numCards", {
      get : function() {
        return this._numCards;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @param {number} element
     * @return {?}
     */
    self.prototype.createCard = function(element) {
      return new CandidateElement(element);
    };
    /**
     * @param {number} name
     * @return {?}
     */
    self.prototype.getCard = function(name) {
      return this._cards[name];
    };
    /**
     * @param {boolean} iterator
     * @return {?}
     */
    self.prototype.collect = function(iterator) {
      var props = this;
      return exports.Task.createHandler(function(simplePermissionResolver) {
        /** @type {!Array} */
        var a = [];
        /** @type {number} */
        var i = 0;
        for (; i < props._numCards; i++) {
          a.push(props._cards[i].collect(iterator, props._numCards));
        }
        simplePermissionResolver.execGroup(a);
      });
    };
    /**
     * @param {boolean} id
     * @return {?}
     */
    self.prototype.clear = function(id) {
      var r = this;
      return exports.Task.createHandler(function(gracePeriodRestangularService) {
        /** @type {!Array} */
        var tasks = [];
        /** @type {number} */
        var i = 0;
        for (; i < r._numCards; i++) {
          tasks.push(r._cards[i].trash(i + 1 === r._numCards, id));
          tasks.push(r._cards[i].clear(i + 1 === r._numCards, id));
        }
        gracePeriodRestangularService.execSequence(tasks);
      });
    };
    /**
     * @return {undefined}
     */
    self.prototype.reset = function() {
      /** @type {number} */
      var i = 0;
      var l = this._cards.length;
      for (; i < l; i++) {
        this._cards[i].reset();
      }
      /** @type {number} */
      this._numCards = 0;
    };
    /**
     * @param {number} card
     * @return {?}
     */
    self.prototype.addCard = function(card) {
      return this._cards[this._numCards].setCard(card), this._numCards++;
    };
    /**
     * @param {number} i
     * @param {undefined} name
     * @return {undefined}
     */
    self.prototype.setCard = function(i, name) {
      this._cards[i].setCard(name);
    };
    /**
     * @param {?} bTurn
     * @return {undefined}
     */
    self.prototype.setTurn = function(bTurn) {
      this._hasTurn = bTurn;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    self.prototype.getCardValue = function(index) {
      return this._cards[index].value;
    };
    /**
     * @return {undefined}
     */
    self.prototype.updateCardValue = function() {
    };
    /**
     * @param {?} i
     * @param {?} e
     * @return {?}
     */
    self.prototype.peekCard = function(i, e) {
      return this._cards[i].peekCard(e);
    };
    /**
     * @param {boolean} cards
     * @param {boolean} card
     * @return {?}
     */
    self.prototype.flipCard = function(cards, card) {
      return this._cards[cards].flipCard(card);
    };
    /**
     * @param {number} i
     * @param {boolean} n
     * @return {?}
     */
    self.prototype.dealCard = function(i, n) {
      /** @type {number} */
      var index = 0;
      for (; index < i; index++) {
        this._cards[index].shrink(this._numCards);
      }
      return this._cards[i].deal(n);
    };
  }(exports.Model), function() {
    /**
     * @param {string} value
     * @param {number} count
     * @param {!Array} word
     * @return {undefined}
     */
    function t(value, count, word) {
      if (void 0 === word) {
        /** @type {boolean} */
        word = false;
      }
      /** @type {string} */
      this._seatIdx = value;
      /** @type {!Array} */
      this._isDealer = word;
      /** @type {!Array} */
      this._hands = new Array(count);
      /** @type {number} */
      var i = 0;
      for (; i < count; i++) {
        this._hands[i] = this.createHand(this, i);
      }
    }
    Object.defineProperty(t.prototype, "seatIdx", {
      get : function() {
        return this._seatIdx;
      },
      enumerable : true,
      configurable : true
    });
    Object.defineProperty(t.prototype, "numHands", {
      get : function() {
        return this._hands.length;
      },
      enumerable : true,
      configurable : true
    });
    /**
     * @return {?}
     */
    t.prototype.isDealer = function() {
      return this._isDealer;
    };
    /**
     * @param {number} i
     * @return {?}
     */
    t.prototype.getHand = function(i) {
      return this._hands[i];
    };
    /**
     * @return {undefined}
     */
    t.prototype.reset = function() {
      /** @type {number} */
      var i = 0;
      var patchLen = this._hands.length;
      for (; i < patchLen; i++) {
        this._hands[i].reset();
      }
    };
    /**
     * @param {boolean} key
     * @return {?}
     */
    t.prototype.clear = function(key) {
      var obj = this;
      return exports.Task.createHandler(function(gracePeriodRestangularService) {
        /** @type {!Array} */
        var tasks = [];
        /** @type {number} */
        var i = 0;
        var z = obj.numHands;
        for (; i < z; i++) {
          tasks.push(obj._hands[i].collect(key));
          tasks.push(obj._hands[i].clear(key));
        }
        gracePeriodRestangularService.execSequence(tasks);
      });
    };
  }(), function() {
    /**
     * @param {?} t
     * @param {?} n
     * @param {number} c
     * @return {undefined}
     */
    function t(t, n, c) {
      /** @type {!Array} */
      this._hands = new Array(c);
      /** @type {number} */
      var i = 0;
      for (; i < c; i++) {
        this._hands[i] = this.createHandView(t, n, i);
      }
      this._clickToPlay = this.locateClickToPlayAnimation(t, n);
    }
    /**
     * @param {?} asyncFunction
     * @param {?} thisArg
     * @return {?}
     */
    t.prototype.locateClickToPlayAnimation = function(asyncFunction, thisArg) {
      return null;
    };
    /**
     * @param {number} i
     * @return {?}
     */
    t.prototype.getHandView = function(i) {
      return this._hands[i];
    };
    /**
     * @return {undefined}
     */
    t.prototype.update = function() {
      /** @type {number} */
      var i = 0;
      var patchLen = this._hands.length;
      for (; i < patchLen; i++) {
        this._hands[i].update();
      }
    };
  }(), function() {
    /**
     * @param {?} word
     * @param {?} key
     * @param {?} token
     * @param {(Uint8Array|string)} name
     * @return {undefined}
     */
    function t(word, key, token, name) {
      /** @type {!Array} */
      this._cardViews = new Array(name);
      /** @type {number} */
      var i = 0;
      /** @type {(Uint8Array|string)} */
      var anims = name;
      for (; i < anims; i++) {
        this._cardViews[i] = this.createCardView(word, key, token, i);
      }
    }
    /**
     * @param {number} url
     * @return {?}
     */
    t.prototype.getCardView = function(url) {
      return this._cardViews[url];
    };
    /**
     * @return {undefined}
     */
    t.prototype.update = function() {
      /** @type {number} */
      var r = 0;
      var readersLength = this._cardViews.length;
      for (; r < readersLength; r++) {
        this._cardViews[r].update();
      }
    };
  }(), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var getYPosition = (function(Tokenizer) {
    /**
     * @param {!HTMLElement} o
     * @param {?} t
     * @param {?} u
     * @param {?} n
     * @param {?} i
     * @param {?} e
     * @param {!Object} data
     * @return {?}
     */
    function transform(o, t, u, n, i, e, data) {
      var that = Tokenizer.call(this, o, t, u, n, i, e) || this;
      return that._dealer = data.dealer, that._seats = data.seats, that._cardManager = data, o.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return that.onStart();
      }), exports.SystemManager.getDeviceHandler().addEventListener(exports.DeviceEvent.RESIZE, function() {
        return that.onResize();
      }), that;
    }
    getVendorCSSPropertyName(transform, Tokenizer);
    /**
     * @return {undefined}
     */
    transform.prototype.onStart = function() {
      this._cardManager.update();
    };
    /**
     * @return {undefined}
     */
    transform.prototype.onResize = function() {
      this._cardManager.update();
    };
    /**
     * @param {!Object} loop
     * @return {undefined}
     */
    transform.prototype.clearHandler = function(loop) {
      /** @type {!Array} */
      var newObj = [];
      /** @type {number} */
      var i = 0;
      var inputsSize = this._seats.length;
      for (; i < inputsSize; i++) {
        newObj.push(this._seats[i].clear(this._settings.fastPlay));
      }
      newObj.push(this._dealer.clear(this._settings.fastPlay));
      loop.execSequence(newObj);
    };
    /**
     * @return {undefined}
     */
    transform.prototype.onRoundEnd = function() {
      Tokenizer.prototype.onRoundEnd.call(this);
      this.resetCards();
    };
    /**
     * @return {undefined}
     */
    transform.prototype.resetCards = function() {
      /** @type {number} */
      var i = 0;
      var responsiveLayoutsCount = this._seats.length;
      for (; i < responsiveLayoutsCount; i++) {
        this._seats[i].reset();
      }
      this._dealer.reset();
    };
    /**
     * @param {?} surveyId
     * @param {!Array} name
     * @param {!Array} oneofIndex
     * @return {?}
     */
    transform.prototype.updateCardValue = function(surveyId, name, oneofIndex) {
      var $mmaModSurveyOffline = this;
      return void 0 === name && (name = false), void 0 === oneofIndex && (oneofIndex = false), exports.Task.createHandler(function(completionNotifier) {
        $mmaModSurveyOffline.onUpdateCardValue(surveyId, name);
        completionNotifier.complete();
      });
    };
    /**
     * @param {?} kdResourceVerberService
     * @param {!Array} $state
     * @param {!Array} confirmDialogService
     * @return {undefined}
     */
    transform.prototype.onUpdateCardValue = function(kdResourceVerberService, $state, confirmDialogService) {
      if (void 0 === $state) {
        /** @type {boolean} */
        $state = false;
      }
      if (void 0 === confirmDialogService) {
        /** @type {boolean} */
        confirmDialogService = false;
      }
      kdResourceVerberService.updateCardValue();
    };
    /**
     * @param {?} scope
     * @param {undefined} c
     * @return {?}
     */
    transform.prototype.giveCard = function(scope, c) {
      var data = scope.addCard(c);
      return scope.dealCard(data, this._settings.fastPlay);
    };
  }(Tokenizer), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var _syncModel = (function(width) {
    /**
     * @return {?}
     */
    function TreeNode10() {
      return null !== width && width.apply(this, arguments) || this;
    }
    getYPosition(TreeNode10, width);
  }(exports.Model), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var preventer = (function(item) {
    /**
     * @param {!HTMLElement} obj
     * @param {?} type
     * @param {number} name
     * @return {?}
     */
    function model(obj, type, name) {
      if (void 0 === name) {
        /** @type {number} */
        name = 1;
      }
      var self = item.call(this, obj, type) || this;
      var items = self.getStartEvents();
      /** @type {number} */
      var i = 0;
      var items_length = items.length;
      for (; i < items_length; i++) {
        obj.addEventListener(items[i], function() {
          return self.onGameStarted();
        });
      }
      return self._carouselManager = self.createCarouselManger(self._entity, name), self;
    }
    _syncModel(model, item);
    /**
     * @return {undefined}
     */
    model.prototype.hideOnStart = function() {
      if (this._running && this._enabled) {
        this.onContinue();
      }
    };
    /**
     * @param {string} str
     * @return {undefined}
     */
    model.prototype.show = function(str) {
      item.prototype.show.call(this, str);
      if (str) {
        this.activate();
      } else {
        this.deactivate();
      }
    };
    /**
     * @param {number} a
     * @param {number} val
     * @return {?}
     */
    model.prototype.createCarouselManger = function(a, val) {
      return new tree.CarouselManager(a, val, 800);
    };
    /**
     * @return {undefined}
     */
    model.prototype.activate = function() {
      this._carouselManager.controller.activate();
    };
    /**
     * @return {undefined}
     */
    model.prototype.deactivate = function() {
      this._carouselManager.controller.deactivate();
    };
    /**
     * @return {undefined}
     */
    model.prototype.onGameStarted = function() {
      item.prototype.onGameStarted.call(this);
      this.hideOnStart();
    };
  }(self.SplashManager), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var PistonProcessSpawner = function(fn) {
    /**
     * @param {?} name
     * @param {?} n
     * @param {?} msg
     * @param {?} data
     * @param {?} c
     * @return {?}
     */
    function e(name, n, msg, data, c) {
      var recompile_shader = fn.call(this, n, msg, data, c) || this;
      return recompile_shader._stopAtBonusWin = true, recompile_shader._bonusEnabled = name, recompile_shader;
    }
    return preventer(e, fn), Object.defineProperty(e.prototype, "stopAtBonusWin", {
      get : function() {
        return this._stopAtBonusWin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "bonusEnabled", {
      get : function() {
        return this._bonusEnabled;
      },
      enumerable : true,
      configurable : true
    }), e.prototype.toggleStopAtBonusWin = function() {
      /** @type {boolean} */
      this._stopAtBonusWin = !this._stopAtBonusWin;
      this.notify();
    }, e.prototype.serialize = function(request) {
      fn.prototype.serialize.call(this, request);
      request.serializeObject("_stopAtBonusWin", this);
      request.serializeObject("_bonusEnabled", this);
    }, e;
  }(tree.AutoplaySettings);
  var encodeVInt = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PseudoStateKind = function(size) {
    /**
     * @return {?}
     */
    function value() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return encodeVInt(value, size), value.GROUP_NONE = 0, value.GROUP_BET = 1, value.GROUP_CONTINUE = 2, value.GROUP_EXTRABALL = 3, value.GROUP_COLLECT = 4, value;
  }(self.ShowButtonsEvent);
  var selectExcerpt = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var question_instance = function(stream) {
    /**
     * @param {number} key
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    function message(key, index, data) {
      var self = stream.call(this, message.NUMBER) || this;
      return self._number = key, self._ticket = index, self._marks = data, self;
    }
    return selectExcerpt(message, stream), Object.defineProperty(message.prototype, "number", {
      get : function() {
        return this._number;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(message.prototype, "ticket", {
      get : function() {
        return this._ticket;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(message.prototype, "marks", {
      get : function() {
        return this._marks;
      },
      enumerable : true,
      configurable : true
    }), message.NUMBER = "NUMBER", message;
  }(presenter.FeatureAwardEvent);
  var sgf_write_variantion = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var TypeProto = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t;
  }();
  var AsyncVDOMBuilder = function(output) {
    /**
     * @param {?} key
     * @param {!Object} value
     * @return {?}
     */
    function Type(key, value) {
      var self = output.call(this, Type.NEARHIT) || this;
      return self._ticket = key, self._patterns = value, self;
    }
    return sgf_write_variantion(Type, output), Object.defineProperty(Type.prototype, "ticket", {
      get : function() {
        return this._ticket;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Type.prototype, "patterns", {
      get : function() {
        return this._patterns;
      },
      enumerable : true,
      configurable : true
    }), Type.NEARHIT = "NEARHIT", Type;
  }(presenter.FeatureAwardEvent);
  var setstr = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Menu = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t;
  }();
  var Program = function(s) {
    /**
     * @param {?} $el
     * @param {!Object} val
     * @param {?} setting
     * @param {boolean} n
     * @return {?}
     */
    function set($el, val, setting, n) {
      var self = s.call(this, set.WININFO) || this;
      return self._ticket = $el, self._patterns = val, self._bonusAmount = setting, self._active = n, self;
    }
    return setstr(set, s), Object.defineProperty(set.prototype, "ticket", {
      get : function() {
        return this._ticket;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "patterns", {
      get : function() {
        return this._patterns;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "bonusAmount", {
      get : function() {
        return this._bonusAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "active", {
      get : function() {
        return this._active;
      },
      enumerable : true,
      configurable : true
    }), set.WININFO = "WININFO", set;
  }(presenter.FeatureAwardEvent);
  var j = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var category = function(t) {
    /**
     * @return {?}
     */
    function n() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return j(n, t), n;
  }(presenter.Feature);
  var mod = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Constructor = function(t) {
    /**
     * @param {?} inner
     * @param {?} type
     * @param {?} delay
     * @param {!Function} fn
     * @return {?}
     */
    function exports(inner, type, delay, fn) {
      var $ = t.call(this, inner, type, delay) || this;
      return $._winManager = fn, $;
    }
    return mod(exports, t), exports.prototype.processAwardHandler = function(type) {
      var action = this._awards[this._awards.length - 1];
      switch(action.awardType) {
        case question_instance.NUMBER:
          return void this.processNumberHandler(type, action, false);
        case AsyncVDOMBuilder.NEARHIT:
          return void this.processNearHitHandler(type, action);
        case Program.WININFO:
          return void this.processWinHandler(type, action);
      }
      t.prototype.processAwardHandler.call(this, type);
    }, exports.prototype.processNumberHandler = function(type, fn, n) {
      this._winManager.processNumberHandler(type, fn, n);
    }, exports.prototype.processNearHitHandler = function(event, parameters) {
      this._winManager.processNearHitHandler(event, parameters);
    }, exports.prototype.processWinHandler = function(type, json) {
      this._winManager.processWinHandler(type, json.ticket, json.patterns, json.bonusAmount, json.active);
    }, exports.FEATUREID = "draw", exports;
  }(category);
  var add = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var OptimizerContext = function(validate) {
    /**
     * @param {?} value
     * @return {?}
     */
    function val(value) {
      var elem = validate.call(this, val.REMAININGBALLS) || this;
      return elem._remainingBalls = value, elem;
    }
    return add(val, validate), Object.defineProperty(val.prototype, "remainingBalls", {
      get : function() {
        return this._remainingBalls;
      },
      enumerable : true,
      configurable : true
    }), val.REMAININGBALLS = "REMAININGBALLS", val;
  }(presenter.FeatureAwardEvent);
  var when = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Popup = function(fun) {
    /**
     * @param {!HTMLElement} result
     * @param {?} err
     * @param {?} i
     * @param {?} elem
     * @param {?} e
     * @param {?} a
     * @param {!Object} b
     * @param {number} status
     * @return {?}
     */
    function value(result, err, i, elem, e, a, b, status) {
      if (void 0 === status) {
        /** @type {number} */
        status = 12;
      }
      var that = fun.call(this, result, err, i, e) || this;
      return that._possibleValues = [], that._numExtraBalls = status, that._roundHandler = elem, that._ballManager = b, that._betSettings = a, that._lastExtraBallPrice = 0, result.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return that.onSpinStart();
      }), result.addEventListener(self.BuyInStatusEvent.BUYINSTATUS, function(person) {
        return that.onBuyInStatus(person);
      }), that;
    }
    return when(value, fun), value.prototype.onSpinStart = function() {
      /** @type {!Array} */
      this._possibleValues = [];
      /** @type {number} */
      var tableEdgeVirtualId = 0;
      for (; tableEdgeVirtualId < this._numExtraBalls; tableEdgeVirtualId++) {
        this._possibleValues.push(tableEdgeVirtualId + 1);
      }
    }, value.prototype.processAwardHandler = function(link) {
      var allTraps = this;
      var state = this._awards[this._awards.length - 1];
      switch(state.awardType) {
        case question_instance.NUMBER:
          link.execHandler(function(t) {
            return allTraps.extraBallNumberHandler(t);
          });
          break;
        case OptimizerContext.REMAININGBALLS:
          var template = state.remainingBalls;
          this._ballManager.onRemainingBalls(link, template, this._possibleValues);
          var geckoTable = this._awards[this._awards.length - 2];
          this._ballManager.showExtraBallAnim(geckoTable.data, void 0, link);
          break;
        default:
          fun.prototype.processAwardHandler.call(this, link);
      }
    }, value.prototype.selectIntroHandler = function(aNetChannelMessage) {
      var parentItem = this._awards[this._awards.length - 1];
      var isBground = parentItem ? parentItem.data : 0;
      if (this._roundHandler.balance >= isBground * this._betSettings.denomination) {
        this._dispatcher.dispatch(new presenter.FeatureUISelectEvent(value.FEATUREID, this._possibleValues));
        this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_EXTRABALL));
      } else {
        this._dispatcher.dispatch(new presenter.FeatureUISelectEvent(value.FEATUREID, []));
        this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_COLLECT));
      }
      this._ballManager.showExtraBallAward(isBground);
      this._betSettings.setExtraBallPrice(isBground);
      this._roundHandler.notify();
      fun.prototype.selectIntroHandler.call(this, aNetChannelMessage);
    }, value.prototype.onBuyInStatus = function(type) {
      if (this._betSettings.extraBallPrice > 0 && this._roundHandler.currentFunds >= this._betSettings.extraBallPrice * this._betSettings.denomination) {
        this._dispatcher.dispatch(new presenter.FeatureUISelectEvent(value.FEATUREID, this._possibleValues));
        this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_EXTRABALL));
      }
    }, value.prototype.getSelectIntroMessage = function() {
      return "IDS_VB_EXTRABALL_SL";
    }, value.prototype.onSelect = function(items) {
      if (this._ballManager.nextExtraBall(items), this._dispatcher.dispatch(new presenter.FeatureUISelectEvent(value.FEATUREID, [])), this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_NONE)), items > 0) {
        var geckoTable = this._awards[this._awards.length - 1];
        /** @type {number} */
        this._lastExtraBallPrice = geckoTable ? geckoTable.data * this._betSettings.denomination : 0;
        /** @type {boolean} */
        this._betSettings.hideBet = items === this._numExtraBalls;
        this._dispatcher.dispatch(new exports.MegatonEvent(value.SELECT_EVENT));
      }
      fun.prototype.onSelect.call(this, items);
    }, value.prototype.selectOutroHandler = function(aNetChannelMessage) {
      var kermit = this._input.peek();
      if (!kermit || kermit.type != self.SPFundsErrorEvent.SPFUNDSERROR && kermit.type != presenter.FeatureEvent.FEATUREINPUT) {
        var currentValue = this._selects.pop();
        var match = this._possibleValues.indexOf(currentValue);
        if (match >= 0) {
          this._possibleValues.splice(match, 1);
          this._roundHandler.addCost(this._lastExtraBallPrice);
        }
      }
      if (kermit && kermit.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
        this._dispatcher.dispatch(new self.ReqBuyInStatusEvent);
      }
      fun.prototype.selectOutroHandler.call(this, aNetChannelMessage);
    }, value.prototype.extraBallNumberHandler = function(link) {
      var e;
      switch(link.state) {
        case 0:
          var parentItem = this._awards[this._awards.length - 2];
          e = this._awards[this._awards.length - 1];
          this._ballManager.showExtraBallAnim(parentItem ? parentItem.data : 0, e.number, link);
          break;
        default:
          e = this._awards[this._awards.length - 1];
          this.processNumberHandler(link, e, true);
      }
    }, value.FEATUREID = "extraball", value.SELECT_EVENT = "extraball_on_select_event", value;
  }(Constructor);
  var combiFunc = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var node = function(t) {
    /**
     * @return {?}
     */
    function UploaderQueue() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return combiFunc(UploaderQueue, t), UploaderQueue.SPIN = "UISPIN", UploaderQueue.CONTINUE = "UICONTINUE", UploaderQueue.COLLECT = "UIEXTRALBALLCOLLECT", UploaderQueue.NEWCARD = "UINEWCARD", UploaderQueue.EXTRABALL = "UIEXTRABALL", UploaderQueue.EXTRABALL_AVAILABLE = "UIEXTRABALL_AVAILABLE", UploaderQueue.MOBILE_MENU = "UIMOBILEMENU", UploaderQueue.TOGGLE_FAST_PLAY = "UITOGGLEFASTPLAY", UploaderQueue;
  }(tree.CommonUIEvent);
  var defineProperty = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SCORMAPI = function($) {
    /**
     * @param {!HTMLElement} win
     * @param {?} data
     * @param {?} key
     * @param {!Object} value
     * @return {?}
     */
    function constructor(win, data, key, value) {
      var me = $.call(this, win, data, key) || this;
      return me._roundHandler = key, me._config = value, win.addEventListener(presenter.SpinEndEvent.SPINEND, function(eventName) {
        return me.onWin(eventName);
      }), win.addEventListener(presenter.FeatureUISelectEvent.FEATUREUISELECT, function(t) {
        return me.onFeatureUISelect(t);
      }), win.addEventListener(presenter.BonusEvent.BONUS_STARTED, function() {
        return me.onBonusWin();
      }), win.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function() {
        return me.onJackpotWin();
      }), win.addEventListener(self.RealityCheckEvent.REALITYCHECKEVENT, function() {
        return me.onRealityCheck();
      }), win.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, function() {
        return me.onExternalMessage();
      }), me;
    }
    return defineProperty(constructor, $), constructor.prototype.onShowButtons = function(vertex) {
      $.prototype.onShowButtons.call(this, vertex);
      /** @type {boolean} */
      var uboard = vertex.groupId === PseudoStateKind.GROUP_EXTRABALL || vertex.groupId === PseudoStateKind.GROUP_COLLECT;
      this.enableTrigger(constructor.STATE_EXTRABALL, uboard, 10);
    }, constructor.prototype.onFeatureUISelect = function(result) {
      if (result.featureId !== Popup.FEATUREID) {
        this._bonusValues = result.possibleValues;
        this.enableTrigger(constructor.STATE_BONUS, this._bonusValues && this._bonusValues.length > 0, 40);
      }
    }, constructor.prototype.onTrigger = function() {
      $.prototype.onTrigger.call(this);
      if (this._triggerState & constructor.STATE_EXTRABALL && this._running) {
        this.triggerExtraBall();
      }
      if (this._triggerState & constructor.STATE_BONUS && this._running) {
        this.triggerBonus();
      }
    }, constructor.prototype.triggerPlay = function() {
      this._dispatcher.dispatch(new node(node.SPIN));
      $.prototype.triggerPlay.call(this);
    }, constructor.prototype.triggerExtraBall = function() {
      this._dispatcher.dispatch(new node(node.COLLECT));
    }, constructor.prototype.triggerBonus = function() {
      /** @type {number} */
      var id = Math.floor(Math.random() * this._bonusValues.length);
      var password = this._bonusValues[id];
      this._dispatcher.dispatch(new presenter.FeatureUISelectedEvent(password));
    }, constructor.prototype.onBonusWin = function() {
      if (this._autoplaySettings.stopAtBonusWin) {
        this.stop();
      }
    }, constructor.prototype.onRealityCheck = function() {
      if (!this._config.autoPlayResume) {
        this.stop();
      }
    }, constructor.prototype.onExternalMessage = function() {
      if (!this._config.autoPlayResume) {
        this.stop();
      }
    }, constructor.prototype.onWin = function(event) {
      var clickedLink = event.roundWonAmount;
      if (this._autoplaySettings.stopAtAnyWin && clickedLink > 0) {
        this.stop();
      } else {
        if (this._autoplaySettings.stopAtWin && clickedLink > this._autoplaySettings.stopAtWinValue) {
          this.stop();
        }
      }
    }, constructor.STATE_EXTRABALL = 2, constructor.STATE_BONUS = 4, constructor;
  }(tree.AutoplayHandler);
  var currentRenderer = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ctx = function(self) {
    /**
     * @param {?} key
     * @param {?} i
     * @param {number} value
     * @param {?} options
     * @param {?} data
     * @return {?}
     */
    function data(key, i, value, options, data) {
      if (void 0 === value) {
        /** @type {number} */
        value = 0;
      }
      var s = self.call(this, key, i, value, options, data) || this;
      return s._extraBallPrice = 0, s._showExtraBallBet = false, s._hideBet = false, s._activeCards = (1 << s._maxLines) - 1, s;
    }
    return currentRenderer(data, self), Object.defineProperty(data.prototype, "activeCards", {
      get : function() {
        return this._activeCards;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.setActiveCards = function(value) {
      /** @type {number} */
      this._activeCards = value;
      /** @type {number} */
      var val = 0;
      /** @type {number} */
      var offset = 0;
      for (; offset < 4; offset++) {
        if (0 != (1 << offset & value)) {
          val++;
        }
      }
      /** @type {boolean} */
      var notEmpty = this._lines !== val;
      /** @type {number} */
      this._lines = val;
      if (notEmpty) {
        this.notify(presenter.VideoSlotBetSettings.LINES);
      }
    }, data.prototype.activateCard = function(bitsInLeft) {
      /** @type {number} */
      var bitmaskOccupies = 1 << bitsInLeft;
      if (0 == (this._activeCards & bitmaskOccupies)) {
        this._lines++;
        this._activeCards |= bitmaskOccupies;
        this.notify(presenter.VideoSlotBetSettings.LINES);
      }
    }, data.prototype.deactivateCard = function(bitsInLeft) {
      /** @type {number} */
      var bitmaskOccupies = 1 << bitsInLeft;
      if (0 != (this._activeCards & bitmaskOccupies)) {
        this._lines--;
        this._activeCards &= ~bitmaskOccupies;
        this.notify(presenter.VideoSlotBetSettings.LINES);
      }
    }, data.prototype.toggleCard = function(bitsInLeft) {
      /** @type {number} */
      var bitmaskOccupies = 1 << bitsInLeft;
      /** @type {boolean} */
      var n = 0 != (this._activeCards & bitmaskOccupies);
      if (!(n && this._lines < 2)) {
        if (n) {
          this.deactivateCard(bitsInLeft);
        } else {
          this.activateCard(bitsInLeft);
        }
      }
    }, data.prototype.incLines = function(p1__3354_SHARP_) {
      if (void 0 === p1__3354_SHARP_ && (p1__3354_SHARP_ = true), !(this._lock & presenter.LockType.LINE) && this._enabled) {
        if (this._lines === this._maxLines) {
          /** @type {number} */
          this._activeCards = 1;
        } else {
          /** @type {number} */
          var i = 0;
          for (; i < this._maxLines; i++) {
            if (0 == (this._activeCards & 1 << i)) {
              this._activeCards |= 1 << i;
              /** @type {number} */
              this._activeCards = Math.min(data.MAX_ACTIVE_CARD, this._activeCards);
              break;
            }
          }
        }
        self.prototype.incLines.call(this, p1__3354_SHARP_);
      }
    }, data.prototype.decLines = function(r) {
      if (void 0 === r && (r = true), !(this._lock & presenter.LockType.LINE) && this._enabled) {
        if (1 === this._lines) {
          /** @type {number} */
          this._activeCards = (1 << this._maxLines) - 1;
        } else {
          /** @type {number} */
          var i = this._maxLines - 1;
          for (; i >= 0; i--) {
            if (0 != (this._activeCards & 1 << i)) {
              this._activeCards &= ~(1 << i);
              /** @type {number} */
              this._activeCards = Math.max(data.MIN_ACTIVE_CARD, this._activeCards);
              break;
            }
          }
        }
        self.prototype.decLines.call(this, r);
      }
    }, data.prototype.serialize = function(request) {
      self.prototype.serialize.call(this, request);
      request.serializeObject("_activeCards", this);
    }, data.prototype.setExtraBallPrice = function(isBgroundImg) {
      /** @type {boolean} */
      this._showExtraBallBet = true;
      /** @type {number} */
      this._extraBallPrice = isBgroundImg;
    }, Object.defineProperty(data.prototype, "extraBallPrice", {
      get : function() {
        return this._extraBallPrice;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._extraBallPrice = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "showExtraBallBet", {
      get : function() {
        return this._showExtraBallBet;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._showExtraBallBet = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(data.prototype, "hideBet", {
      get : function() {
        return this._hideBet;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._hideBet = mymuted;
      },
      enumerable : true,
      configurable : true
    }), data.prototype.setServerAnswerBetValues = function(val, k, n) {
      /** @type {number} */
      var state = 0;
      /** @type {number} */
      state = state | (this._coins === val ? 0 : presenter.VideoSlotBetSettings.COINS);
      this._coins = val;
      /** @type {number} */
      this._activeCards = k;
      /** @type {number} */
      var alines = 0;
      /** @type {number} */
      var j = 0;
      for (; j < 4; j++) {
        if (0 != (1 << j & k)) {
          alines++;
        }
      }
      /** @type {number} */
      state = state | (this._lines === alines ? 0 : presenter.VideoSlotBetSettings.LINES);
      /** @type {number} */
      this._lines = alines;
      var diffVector = presenter.VideoSlotBetSettings.getClosestValueIndex(n, this._denominations);
      /** @type {number} */
      state = state | (this._denom === diffVector ? 0 : presenter.VideoSlotBetSettings.DENOM);
      this._denom = diffVector;
      self.ResourceManager.getInstance().getCreditFormatter().denomination = this.denomination;
      /** @type {number} */
      self.ResourceManager.getInstance().getMoneyFormatter().lineBet = this.coins * this.denomination;
      if (state > 0) {
        this.notify(state);
      }
    }, data.MIN_ACTIVE_CARD = 1, data.MAX_ACTIVE_CARD = 15, data;
  }(presenter.VideoSlotBetSettings);
  var getDescent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ContentFlowGUIElement = function(size) {
    /**
     * @param {!Image} p
     * @param {string} i
     * @return {?}
     */
    function init(p, i) {
      var that = size.call(this) || this;
      /** @type {string} */
      var key = "ball" + i + "Anim";
      return that._animation = p.getAnimation(key), that._display = p.getDisplay(key), that._textField = p.getTextField(key + ".ball.value"), that.clear(), that;
    }
    return getDescent(init, size), init.prototype.clear = function() {
      this._animation.play("stop");
    }, init.prototype.setValue = function(value) {
      /** @type {number} */
      this._value = value;
      this._textField.setText(String(value));
    }, init.prototype.play = function(name) {
      if (void 0 === name) {
        /** @type {boolean} */
        name = false;
      }
      this._animation.play("move");
      this._display.setAlpha(name ? 0.5 : 1);
    }, init;
  }(exports.Dispatcher);
  var floor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PL$5 = function(value) {
    /**
     * @param {?} pointerId
     * @return {?}
     */
    function s(pointerId) {
      var n = value.call(this) || this;
      return n._betCoins = 1, n;
    }
    return floor(s, value), s.prototype.clear = function() {
      /** @type {number} */
      this._msgIdx = 0;
      /** @type {!Array} */
      this._messages = [];
    }, s.prototype.setValue = function(num) {
      this._message.setText("");
      /** @type {number} */
      this._msgIdx = 0;
    }, s.prototype.showNearHits = function(a22) {
      /** @type {number} */
      this._msgIdx = 0;
      /** @type {!Array} */
      this._messages = [""];
    }, s.prototype.showWin = function(json) {
    }, s.prototype.hideWin = function() {
    }, s.prototype.blink = function(num) {
      if (this._messages.length > 0) {
        var message = this._messages[this._msgIdx];
        this._message.setText(message);
        this.showExtraBallPrice(0 === this._msgIdx);
        this.showExtraBallText(1 === this._msgIdx, 0 === this._msgIdx || 1 === this._msgIdx);
        this._msgIdx++;
        if (this._msgIdx >= this._messages.length) {
          /** @type {number} */
          this._msgIdx = 0;
        }
      }
    }, s.prototype.showExtraBallPrice = function(canCreateDiscussions) {
    }, s.prototype.showExtraBallText = function(formatters, customFormatters) {
    }, s.prototype.showExtraBallAward = function(isBgroundImg, stgs) {
    }, s.prototype.showExtraBallAnim = function(clickRepeater, e) {
      e.complete();
    }, s;
  }(exports.Dispatcher);
  var AsyncPartial = function() {
    /**
     * @param {?} instance
     * @param {number} itemClassName
     * @return {undefined}
     */
    function ScrollList(instance, itemClassName) {
      if (void 0 === itemClassName) {
        /** @type {number} */
        itemClassName = 12;
      }
      /** @type {!Array} */
      this._extraBallButtons = [];
      /** @type {number} */
      var n = 0;
      for (; n < itemClassName; n++) {
        this._extraBallButtons.push(this.createExtraBallButton(instance, n));
      }
      this.disableExtraBallButtons();
    }
    return Object.defineProperty(ScrollList.prototype, "numExtraBalls", {
      get : function() {
        return this._extraBallButtons.length;
      },
      enumerable : true,
      configurable : true
    }), ScrollList.prototype.initButton = function(key, listener) {
      this._extraBallButtons[key].addEventListener(self.ButtonEvent.CLICK, listener);
    }, ScrollList.prototype.clear = function() {
    }, ScrollList.prototype.showExtraBallAward = function(isBgroundImg) {
    }, ScrollList.prototype.disableExtraBallButtons = function() {
      /** @type {number} */
      var i = 0;
      var patchLen = this._extraBallButtons.length;
      for (; i < patchLen; i++) {
        this._extraBallButtons[i].enable(false);
      }
    }, ScrollList.prototype.enableExtraBallButtons = function(j) {
      this.disableExtraBallButtons();
      /** @type {number} */
      var t = 0;
      var d = j.length;
      for (; t < d; t++) {
        this._extraBallButtons[j[t] - 1].enable(true);
      }
    }, ScrollList.prototype.createExtraBallButton = function(toolbar, options) {
      return toolbar.getButton("extraBall" + (options + 1));
    }, ScrollList;
  }();
  var log = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var le = function(params) {
    /**
     * @param {!HTMLElement} root
     * @param {!Object} p
     * @param {?} cb
     * @param {!Object} component
     * @param {!Object} r
     * @return {?}
     */
    function init(root, p, cb, component, r) {
      var that = params.call(this, root) || this;
      /** @type {!Object} */
      that._extraBallView = component;
      /** @type {!Object} */
      that._bigBall = r;
      /** @type {number} */
      var val = 0;
      var doc = component.numExtraBalls;
      for (; val < doc; val++) {
        !function(key, canCreateDiscussions) {
          component.initButton(key, function() {
            return that.onSelected(key + 1);
          });
        }(val);
      }
      return root.addEventListener(presenter.FeatureUISelectEvent.FEATUREUISELECT, function(value) {
        return that.onSelect(value);
      }), root.addEventListener(node.EXTRABALL, function() {
        return that.onExtraBallButton();
      }), root.addEventListener(node.COLLECT, function() {
        return that.onSelected(0);
      }), p.addListener(cb.onBetChange.bind(cb)), that;
    }
    return log(init, params), init.prototype.onSelect = function(result) {
      if (result.featureId === Popup.FEATUREID) {
        this._extraBallView.enableExtraBallButtons(result.possibleValues);
        this._possibleValues = result.possibleValues;
      }
    }, init.prototype.onSelected = function(value) {
      this._dispatcher.dispatch(new presenter.FeatureUISelectedEvent(value));
    }, init.prototype.onExtraBallButton = function() {
      var password = this._possibleValues.length > 0 ? this._possibleValues[0] : 0;
      this._dispatcher.dispatch(new presenter.FeatureUISelectedEvent(password));
    }, init;
  }(exports.EventProcessor);
  var snoise = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SelectionEvent = function(t) {
    /**
     * @param {!Object} x
     * @param {?} y
     * @return {?}
     */
    function s(x, y) {
      var orginData = t.call(this, s.NEXT_BALL) || this;
      return orginData._fastPlay = x, orginData._lastNormalBall = y, orginData;
    }
    return snoise(s, t), Object.defineProperty(s.prototype, "fastPlay", {
      get : function() {
        return this._fastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(s.prototype, "lastNormalBall", {
      get : function() {
        return this._lastNormalBall;
      },
      enumerable : true,
      configurable : true
    }), s.NEXT_BALL = "NEXTBALL", s;
  }(exports.MegatonEvent);
  var fe = function() {
    /**
     * @param {!Object} value
     * @param {!Object} namespace
     * @param {undefined} path
     * @param {number} dest
     * @param {number} show
     * @return {undefined}
     */
    function set(value, namespace, path, dest, show) {
      if (void 0 === dest) {
        /** @type {number} */
        dest = 42;
      }
      if (void 0 === show) {
        /** @type {number} */
        show = 12;
      }
      var _this = this;
      /** @type {!Object} */
      this._betSettings = namespace;
      /** @type {!Object} */
      this._dispatcher = value;
      /** @type {!Array} */
      this._balls = [];
      /** @type {number} */
      var src = 0;
      for (; src < dest; src++) {
        var b = this.createBalls(path, src);
        b.addListener(function(t) {
          return _this.onItemEvent(t);
        });
        this._balls.push(b);
      }
      /** @type {number} */
      this._numExtraBalls = show;
      this._bigBall = this.createBigBall(path);
      this._bigBall.addListener(function(t) {
        return _this.onItemEvent(t);
      });
      this._extraBallView = this.createExtraBallView(path, show);
      this.createBallController();
      this.clear();
    }
    return set.prototype.startRound = function() {
      this.clear();
    }, set.prototype.endRound = function() {
      this._bigBall.clear();
    }, set.prototype.onBetChange = function(gl) {
      if (!gl || gl.isChanged(ctx.COINS) || gl.isChanged(ctx.DENOM) || gl.isChanged(ctx.LINES) || gl.isChanged(ctx.DENOMINATIONS)) {
        this.clear();
      }
    }, set.prototype.onNearHit = function(args) {
      /** @type {number} */
      var e = 0;
      /** @type {number} */
      var id = 0;
      var ld = args.length;
      for (; id < ld; id++) {
        if (this.isActive(id)) {
          var data = args[id];
          var i;
          for (i in data) {
            if (data.hasOwnProperty(i)) {
              /** @type {number} */
              e = e | 1 << data[i].pattern;
            }
          }
        }
      }
      this._bigBall.showNearHits(e);
    }, set.prototype.onWin = function(arg) {
      return this._bigBall.showWin(arg.pattern);
    }, set.prototype.onWinEnd = function() {
      return this._bigBall.hideWin();
    }, set.prototype.onRemainingBalls = function(source, options, result) {
      var ld = options.length < result.length ? options.length : result.length;
      /** @type {number} */
      var score = this._balls.length - this._numExtraBalls;
      /** @type {number} */
      var id = 0;
      for (; id < ld; id++) {
        var slider = this._balls[result[id] + score - 1];
        slider.play(true);
        slider.setValue(options[id]);
      }
      source.complete();
    }, set.prototype.next = function(obj, item) {
      if (!(this._ballIdx < 0)) {
        var newNameField = this._balls[this._ballIdx++];
        newNameField.play();
        newNameField.setValue(obj);
        this._bigBall.setValue(obj);
        /** @type {number} */
        var MaximumFloatingContentRatio = this._balls.length - this._numExtraBalls;
        /** @type {boolean} */
        var mostOfDocumentIsFloat = this._ballIdx > MaximumFloatingContentRatio;
        /** @type {boolean} */
        var checked = MaximumFloatingContentRatio - this._ballIdx == 0;
        if (!mostOfDocumentIsFloat) {
          this._dispatcher.dispatch(new SelectionEvent(item, checked));
        }
      }
    }, set.prototype.showExtraBallAward = function(isBgroundImg) {
      this._extraBallView.showExtraBallAward(isBgroundImg);
      this._bigBall.showExtraBallAward(isBgroundImg, isBgroundImg * this._betSettings.denomination);
    }, set.prototype.nextExtraBall = function(results) {
      /** @type {number} */
      this._ballIdx = results > 0 ? this._balls.length - this._numExtraBalls + results - 1 : -1;
    }, set.prototype.showExtraBallAnim = function(cb, s, self) {
      var allTraps = this;
      if (void 0 !== s) {
        this._bigBall.setValue(s);
      }
      self.startHandler(function(t) {
        return allTraps.extraBallAnimHandler(t);
      }, cb);
    }, set.prototype.blink = function(num) {
      if (num) {
        this._bigBall.blink(num);
      }
    }, set.prototype.isActive = function(type) {
      return 0 != (this._betSettings.activeCards & 1 << type);
    }, set.prototype.onItemEvent = function(type) {
      this._dispatcher.dispatch(type);
    }, set.prototype.createBalls = function(el, position) {
      return new ContentFlowGUIElement(el, position);
    }, set.prototype.createBigBall = function(x) {
      return new PL$5(x);
    }, set.prototype.createExtraBallView = function(viewPath, opts) {
      return new AsyncPartial(viewPath, opts);
    }, set.prototype.createBallController = function() {
      new le(this._dispatcher, this._betSettings, this, this._extraBallView, this._bigBall);
    }, set.prototype.clear = function() {
      /** @type {number} */
      this._ballIdx = 0;
      this._bigBall.clear();
      this._extraBallView.clear();
      var i;
      for (i in this._balls) {
        if (this._balls.hasOwnProperty(i)) {
          this._balls[i].clear();
        }
      }
    }, set.prototype.extraBallAnimHandler = function(ele) {
      this._bigBall.showExtraBallAnim(ele.data, ele);
    }, set;
  }();
  var installNativeEvent$2 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var DooberTooltip = function(t) {
    /**
     * @return {?}
     */
    function n() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return installNativeEvent$2(n, t), n;
  }(presenter.VideoSlotBetController);
  var findSimilarPaths = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Binder = function(output) {
    /**
     * @param {!HTMLElement} e
     * @param {?} i
     * @return {?}
     */
    function left(e, i) {
      var afterKeyDownCalls = output.call(this, e, i) || this;
      return e.addEventListener(presenter.GambleEvent.GAMBLE_COLLECT, function(pendingCall) {
        return afterKeyDownCalls.onCollect(pendingCall);
      }), afterKeyDownCalls;
    }
    return findSimilarPaths(left, output), left.prototype.onCollect = function(pc) {
      if (!this._roundHandler.running) {
        this._roundHandler.balanceModeUpdate();
      }
    }, left;
  }(tree.BonusBalanceHandler);
  var testImportWithCommonJSTransform = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var oi = function(output) {
    /**
     * @param {?} callback
     * @param {?} id
     * @return {?}
     */
    function source(callback, id) {
      return output.call(this, callback, id) || this;
    }
    return testImportWithCommonJSTransform(source, output), source.prototype.createBonusBalanceHandler = function($rootScope, $state) {
      return new Binder($rootScope, $state);
    }, source;
  }(tree.BonusBalanceManager);
  !function(Fonts) {
    /** @type {string} */
    Fonts[Fonts.NORMAL = 0] = "NORMAL";
    /** @type {string} */
    Fonts[Fonts.NEARHIT = 1] = "NEARHIT";
    /** @type {string} */
    Fonts[Fonts.BIGNEARHIT = 2] = "BIGNEARHIT";
    /** @type {string} */
    Fonts[Fonts.BONUSNEARHIT = 3] = "BONUSNEARHIT";
    /** @type {string} */
    Fonts[Fonts.MARKED = 4] = "MARKED";
    /** @type {string} */
    Fonts[Fonts.WIN = 5] = "WIN";
    /** @type {string} */
    Fonts[Fonts.POSTWIN = 6] = "POSTWIN";
  }(attributes || (attributes = {}));
  var Projector;
  var TweenPlugin = function() {
    /**
     * @param {undefined} value
     * @param {!Array} data
     * @return {undefined}
     */
    function self(value, data) {
      /** @type {!Array} */
      this._layers = data;
      var directory_epub = self.ResourceManager.getInstance().getEntityManager();
      this._entity = directory_epub.create("CardNumber");
      this._textFieldValue1Normal = this._entity.getTextField("value1Normal");
      this._textFieldValue1Win = this._entity.getTextField("value1Win");
      this._textFieldValue2 = this._entity.getTextField("value2");
      this._textFieldWin = this._entity.getTextField("winAmount");
      this._displayValue1Normal = this._entity.getDisplay("value1Normal");
      this._displayValue1Win = this._entity.getDisplay("value1Win");
      this._displayValue2 = this._entity.getDisplay("value2");
      this._displayWin = this._entity.getDisplay("winAmount");
      this._valueAnimation = this._entity.getAnimation("value1Anim");
      this._bgAnim = this._entity.getAnimation("background");
      /** @type {string} */
      this._entityName = String(value);
      /** @type {number} */
      this._layerId = 0;
      data[0].add(this._entityName, this._entity);
      this.setPosition(value);
      this.setNumber(value);
      this.clear();
    }
    return self.prototype.setPosition = function(position) {
      var wave = this._entity.getTransform("");
      wave.setX(55 + 72 * Math.floor(position / 3));
      wave.setY(64 + position % 3 * 53);
    }, self.prototype.clear = function() {
      this._winState = attributes.NORMAL;
      this.update();
    }, self.prototype.setNumber = function(value) {
      if (this._value !== value) {
        /** @type {!Object} */
        this._value = value;
        this._textFieldValue1Normal.setText(String(value));
        this._textFieldValue1Win.setText(String(value));
        this._textFieldValue2.setText(String(value));
        this.update();
      }
    }, self.prototype.mark = function() {
      if (this._winState < attributes.MARKED) {
        this._winState = attributes.MARKED;
        this.update();
      }
    }, self.prototype.showExtraBall = function(value) {
      if (value === this._value) {
        this._valueAnimation.play("extra");
        this._bgAnim.play("extra");
      }
    }, self.prototype.nearHit = function(note, dir, t) {
      var a = attributes.NEARHIT;
      a = dir ? attributes.BIGNEARHIT : a;
      a = t ? attributes.BONUSNEARHIT : a;
      this._winState = a;
      /** @type {string} */
      var message = String(note);
      if (t) {
        /** @type {string} */
        message = message + "+B";
      }
      this._textFieldWin.setText(message);
      this.update();
    }, self.prototype.win = function() {
      this._winState = attributes.WIN;
      this.update();
    }, self.prototype.postWin = function() {
      this._winState = attributes.POSTWIN;
      this.update();
    }, self.prototype.blink = function(value) {
      switch(this._winState) {
        case attributes.NEARHIT:
          this._displayValue2.setColor(value ? 38414 : 16767232);
          this._displayWin.setColor(value ? 0 : 16777215);
          this._bgAnim.play(value ? "near1" : "near2");
      }
    }, self.prototype.setLayer = function(layerId) {
      if (this._layerId !== layerId) {
        this._layers[this._layerId].remove(this._entityName);
        /** @type {string} */
        this._layerId = layerId;
        this._layers[this._layerId].add(this._entityName, this._entity);
      }
    }, self.prototype.update = function() {
      /** @type {null} */
      var type = null;
      switch(this._winState) {
        case attributes.NORMAL:
          this.updateValue(false, false);
          /** @type {string} */
          type = "normal";
          break;
        case attributes.MARKED:
          this.updateValue(false, false);
          /** @type {string} */
          type = "x";
          break;
        case attributes.WIN:
          this.updateValue(false, true);
          /** @type {string} */
          type = "win";
          break;
        case attributes.POSTWIN:
          this.updateValue(false, true);
          /** @type {string} */
          type = "postwin";
          break;
        case attributes.NEARHIT:
          this.updateValue(true, false);
          /** @type {string} */
          type = "near2";
          break;
        case attributes.BIGNEARHIT:
        case attributes.BONUSNEARHIT:
          this._displayValue2.setColor(16645376);
          this._displayWin.setColor(0);
          this.updateValue(true, false);
          /** @type {string} */
          type = "nearHit";
      }
      this._bgAnim.play(type);
    }, self.prototype.updateValue = function(val, id) {
      this._displayValue1Normal.setVisible(!val && !id);
      this._displayValue1Win.setVisible(!val && id);
      this._displayValue2.setVisible(val);
      this._displayWin.setVisible(val);
      this.setLayer(val ? 1 : 0);
    }, self;
  }();
  var RenderableList = function() {
    /**
     * @param {!Object} t
     * @param {number} b
     * @param {!Object} n
     * @param {!Object} elem
     * @return {undefined}
     */
    function getBoundingClientRectCompat(t, b, n, elem) {
      /** @type {!Object} */
      this.top = t;
      /** @type {number} */
      this.bottom = b;
      /** @type {!Object} */
      this.left = n;
      /** @type {!Object} */
      this.right = elem;
      t.play("hide");
      b.play("hide");
      n.play("hide");
      elem.play("hide");
    }
    return getBoundingClientRectCompat;
  }();
  var Thing = function() {
    /**
     * @param {!Image} p
     * @param {number} area
     * @param {number} value
     * @param {string} options
     * @return {undefined}
     */
    function init(p, area, value, options) {
      if (void 0 === value) {
        /** @type {number} */
        value = 0;
      }
      /** @type {number} */
      this._coins = 1;
      /** @type {boolean} */
      this._enabled = true;
      /** @type {string} */
      var name = "card" + (area + 1);
      this._panelAnim = p.getAnimation(name);
      this._numOverlay = p.getHierarchy(name + ".numberOverlay");
      this._numUnderlay = p.getHierarchy(name + ".numberUnderlay");
      this._textField = p.getTextField(name + ".value");
      this._button = p.getButton(name + ".onOffBtn");
      /** @type {!Array} */
      this._winLines = [];
      /** @type {!Array} */
      this._winAnims = [];
      /** @type {number} */
      var i = 0;
      for (; i < value; i++) {
        var falseySection = p.getDisplay(name + ".winlines.winline" + (i + 1));
        this._winLines.push(falseySection);
        var end = options && i < options.length ? options[i] : null;
        var c = end ? p.getAnimation(name + "." + end) : null;
        if (c) {
          c.play("stop");
        }
        this._winAnims.push(c);
      }
      /** @type {!Array} */
      this._numbers = [];
      /** @type {number} */
      var curParName = 0;
      for (; curParName < 15; curParName++) {
        this._numbers[curParName] = this.createNumber(curParName);
      }
      /** @type {!Array} */
      this._frames = [];
      /** @type {number} */
      var contentId = 1;
      for (; contentId <= 5; contentId++) {
        /** @type {number} */
        var pluginId = 1;
        for (; pluginId <= 3; pluginId++) {
          /** @type {string} */
          var linkCssId = name + ".winFrames.frame" + pluginId + "_" + contentId;
          this._frames.push(new RenderableList(p.getAnimation(linkCssId + ".top"), p.getAnimation(linkCssId + ".bottom"), p.getAnimation(linkCssId + ".left"), p.getAnimation(linkCssId + ".right")));
        }
      }
      this._mainTask = new exports.Task;
      /** @type {null} */
      this._animatorTask = null;
      /** @type {number} */
      this._winPattern = -1;
      this.clear();
    }
    return init.prototype.initButton = function(value) {
      this._button.addEventListener(self.ButtonEvent.CLICK, value);
    }, init.prototype.enable = function(value) {
      /** @type {boolean} */
      this._enabled = value;
      this._button.select(!value);
      this.update();
    }, init.prototype.clear = function() {
      this.setMarks(0);
      this.setNearHits([]);
      /** @type {!Array} */
      this._winInfo = [];
      this.showPostWin([]);
      this.update();
      /** @type {number} */
      var j = 0;
      var imagesLen = this._numbers.length;
      for (; j < imagesLen; j++) {
        this._numbers[j].clear();
      }
    }, init.prototype.setValues = function(a) {
      /** @type {number} */
      var j = 0;
      var startLen = a.length;
      for (; j < startLen; j++) {
        this._numbers[j].setNumber(a[j]);
      }
    }, init.prototype.setMarks = function(width) {
      /** @type {number} */
      var j = 0;
      for (; j < 15; j++) {
        if (1 & width) {
          this._numbers[j].mark();
        }
        /** @type {number} */
        width = width >> 1;
      }
    }, init.prototype.setNearHits = function(s) {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._numbers.length;
      for (; j < imagesLen; j++) {
        /** @type {number} */
        var i = 0;
        /** @type {boolean} */
        var result = false;
        /** @type {boolean} */
        var baseDirEntry = false;
        /** @type {number} */
        var memberTypes = 1 << j;
        /** @type {number} */
        var l = 0;
        var strLen = s.length;
        for (; l < strLen; l++) {
          var m = s[l];
          if (0 != (memberTypes & m.missingBits)) {
            i = i + m.winAmount;
            result = result || this.isBonusNearHit(m.pattern);
            baseDirEntry = baseDirEntry || this.isBigNearHit(m.winAmount);
          }
        }
        if (i > 0) {
          this._numbers[j].nearHit(i, baseDirEntry, result);
        }
      }
      /** @type {!Array} */
      this._nearHitInfo = s;
    }, init.prototype.setWinInfo = function(id, h) {
      /** @type {number} */
      var newValue = 0;
      /** @type {number} */
      var i = 0;
      /** @type {!Object} */
      var params = id;
      for (; i < params.length; i++) {
        newValue = newValue + params[i].winAmount;
      }
      if (0 === this._winInfo.length && newValue > 0 && this._enabled && this._panelAnim.play("win"), newValue > 0) {
        /** @type {string} */
        var value = String(newValue);
        if (h > 0) {
          /** @type {string} */
          value = value + (" + " + h);
        }
        this._textField.setText(value);
        this._textField.setArgs("");
      }
      /** @type {!Object} */
      this._winInfo = id;
    }, init.prototype.showExtraBall = function(value) {
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._numbers;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].showExtraBall(value);
      }
    }, init.prototype.showWin = function(json, type) {
      var window = this;
      /** @type {number} */
      var x = 0;
      /** @type {number} */
      var i = 0;
      var inputsSize = this._nearHitInfo.length;
      /** @type {number} */
      var p = 0;
      var s = json.length;
      for (; p < s; p++) {
        var obj = json[p];
        if (!(!this.hasBorder(obj.pattern) && type)) {
          /** @type {number} */
          x = x | obj.winBits;
        }
        for (; i < inputsSize && !(this._nearHitInfo[i].pattern >= obj.pattern);) {
          i++;
        }
        if (i < inputsSize && this._nearHitInfo[i].pattern === obj.pattern && (this._nearHitInfo.splice(i, 1), inputsSize--, this._winLines[obj.pattern].setVisible(false)), type) {
          this.hideWin();
          this._winPattern = obj.pattern;
          if (this._winAnims[this._winPattern]) {
            this._mainTask.startHandler(function(t) {
              return window.winHandler(t);
            });
          }
        }
      }
      return this.showBorders(x), this._enabled;
    }, init.prototype.hideWin = function() {
      if (this._winPattern >= 0) {
        var buttons = this._winAnims[this._winPattern];
        /** @type {number} */
        this._winPattern = -1;
        if (this._animatorTask) {
          this._animatorTask.complete();
        }
        if (buttons) {
          buttons.play("stop");
        }
      }
    }, init.prototype.showPostWin = function(r) {
      /** @type {number} */
      var j = 0;
      var n = this._winLines.length;
      for (; j < n; j++) {
        this._winLines[j].setVisible(false);
      }
      /** @type {number} */
      var performedAtLeastOneReduction = 0;
      /** @type {number} */
      j = 0;
      n = r.length;
      for (; j < n; j++) {
        var state = r[j];
        /** @type {number} */
        performedAtLeastOneReduction = performedAtLeastOneReduction | state.winBits;
        this._winLines[state.pattern].setVisible(true);
      }
      /** @type {number} */
      j = 0;
      n = this._numbers.length;
      for (; j < n; j++) {
        if (1 << j & performedAtLeastOneReduction) {
          this._numbers[j].postWin();
        }
      }
      this.showBorders(0);
      /** @type {boolean} */
      this._postWinMode = true;
    }, init.prototype.blink = function(item) {
      /** @type {number} */
      var i = 0;
      var listsLen = this._numbers.length;
      for (; i < listsLen; i++) {
        this._numbers[i].blink(item);
      }
      /** @type {number} */
      i = 0;
      listsLen = this._nearHitInfo.length;
      for (; i < listsLen; i++) {
        var p = this._nearHitInfo[i].pattern;
        this._winLines[p].setVisible(item);
      }
    }, init.prototype.setCoins = function(val) {
      this._coins = val;
      this.update();
    }, init.prototype.enableButton = function(enable) {
      this._button.enable(enable);
    }, init.prototype.createNumber = function(propName) {
      return new TweenPlugin(propName, [this._numUnderlay, this._numOverlay]);
    }, init.prototype.update = function() {
      this._panelAnim.play(this._enabled ? "bet" : "inactive");
      this._textField.setText("IDS_MENU_BET");
      if (this._enabled) {
        this._textField.setArgs("> " + this._coins);
      } else {
        this._textField.setArgs("");
      }
    }, init.prototype.isBigNearHit = function(canCreateDiscussions) {
      return false;
    }, init.prototype.isBonusNearHit = function(canCreateDiscussions) {
      return false;
    }, init.prototype.hasBorder = function(msg) {
      return true;
    }, init.prototype.showBorders = function(n) {
      var value;
      var text;
      var is_spoiled;
      var areaVisible;
      /** @type {number} */
      var i = 0;
      var ncells = this._numbers.length;
      for (; i < ncells; i++) {
        if (value = text = is_spoiled = areaVisible = false, 1 << i & n) {
          this._numbers[i].win();
          /** @type {number} */
          var vertID = i % 3;
          /** @type {boolean} */
          value = 0 === vertID || 0 == (n & 1 << i - 1);
          /** @type {boolean} */
          text = 2 === vertID || 0 == (n & 1 << i + 1);
          /** @type {boolean} */
          is_spoiled = 0 == (n & 1 << i - 3);
          /** @type {boolean} */
          areaVisible = 0 == (n & 1 << i + 3);
        }
        this._frames[i].top.play(value ? "show" : "hide");
        this._frames[i].bottom.play(text ? "show" : "hide");
        this._frames[i].left.play(is_spoiled ? "show" : "hide");
        this._frames[i].right.play(areaVisible ? "show" : "hide");
      }
    }, init.prototype.winHandler = function(self) {
      switch(self.state) {
        case 0:
          self.startFunction(this._winAnims[this._winPattern].play, "enter");
          break;
        default:
          if (this._winPattern >= 0) {
            self.startFunction(this._winAnims[this._winPattern].play, "loop");
          }
      }
    }, init;
  }();
  var UniformArray = function() {
    /**
     * @param {!Image} node
     * @param {number} renderer
     * @param {number} domSettingsReader
     * @param {?} optionsReaderFactory
     * @param {string} container
     * @return {undefined}
     */
    function Grid(node, renderer, domSettingsReader, optionsReaderFactory, container) {
      /** @type {number} */
      this._patternBits = domSettingsReader;
      this._odds = optionsReaderFactory;
      /** @type {string} */
      this._highlightColor = container;
      /** @type {number} */
      this._coins = 1;
      /** @type {string} */
      var key = "grid" + (renderer + 1);
      this._animation = node.getAnimation(key);
      this._valueText = node.getTextField(key + ".value");
      /** @type {string} */
      this._animName = "winline" + (renderer + 1);
      /** @type {!Array} */
      this._cells = [];
      /** @type {number} */
      var idx = 0;
      for (; idx < 15; idx++) {
        var cellStyler = node.getAnimation(key + ".cell" + (idx + 1));
        this._cells.push(cellStyler);
      }
      this._textStyle = new self.TextStyle;
      /** @type {string} */
      this._normalColor = "#ffffff";
      /** @type {!Array} */
      this._nearHit = new Array(4);
      /** @type {!Array} */
      this._win = new Array(4);
      this.clear();
    }
    return Grid.prototype.clear = function() {
      this._animation.play(this._animName);
      this.clearNearHits();
      this.clearWins();
    }, Grid.prototype.clearNearHits = function() {
      /** @type {number} */
      var indexLookupKey = 0;
      for (; indexLookupKey < 4; indexLookupKey++) {
        /** @type {number} */
        this._nearHit[indexLookupKey] = 0;
      }
      this.updateCells();
    }, Grid.prototype.clearWins = function() {
      /** @type {number} */
      var indexLookupKey = 0;
      for (; indexLookupKey < 4; indexLookupKey++) {
        /** @type {boolean} */
        this._win[indexLookupKey] = false;
      }
      this.updateLabel();
    }, Grid.prototype.setNearHit = function(v, minlist, n, elem) {
      if (void 0 === elem) {
        /** @type {boolean} */
        elem = true;
      }
      if (0 != (1 << minlist & this._patternBits)) {
        this._nearHit[v] |= n;
        if (elem) {
          this.updateCells();
        }
      }
    }, Grid.prototype.removeNearHits = function(license, buildingApp) {
      if (void 0 === buildingApp) {
        /** @type {boolean} */
        buildingApp = true;
      }
      /** @type {number} */
      this._nearHit[license] = 0;
      if (buildingApp) {
        this.updateCells();
      }
    }, Grid.prototype.setWin = function(t, xgh2, xgh3, isSlidingUp) {
      if (void 0 === xgh3) {
        /** @type {boolean} */
        xgh3 = true;
      }
      if (void 0 === isSlidingUp) {
        /** @type {boolean} */
        isSlidingUp = false;
      }
      if (0 != (1 << xgh2 & this._patternBits)) {
        /** @type {number} */
        this._win[t] = isSlidingUp;
        if (xgh3) {
          this.updateLabel();
        }
      }
    }, Grid.prototype.removeWins = function(t, isTangent) {
      if (void 0 === isTangent) {
        /** @type {boolean} */
        isTangent = true;
      }
      /** @type {boolean} */
      this._win[t] = false;
      if (isTangent) {
        this.updateLabel();
      }
    }, Grid.prototype.updateCells = function(col) {
      if (void 0 === col) {
        /** @type {boolean} */
        col = false;
      }
      /** @type {number} */
      var row = 0;
      for (; row < 15; row++) {
        this.updateCell(row, col);
      }
    }, Grid.prototype.updateLabel = function() {
      var fullName = this._animName;
      /** @type {boolean} */
      var refreshFunc = false;
      /** @type {number} */
      var refresh_id = 0;
      for (; refresh_id < 4; refresh_id++) {
        refreshFunc = refreshFunc || this._win[refresh_id];
      }
      if (refreshFunc) {
        /** @type {string} */
        fullName = fullName + "win";
      }
      this._animation.play(fullName);
      this._valueText.setText(String(this._odds * this._coins));
      var p = refreshFunc ? this._highlightColor : this._normalColor;
      this._textStyle.fillColor = p;
      this._valueText.setStyle(this._textStyle);
    }, Grid.prototype.blink = function(index) {
      this.updateCells(index);
    }, Grid.prototype.setCoins = function(val) {
      this._coins = val;
      this._valueText.setText(String(this._odds * val));
    }, Grid.prototype.updateCell = function(index, column) {
      /** @type {number} */
      var modifiers = 0;
      /** @type {number} */
      var i = 0;
      for (; i < 4; i++) {
        /** @type {number} */
        modifiers = modifiers | this._nearHit[i];
      }
      /** @type {boolean} */
      var value = 0 != (modifiers & 1 << index);
      this._cells[index].play(value ? column ? "near1" : "near2" : "empty");
    }, Grid;
  }();
  var run = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ClientWrapper = function(f) {
    /**
     * @param {!HTMLElement} renderer
     * @param {!Object} server
     * @param {?} client
     * @param {string} data
     * @param {?} ports
     * @return {?}
     */
    function bind(renderer, server, client, data, ports) {
      var $scope = f.call(this, renderer) || this;
      /** @type {!Object} */
      $scope._betSettings = server;
      /** @type {string} */
      $scope._views = data;
      $scope._smallCardViews = ports;
      server.addListener(client.onBetChange.bind(client));
      renderer.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(value) {
        return $scope.onShowButtons(value);
      });
      /** @type {number} */
      var i = 0;
      var inputsSize = $scope._views.length;
      for (; i < inputsSize; i++) {
        $scope._views[i].initButton($scope._betSettings.toggleCard.bind($scope._betSettings, i));
      }
      return client.onBetChange(), $scope;
    }
    return run(bind, f), bind.prototype.onShowButtons = function(match) {
      /** @type {number} */
      var i = 0;
      var patchLen = this._views.length;
      for (; i < patchLen; i++) {
        this._views[i].enableButton(1 === match.groupId);
      }
    }, bind;
  }(exports.EventProcessor);
  var Le = function() {
    /**
     * @param {string} name
     * @param {undefined} reference
     * @param {string} options
     * @return {undefined}
     */
    function Field(name, reference, options) {
      /** @type {string} */
      this._betSettings = options;
      /** @type {!Array} */
      this._cards = [];
      var maxLines = options.maxLines;
      /** @type {number} */
      var i = 0;
      for (; i < maxLines; i++) {
        this._cards.push(this.createBigCard(reference, i));
      }
      this._smallCards = this.createPaytable(reference);
      this._cardController = new ClientWrapper(name, options, this, this._cards, this._smallCards);
    }
    return Field.prototype.onCards = function(item) {
      var values = item.cards;
      /** @type {number} */
      var i = 0;
      var l = values.length;
      for (; i < l; i++) {
        this._cards[i].setValues(values[i]);
      }
      this.clear();
    }, Field.prototype.startRound = function() {
      this.clear();
    }, Field.prototype.endRound = function() {
      var STORE_INJECT;
      for (STORE_INJECT in this._smallCards) {
        if (this._smallCards.hasOwnProperty(STORE_INJECT)) {
          this._smallCards[STORE_INJECT].clearNearHits();
        }
      }
    }, Field.prototype.isActive = function(type) {
      return 0 != (this._betSettings.activeCards & 1 << type);
    }, Field.prototype.onBetChange = function(gl) {
      if (void 0 === gl && (gl = null), !gl || gl.isChanged(ctx.COINS)) {
        /** @type {number} */
        var i = 0;
        var n = this._smallCards.length;
        for (; i < n; i++) {
          this._smallCards[i].setCoins(this._betSettings.coins);
        }
        /** @type {number} */
        i = 0;
        n = this._cards.length;
        for (; i < n; i++) {
          this._cards[i].setCoins(this._betSettings.coins);
        }
      }
      if (!gl || gl.isChanged(ctx.DENOMINATIONS) || gl.isChanged(ctx.DENOM) || gl.isChanged(ctx.LINES) || gl.isChanged(ctx.COINS)) {
        /** @type {number} */
        i = 0;
        n = this._smallCards.length;
        for (; i < n; i++) {
          this._smallCards[i].clear();
        }
        /** @type {number} */
        i = 0;
        n = this._cards.length;
        for (; i < n; i++) {
          this._cards[i].clear();
        }
        /** @type {number} */
        i = 0;
        n = this._cards.length;
        for (; i < n; i++) {
          this._cards[i].enable(0 != (this._betSettings.activeCards & 1 << i));
        }
      }
    }, Field.prototype.onNumber = function(data, e) {
      if (!(data.ticket < 0)) {
        var output = this._cards[data.ticket];
        output.setMarks(data.marks);
        if (e) {
          output.showExtraBall(data.number);
        }
      }
    }, Field.prototype.showWin = function(v, data, json) {
      return void 0 === json && (json = false), this._cards[v].showWin(data, json);
    }, Field.prototype.showPostWin = function(obj, e) {
      this._cards[obj].showPostWin(e);
      /** @type {number} */
      var i = 0;
      var j = this._smallCards.length;
      for (; i < j; i++) {
        this._smallCards[i].removeWins(obj, false);
      }
      /** @type {number} */
      i = 0;
      j = e.length;
      for (; i < j; i++) {
        var m = e[i];
        /** @type {number} */
        var p = 0;
        var aOpL = this._smallCards.length;
        for (; p < aOpL; p++) {
          /** @type {boolean} */
          var clojIsReversed = 0 != (this._betSettings.activeCards & 1 << obj);
          this._smallCards[p].setWin(obj, m.pattern, false, clojIsReversed);
        }
      }
      /** @type {number} */
      i = 0;
      j = this._smallCards.length;
      for (; i < j; i++) {
        this._smallCards[i].updateLabel();
      }
      /** @type {number} */
      var layer_i = 0;
      var crossfilterable_layers = this._cards;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        crossfilterable_layers[layer_i].hideWin();
      }
    }, Field.prototype.onNearHit = function(data, value) {
      if (this._cards[data].setNearHits(value), this.isActive(data)) {
        /** @type {number} */
        var i = 0;
        var stringLength = this._smallCards.length;
        for (; i < stringLength; i++) {
          this._smallCards[i].removeNearHits(data, false);
        }
        /** @type {number} */
        i = 0;
        stringLength = value.length;
        for (; i < stringLength; i++) {
          var msg = value[i];
          /** @type {number} */
          var p = 0;
          var aOpL = this._smallCards.length;
          for (; p < aOpL; p++) {
            this._smallCards[p].setNearHit(data, msg.pattern, msg.missingBits, false);
          }
        }
        /** @type {number} */
        i = 0;
        stringLength = this._smallCards.length;
        for (; i < stringLength; i++) {
          this._smallCards[i].updateCells();
        }
      }
    }, Field.prototype.onWin = function(name, player, event) {
      this._cards[name].setWinInfo(player, event);
    }, Field.prototype.blink = function(num) {
      /** @type {number} */
      var i = 0;
      var l = this._cards.length;
      for (; i < l; i++) {
        this._cards[i].blink(num);
      }
      /** @type {number} */
      i = 0;
      l = this._smallCards.length;
      for (; i < l; i++) {
        this._smallCards[i].blink(num);
      }
    }, Field.prototype.createBigCard = function(name, model) {
      return new Thing(name, model, 0, []);
    }, Field.prototype.createPaytable = function(useDefaultsMode) {
      return [];
    }, Field.prototype.createSmallCard = function(eta, lmbda, n, elem, value) {
      if (void 0 === value) {
        /** @type {string} */
        value = "#ff0000";
      }
      /** @type {number} */
      var uniformName = 0;
      /** @type {number} */
      var i = 0;
      var argl = n.length;
      for (; i < argl; i++) {
        /** @type {number} */
        uniformName = uniformName | 1 << n[i];
      }
      return new UniformArray(eta, lmbda, uniformName, elem, value);
    }, Field.prototype.clear = function() {
      var i;
      for (i in this._cards) {
        if (this._cards.hasOwnProperty(i)) {
          this._cards[i].clear();
        }
      }
      for (i in this._smallCards) {
        if (this._smallCards.hasOwnProperty(i)) {
          this._smallCards[i].clear();
        }
      }
    }, Field;
  }();
  !function(exports) {
    /** @type {string} */
    exports[exports.SPIN = 1] = "SPIN";
    /** @type {string} */
    exports[exports.FEATURE = 2] = "FEATURE";
    /** @type {string} */
    exports[exports.SPINEND = 3] = "SPINEND";
    /** @type {string} */
    exports[exports.GAMBLE = 4] = "GAMBLE";
    /** @type {string} */
    exports[exports.COLLECT = 6] = "COLLECT";
    /** @type {string} */
    exports[exports.CARD = 10] = "CARD";
    /** @type {string} */
    exports[exports.CARD2 = 60] = "CARD2";
  }(Projector || (Projector = {}));
  var deflated;
  !function(exports) {
    /** @type {string} */
    exports[exports.SPIN = 1] = "SPIN";
    /** @type {string} */
    exports[exports.FEATURE = 2] = "FEATURE";
    /** @type {string} */
    exports[exports.GAMBLE = 4] = "GAMBLE";
    /** @type {string} */
    exports[exports.CARD = 10] = "CARD";
  }(deflated || (deflated = {}));
  var type;
  var mount = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var action = function(s) {
    /**
     * @param {number} options
     * @return {?}
     */
    function Field(options) {
      if (void 0 === options) {
        /** @type {null} */
        options = null;
      }
      var self = s.call(this, options ? Field.CARDANSWER : Field.CARD) || this;
      return self._cards = options, self;
    }
    return mount(Field, s), Object.defineProperty(Field.prototype, "cards", {
      get : function() {
        return this._cards;
      },
      enumerable : true,
      configurable : true
    }), Field.CARD = "CARD", Field.CARDANSWER = "CARDANSWER", Field;
  }(exports.MegatonEvent);
  var parseWriteArg = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Re = function(t) {
    /**
     * @param {!HTMLElement} data
     * @return {?}
     */
    function Main(data) {
      var _self = t.call(this, data) || this;
      return data.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return _self.onCommand(event);
      }), data.addEventListener(action.CARD, function(obj) {
        return _self.onCard(obj);
      }), _self;
    }
    return parseWriteArg(Main, t), Main.prototype.onCommand = function(event) {
      var value = event.command;
      switch(value.type) {
        case Projector.CARD2:
        case Projector.CARD:
          /** @type {number} */
          var iValue = 0;
          var i = value.getInt(iValue++);
          /** @type {number} */
          i = 4;
          /** @type {!Array} */
          var appargs = [];
          /** @type {number} */
          var nextCreation = 0;
          for (; nextCreation < i; nextCreation++) {
            /** @type {number} */
            var i = 0;
            /** @type {!Array} */
            var arg = [];
            /** @type {number} */
            var c = 0;
            for (; c < 5; c++) {
              var waitmask = value.getInt(iValue++);
              arg.push(i + (15 & waitmask));
              /** @type {number} */
              waitmask = waitmask >> 4;
              arg.push(i + (15 & waitmask));
              /** @type {number} */
              waitmask = waitmask >> 4;
              arg.push(i + (15 & waitmask));
              /** @type {number} */
              waitmask = waitmask >> 4;
              /** @type {number} */
              i = i + 12;
            }
            appargs.push(arg);
          }
          this._dispatcher.dispatch(new self.LogicEvent(new action(appargs)));
      }
    }, Main.prototype.onCard = function(objOrTsid) {
      var checked = new self.Command(deflated.CARD, []);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, checked));
    }, Main;
  }(exports.EventProcessor);
  var __extends$4 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Config = function(_super) {
    /**
     * @return {?}
     */
    function WorkerDomAdapter() {
      return null !== _super && _super.apply(this, arguments) || this;
    }
    return __extends$4(WorkerDomAdapter, _super), Object.defineProperty(WorkerDomAdapter.prototype, "defaultLines", {
      get : function() {
        return 0;
      },
      enumerable : true,
      configurable : true
    }), WorkerDomAdapter.prototype.parse = function(event) {
      return event.fps = "24", _super.prototype.parse.call(this, event);
    }, WorkerDomAdapter;
  }(presenter.VideoSlotConfig);
  var _removeSourceNodeSelected = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Action = function(fn) {
    /**
     * @return {?}
     */
    function key() {
      return null !== fn && fn.apply(this, arguments) || this;
    }
    return _removeSourceNodeSelected(key, fn), key.ACTIVECARDS = "ACTIVE_CARDS", key;
  }(presenter.VideoSlotEIBetSettingsEvent);
  var bad_escape = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var win = function(param) {
    /**
     * @param {?} i
     * @return {?}
     */
    function selector(i) {
      return param.call(this, i) || this;
    }
    return bad_escape(selector, param), selector.BUY_EXTRABALL = "EI_BUY_EXTRABALL", selector;
  }(exports.MegatonEvent);
  var argsProvider = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var HANDLER_TYPE = function(fn) {
    /**
     * @param {?} event
     * @param {?} elem
     * @param {?} callback
     * @param {?} options
     * @param {?} filename
     * @param {?} cb
     * @return {?}
     */
    function request(event, elem, callback, options, filename, cb) {
      var def = fn.call(this, event, elem, callback, options, filename, cb) || this;
      return def.addCallback(request.CALLBACK_GET_ACTIVE_CARDS, function() {
        return def.onGetActiveCards();
      }), def.addCallback(request.CALLBACK_SET_ACTIVE_CARDS, function(adUnitCodes) {
        return def.onSetActiveCards(adUnitCodes);
      }), def.addCallback(request.CALLBACK_BUY_EXTRA_BALL, function() {
        return def.onBuyExtraBall();
      }), def._availableEvents = def._availableEvents.concat([Action.ACTIVECARDS, node.EXTRABALL, node.EXTRABALL_AVAILABLE, Popup.SELECT_EVENT]), def;
    }
    return argsProvider(request, fn), request.prototype.onBuyExtraBall = function() {
      this._dispatcher.dispatch(new win(win.BUY_EXTRABALL));
    }, request.prototype.onGetBet = function() {
      var managementcommandsdns = this._betSettings.betCoins;
      /** @type {number} */
      var siteName = Math.floor(this._roundHandler.additonalCost / this._betSettings.denomination);
      var checked = managementcommandsdns + siteName;
      var chartData = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._roundHandler.bet + this._roundHandler.additonalCost);
      this._dispatcher.dispatch(new self.EIRoundEvent(self.EIRoundEvent.BET, checked, chartData));
    }, request.prototype.onGetActiveCards = function() {
      var self = this._betSettings;
      this._dispatcher.dispatch(new Action(Action.ACTIVECARDS, self.lines));
    }, request.prototype.onSetActiveCards = function(adUnitCodes) {
      this._betSettings.setActiveCards(adUnitCodes);
    }, request.prototype.onGetWin = function() {
      var checked = this._roundHandler.wonCoins;
      var magnifier = this._roundHandler.win;
      var $magnifier = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(magnifier);
      this._dispatcher.dispatch(new self.EIRoundEvent(self.EIRoundEvent.WIN, checked, $magnifier));
    }, request.prototype.onGetBalance = function() {
      var remainder = this._roundHandler.balance;
      var chartData = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(remainder);
      /** @type {number} */
      var checked = Math.floor(remainder / this._betSettings.denomination);
      this._dispatcher.dispatch(new self.EIRoundEvent(self.EIRoundEvent.BALANCE, checked, chartData));
    }, request.prototype.onCollect = function() {
      this._dispatcher.dispatch(new node(node.COLLECT));
    }, request.CALLBACK_GET_ACTIVE_CARDS = "GET_ACTIVE_CARDS", request.CALLBACK_SET_ACTIVE_CARDS = "SET_ACTIVE_CARDS", request.CALLBACK_BUY_EXTRA_BALL = "BUY_EXTRA_BALL", request;
  }(presenter.VideoSlotExternalInterface);
  var $externalizeFunction = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(type) {
    /** @type {string} */
    type[type.NUMBER = 7] = "NUMBER";
    /** @type {string} */
    type[type.NEARHIT = 8] = "NEARHIT";
    /** @type {string} */
    type[type.WININFO = 9] = "WININFO";
    /** @type {string} */
    type[type.REMAININGBALL = 20] = "REMAININGBALL";
  }(type || (type = {}));
  var Ye;
  var Xe = function(t) {
    /**
     * @param {?} raw
     * @param {!Object} index
     * @return {?}
     */
    function Template(raw, index) {
      var REGEX = t.call(this, raw) || this;
      return REGEX._patterns = index, REGEX;
    }
    return $externalizeFunction(Template, t), Template.prototype.onCommand = function(event) {
      if (t.prototype.onCommand.call(this, event), event.command.type === presenter.VSServerCommand.FEATURE) {
        var b = event.command;
        if (b.getInt(0) === presenter.FeatureCommand.AWARD) {
          var question;
          var globalData;
          var dropzones;
          var j;
          var inputsSize;
          switch(b.getInt(1)) {
            case type.NUMBER:
              question = b.getInt(2);
              globalData = b.getInt(3);
              dropzones = b.getInt(4);
              this._dispatcher.dispatch(new self.LogicEvent(new question_instance(question, globalData, dropzones)));
              break;
            case type.NEARHIT:
              globalData = b.getInt(2);
              inputsSize = b.getInt(3);
              /** @type {!Array} */
              var parent = [];
              /** @type {number} */
              j = 4;
              /** @type {number} */
              var i = 0;
              for (; i < inputsSize; i++) {
                var result = new TypeProto;
                result.pattern = b.getInt(j++);
                result.winAmount = b.getInt(j++);
                result.missingBits = b.getInt(j++);
                parent.push(result);
              }
              this._dispatcher.dispatch(new self.LogicEvent(new AsyncVDOMBuilder(globalData, parent)));
              break;
            case type.WININFO:
              globalData = b.getInt(2);
              inputsSize = b.getInt(3);
              /** @type {!Array} */
              var path = [];
              /** @type {number} */
              j = 4;
              /** @type {number} */
              i = 0;
              for (; i < inputsSize; i++) {
                var m = new Menu;
                m.pattern = b.getInt(j++);
                m.winAmount = b.getInt(j++);
                m.winBits = this._patterns[m.pattern];
                path.push(m);
              }
              var f = b.getInt(j++);
              var mapHeight = b.getBoolean(j++);
              this._dispatcher.dispatch(new self.LogicEvent(new Program(globalData, path, f, mapHeight)));
              break;
            case type.REMAININGBALL:
              var cell_amount = b.getInt(2);
              /** @type {!Array} */
              var context = [];
              /** @type {number} */
              j = 3;
              /** @type {number} */
              i = 0;
              for (; i < cell_amount; i++) {
                var coloredImage = b.getInt(i + j);
                context.push(coloredImage);
              }
              this._dispatcher.dispatch(new self.LogicEvent(new OptimizerContext(context)));
          }
        }
      }
    }, Template;
  }(presenter.FeatureCommandConverter);
  var getLimitedLinks = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RrdGraphDesc = function(h) {
    /**
     * @param {?} args
     * @param {string} options
     * @param {?} o
     * @param {?} cb
     * @param {number} opt_indexes
     * @param {number} opt_dispatch_events
     * @param {number} opt_is_fixed
     * @param {number} opt_encrypted
     * @param {number} state
     * @return {?}
     */
    function Store(args, options, o, cb, opt_indexes, opt_dispatch_events, opt_is_fixed, opt_encrypted, state) {
      if (void 0 === state) {
        /** @type {number} */
        state = 12;
      }
      var that = h.call(this, args, options, o, cb) || this;
      return that._draw = new Constructor(that._dispatcher, options, Constructor.FEATUREID, opt_dispatch_events), that._extraBall = new Popup(that._dispatcher, options, Popup.FEATUREID, opt_indexes, opt_dispatch_events, opt_is_fixed, opt_encrypted, state), that;
    }
    return getLimitedLinks(Store, h), Store.prototype.getFeature = function(obj) {
      switch(obj.featureType) {
        case 0:
          switch(obj.symbol) {
            case 0:
              return this._draw;
            case 1:
              return this._extraBall;
          }
      }
      return h.prototype.getShowFeature.call(this, obj);
    }, Store;
  }(presenter.FeatureManager);
  var gmElement = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var qe = function(options) {
    /**
     * @return {?}
     */
    function Point() {
      return null !== options && options.apply(this, arguments) || this;
    }
    return gmElement(Point, options), Object.defineProperty(Point.prototype, "adjustBet", {
      get : function() {
        return this._adjustBet;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._adjustBet = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Point.prototype.setAdjustBet = function(canCreateDiscussions) {
      /** @type {boolean} */
      this._adjustBet = canCreateDiscussions;
      this.notify();
    }, Point.prototype.toggleAdjustBet = function() {
      /** @type {boolean} */
      this._adjustBet = !this._adjustBet;
      this.notify();
    }, Point.prototype.serialize = function(glue) {
      options.prototype.serialize.call(this, glue);
    }, Point;
  }(self.GameSettings);
  var no_constructor_parens = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ChangeEvent = function(output) {
    /**
     * @param {number} itemClassName
     * @param {?} itemDis
     * @param {number} vW
     * @param {?} vH
     * @param {number} isVertical
     * @return {?}
     */
    function ScrollList(itemClassName, itemDis, vW, vH, isVertical) {
      var s = output.call(this, itemClassName ? ScrollList.SPINANSWER : ScrollList.SPIN) || this;
      return s._coins = itemDis, s._numCards = vW, s._denom = vH, s._activeCards = isVertical, s;
    }
    return no_constructor_parens(ScrollList, output), Object.defineProperty(ScrollList.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "numCards", {
      get : function() {
        return this._numCards;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(ScrollList.prototype, "activeCards", {
      get : function() {
        return this._activeCards;
      },
      enumerable : true,
      configurable : true
    }), ScrollList.SPIN = "SPIN", ScrollList.SPINANSWER = "SPINANSWER", ScrollList;
  }(exports.MegatonEvent);
  var $controller = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var tn = function(scope) {
    /**
     * @param {!HTMLElement} parent
     * @return {?}
     */
    function Main(parent) {
      var plugin = scope.call(this, parent) || this;
      return parent.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), parent.addEventListener(ChangeEvent.SPIN, function(t) {
        return plugin.onSpin(t);
      }), plugin;
    }
    return $controller(Main, scope), Main.prototype.onCommand = function(event) {
      var storage = event.command;
      switch(storage.type) {
        case Projector.SPIN:
          var changes = storage.getInt(0);
          var page = storage.getInt(1);
          var r = storage.getInt(2);
          var s = storage.getInt(3);
          this._dispatcher.dispatch(new self.LogicEvent(new ChangeEvent(true, changes, page, r, s)));
          break;
        case Projector.SPINEND:
          var audioID = storage.getBoolean(0);
          var doubleStateButtonID = storage.getInt(1);
          var i = storage.getInt(2);
          var sectionCssClass = storage.getInt(3);
          var l = storage.getInt(4);
          this._dispatcher.dispatch(new self.LogicEvent(new presenter.SpinEndEvent(audioID, doubleStateButtonID, i, sectionCssClass, l)));
          break;
        case self.ServerCommand.SSPINTERROUNDDATA:
          /** @type {number} */
          var _ = 0;
          var d = storage.getInt(_++);
          /** @type {number} */
          d = 4;
          /** @type {!Array} */
          var results = [];
          /** @type {number} */
          var pd = 0;
          for (; pd < d; pd++) {
            /** @type {number} */
            var i = 0;
            /** @type {!Array} */
            var groups = [];
            /** @type {number} */
            var v = 0;
            for (; v < 5; v++) {
              var waitmask = storage.getInt(_++);
              groups.push(i + (15 & waitmask));
              /** @type {number} */
              waitmask = waitmask >> 4;
              groups.push(i + (15 & waitmask));
              /** @type {number} */
              waitmask = waitmask >> 4;
              groups.push(i + (15 & waitmask));
              /** @type {number} */
              waitmask = waitmask >> 4;
              /** @type {number} */
              i = i + 12;
            }
            results.push(groups);
          }
          this._dispatcher.dispatch(new self.LogicEvent(new action(results)));
      }
    }, Main.prototype.onSpin = function(p) {
      /** @type {!Array} */
      var options = [String(p.coins), String(p.numCards), String(p.denom), String(p.activeCards)];
      var keyboard = new self.Command(deflated.SPIN, options);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, keyboard));
    }, Main;
  }(exports.EventProcessor);
  var camelizeOption = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var handler = function(fn) {
    /**
     * @return {?}
     */
    function option() {
      return null !== fn && fn.apply(this, arguments) || this;
    }
    return camelizeOption(option, fn), option.CARDUIEVENT = "CARDUIEVENT", option;
  }(exports.MegatonEvent);
  var mix2 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var CSSPropTween = function(init) {
    /**
     * @param {!Object} size
     * @param {?} debug
     * @param {?} errors
     * @param {?} options
     * @param {!Object} data
     * @param {?} account
     * @param {!Object} state
     * @param {!Object} title
     * @param {!Function} view
     * @param {?} index
     * @param {?} rows
     * @return {?}
     */
    function set(size, debug, errors, options, data, account, state, title, view, index, rows) {
      var that = init.call(this, debug) || this;
      return debug.registerEvent(node.SPIN), debug.registerEvent(ChangeEvent.SPINANSWER), debug.registerEvent(presenter.FeatureStartEvent.FEATURESTART), debug.registerEvent(presenter.SpinEndEvent.SPINEND), debug.registerEvent(handler.CARDUIEVENT), debug.registerEvent(node.NEWCARD), debug.registerEvent(action.CARDANSWER), debug.registerEvent(self.SPFundsErrorEvent.SPFUNDSERROR), that._dispatcher = size, that._settings = options, that._betSettings = account, that._roundHandler = errors, that._featureManager = 
      index, that._gambleManager = rows, that._cardManager = state, that._ballManager = title, that._winManager = view, that._config = data, that._roundsSequence = [function(t) {
        return that.betHandler(t);
      }, function(canCreateDiscussions) {
        return that.gameHandler(canCreateDiscussions);
      }], that._gameSequence = [function(data) {
        return that.roundStartHandler(data);
      }, function(element) {
        return that.spinHandler(element);
      }, function(t) {
        return that.gambleHandler(t);
      }, function(t) {
        return that.roundStopHandler(t);
      }], that._betSequence = [function(data) {
        return that.betStartHandler(data);
      }, function(key) {
        return that.betProcessHandler(key);
      }, function(data) {
        return that.betStopHandler(data);
      }], that._spinSequence = [function(data) {
        return that.spinIntroHandler(data);
      }, function(t) {
        return that.spinProcessHandler(t);
      }, function(t) {
        return that.spinOutroHandler(t);
      }], view.winCounter.setMaxValue(data.winCapValue), that._winCapHandler = view.winCounter, that;
    }
    return mix2(set, init), set.prototype.roundsHandler = function(canCreateDiscussions) {
      canCreateDiscussions.execLoop(this._roundsSequence);
    }, set.prototype.gameHandler = function(canCreateDiscussions) {
      canCreateDiscussions.execSequence(this._gameSequence);
    }, set.prototype.betHandler = function(result) {
      result.execSequence(this._betSequence);
    }, set.prototype.betStartHandler = function(subgoal) {
      this._dispatcher.dispatch(new self.InfoEvent("IDS_VB_PLAYTOSTART", tree.WinInfoEvent.INFO));
      this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_BET));
      subgoal.complete();
    }, set.prototype.betProcessHandler = function(value) {
      var card;
      for (; (card = this._input.read(value)) && card.type !== ChangeEvent.SPINANSWER && (this._input.next(), card.type !== node.SPIN);) {
        if (card.type === handler.CARDUIEVENT) {
          this._dispatcher.dispatch(new action);
        } else {
          if (card.type === node.NEWCARD) {
            this._dispatcher.dispatch(new action);
          } else {
            if (card.type === action.CARDANSWER) {
              this._cardManager.onCards(card);
            }
          }
        }
      }
      if (card) {
        value.complete();
      }
    }, set.prototype.betStopHandler = function(subgoal) {
      this._dispatcher.dispatch(new self.InfoEvent("IDS_MSG_GOODLUCK", tree.WinInfoEvent.INFO));
      this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_NONE));
      subgoal.complete();
    }, set.prototype.roundStartHandler = function(subgoal) {
      if (this._settings.adjustBet) {
        this._betSettings.adjustBet(this._roundHandler.balance);
      }
      this._dispatcher.dispatch(new ChangeEvent(false, this._betSettings.coins, this._betSettings.lines, this._betSettings.denomination, this._betSettings.activeCards));
      this._roundHandler.setBet(this._betSettings.betAmount);
      this._roundHandler.startRound(true);
      this._cardManager.startRound();
      this._ballManager.startRound();
      this._winManager.clear();
      this._roundStartTime = exports.SystemManager.getScheduler().getTime();
      subgoal.complete();
    }, set.prototype.spinHandler = function(suppressDisabledCheck) {
      suppressDisabledCheck.execSequence(this._spinSequence);
    }, set.prototype.spinIntroHandler = function(subgoal) {
      subgoal.complete();
    }, set.prototype.spinProcessHandler = function(value) {
      var query;
      for (; query = this._input.read(value);) {
        switch(query.type) {
          case ChangeEvent.SPINANSWER:
            var q = query;
            this._betSettings.setServerAnswerBetValues(q.coins, q.activeCards, q.denom);
            this._input.next();
            break;
          case action.CARDANSWER:
            this._cardManager.onCards(query);
            this._input.next();
            break;
          case self.SPFundsErrorEvent.SPFUNDSERROR:
            this._input.next();
            value.complete();
            break;
          case presenter.FeatureStartEvent.FEATURESTART:
            var i = this._featureManager.getFeature(query);
            if (i) {
              return i.setWinCapHandler(this._winCapHandler), void i.process(value);
            }
            this._input.next();
            break;
          case presenter.SpinEndEvent.SPINEND:
            return this._roundHandler.setWonCoins(query.wonCoins), this._roundHandler.setWin(query.wonCoins * this._betSettings.denomination), void value.complete();
          default:
            this._input.next();
        }
      }
    }, set.prototype.spinOutroHandler = function(t) {
      this._winManager.start(t);
    }, set.prototype.gambleHandler = function(result) {
      switch(result.state) {
        case 0:
          var value = this._input.data;
          if (value && value.type === presenter.SpinEndEvent.SPINEND) {
            this._input.next();
            this._gambleManager.gambleLogicController.start(result, value, false, false, true, 0);
            break;
          }
        default:
          result.complete();
      }
    }, set.prototype.roundStopHandler = function(t) {
      switch(t.state) {
        case 0:
          var e = exports.SystemManager.getScheduler().getTime();
          /** @type {number} */
          var FAKE_CONTENT_LENGTH = Math.max(this._config.minRoundTime - (e - this._roundStartTime), 0);
          t.startDelayMs(FAKE_CONTENT_LENGTH);
          break;
        default:
          this._roundHandler.endRound();
          this._cardManager.endRound();
          this._ballManager.endRound();
          t.complete();
      }
    }, set;
  }(self.LogicManager);
  var timmSet = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var binding = function(t) {
    /**
     * @return {?}
     */
    function record() {
      return t.call(this, record.VBWINENDEVENT) || this;
    }
    return timmSet(record, t), record.VBWINENDEVENT = "VBWINENDEVENT", record;
  }(exports.MegatonEvent);
  var directorGo = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Log = function(step) {
    /**
     * @param {string} mask
     * @param {number} width
     * @param {number} duration
     * @param {!Object} audio
     * @return {?}
     */
    function set(mask, width, duration, audio) {
      var self = step.call(this, set.VBWINEVENT) || this;
      return self._pattern = mask, self._coins = width, self._duration = duration, self._quickStop = audio, self;
    }
    return directorGo(set, step), Object.defineProperty(set.prototype, "pattern", {
      get : function() {
        return this._pattern;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "duration", {
      get : function() {
        return this._duration;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "quickStop", {
      get : function() {
        return this._quickStop;
      },
      enumerable : true,
      configurable : true
    }), set.VBWINEVENT = "VBWINEVENT", set;
  }(exports.MegatonEvent);
  var serverSync = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RxCollection = function(id) {
    /**
     * @param {!HTMLElement} _
     * @param {number} matrix
     * @param {!Object} item
     * @param {!Object} json
     * @return {?}
     */
    function create(_, matrix, item, json) {
      var me = id.call(this, _) || this;
      return me._prevCardNum = 0, me._betAmount = 0, me._gameSettings = matrix, me._betSettings = item, me._config = json, me._hitSnds = [], me._hitCounter = 0, me._isExtraBallMode = false, me._isFastBallSndPlaying = false, me._scheduler = exports.SystemManager.getScheduler(), me._ballSndValue = 1, me._extraBallBgSndValue = 1, me._isMenuVisible = false, me.createSounds(), item.addListener(function(options) {
        return void 0 === options && (options = null), me.onBetChanged(options);
      }, null), _.addEventListener(node.SPIN, function(t) {
        return me.onSpin(t);
      }), _.addEventListener(node.NEWCARD, function(t) {
        return me.onNewCard(t);
      }), _.addEventListener(presenter.FeatureAwardEvent.FEATUREAWARD, function(query) {
        return me.onNearHit(query);
      }), _.addEventListener(presenter.SpinEndEvent.SPINEND, function(t) {
        return me.onWinAnnounce(t);
      }), _.addEventListener(self.RoundEvent.ROUNDEND, function(t) {
        return me.onRoundEnd(t);
      }), _.addEventListener(presenter.FeatureUIEvent.FEATUREUISELECT, function(t) {
        return me.onExtraBallMode(t);
      }), _.addEventListener(Log.VBWINEVENT, function(eventName) {
        return me.onWin(eventName);
      }), _.addEventListener(binding.VBWINENDEVENT, function(t) {
        return me.onWinEnd(t);
      }), _.addEventListener(SelectionEvent.NEXT_BALL, function(t) {
        return me.onNextBall(t);
      }), _.addEventListener(tree.WinCounterEvent.START, function(t) {
        return me.onWinCounterStart(t);
      }), _.addEventListener(tree.WinCounterEvent.STOP, function(t) {
        return me.onWinCounterStop(t);
      }), _.addEventListener(tree.WinCounterEvent.TICK, function(t) {
        return me.onWinCounterTick(t);
      }), _.addEventListener(node.MENUSHOW, function() {
        return me.onMenuShow(true);
      }), _.addEventListener(node.MENUHIDE, function() {
        return me.onMenuShow(false);
      }), me;
    }
    return serverSync(create, id), create.prototype.createSounds = function() {
      var socket = self.ResourceManager.getInstance().getSndManager();
      this._ballSnd = socket.create("ball");
      this._fastBallSnd = socket.create("ball_fast");
      this._cannotPlaySnd = socket.create("cannot_play");
      this._cardDecreaseSnd = socket.create("card_decrease");
      this._cardIncreaseSnd = socket.create("card_increase");
      this._changeBetSnd = socket.create("change_bet");
      this._changeCardSnd = socket.create("change_card");
      this._collectSnd = socket.create("collect_announce");
      this._redobleSnd = socket.create("redoble");
      this._startGameSnd = socket.create("start_game");
      this._extraBallModeSnd = socket.create("bola_extra");
      this._extraBallBgSnd = socket.create("bola_extra_bg");
      this._hitSnds.push(socket.create("hit_1"));
      this._hitSnds.push(socket.create("hit_2"));
      this._hitSnds.push(socket.create("hit_3"));
      this._hitSnds.push(socket.create("hit_4"));
      this._hitSnds.push(socket.create("hit_5"));
      this._hitSnds.push(socket.create("hit_6"));
    }, create.prototype.onMenuShow = function(useVM) {
      /** @type {boolean} */
      this._isMenuVisible = useVM;
    }, create.prototype.onWinCounterStop = function(result) {
    }, create.prototype.onWinCounterStart = function(result) {
      this._winCounterTriggerTime = this._scheduler.getTime() + this._winCounterTriggerDelay;
      this.playWinCounterSound();
    }, create.prototype.onWinCounterTick = function(result) {
      var e = this._scheduler.getTime();
      if (e > this._winCounterTriggerTime) {
        this._winCounterTriggerTime = e + this._winCounterTriggerDelay;
        this.playWinCounterSound();
      }
    }, create.prototype.playWinCounterSound = function() {
      if (this._winCounterSnd) {
        this._winCounterSnd.play();
      }
    }, create.prototype.onWin = function(event) {
      this.stopExtraBallBgSnd();
      this.stopFastBallSound();
    }, create.prototype.onWinEnd = function(result) {
      this.playExtraBallBgSnd();
    }, create.prototype.onRoundEnd = function(result) {
      this.stopExtraBallBgSnd();
    }, create.prototype.onWinAnnounce = function(result) {
      if (result.wonCoins > 0) {
        this._collectSnd.play();
      }
    }, create.prototype.onBetChanged = function(gl) {
      if (void 0 === gl) {
        /** @type {null} */
        gl = null;
      }
      if (!("mobile" === this._config.channel && this._isMenuVisible)) {
        if (gl.isChanged(ctx.COINS) || gl.isChanged(ctx.DENOM)) {
          this._changeBetSnd.play();
        } else {
          if (this._prevCardNum < this._betSettings.lines && gl.isChanged(ctx.LINES)) {
            this._cardDecreaseSnd.play();
          } else {
            if (this._prevCardNum > this._betSettings.lines && gl.isChanged(ctx.LINES)) {
              this._cardIncreaseSnd.play();
            }
          }
        }
        if (!gl.isChanged(ctx.ENABLED)) {
          this._prevCardNum = this._betSettings.lines;
          this._betAmount = this._betSettings.betAmount;
        }
      }
    }, create.prototype.onSpin = function(event) {
      this._startGameSnd.play();
      this.reset();
    }, create.prototype.onNewCard = function(result) {
      this._changeCardSnd.play();
    }, create.prototype.onExtraBallMode = function(result) {
      if (!(result.featureId !== Popup.FEATUREID || this._isExtraBallMode)) {
        /** @type {boolean} */
        this._isExtraBallMode = true;
        this._extraBallModeSnd.play();
        this.playExtraBallBgSnd();
        this.stopFastBallSound();
      }
    }, create.prototype.stopFastBallSound = function() {
      if (this._isFastBallSndPlaying) {
        /** @type {boolean} */
        this._isFastBallSndPlaying = false;
        this._fastBallSnd.fadeOut(0.1);
      }
    }, create.prototype.onNearHit = function(action) {
      if (action.awardType === AsyncVDOMBuilder.NEARHIT) {
        /** @type {number} */
        var animin = this._hitCounter++ % this._hitSnds.length;
        this._hitSnds[animin].play();
      }
    }, create.prototype.onNextBall = function(result) {
      if (result.fastPlay) {
        if (!this._isFastBallSndPlaying) {
          /** @type {boolean} */
          this._isFastBallSndPlaying = true;
          this._fastBallSnd.playForever(this._ballSndValue);
        }
      } else {
        this._ballSnd.play(this._ballSndValue);
      }
      if (result.lastNormalBall) {
        this.stopFastBallSound();
      }
    }, create.prototype.stopExtraBallBgSnd = function() {
      if (this._isExtraBallMode && this._extraBallBgSnd) {
        this._extraBallBgSnd.fadeOut(0.1);
      }
    }, create.prototype.playExtraBallBgSnd = function() {
      if (this._isExtraBallMode && this._extraBallBgSnd) {
        this._extraBallBgSnd.playForever(this._extraBallBgSndValue);
      }
    }, create.prototype.reset = function() {
      /** @type {number} */
      this._hitCounter = 0;
      /** @type {boolean} */
      this._isExtraBallMode = false;
      /** @type {boolean} */
      this._isFastBallSndPlaying = false;
    }, create;
  }(exports.EventProcessor);
  var ln = function() {
    /**
     * @param {!Function} element
     * @param {string} n
     * @param {undefined} prop
     * @param {undefined} exp
     * @return {undefined}
     */
    function $get(element, n, prop, exp) {
      this.createSoundController(element, n, prop, exp);
    }
    return $get.prototype.createSoundController = function(className, name, schema, n) {
      return new RxCollection(className, name, schema, n);
    }, $get;
  }();
  var parseItem = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var CompileContext = function(_self) {
    /**
     * @param {?} el
     * @param {undefined} i
     * @param {?} n
     * @param {?} e
     * @return {?}
     */
    function item(el, i, n, e) {
      var $ = _self.call(this, el, i, e) || this;
      var parse = e.createInfoView();
      if (parse) {
        $.createInfoController(el, n.winCounter, i, parse);
      }
      var name = $.createJackpotNotificationView(e, i, el);
      return $.createJackpotNotificationController(el, name, i), $;
    }
    return parseItem(item, _self), item.prototype.createInfoController = function(e, character, line, func) {
    }, item.prototype.createJackpotNotificationView = function(obj, n, e) {
      return n.hasJackpots || n.hasGuaranteedJackpot ? obj.createJackpotNotificationView(e, tree.JackpotType.Mystery) : obj.createJackpotNotificationView(e, tree.JackpotType.InGame);
    }, item.prototype.createJackpotNotificationController = function(str, value, index) {
      new tree.JackpotNotificationController(str, value, index);
    }, item;
  }(self.CasinoUIManager);
  var callback = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ShimCache = function(details) {
    /**
     * @param {!Object} script
     * @param {!Object} time
     * @param {!Object} r
     * @param {!Object} settings
     * @return {?}
     */
    function set(script, time, r, settings) {
      var self = details.call(this) || this;
      return self._winSequence = [function(t) {
        return self.winHandler(t);
      }, function(data) {
        return self.postWinHandler(data);
      }], self._dispatcher = script, self._cardManager = time, self._ballManager = r, self._settings = settings, self._blinkActive = true, script.addEventListener(node.CONTINUE, function() {
        return self.onStop();
      }), script.addEventListener(presenter.FeatureWinEvent.FEATUREWIN, function(t) {
        return self.onFeatureWin(t);
      }), exports.SystemManager.getScheduler().addTickListener(function(delta) {
        return self.onTick(delta);
      }), self.clear(), self;
    }
    return callback(set, details), set.prototype.clear = function() {
      /** @type {!Array} */
      this._wins = [[], [], [], []];
      /** @type {!Array} */
      this._nearHits = [[], [], [], []];
      /** @type {!Array} */
      this._winAmounts = [0, 0, 0, 0];
      /** @type {!Array} */
      this._bonus = [0, 0, 0, 0];
      /** @type {boolean} */
      this._blinkActive = true;
    }, set.prototype.processNumberHandler = function(value, element, position) {
      this._ballManager.next(element.number, this._settings.fastPlay);
      this._cardManager.onNumber(element, position);
      value.execDelayMs(this.getDrawDelay(position) * (1000 / 24));
    }, set.prototype.processNearHitHandler = function(type, json) {
      this._nearHits[json.ticket] = json.patterns;
      this._cardManager.onNearHit(json.ticket, json.patterns);
      this._ballManager.onNearHit(this._nearHits);
      type.execDelayMs((this._settings.fastPlay ? 0 : 10) * (1000 / 24));
    }, set.prototype.processWinHandler = function(types, func, value, args, parseAsUTC) {
      var allTraps = this;
      /** @type {number} */
      this._prevWinAmount = 0;
      /** @type {number} */
      var i = 0;
      for (; i < 4; i++) {
        if (this._cardManager.isActive(i)) {
          this._prevWinAmount += this._winAmounts[i];
        }
      }
      var result = this._wins[func];
      var count = result ? result.length : 0;
      /** @type {number} */
      var j = 0;
      /** @type {!Array} */
      this._winsToShow = [];
      /** @type {number} */
      this._winAmounts[func] = 0;
      /** @type {number} */
      i = 0;
      var valueLength = value.length;
      for (; i < valueLength; i++) {
        var msg = value[i];
        this._winAmounts[func] += msg.winAmount;
        for (; j < count && result[j].pattern < msg.pattern;) {
          j++;
        }
        if (j >= count || result[j].pattern > msg.pattern) {
          this._winsToShow.push(i);
        }
      }
      /** @type {(Node|string)} */
      this._currentCard = func;
      /** @type {!NodeList} */
      this._wins[func] = value;
      this._bonus[func] = args;
      this._winAmounts[func] += args;
      this.updateNearHits(func, value);
      /** @type {boolean} */
      this._quickStop = false;
      if (parseAsUTC) {
        this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_CONTINUE));
      }
      /** @type {null} */
      this._waitCtx = null;
      types.execHandler(function(t) {
        return allTraps.showWinsHandler(t);
      });
    }, set.prototype.start = function(t) {
      /** @type {boolean} */
      this._blinkActive = false;
      this.blink(1);
      t.execSequence(this._winSequence);
    }, set.prototype.onTick = function(value) {
      if (this._blinkActive && value % 10 == 0) {
        /** @type {number} */
        var length = value / 10;
        this.blink(length);
      }
    }, set.prototype.onStop = function() {
      /** @type {boolean} */
      this._quickStop = true;
      if (this._waitCtx) {
        exports.Waiter.notifyContext(this._waitCtx);
      }
      /** @type {null} */
      this._waitCtx = null;
      this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_NONE));
    }, set.prototype.onFeatureWin = function(b) {
      if (0 === b.feature.featureData.featureType) {
        switch(b.feature.featureData.symbol) {
          case 0:
          case 1:
            break;
          default:
            var eventName = this._currentCard;
            this._bonus[eventName] += b.feature.totalCoins;
            this._cardManager.onWin(eventName, this._wins[eventName], this._bonus[eventName]);
        }
      }
    }, set.prototype.blink = function(num) {
      this._ballManager.blink(num % 4 == 0);
      this._cardManager.blink(num % 2 == 0);
    }, set.prototype.getDrawDelay = function(name) {
      return name ? 5 : this._settings.fastPlay ? 1 : 2;
    }, set.prototype.updateNearHits = function(query, e) {
      /** @type {number} */
      var i = 0;
      var result = this._nearHits[query];
      var entryLength = result.length;
      /** @type {number} */
      var p = 0;
      var pos = e.length;
      for (; p < pos; p++) {
        var b = e[p];
        for (; i < entryLength && result[i].pattern < b.pattern;) {
          i++;
        }
        if (i < entryLength && result[i].pattern === b.pattern) {
          result.splice(i, 1);
          entryLength--;
        }
      }
      this._cardManager.onNearHit(query, result);
      this._ballManager.onNearHit(this._nearHits);
    }, set.prototype.showWinsHandler = function(stream) {
      if (stream.state >= this._winsToShow.length) {
        this.showPostWin();
        /** @type {number} */
        var column = 0;
        /** @type {number} */
        var selection = 0;
        for (; selection < 4; selection++) {
          if (this._cardManager.isActive(selection)) {
            column = column + this._winAmounts[selection];
          }
        }
        /** @type {number} */
        var item = column - this._prevWinAmount;
        if (item > 0) {
          var a = this.getCountDuration(item);
          this._dispatcher.dispatch(new tree.WinInfoEvent(item, a, tree.WinInfoEvent.WIN));
        }
        /** @type {number} */
        selection = 0;
        for (; selection < 4; selection++) {
          this._cardManager.onWin(selection, this._wins[selection], this._bonus[selection]);
        }
        this._ballManager.onWinEnd();
        this._dispatcher.dispatch(new binding);
        /** @type {null} */
        this._waitCtx = null;
        this._dispatcher.dispatch(new self.ShowButtonsEvent(PseudoStateKind.GROUP_NONE));
        stream.complete();
      } else {
        var x = this.showWin(this._currentCard, stream.state);
        this._waitCtx = stream.startDelayMs(x * (1000 / 24)).ctx;
      }
    }, set.prototype.showWin = function(query, extension) {
      var opts = this._wins[query][this._winsToShow[extension]];
      var fragmentedQuery = this._cardManager.showWin(query, [opts], true);
      if (fragmentedQuery) {
        this._ballManager.onWin(opts);
      }
      var historyID = this.getWinDuration(opts.pattern, fragmentedQuery && !this._quickStop);
      return fragmentedQuery && this._dispatcher.dispatch(new Log(opts.pattern, opts.winAmount, historyID, this._quickStop)), exports.SystemManager.getScheduler().timeToTick(historyID);
    }, set.prototype.showPostWin = function() {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._wins.length;
      for (; j < imagesLen; j++) {
        var lang = this._wins[j];
        if (lang) {
          this._cardManager.showPostWin(j, lang);
        }
      }
    }, set.prototype.winHandler = function(result) {
      /** @type {number} */
      var e = 0;
      /** @type {number} */
      var i = 0;
      var patchLen = this._wins.length;
      for (; i < patchLen; i++) {
        var lang = this._wins[i];
        if (lang) {
          this._cardManager.showWin(i, lang);
        }
        e = e + this._winAmounts[i];
      }
      var tehta = this.getRoundEndWinDelay(e);
      this._waitCtx = result.execDelayMs(tehta);
    }, set.prototype.postWinHandler = function(subgoal) {
      /** @type {number} */
      var totalSubsteps = 0;
      /** @type {number} */
      var n = 0;
      var numberOfFrustums = this._wins.length;
      for (; n < numberOfFrustums; n++) {
        var lang = this._wins[n];
        if (lang) {
          this._cardManager.showPostWin(n, lang);
        }
        totalSubsteps = totalSubsteps + this._winAmounts[n];
      }
      subgoal.complete();
    }, set.prototype.getWinDuration = function(formatters, customFormatters) {
      return customFormatters ? 1000 : 100;
    }, set.prototype.getCountDuration = function(to) {
      return 1000;
    }, set.prototype.getRoundEndWinDelay = function(a22) {
      return 1000;
    }, set;
  }(tree.WinManager);
  var gCb = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var nr = (function(fn) {
    /**
     * @param {?} event
     * @param {?} version
     * @param {?} result
     * @param {?} fileName
     * @return {?}
     */
    function DataURI(event, version, result, fileName) {
      var that = fn.call(this, event, version, result, fileName) || this;
      return tree.GuaranteedJackpotManager.create(that._config, that._dispatcher).init(), that;
    }
    gCb(DataURI, fn);
    /**
     * @return {?}
     */
    DataURI.prototype.createConfig = function() {
      return new Config;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createGameSetting = function() {
      return new qe;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createExternalInterface = function() {
      return new HANDLER_TYPE(this._dispatcher, this._gameSettings, this._roundHandler, this._betSettings, this._autoplaySettings, this._config);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.initGame = function() {
      fn.prototype.initGame.call(this);
      var cx = self.ResourceManager.getInstance().getEntityManager();
      this._entity = cx.create("?");
      cx.add("main", this._entity);
      this.createBetCommandConverter();
      this.createJackpotCommandConverter();
      this.createFeatureCommandConverter();
      this.createCardCommandConverter();
      this.createLogicCommandConverter();
      this.createGambleCommandConverter();
      this._betSettings = this.createBetSettings();
      this.createBetController(this._betSettings);
      this._autoplaySettings = this.createAutoplaySettings();
      this.createAutoplayHandler(this._autoplaySettings, this._roundHandler);
      this.createSoundManager();
      this.createRealityCheckManager();
      this._bonusBalanceManager = this.createBonusBalanceManager();
      this._paytableData = this.createPaytableHandler(this._betSettings);
      this._entity.getDisplay("pngLogo").setVisible(this._config.showPoweredBy);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createBonusBalanceManager = function() {
      return new oi(this._dispatcher, this._roundHandler);
    };
    /**
     * @param {number} value
     * @return {?}
     */
    DataURI.prototype.createPaytableHandler = function(value) {
      return new presenter.PaytableData(value, 1);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createJackpotCommandConverter = function() {
      new tree.JackpotCommandConverter(this._dispatcher);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createBetCommandConverter = function() {
      new self.BetCommandConverter(this._dispatcher);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createFeatureCommandConverter = function() {
      new Xe(this._dispatcher, []);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createCardCommandConverter = function() {
      new Re(this._dispatcher);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createLogicCommandConverter = function() {
      new tn(this._dispatcher);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createGambleCommandConverter = function() {
      new presenter.GambleCommandConverter(this._dispatcher);
    };
    /**
     * @param {!Object} name
     * @return {undefined}
     */
    DataURI.prototype.createBetController = function(name) {
      new DooberTooltip(this._dispatcher, this._roundHandler, name, this._config);
    };
    /**
     * @param {string} scoId
     * @param {!Object} attempt
     * @return {undefined}
     */
    DataURI.prototype.createAutoplayHandler = function(scoId, attempt) {
      new SCORMAPI(this._dispatcher, scoId, attempt, this._config);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createBetSettings = function() {
      return new ctx(4, 5, 0, 0, 25);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createAutoplaySettings = function() {
      var config = this._config;
      return new PistonProcessSpawner(true, true, config.autoplayReset, config.autoplayLimits, config.autoPlayResume);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createLogicManager = function() {
      var p = this.createCardManager();
      var r = this.createBallManager();
      this._winManager = this.createWinManager(p, r);
      var data = this.createJackpotManager();
      var bs = this.createFeatureManager(r, this._winManager, data);
      var es = this.createGambleManager();
      return new CSSPropTween(this._dispatcher, this._logicQueue, this._roundHandler, this._gameSettings, this._config, this._betSettings, p, r, this._winManager, bs, es);
    };
    /**
     * @param {string} start
     * @param {!Function} stack
     * @param {string} text
     * @return {?}
     */
    DataURI.prototype.createFeatureManager = function(start, stack, text) {
      return new RrdGraphDesc(this._dispatcher, this._logicQueue, text, this._config, this._roundHandler, stack, this._betSettings, start);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createGambleManager = function() {
      return new presenter.GambleManager(this._dispatcher, this._logicQueue, this._roundHandler, this._betSettings, true);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createCardManager = function() {
      return new Le(this._dispatcher, this._entity, this._betSettings);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createBallManager = function() {
      return new fe(this._dispatcher, this._betSettings, this._entity);
    };
    /**
     * @param {string} name
     * @param {string} options
     * @return {?}
     */
    DataURI.prototype.createWinManager = function(name, options) {
      return new ShimCache(this._dispatcher, name, options, this._gameSettings);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createJackpotManager = function() {
      return new tree.JackpotManager(this._dispatcher, this._config);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    DataURI.prototype.createUI = function(options) {
      return new CompileContext(this._dispatcher, this._config, this._winManager, options);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createViewFactory = function() {
      return new presenter.VideoSlotViewFactory;
    };
    /**
     * @param {!Image} chart
     * @return {?}
     */
    DataURI.prototype.createWinHandler = function(chart) {
      return chart.getAnimation("winCounter"), null;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createSoundManager = function() {
      return new ln(this._dispatcher, this._gameSettings, this._betSettings, this._config);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createRealityCheckManager = function() {
      new tree.RealityCheckManager(this._dispatcher, this._config);
    };
  }(self.CasinoGame), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var initUndefinedCondition = (function(r) {
    /**
     * @param {?} fn
     * @return {?}
     */
    function model(fn) {
      var $ = r.call(this, model.EXTRA_BALL) || this;
      return $._isBigPrice = fn, $;
    }
    nr(model, r);
    Object.defineProperty(model.prototype, "bigPrice", {
      get : function() {
        return this._isBigPrice;
      },
      enumerable : true,
      configurable : true
    });
    /** @type {string} */
    model.EXTRA_BALL = "EXTRA_BALL";
  }(exports.MegatonEvent), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var createClass = (function(group) {
    /**
     * @param {!HTMLElement} item
     * @param {?} n
     * @param {number} i
     * @return {?}
     */
    function left(item, n, i) {
      if (void 0 === i) {
        /** @type {number} */
        i = 1;
      }
      var o = group.call(this, item, n, i) || this;
      return item.addEventListener(ChangeEvent.SPINANSWER, function() {
        return o.onGameStarted();
      }), item.addEventListener(presenter.VideoSlotUIEvent.SPIN_OR_CONTINUE, function() {
        return o.hideOnSpin();
      }), o;
    }
    initUndefinedCondition(left, group);
    /**
     * @return {undefined}
     */
    left.prototype.hideOnSpin = function() {
      if (this._running && this._enabled) {
        this.onContinue();
      }
    };
  }(tree.CommonSplashManager), function() {
    /**
     * @param {!HTMLElement} _
     * @param {!Image} s
     * @param {!Object} view
     * @return {undefined}
     */
    function f(_, s, view) {
      var base = this;
      /** @type {!Object} */
      this._view = view;
      this._counter = new tree.WinCounter;
      this._counter.addListener(function(t) {
        return base.onCounter(t);
      });
      this._panel = s.getAnimation("popup");
      this.clear();
      _.addEventListener(Log.VBWINEVENT, function(eventName) {
        return base.onWin(eventName);
      });
      _.addEventListener(binding.VBWINENDEVENT, function() {
        return base.clear();
      });
    }
    /**
     * @return {undefined}
     */
    f.prototype.clear = function() {
      this._panel.play("hidden");
    };
    /**
     * @return {undefined}
     */
    f.prototype.show = function() {
      this._panel.play("show");
    };
    /**
     * @param {string} msg
     * @param {undefined} key
     * @param {undefined} value
     * @return {undefined}
     */
    f.prototype.startWin = function(msg, key, value) {
      this.show();
      this._view.setMessage(msg, "");
      this._counter.setValue(0, 0, false);
      this._counter.addValue(key, value);
    };
    /**
     * @param {!Object} e
     * @return {undefined}
     */
    f.prototype.onCounter = function(e) {
      if (e.type === exports.ChangeEvent.CHANGE) {
        this._view.setWin(this._counter.value, this._counter.isCapped);
      }
    };
    /**
     * @param {number} event
     * @return {undefined}
     */
    f.prototype.onWin = function(event) {
    };
  }(), function() {
    /**
     * @param {!Image} layer
     * @return {undefined}
     */
    function init(layer) {
      this._valueTextField = layer.getTextField("popup.value");
      this._headerTextField = layer.getTextField("popup.header");
      this._panel = layer.getAnimation("popup");
    }
    /**
     * @param {string} message
     * @param {string} data
     * @return {undefined}
     */
    init.prototype.setMessage = function(message, data) {
      this._headerTextField.setText(message);
    };
    /**
     * @param {number} num
     * @return {undefined}
     */
    init.prototype.setWin = function(num) {
      /** @type {string} */
      var e = String(Math.floor(num));
      this._valueTextField.setText(e);
    };
    /**
     * @param {?} t
     * @return {undefined}
     */
    init.prototype.setFinalWin = function(t) {
      /** @type {string} */
      var e = String(Math.floor(t));
      this._valueTextField.setText(e);
    };
    /**
     * @param {?} state
     * @return {undefined}
     */
    init.prototype.setMode = function(state) {
    };
    /**
     * @param {?} styles
     * @return {undefined}
     */
    init.prototype.setDefaultStyle = function(styles) {
    };
  }(), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var col = function(obj) {
    /**
     * @return {?}
     */
    function Storage() {
      var r = obj.call(this) || this;
      return r._cards = [0, 0, 0, 0, 0], r._winCode = 0, r._winAmount = 0, r._faceUp = false, r._sndEnable = true, r;
    }
    return createClass(Storage, obj), Object.defineProperty(Storage.prototype, "cards", {
      get : function() {
        return this._cards;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "winCode", {
      get : function() {
        return this._winCode;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "faceUp", {
      get : function() {
        return this._faceUp;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "winShown", {
      get : function() {
        return this._winShown;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "sndEnable", {
      get : function() {
        return this._sndEnable;
      },
      enumerable : true,
      configurable : true
    }), Storage.prototype.setValues = function(a, b, type, url) {
      /** @type {!Array} */
      this._cards = [];
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        this._cards[i] = a[i] < 99 ? a[i] : b[i];
      }
      /** @type {number} */
      this._winCode = type;
      /** @type {number} */
      this._winAmount = url;
      this.notify(Storage.CARDS);
    }, Storage.prototype.showHold = function() {
      this.notify(Storage.HOLD);
    }, Storage.prototype.showFaces = function(isLeft) {
      /** @type {number} */
      var n = this._faceUp !== isLeft ? 1 : 0;
      return this._faceUp = isLeft, this.notify(Storage.FACE), n;
    }, Storage.prototype.showWin = function(json) {
      this._winShown = json;
      this.notify(Storage.WIN);
    }, Storage.prototype.setSndEnable = function(isIron) {
      /** @type {boolean} */
      this._sndEnable = isIron;
    }, Storage.CARDS = 1, Storage.HOLD = 2, Storage.FACE = 4, Storage.WIN = 8, Storage;
  }(exports.Model);
  var makeSuite = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ___err = function(update) {
    /**
     * @param {number} name
     * @return {?}
     */
    function Panel(name) {
      if (void 0 === name) {
        /** @type {null} */
        name = null;
      }
      var obj = update.call(this) || this;
      return obj._coins = 1, null !== name ? obj._denominations = name : (obj._denominations = [], obj._denominations[0] = [1, 2, 5, 10, 20, 25, 50, 100, 500], obj._denominations[1] = [1, 2, 5, 10, 20, 25, 50, 100], obj._denominations[2] = [1, 2, 5, 10, 20, 25, 50], obj._denominations[3] = [1, 2, 5, 10, 20, 25], obj._denominations[4] = [1, 2, 5, 10], obj._denominations[5] = [1, 2, 5]), obj._denomIdx = 0, obj._hands = [1, 4, 10, 25, 50, 100], obj._handIdx = 0, obj;
    }
    return makeSuite(Panel, update), Object.defineProperty(Panel.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      set : function(val) {
        this._coins = val;
        this.notify(Panel.COINS);
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Panel.prototype, "hands", {
      get : function() {
        return this._hands[this._handIdx];
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Panel.prototype, "handIdx", {
      get : function() {
        return this._handIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Panel.prototype, "denomIdx", {
      get : function() {
        return this._denomIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Panel.prototype, "denomination", {
      get : function() {
        return this._denominations[this._handIdx][this._denomIdx];
      },
      set : function(mymuted) {
        /** @type {number} */
        this._denomIdx = 0;
        for (; this._denomIdx < this._denominations[this._handIdx].length && !(this._denominations[this._handIdx][this._denomIdx] >= mymuted); this._denomIdx++) {
        }
        if (this._denomIdx >= this._denominations[this._handIdx].length) {
          /** @type {number} */
          this._denomIdx = this._denominations[this._handIdx].length - 1;
        }
        this.notify(Panel.DENOM);
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Panel.prototype, "denominations", {
      get : function() {
        return this._denominations[this._handIdx];
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Panel.prototype, "maxCoins", {
      get : function() {
        return 5;
      },
      enumerable : true,
      configurable : true
    }), Panel.prototype.init = function(x, arr) {
      /** @type {!Object} */
      this._denominations = x;
      /** @type {string} */
      this._hands = arr;
      this.notify();
    }, Panel.prototype.setHands = function(args, setOperation) {
      if (void 0 === setOperation) {
        /** @type {boolean} */
        setOperation = true;
      }
      var envvar = this._handIdx;
      this._handIdx = this._hands.indexOf(args);
      if (setOperation && envvar !== this._handIdx) {
        this.notify(Panel.HANDS);
      }
    }, Panel.prototype.setBet = function(val, obj, i) {
      /** @type {number} */
      this._coins = val;
      this.notify(Panel.COINS);
      this.setHands(i, true);
      /** @type {string} */
      this.denomination = obj;
    }, Panel.prototype.betMax = function() {
      /** @type {number} */
      this._coins = 5;
      this.notify();
    }, Panel.prototype.incCoins = function() {
      if (this._coins < 5) {
        this._coins++;
        this.notify(Panel.COINS);
      }
    }, Panel.prototype.decCoins = function() {
      if (this._coins > 0) {
        this._coins--;
        this.notify(Panel.COINS);
      }
    }, Panel.prototype.incDenom = function() {
      if (this._denomIdx < this._denominations[this._handIdx].length - 1) {
        this._denomIdx++;
        this.notify(Panel.DENOM);
      }
    }, Panel.prototype.decDenom = function() {
      if (this._denomIdx > 0) {
        this._denomIdx--;
        this.notify(Panel.DENOM);
      }
    }, Panel.prototype.incHands = function() {
      var t = this.denomination;
      if (this._handIdx < this._hands.length - 1) {
        this._handIdx++;
        this.denomination = t;
        this.notify(Panel.HANDS);
      }
    }, Panel.prototype.decHands = function() {
      var t = this.denomination;
      if (this._handIdx > 0) {
        this._handIdx--;
        this.denomination = t;
        this.notify(Panel.HANDS);
      }
    }, Panel.prototype.adjustBet = function(canCreateDiscussions) {
      if (canCreateDiscussions >= this.getBetAmount()) {
        return true;
      }
      var tempMatch = this.denomination;
      var i = this.coins;
      for (; canCreateDiscussions < this.getBetAmount();) {
        if (!this.betAdjustDown()) {
          return this.denomination = tempMatch, this.coins = i, false;
        }
      }
      return this.notify(Panel.COINS | Panel.DENOM), true;
    }, Panel.prototype.betAdjustDown = function() {
      var field_bits = this.denomination;
      /** @type {boolean} */
      var field_name = false;
      return this._denomIdx > 0 && this._denomIdx--, field_bits === this.denomination ? this._coins > 1 && (this._coins--, field_name = true) : field_name = true, field_name;
    }, Panel.prototype.getBetAmount = function() {
      return this.coins * this.denomination * this.hands;
    }, Panel.prototype.getHandsCount = function() {
      return this._hands.length;
    }, Panel.ENABLED = 1, Panel.COINS = 2, Panel.HANDS = 4, Panel.DENOM = 8, Panel.DENOMINATIONS = 16, Panel;
  }(exports.Model);
  var loopBelongsToOutput = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var C = function(output) {
    /**
     * @return {?}
     */
    function s() {
      var unit_chooser = output.call(this) || this;
      return unit_chooser._winCounts = new Array(s.NUMLINES), unit_chooser;
    }
    return loopBelongsToOutput(s, output), Object.defineProperty(s.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(s.prototype, "cardsHeld", {
      get : function() {
        return this._cardsHeld;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(s.prototype, "holdMask", {
      set : function(value) {
        /** @type {number} */
        var e = 0;
        /** @type {number} */
        var position = 0;
        for (; position < 5; position++) {
          if (value & 1 << position) {
            e++;
          }
        }
        /** @type {number} */
        this._cardsHeld = e;
      },
      enumerable : true,
      configurable : true
    }), s.prototype.getWinCountOnLine = function(areanumber) {
      return this._winCounts[areanumber];
    }, s.prototype.clear = function(triggerUpdate) {
      if (void 0 === triggerUpdate && (triggerUpdate = false), this._cardsHeld = 0, this._winAmount > 0 || triggerUpdate) {
        /** @type {number} */
        var thatpos = 0;
        var i = this._winCounts.length;
        for (; thatpos < i; thatpos++) {
          /** @type {number} */
          this._winCounts[thatpos] = 0;
        }
        /** @type {number} */
        this._winAmount = 0;
        /** @type {number} */
        var hit = (1 << this._winCounts.length) - 1;
        this.notify(hit | s.CLEAR);
      }
    }, s.prototype.showWin = function(json, e, islongclick) {
      this._winCounts[e]++;
      this._winAmount += islongclick;
      /** @type {number} */
      var error = 1 << e;
      this.notify(error);
    }, s.prototype.outro = function() {
      /** @type {number} */
      var error = 1 << s.NUMLINES;
      this.notify(error);
    }, s.BIGWIN_VALUE = 400000, s.NUMLINES = 18, s.CLEAR = 1 << 19, s;
  }(exports.Model);
  var editorKeyHandler = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var req = function(t) {
    /**
     * @param {string} type
     * @return {?}
     */
    function e(type) {
      var record = t.call(this, e.BONUS_SHOW_GAME) || this;
      return record._groupId = type, record;
    }
    return editorKeyHandler(e, t), Object.defineProperty(e.prototype, "groupId", {
      get : function() {
        return this._groupId;
      },
      enumerable : true,
      configurable : true
    }), e.BONUS_SHOW_GAME = "BONUS_UI_SHOW_GAME", e.SHOW_PANELS = 0, e.HIDE_PANELS = 1, e.SHOW_BONUS = 2, e.HIDE_BONUS = 3, e;
  }(exports.MegatonEvent);
  var ScopeChain = function() {
    /**
     * @param {!Object} name
     * @param {!Element} done
     * @param {!Object} value
     * @param {!Object} dispatcher
     * @return {undefined}
     */
    function Store(name, done, value, dispatcher) {
      var self = this;
      /** @type {!Object} */
      this._data = name;
      /** @type {!Element} */
      this._view = done;
      /** @type {!Object} */
      this._dispatcher = dispatcher;
      name.addListener(function(data) {
        return self.onData(data);
      });
      value.addListener(function(err) {
        return self.onBetSettings(err);
      });
    }
    return Store.prototype.onData = function(data) {
      /** @type {number} */
      var i = 0;
      for (; i < C.NUMLINES; i++) {
        if (data.isChanged(1 << i)) {
          this._view.updateLine(i, this._data.getWinCountOnLine(i));
        }
      }
    }, Store.prototype.onBetSettings = function(x) {
      this._data.clear();
    }, Store;
  }();
  var guessBindingsFromDom = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var me = function(options) {
    /**
     * @param {?} child
     * @param {number} index
     * @return {?}
     */
    function ScopeError(child, index) {
      var REGEX = options.call(this, child) || this;
      return REGEX._index = index, REGEX;
    }
    return guessBindingsFromDom(ScopeError, options), Object.defineProperty(ScopeError.prototype, "index", {
      get : function() {
        return this._index;
      },
      enumerable : true,
      configurable : true
    }), ScopeError.MAX_WIN = "MAX_WIN", ScopeError.MAX_COIN_WIN = "MAX_COIN_WIN", ScopeError.BONUS_WIN = "BONUS_WIN", ScopeError.BONUS_LOSE = "BONUS_LOSE", ScopeError.JP_WIN = "JP_WIN", ScopeError.MAINHAND_WIN = "MAINHAND_WIN", ScopeError.BONUS_PUSH = "BONUS_PUSH", ScopeError.LOSE = "LOSE", ScopeError;
  }(exports.MegatonEvent);
  var _setHandleValue = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Adapter = function(step) {
    /**
     * @param {?} i
     * @param {number} key
     * @param {number} value
     * @param {?} s
     * @param {?} n
     * @return {?}
     */
    function e(i, key, value, s, n) {
      var scope = step.call(this, i) || this;
      return scope._handData = key, scope._winData = value, scope._betSettings = s, scope._gameSettings = n, scope._maxHandWin = 0, scope._winSequence = [function(data) {
        return scope.winIntroHandler(data);
      }, function(t) {
        return scope.winProcessHandler(t);
      }, function(data) {
        return scope.winOutroHandler(data);
      }], scope;
    }
    return _setHandleValue(e, step), Object.defineProperty(e.prototype, "maxHandWin", {
      get : function() {
        return this.maxHandWin;
      },
      enumerable : true,
      configurable : true
    }), e.prototype.clear = function() {
      this._winData.clear();
      /** @type {number} */
      var j = 0;
      var imagesLen = this._handData.length;
      for (; j < imagesLen; j++) {
        this._handData[j].showWin(false);
      }
    }, e.prototype.handleWin = function(primaryTxHex) {
      var window = this;
      primaryTxHex.execHandler(function(t) {
        return window.winHandler(t);
      });
    }, e.prototype.winHandler = function(result) {
      result.execSequence(this._winSequence);
    }, e.prototype.winIntroHandler = function(subgoal) {
      /** @type {number} */
      this._maxHandWin = 0;
      subgoal.complete();
    }, e.prototype.winProcessHandler = function(s) {
      var chunk = this._betSettings.hands;
      var link_id = this._gameSettings.fastPlay;
      if (s.state < 2 * chunk) {
        /** @type {number} */
        var sample = Math.floor(s.state / 2);
        /** @type {number} */
        var z = 0;
        if (s.state % 2 == 1) {
          this._winData.showWin(sample, this._handData[sample].winCode, this._handData[sample].winAmount);
          this._handData[sample].showWin(true);
          /** @type {number} */
          var r = this._handData[sample].winAmount / (this._betSettings.denomination * this._betSettings.coins);
          if (this._maxHandWin < r) {
            /** @type {number} */
            this._maxHandWin = r;
          } else {
            this._maxHandWin;
          }
          if (0 === sample && this._handData[sample].winAmount > 0) {
            this._dispatcher.dispatch(new me(me.MAINHAND_WIN, 0));
          }
        } else {
          switch(this._handData[sample].showFaces(true), chunk) {
            case 1:
              /** @type {number} */
              z = link_id ? 300 : 800;
              break;
            case 4:
              /** @type {number} */
              z = link_id ? 600 : 800;
              break;
            case 10:
              /** @type {number} */
              z = 0 === sample ? link_id ? 600 : 1200 : link_id ? 150 : 600;
              break;
            case 25:
              /** @type {number} */
              z = 0 === sample ? link_id ? 600 : 1200 : link_id ? 30 : 150;
              break;
            case 50:
              /** @type {number} */
              z = 0 === sample ? link_id ? 600 : 1200 : link_id ? 1 : 50;
              break;
            case 100:
              /** @type {number} */
              z = 0 === sample ? link_id ? 600 : 1200 : link_id ? 0 : 1;
          }
          /** @type {number} */
          z = z * ((6 - this._winData.cardsHeld) / 6);
        }
        s.startDelayMs(z);
      } else {
        s.complete();
      }
    }, e.prototype.winOutroHandler = function(subgoal) {
      if (this._maxHandWin > 0) {
        this._dispatcher.dispatch(new me(me.MAX_COIN_WIN, this._maxHandWin));
      }
      this._winData.outro();
      subgoal.complete();
    }, e;
  }(exports.EventProcessor);
  var HtmlAttribute = function() {
    /**
     * @param {!Entity} entity
     * @param {number} time
     * @param {?} workspaceNum
     * @return {undefined}
     */
    function set(entity, time, workspaceNum) {
      /** @type {!Array} */
      this._winLineAnimsSH = new Array(time);
      /** @type {!Array} */
      this._winCellAnimsSH = new Array(time);
      /** @type {!Array} */
      this._winLineCounters = new Array(time);
      /** @type {!Array} */
      this._winLineAnimsMH = new Array(time);
      /** @type {!Array} */
      this._winCellAnimsMH = new Array(time);
      /** @type {!Array} */
      this._animStates = new Array(time);
      this._dispather = workspaceNum;
      /** @type {!Entity} */
      this._entity = entity;
      /** @type {number} */
      var i = 0;
      for (; i < time; i++) {
        this.locateWinLineCounter(entity, i);
        this.locateWinLineAnim(entity, i);
        /** @type {boolean} */
        this._animStates[i] = false;
      }
    }
    return set.prototype.updateLine = function(i, n) {
      this._winLineCounters[i].setText(n < 1 ? "" : "x " + String(n));
      if (n > 0 !== this._animStates[i]) {
        this._winLineAnimsSH[i].play(n > 0 ? "win" : "fade");
        this._winCellAnimsSH[i].play(n > 0 ? "win" : "fade");
        this._winLineAnimsMH[i].play(n > 0 ? "win" : "fade");
        this._winCellAnimsMH[i].play(n > 0 ? "win" : "fade");
        /** @type {boolean} */
        this._animStates[i] = n > 0;
      }
    }, set.prototype.locateWinLineCounter = function(originToDestIdentifier, destIdentifier) {
      this._winLineCounters[destIdentifier] = originToDestIdentifier.getTextField("multiHand.t" + destIdentifier);
    }, set.prototype.locateWinLineAnim = function(res, i) {
      this._winLineAnimsSH[i] = res.getAnimation("singleHand.rowBgs.r" + i);
      this._winCellAnimsSH[i] = res.getAnimation("singleHand.winMarkers.r" + i);
      this._winLineAnimsMH[i] = res.getAnimation("multiHand.rowBgs.r" + i);
      this._winCellAnimsMH[i] = res.getAnimation("multiHand.winMarkers.r" + i);
      this._winLineAnimsSH[i].play("normal");
      this._winCellAnimsSH[i].play("normal");
      this._winLineAnimsMH[i].play("normal");
      this._winCellAnimsMH[i].play("normal");
    }, set;
  }();
  var Dn = function() {
    /**
     * @param {string} options
     * @param {?} opts
     * @param {?} qaTilesPath
     * @param {!Array} tigerTilesPath
     * @param {?} name
     * @return {undefined}
     */
    function exports(options, opts, qaTilesPath, tigerTilesPath, name) {
      this._winData = new C;
      this._winView = new HtmlAttribute(name, C.NUMLINES, options);
      this._winController = new ScopeChain(this._winData, this._winView, qaTilesPath.betSettings, options);
      this._winHander = new Adapter(options, opts.handData, this._winData, qaTilesPath.betSettings, tigerTilesPath);
      this._winData.clear(true);
    }
    return Object.defineProperty(exports.prototype, "winData", {
      get : function() {
        return this._winData;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(exports.prototype, "winHander", {
      get : function() {
        return this._winHander;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }();
  var Kern = function() {
    /**
     * @param {!HTMLElement} renderer
     * @param {!Object} e
     * @param {number} n
     * @param {number} format
     * @param {number} data
     * @param {number} isServer
     * @param {!Object} game
     * @param {number} type
     * @param {?} extraAttr
     * @return {undefined}
     */
    function init(renderer, e, n, format, data, isServer, game, type, extraAttr) {
      var Ext = this;
      /** @type {number} */
      this._prevZoomIdx = 0;
      /** @type {!Object} */
      this._gameState = e;
      /** @type {number} */
      this._handData = n;
      /** @type {number} */
      this._layoutView = format;
      /** @type {number} */
      this._zoomHandView = data;
      /** @type {number} */
      this._zoomHandContainer = isServer;
      /** @type {!Object} */
      this._betSettings = game;
      /** @type {number} */
      this._handTextData = type;
      this._gameSettings = extraAttr;
      /** @type {number} */
      this._layoutIdx = 0;
      var HistogramAutoStyler = this;
      /** @type {number} */
      var i = 0;
      var argl = n.length;
      for (; i < argl; i++) {
        !function(item, canCreateDiscussions) {
          HistogramAutoStyler._handData[item].addListener(function(e) {
            return Ext.onHandData(e, item);
          });
        }(i);
      }
      isServer.initButtons(function(t, e, me) {
        return Ext.onHandZoom(t, e, me);
      });
      game.addListener(function(err) {
        return Ext.onBetSettings(err);
      });
      e.addListener(function(t) {
        return Ext.onGameState(t);
      });
      renderer.addEventListener(req.BONUS_SHOW_GAME, function(checked) {
        return Ext.onHandsVisible(checked);
      });
      renderer.addEventListener(me.LOSE, function(t) {
        return Ext.onLose(t);
      });
      renderer.addEventListener(self.RoundEvent.ROUNDSTART, function(key) {
        return Ext.onRoundStart(key);
      });
    }
    return init.prototype.setWinData = function(src) {
      var QuickBase = this;
      /** @type {!Object} */
      this._winData = src;
      src.addListener(function(val) {
        return QuickBase.onWinData(val);
      });
    }, init.prototype.onHandZoom = function(source, e, player) {
      var latLng = this._zoomHandContainer.getGlobalHandPosition(e);
      this._zoomHandView.updatePosition(latLng);
      var cards = this._handData[player];
      var consumedCount = this._handTextData.getWinText(cards.winCode);
      if (this._zoomHandView.setCards(cards.cards, cards.winCode, consumedCount), void 0 !== source && source.type === self.ButtonHoverEvent.HOVER) {
        /** @type {boolean} */
        var a = !(!source.state && this._prevZoomIdx === e);
        this._zoomHandView.show(a);
        if (source.state) {
          /** @type {number} */
          this._prevZoomIdx = e;
        }
      }
    }, init.prototype.onLose = function(widget) {
      this._layoutView.handViews[0].showLose();
    }, init.prototype.onRoundStart = function(ast) {
      this._layoutView.handViews[0].hideHud();
    }, init.prototype.onWinData = function(m) {
      if (m.isChanged(C.CLEAR)) {
        this._zoomHandContainer.enableHandButtons(false, this._layoutIdx);
        this._zoomHandView.show(false);
      } else {
        if (m.isChanged(1 << C.NUMLINES)) {
          this._layoutIdx = this._betSettings.handIdx;
          this._zoomHandContainer.enableHandButtons(true, this._layoutIdx);
          this._zoomHandView.show(false);
        }
      }
    }, init.prototype.onHandData = function(t, i) {
      var init_systems = this._layoutView.handViews;
      if (!(i >= init_systems.length)) {
        if (t.isChanged(col.CARDS)) {
          var outFull = this._handData[i].winCode;
          var consumedCount = this._handTextData.getWinText(outFull);
          init_systems[i].setCards(this._handData[i].cards, outFull, consumedCount);
        }
        if (t.isChanged(col.HOLD)) {
          if (!this._handData[i].faceUp) {
            init_systems[i].showHold(this._gameState.holdMask);
          }
        }
        if (t.isChanged(col.FACE)) {
          init_systems[i].showFace(this._handData[i].faceUp, this._gameState.holdMask, this._gameSettings.fastPlay, 0, this._handData[i].sndEnable);
        }
        if (t.isChanged(col.WIN)) {
          init_systems[i].showWin(this._handData[i].winShown);
        }
      }
    }, init.prototype.onBetSettings = function(data) {
      if (data.isChanged(___err.HANDS)) {
        this._gameState.setHoldMask(0);
        this._layoutView.selectLayout(this._betSettings.handIdx);
        /** @type {number} */
        var j = 0;
        var imagesLen = this._handData.length;
        for (; j < imagesLen; j++) {
          this._handData[j].showFaces(false);
          this._handData[j].showWin(false);
        }
      }
    }, init.prototype.onGameState = function(result) {
      /** @type {number} */
      var iAddressLoop = 1;
      var addressCount = this._betSettings.hands;
      for (; iAddressLoop < addressCount; iAddressLoop++) {
        this._handData[iAddressLoop].showHold();
      }
    }, init.prototype.onHandsVisible = function(p) {
      if (p.groupId === req.SHOW_BONUS) {
        this._layoutView.setLayoutVisible(false);
        this._gameState.setHoldMask(0);
        /** @type {number} */
        var j = 0;
        var statesLength = this._handData.length;
        for (; j < statesLength; j++) {
          this._handData[j].setSndEnable(false);
          this._handData[j].showFaces(false);
          this._handData[j].showWin(false);
        }
        this._zoomHandContainer.enableHandButtons(false, this._layoutIdx);
        this._zoomHandView.show(false);
      } else {
        if (p.groupId === req.HIDE_BONUS) {
          /** @type {number} */
          j = 0;
          statesLength = this._handData.length;
          for (; j < statesLength; j++) {
            this._handData[j].setSndEnable(true);
          }
          this._layoutView.setLayoutVisible(true);
        }
      }
    }, init;
  }();
  var ReportData = function() {
    /**
     * @param {number} downcodeFunc
     * @param {?} firebaseRef
     * @return {undefined}
     */
    function wxmlToFirebase(downcodeFunc, firebaseRef) {
      /** @type {number} */
      this._handData = downcodeFunc;
      this._gameSettings = firebaseRef;
    }
    return wxmlToFirebase.prototype.handleFlip = function(rows, e, i) {
      /** @type {number} */
      var msg = 0;
      /** @type {number} */
      var thatpos = 0;
      for (; thatpos < i; thatpos++) {
        msg = msg + this._handData[thatpos].showFaces(e);
      }
      rows.startDelayMs(0 === msg ? 0 : this._gameSettings.fastPlay ? 100 : 600);
    }, wxmlToFirebase;
  }();
  var Vn = function() {
    /**
     * @param {?} callback
     * @return {undefined}
     */
    function timer(callback) {
      /** @type {!Array} */
      this._winTexts = ["", "IDS_VP_GAMEOVER", "IDS_VP_JACKSORBETTER", "IDS_VP_2PAIR", "IDS_VP_3OAK", "IDS_VP_STRAIGHT", "IDS_VP_FLUSH", "IDS_VP_FULLHOUSE", "IDS_VP_4OAK", "IDS_VP_STRAIGHTFLUSH", "IDS_VP_5OAK", "IDS_VP_WILDROYALFLUSH", "IDS_VP_4DEUCES", "IDS_VP_ROYALFLUSH", "IDS_VP_5WILDS", "IDS_VP_4OAK", "IDS_VP_4OAK", "IDS_VP_4ACES"];
    }
    return timer.prototype.getWinText = function(dir) {
      return this._winTexts[dir];
    }, timer;
  }();
  var originalIPCMainOnce = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var screenUtil = function(fn) {
    /**
     * @return {?}
     */
    function TreeNode10() {
      return null !== fn && fn.apply(this, arguments) || this;
    }
    return originalIPCMainOnce(TreeNode10, fn), TreeNode10.SND_CARD_FLIP = "SND_CARD_FLIP", TreeNode10.SND_ON_RECONNECT = "SND_ON_RECONNECT", TreeNode10.SND_CHANGE_PARAMS = "SND_CHANGE_PARAMS", TreeNode10.SND_FAST_CARD_FLIP = "SND_FAST_CARD_FLIP", TreeNode10;
  }(exports.MegatonEvent);
  var end = function() {
    /**
     * @return {undefined}
     */
    function record() {
    }
    return record.CARDS = "Cards", record.BONUS_MAINHAND = "bonus.mainhand_", record.BASE_MAINHAND = "base.mainhand_", record.LAYOUT = "layout", record.HAND = ".hand", record.POS = ".pos", record;
  }();
  var File = function() {
    /**
     * @param {?} className
     * @param {number} container
     * @param {undefined} radius
     * @param {undefined} width
     * @param {?} index
     * @param {!Array} height
     * @return {undefined}
     */
    function init(className, container, radius, width, index, height) {
      if (void 0 === height) {
        /** @type {boolean} */
        height = false;
      }
      /** @type {number} */
      this._layoutIdx = container;
      /** @type {boolean} */
      this._hidden = false;
      this._gameSettings = index;
      var p = this.createCard(container, radius);
      this.locateCard(className, container, radius, width, height).add(String(width), p);
      this._animation = p.getAnimation("");
      this._innerAnimation = p.getAnimation("inner");
    }
    return init.prototype.createCard = function(e, value) {
      var directory_epub = self.ResourceManager.getInstance().getEntityManager();
      /** @type {!Array} */
      var urls = ["", "4", "10", "25", "50", "100"];
      /** @type {number} */
      var c = 0;
      return 0 !== value && (c = e), directory_epub.create(end.CARDS + urls[c]);
    }, init.prototype.locateCard = function(c, i, name, x, shape) {
      switch(name) {
        case 0:
          return shape ? c.getHierarchy(end.BONUS_MAINHAND + (x + 1)) : c.getHierarchy(end.BASE_MAINHAND + (x + 1));
        default:
          return c.getHierarchy(end.LAYOUT + i + end.HAND + (name + 1) + end.POS + (x + 1));
      }
    }, init.prototype.setCardValue = function(second) {
      var e = this._cardValue;
      return 99 !== second && (this._cardValue = second), e;
    }, init.prototype.showFace = function(state, noBack) {
      if (!this._hidden) {
        if (noBack && this._layoutIdx <= 1) {
          if (true === this._gameSettings.fastPlay) {
            this._animation.play(state ? "showFast" : "hideFast");
          } else {
            this._animation.play(state ? "show" : "hide");
          }
        } else {
          this._animation.play(state ? "shown" : "hidden");
        }
        this._innerAnimation.play("face" + this._cardValue);
      }
    }, init.prototype.hide = function() {
      if (!this._hidden) {
        /** @type {boolean} */
        this._hidden = true;
        this._animation.play("bonus");
      }
    }, init.prototype.unHide = function() {
      /** @type {boolean} */
      this._hidden = false;
    }, init;
  }();
  var Macro = function() {
    /**
     * @param {string} p
     * @param {number} client
     * @param {number} path
     * @param {number} fileName
     * @param {!Object} value
     * @param {number} input
     * @return {undefined}
     */
    function init(p, client, path, fileName, value, input) {
      if (void 0 === input) {
        /** @type {boolean} */
        input = false;
      }
      /** @type {number} */
      this._handIdx = client;
      /** @type {number} */
      this._layoutIdx = path;
      /** @type {boolean} */
      this._faceUp = false;
      /** @type {number} */
      this._gameSettings = fileName;
      /** @type {!Object} */
      this._dispatcher = value;
      /** @type {boolean} */
      this._winShown = false;
      /** @type {!Array} */
      this._cards = new Array(5);
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        this._cards[i] = new File(p, path, client, i, fileName, input);
      }
      if (0 === path) {
        this._winHud = p.getAnimation("mainHand.winhudMH");
        this._winHud.play("line0");
        this._textField = p.getTextField("mainHand.winhudMH.messageText");
        this._winHudSH = p.getAnimation("mainHand.winhudSH");
        this._winHudSH.play("line0");
        this._textFieldSH = p.getTextField("mainHand.winhudSH.messageText");
      } else {
        this._winHud = p.getAnimation("layout" + path + ".hand" + (client + 1) + ".winhud");
        this._winHud.play("line0");
        this._textField = p.getTextField("layout" + path + ".hand" + (client + 1) + ".winhud.messageText");
      }
    }
    return Object.defineProperty(init.prototype, "cards", {
      get : function() {
        return this._cards;
      },
      enumerable : true,
      configurable : true
    }), init.prototype.setCards = function(cards, status, count) {
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        this._cards[i].setCardValue(cards[i]);
      }
      /** @type {string} */
      this._winCode = status;
      /** @type {boolean} */
      this._winText = count;
    }, init.prototype.showFace = function(v, n, b, err, acc) {
      var self = this;
      if (void 0 === err && (err = 0), void 0 === acc && (acc = true), v !== this._faceUp) {
        /** @type {number} */
        this._faceUp = v;
        var a = 0 === this._handIdx || this._handIdx < 4 && this._layoutIdx < 2 && v;
        if (a || this._layoutIdx < 3 && v) {
          exports.Task.createHandler(function(opt) {
            var i;
            if (0 === opt.state) {
              opt.next(err);
            }
            i = opt.state;
            for (; i < self._cards.length; i++) {
              if (0 == (n & 1 << i)) {
                self._cards[i].showFace(v, a);
                /** @type {number} */
                var u = a ? b ? 20 : 70 : b ? 0 : 75;
                opt.next(i);
                opt.startDelayMs(u);
                if (acc) {
                  if (0 === self._handIdx) {
                    if (b) {
                      if (0 === i && self._faceUp) {
                        self._dispatcher.dispatch(new screenUtil(screenUtil.SND_FAST_CARD_FLIP));
                      }
                    } else {
                      self._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                    }
                  } else {
                    if (v) {
                      if (2 === self._layoutIdx) {
                        if (b && 3 === i || !b) {
                          self._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                        }
                      } else {
                        self._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                      }
                    }
                  }
                }
                break;
              }
            }
          }).start();
        } else {
          /** @type {number} */
          var i = 0;
          for (; i < this._cards.length; i++) {
            if (0 == (n & 1 << i) && this._cards[i].showFace(v, a), acc && v) {
              switch(this._layoutIdx) {
                case 3:
                  if (3 === i) {
                    this._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                  }
                  break;
                case 4:
                  if (this._handIdx % 7 == 0 && 3 === i) {
                    this._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                  }
                  break;
                case 5:
                  if (b) {
                    if (0 === this._handIdx) {
                      this._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                    }
                  } else {
                    if (this._handIdx % 9 == 0) {
                      this._dispatcher.dispatch(new screenUtil(screenUtil.SND_CARD_FLIP));
                    }
                  }
              }
            }
          }
        }
      }
    }, init.prototype.showHold = function(shadowBits) {
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        this._cards[i].showFace(0 != (shadowBits & 1 << i), false);
      }
    }, init.prototype.showWin = function(json) {
      if (json !== this._winShown) {
        /** @type {string} */
        this._winShown = json;
        if (json) {
          if (this._winHud) {
            this._winHud.play(0 === this._winCode ? "lose" : "line" + this._winCode);
            if (0 === this._layoutIdx) {
              this._winHudSH.play("line" + this._winCode);
            }
          }
          this._textField.setText(this._winText);
          if (0 === this._layoutIdx) {
            this._textFieldSH.setText(this._winText);
          }
        } else {
          if (this._winHud) {
            this._winHud.play("line0");
            if (0 === this._layoutIdx) {
              this._winHudSH.play("line0");
            }
          }
          this._textField.setText("");
          if (0 === this._layoutIdx) {
            this._textFieldSH.setText("");
          }
        }
      } else {
        if (!(json || 0 !== this._layoutIdx)) {
          this.hideHud();
        }
      }
    }, init.prototype.showLose = function() {
      this._winHudSH.play("mainHandLose");
      this._winHud.play("mainHandLose");
      this._textFieldSH.setText("IDS_VP_GAMEOVER");
      this._textField.setText("IDS_VP_GAMEOVER");
    }, init.prototype.hideHud = function() {
      this._winHudSH.play("line0");
      this._winHud.play("line0");
      this._textFieldSH.setText("");
      this._textField.setText("");
    }, init.prototype.setFaceUp = function(isIron) {
      /** @type {number} */
      this._faceUp = isIron;
    }, init;
  }();
  var project = function() {
    /**
     * @param {!Entity} target
     * @param {boolean} tokens
     * @param {!Object} index
     * @return {undefined}
     */
    function set(target, tokens, index) {
      /** @type {!Array} */
      this._layers = [];
      /** @type {!Array} */
      this._handViews = [];
      /** @type {!Entity} */
      this._entity = target;
      /** @type {boolean} */
      this._gameSettings = tokens;
      /** @type {!Object} */
      this._dispatcher = index;
      this._layoutDisplay = target.getDisplay("base");
      this._handViews.push([new Macro(this._entity, 0, 0, tokens, index)]);
      /** @type {number} */
      var i = 1;
      /** @type {number} */
      var z = set.LAYOUTS.length;
      for (; i < z; i++) {
        var category = set.LAYOUTS[i];
        /** @type {!Array} */
        var result = new Array(category);
        result[0] = this._handViews[0][0];
        /** @type {number} */
        var name = 1;
        for (; name < category; name++) {
          result[name] = new Macro(this._entity, name, i, tokens, index);
        }
        this._handViews.push(result);
      }
      /** @type {number} */
      name = 0;
      /** @type {number} */
      z = set.LAYOUTS.length;
      for (; name < z; name++) {
        this._layers.push(this._entity.getDisplay("layer" + name));
      }
      this._mainHand = this._entity.getAnimation("base.mainHand");
      this._multiHands = this._entity.getAnimation("base.multiHands");
      this.selectLayout(0);
    }
    return Object.defineProperty(set.prototype, "handViews", {
      get : function() {
        return this._handViews[this._layerIdx];
      },
      enumerable : true,
      configurable : true
    }), set.prototype.selectLayout = function(index) {
      /** @type {number} */
      this._layerIdx = index;
      if (this._layerIdx > 0) {
        this._mainHand.play("multiHand");
      } else {
        this._mainHand.play("singleHand");
      }
      this._multiHands.play("layout" + this._layerIdx);
      /** @type {number} */
      var id = 0;
      var len = this._layers.length;
      for (; id < len; id++) {
        this._layers[id].setVisible(id === index);
      }
    }, set.prototype.setLayoutVisible = function(value) {
      this._layoutDisplay.setVisible(value);
    }, set.LAYOUTS = [1, 4, 10, 25, 50, 100], set;
  }();
  var ret = function() {
    /**
     * @param {!Object} val
     * @return {undefined}
     */
    function self(val) {
      /** @type {!Array} */
      this._cards = [];
      /** @type {!Object} */
      this._entity = val;
      this.createHand();
      this._winHud = this._zoomHandEntity.getAnimation("winhud");
      this._winText = this._zoomHandEntity.getTextField("winhud.messageText");
      this.createCards();
      this.show(false);
    }
    return self.prototype.createHand = function() {
      this._zoomLayerTransform = this._entity.getTransform("zoomLayer");
      this._zoomHandEntity = self.ResourceManager.getInstance().getEntityManager().create("MultiHand10");
      this._entity.getHierarchy("zoomLayer").add("zoomedHand", this._zoomHandEntity);
      this._zoomHandTransform = this._zoomHandEntity.getTransform("");
    }, self.prototype.createCards = function() {
      var directory_epub = self.ResourceManager.getInstance().getEntityManager();
      /** @type {number} */
      var id = 0;
      for (; id < 5; id++) {
        var res = directory_epub.create("Cards10");
        res.getAnimation("").play("show");
        this._zoomHandEntity.getHierarchy(".pos" + (id + 1)).add("ZoomHandCard" + id, res);
        this._cards[id] = res.getAnimation("inner");
      }
    }, self.prototype.keepInBounds = function(o) {
      if (o.x < self.X_MIN) {
        /** @type {number} */
        o.x = self.X_MIN;
      } else {
        if (o.x > self.X_MAX) {
          /** @type {number} */
          o.x = self.X_MAX;
        }
      }
      if (o.y < self.Y_MIN) {
        /** @type {number} */
        o.y = self.Y_MIN;
      } else {
        if (o.y > self.Y_MAX) {
          /** @type {number} */
          o.y = self.Y_MAX;
        }
      }
    }, self.prototype.show = function(value) {
      this._zoomHandEntity.getDisplay("").setVisible(value);
    }, self.prototype.setCards = function(storages, dir, count) {
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        this._cards[i].play("face" + storages[i]);
      }
      this._winHud.play("line" + dir);
      this._winText.setText(count);
    }, self.prototype.updatePosition = function(latlng) {
      this.show(true);
      var point = this._zoomLayerTransform.globalToParent(latlng);
      this.keepInBounds(point);
      this._zoomHandTransform.setX(point.x);
      this._zoomHandTransform.setY(point.y);
    }, self.LAYOUT_TO_ENABLE_ZOOM_FROM = 3, self.X_MIN = -130, self.X_MAX = 450, self.Y_MIN = -390, self.Y_MAX = -80, self;
  }();
  var Yn = function() {
    /**
     * @param {!Entity} data
     * @return {undefined}
     */
    function NumberShow(data) {
      /** @type {!Entity} */
      this._entity = data;
      /** @type {!Array} */
      this._transforms = [];
      /** @type {!Array} */
      this._buttons = [];
    }
    return NumberShow.prototype.initButtons = function(id) {
      var that = this;
      /** @type {number} */
      var colors = 0;
      var fname = ret.LAYOUT_TO_ENABLE_ZOOM_FROM;
      var readersLength = project.LAYOUTS.length;
      for (; fname < readersLength; fname++) {
        var s = project.LAYOUTS[fname];
        /** @type {!Array} */
        var b = new Array(s);
        var node = this;
        /** @type {number} */
        var sl = 0;
        for (; sl < s; sl++) {
          !function(i) {
            node._transforms.push(node._entity.getTransform("layout" + fname + ".hand" + (i + 2)));
            var y = colors;
            b[i] = node._entity.getButton("layout" + fname + ".hand" + (i + 2) + ".zoomBtn");
            b[i].addEventListener(self.ButtonEvent.CLICK, function(value) {
              return that.onClick(id, value, y, i + 1);
            });
            b[i].addEventListener(self.ButtonHoverEvent.HOVER, function(value) {
              return that.onClick(id, value, y, i + 1);
            });
            colors++;
          }(sl);
        }
        this._buttons.push(b);
      }
    }, NumberShow.prototype.onClick = function(callback, id, state, position) {
      callback(id, state, position);
    }, NumberShow.prototype.enableHandButtons = function(type, end) {
      /** @type {number} */
      var n = end - ret.LAYOUT_TO_ENABLE_ZOOM_FROM;
      if (!(n < 0 || n >= this._buttons.length)) {
        /** @type {number} */
        var name = 0;
        var z = this._buttons[n].length;
        for (; name < z; name++) {
          this._buttons[n][name].enable(type);
        }
      }
    }, NumberShow.prototype.getGlobalHandPosition = function(key) {
      return this._transforms[key].localToGlobal(new self.Point(0, 0));
    }, NumberShow;
  }();
  var Xn = function() {
    /**
     * @param {number} t
     * @param {number} xgh2
     * @param {number} xgh3
     * @param {?} xgh4
     * @param {?} xh2
     * @param {number} xh3
     * @return {undefined}
     */
    function dpper(t, xgh2, xgh3, xgh4, xh2, xh3) {
      /** @type {!Array} */
      this._handData = new Array(100);
      this._layoutView = new project(xgh2, xh3, t);
      this._zoomHandContainer = new Yn(xgh2);
      this._zoomHandView = new ret(xgh2);
      /** @type {number} */
      var el = 0;
      for (; el < 100; el++) {
        this._handData[el] = new col;
      }
      this._handTextData = new Vn(xh2);
      this._handController = new Kern(t, xgh3, this._handData, this._layoutView, this._zoomHandView, this._zoomHandContainer, xgh4.betSettings, this._handTextData, xh3);
      this._handHandler = new ReportData(this._handData, xh3);
    }
    return Object.defineProperty(dpper.prototype, "handData", {
      get : function() {
        return this._handData;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(dpper.prototype, "handHandler", {
      get : function() {
        return this._handHandler;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(dpper.prototype, "mainHandView", {
      get : function() {
        return this._layoutView.handViews[0];
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(dpper.prototype, "gameSettings", {
      get : function() {
        return this._gameSettings;
      },
      enumerable : true,
      configurable : true
    }), dpper.prototype.setWinData = function(beanPostProcessor) {
      this._handController.setWinData(beanPostProcessor);
    }, dpper;
  }();
  var fallbackIsAssignableFrom = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var logger = function(constructor) {
    /**
     * @return {?}
     */
    function Storage() {
      return null !== constructor && constructor.apply(this, arguments) || this;
    }
    return fallbackIsAssignableFrom(Storage, constructor), Object.defineProperty(Storage.prototype, "canGamble", {
      get : function() {
        return this._canGamble;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "holdMask", {
      get : function() {
        return this._holdMask;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "numHands", {
      get : function() {
        return this._numHands;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Storage.prototype, "info", {
      get : function() {
        return this._info;
      },
      enumerable : true,
      configurable : true
    }), Storage.prototype.setCanContinueGamble = function(canCreateDiscussions) {
      this._canGamble = canCreateDiscussions;
    }, Storage.prototype.inverHoldMask = function(inputMethodId) {
      this._holdMask ^= 1 << inputMethodId;
      this.notify(Storage.HOLD);
    }, Storage.prototype.setHoldMask = function(addedRenderer) {
      /** @type {boolean} */
      this._holdMask = addedRenderer;
      this.notify(Storage.HOLD);
    }, Storage.prototype.getHoldMask = function() {
      return this._holdMask;
    }, Storage.prototype.clear = function() {
      /** @type {number} */
      this._holdMask = 0;
    }, Storage.prototype.setNumHands = function(canCreateDiscussions) {
      this._numHands = canCreateDiscussions;
    }, Storage.prototype.setInfo = function(val) {
      /** @type {string} */
      this._info = val;
      this.notify(Storage.INFO);
    }, Storage.HOLD = 1, Storage.INFO = 2, Storage;
  }(exports.Model);
  var findTemplateNode = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var qn = function(options) {
    /**
     * @return {?}
     */
    function WorkerDomAdapter() {
      var e = options.call(this) || this;
      return e._denom = 1, e._disableFastPlay = false, e._defaultFastPlay = false, e._neverGamble = false, e._defaultAutoAdjustBet = true, e;
    }
    return findTemplateNode(WorkerDomAdapter, options), Object.defineProperty(WorkerDomAdapter.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "disableFastPlay", {
      get : function() {
        return this._disableFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "hideFastPlay", {
      get : function() {
        return this._hideFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "defaultFastPlay", {
      get : function() {
        return this._defaultFastPlay;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "neverGamble", {
      get : function() {
        return this._neverGamble;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(WorkerDomAdapter.prototype, "defaultAutoAdjustBet", {
      get : function() {
        return this._defaultAutoAdjustBet;
      },
      enumerable : true,
      configurable : true
    }), WorkerDomAdapter.prototype.parse = function(args) {
      if (null === args) {
        return false;
      }
      this._hideFastPlay = self.Config.parseBoolean(args.hideFastplay, false);
      this._disableFastPlay = self.Config.parseBoolean(args.disableFastplay, false);
      this._defaultFastPlay = self.Config.parseBoolean(args.defaultFastPlay, false);
      this._neverGamble = self.Config.parseBoolean(args.neverGamble, false);
      this._defaultAutoAdjustBet = self.Config.parseBoolean(args.defaultAutoAdjustBet, true);
      var poffset = options.prototype.parse.call(this, args);
      return this._minRoundTime = self.Config.parseInt(args.minRoundTime, 1500), this._minRoundTime < 0 ? this._minRoundTime = 0 : this._minRoundTime > 10000 && (this._minRoundTime = 10000), poffset;
    }, WorkerDomAdapter;
  }(self.CasinoConfig);
  var map = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var item = function(fn) {
    /**
     * @return {?}
     */
    function connector() {
      return null !== fn && fn.apply(this, arguments) || this;
    }
    return map(connector, fn), connector.GAMBLE_AVAILABLE = "GAMBLE_AVAILABLE", connector.BONUS_SELECT = "BONUS_SELECT", connector.BONUS_INIT = "BONUS_INIT", connector.BONUS_ANSWER = "BONUS_ANSWER", connector.BONUS_COLLECT_WIN = "BONUS_COLLECT_WIN", connector;
  }(exports.MegatonEvent);
  var applyMiddleware = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var runtimeConstructor = function(log) {
    /**
     * @param {?} ctx
     * @param {?} val
     * @param {number} msg
     * @param {?} o
     * @param {number} f
     * @return {?}
     */
    function error(ctx, val, msg, o, f) {
      if (void 0 === msg) {
        /** @type {string} */
        msg = "";
      }
      var i18n = log.call(this, ctx, val, msg) || this;
      return i18n._coins = o, i18n._denomination = f, i18n;
    }
    return applyMiddleware(error, log), Object.defineProperty(error.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(error.prototype, "denomination", {
      get : function() {
        return this._denomination;
      },
      enumerable : true,
      configurable : true
    }), error.BET_UPDATE = "BET_UPDATE", error;
  }(self.EIRoundEvent);
  var isVueComponent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MGE = function(fn) {
    /**
     * @return {?}
     */
    function selector() {
      return null !== fn && fn.apply(this, arguments) || this;
    }
    return isVueComponent(selector, fn), selector.AVAILABLE_COINS = "AVAILABLE_COINS", selector.SELECTED_LINES = "SELECTED_LINES", selector.SELECTED_COIN = "SELECTED_COIN", selector.SELECTED_COIN_VALUE = "SELECTED_COIN_VALUE", selector.AVAILABLE_LINES = "AVAILABLE_LINES", selector.AVAILABLE_COIN_VALUES = "AVAILABLE_COIN_VALUES", selector.ACTIVE_CARDS = "ACTIVE_CARDS", selector;
  }(self.ExternalInterfaceEvent);
  var ii = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Tween = function(b) {
    /**
     * @param {?} e
     * @param {number} n
     * @return {?}
     */
    function f(e, n) {
      var ct = b.call(this, e, 0) || this;
      return ct._denom = n, ct;
    }
    return ii(f, b), Object.defineProperty(f.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), f.AVAILABLE_COIN_VALUES = "AVAILABLE_COIN_VALUES", f;
  }(MGE);
  var VueFactory = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var constants = function(renderer) {
    /**
     * @return {?}
     */
    function exports() {
      return null !== renderer && renderer.apply(this, arguments) || this;
    }
    return VueFactory(exports, renderer), exports.DEAL = "UIDEAL", exports.DRAW = "UIDRAW", exports.BONUS = "UIBONUS", exports.COLLECT = "UICOLLECT", exports.MOBILE_MENU = "UIMOBILEMENU", exports.UPDATE_SETTINGS = "UPDATE_SETTINGS", exports.SETTINGS_CHANGE = "UISETTINGSCHANGE", exports.TOGGLE_TUTORIAL = "UITOGGLETUTORIAL", exports.TOGGLE_FAST_PLAY = "UITOGGLEFASTPLAY", exports;
  }(self.MegatonUIEvent);
  var setTypeSeparator = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ui = function(self) {
    /**
     * @param {?} props
     * @param {?} id
     * @param {?} name
     * @param {?} m
     * @param {?} a
     * @param {number} l
     * @return {?}
     */
    function _(props, id, name, m, a, l) {
      var targeting = self.call(this, props, id, name, a) || this;
      return targeting._gameState = l, targeting._betSettings = m, targeting.addCallback(_.CALLBACK_GET_SELECTED_COIN, function(adUnitCodes) {
        return void 0 === adUnitCodes && (adUnitCodes = false), targeting.onGetSelectedCoin(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_GET_SELECTED_LINES, function(adUnitCodes) {
        return void 0 === adUnitCodes && (adUnitCodes = false), targeting.onGetSelectedLines(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_GET_AVAILABLE_COINS, function(adUnitCodes) {
        return void 0 === adUnitCodes && (adUnitCodes = false), targeting.onGetAvailableCoins(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_GET_AVAILABLE_LINES, function(adUnitCodes) {
        return void 0 === adUnitCodes && (adUnitCodes = false), targeting.onGetAvailableLines(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_GET_SELECTED_COIN_VALUE, function(adUnitCodes) {
        return void 0 === adUnitCodes && (adUnitCodes = false), targeting.onGetSelectedCoinValue(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_GET_AVAILABLE_COIN_VALUES, function(adUnitCodes) {
        return void 0 === adUnitCodes && (adUnitCodes = false), targeting.onGetAvailableDenominations(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_INC_COINS, function() {
        return targeting.onIncCoins();
      }), targeting.addCallback(_.CALLBACK_DEC_COINS, function() {
        return targeting.onDecCoins();
      }), targeting.addCallback(_.CALLBACK_INC_LINES, function() {
        return targeting.onIncLines();
      }), targeting.addCallback(_.CALLBACK_DEC_LINES, function() {
        return targeting.onDecLines();
      }), targeting.addCallback(_.CALLBACK_GET_ACTIVE_CARDS, function() {
        return targeting.onGetActiveCards();
      }), targeting.addCallback(_.CALLBACK_SET_ACTIVE_CARDS, function(adUnitCodes) {
        return targeting.onSetActiveCards(adUnitCodes);
      }), targeting.addCallback(_.CALLBACK_DEC_COIN_VALUE, function() {
        return targeting.onDecCoinValue();
      }), targeting.addCallback(_.CALLBACK_INC_COIN_VALUE, function() {
        return targeting.onIncCoinValue();
      }), targeting.addCallback(_.CALLBACK_SET_LINES, function(target) {
        return targeting.onSetLines(target);
      }), targeting.addCallback(_.CALLBACK_SET_COINS, function(tBalance) {
        return targeting.onSetSelectedCoin(tBalance);
      }), targeting.addCallback(_.CALLBACK_SET_COIN_VALUE, function(element) {
        return targeting.onSetCoinValue(element);
      }), targeting.addCallback(_.CALLBACK_BET_MAX, function() {
        return targeting.onBetMax();
      }), targeting._availableEvents = targeting._availableEvents.concat([constants.COLLECT, item.GAMBLE_AVAILABLE, runtimeConstructor.BET_UPDATE, MGE.SELECTED_COIN, MGE.SELECTED_LINES, MGE.AVAILABLE_COINS, MGE.AVAILABLE_LINES, MGE.SELECTED_LINES, MGE.AVAILABLE_LINES, MGE.SELECTED_COIN_VALUE, MGE.AVAILABLE_COIN_VALUES, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_NEXT, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_INIT, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_SKIP, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_BACK, 
      tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_EXIT, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_FINISH, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_STARTED, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_AUTOINIT, tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_RECONNECT]), targeting;
    }
    return setTypeSeparator(_, self), _.prototype.onGetBet = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      var blobqueueConstructor = this._betSettings.coins;
      var historyID = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._roundHandler.bet);
      this._dispatcher.dispatch(new runtimeConstructor(self.EIRoundEvent.BET, blobqueueConstructor, historyID, this._betSettings.coins, this._betSettings.denomination));
    }, _.prototype.onGetBalance = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      var remainder = this._roundHandler.balance;
      var chartData = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(remainder);
      /** @type {number} */
      var checked = Math.floor(remainder / this._betSettings.denomination);
      this._dispatcher.dispatch(new self.EIRoundEvent(self.EIRoundEvent.BALANCE, checked, chartData));
    }, _.prototype.onGetWin = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      var checked = this._roundHandler.wonCoins;
      var magnifier = this._roundHandler.win;
      var $magnifier = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(magnifier);
      this._dispatcher.dispatch(new self.EIRoundEvent(self.EIRoundEvent.WIN, checked, $magnifier));
    }, _.prototype.onGetAvailableCoins = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new MGE(MGE.AVAILABLE_COINS, this._betSettings.maxCoins));
    }, _.prototype.onGetSelectedLines = function(adUnitCode) {
      return void 0 === adUnitCode && (adUnitCode = false), adUnitCode ? this._betSettings.getHandsCount() : void this._dispatcher.dispatch(new MGE(MGE.SELECTED_LINES, this._betSettings.getHandsCount()));
    }, _.prototype.onGetSelectedCoinValue = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      var historyID = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._betSettings.denomination);
      this._dispatcher.dispatch(new MGE(MGE.SELECTED_COIN_VALUE, this._betSettings.denomination, historyID));
    }, _.prototype.onGetSelectedCoin = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new MGE(MGE.SELECTED_COIN, this._betSettings.coins));
    }, _.prototype.onGetAvailableLines = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new MGE(MGE.AVAILABLE_LINES, this._betSettings.getHandsCount()));
    }, _.prototype.onGetAvailableDenominations = function(adUnitCode) {
      if (void 0 === adUnitCode) {
        /** @type {boolean} */
        adUnitCode = false;
      }
      this._dispatcher.dispatch(new Tween(Tween.AVAILABLE_COIN_VALUES, this._betSettings.denominations));
    }, _.prototype.onGetActiveCards = function() {
      var rule = this._gameState.getHoldMask();
      /** @type {number} */
      var checked = 0;
      /** @type {number} */
      var n = 0;
      for (; n < 5; n++) {
        if (rule & 1 << n) {
          checked++;
        }
      }
      this._dispatcher.dispatch(new MGE(MGE.ACTIVE_CARDS, checked));
    }, _.prototype.onSetActiveCards = function(adUnitCodes) {
      this._gameState.setHoldMask(adUnitCodes);
    }, _.prototype.onSetSelectedCoin = function(coins) {
      this._betSettings.coins = coins;
    }, _.prototype.onSetCoinValue = function(suppressDisabledCheck) {
      this._betSettings.denomination = suppressDisabledCheck;
    }, _.prototype.onBetMax = function() {
      this._betSettings.betMax();
    }, _.prototype.onSetLines = function(i) {
      this._betSettings.setHands(i);
    }, _.prototype.onIncCoins = function() {
      this._betSettings.incCoins();
    }, _.prototype.onDecCoins = function() {
      this._betSettings.decCoins();
    }, _.prototype.onIncLines = function() {
      this._betSettings.incHands();
    }, _.prototype.onDecLines = function() {
      this._betSettings.decHands();
    }, _.prototype.onIncCoinValue = function() {
      this._betSettings.incDenom();
    }, _.prototype.onDecCoinValue = function() {
      this._betSettings.decDenom();
    }, _.CALLBACK_GET_SELECTED_COIN = "GET_SELECTED_COIN", _.CALLBACK_GET_SELECTED_COIN_VALUE = "GET_SELECTED_COIN_VALUE", _.CALLBACK_GET_SELECTED_LINES = "GET_SELECTED_LINES", _.CALLBACK_GET_AVAILABLE_COINS = "GET_AVAILABLE_COINS", _.CALLBACK_GET_ACTIVE_CARDS = "GET_ACTIVE_CARDS", _.CALLBACK_SET_ACTIVE_CARDS = "SET_ACTIVE_CARDS", _.CALLBACK_GET_AVAILABLE_LINES = "GET_AVAILABLE_LINES", _.CALLBACK_GET_AVAILABLE_COIN_VALUES = "GET_AVAILABLE_COIN_VALUES", _.CALLBACK_INC_COINS = "INC_COINS", _.CALLBACK_DEC_COINS = 
    "DEC_COINS", _.CALLBACK_INC_COIN_VALUE = "INC_COIN_VALUE", _.CALLBACK_DEC_COIN_VALUE = "DEC_COIN_VALUE", _.CALLBACK_INC_LINES = "INC_LINES", _.CALLBACK_DEC_LINES = "DEC_LINES", _.CALLBACK_SET_LINES = "SET_LINES", _.CALLBACK_SET_COINS = "SET_COINS", _.CALLBACK_SET_COIN_VALUE = "SET_COIN_VALUE", _.CALLBACK_BET_MAX = "BET_MAX", _.CALLBACK_GAMBLE = "GAMBLE", _.CALLBACK_COLLECT = "COLLECT", _;
  }(self.CasinoExternalInterface);
  var preservedListenerTargetFunction = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var FLAG_WORKING_DIR = function(t) {
    /**
     * @param {?} key
     * @param {string} value
     * @return {?}
     */
    function e(key, value) {
      var obj = t.call(this, e.BET) || this;
      return obj._denomData = key, obj._hands = value, obj;
    }
    return preservedListenerTargetFunction(e, t), Object.defineProperty(e.prototype, "denomData", {
      get : function() {
        return this._denomData;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(e.prototype, "hands", {
      get : function() {
        return this._hands;
      },
      enumerable : true,
      configurable : true
    }), e.BET = "VP_BET", e;
  }(exports.MegatonEvent);
  var bundler = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var InlineCompiler = function(res) {
    /**
     * @param {!HTMLElement} parent
     * @return {?}
     */
    function Main(parent) {
      var plugin = res.call(this, parent) || this;
      return parent.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), plugin;
    }
    return bundler(Main, res), Main.prototype.onCommand = function(event) {
      var value = event.command;
      switch(event.command.type) {
        case self.ServerCommand.DENOMINATIONS:
          /** @type {number} */
          var iValue = 0;
          var i = value.getInt(iValue++);
          /** @type {!Array} */
          var particips = [];
          /** @type {number} */
          var callbackCount = 0;
          /** @type {!Array} */
          var checked = [];
          /** @type {number} */
          var nextCreation = 0;
          for (; nextCreation < i; nextCreation++) {
            var id = value.getInt(iValue++);
            var clientHeight = value.getInt(iValue++);
            /** @type {!Array} */
            var p = [];
            /** @type {number} */
            var targetOffsetHeight = 0;
            for (; targetOffsetHeight < clientHeight; targetOffsetHeight++) {
              p.push(value.getInt(iValue++));
            }
            /** @type {!Array} */
            particips[callbackCount++] = p;
            checked.push(id);
          }
          this._dispatcher.dispatch(new FLAG_WORKING_DIR(particips, checked));
      }
    }, Main;
  }(self.CommandConverter);
  var h = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Request = function(params) {
    /**
     * @param {!HTMLElement} e
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function Select(e, key, value) {
      var node = params.call(this, e) || this;
      return node._betSettings = key, node._roundHandler = value, e.addEventListener(FLAG_WORKING_DIR.BET, function(t) {
        return node.onBet(t);
      }), node._betSettings.addListener(function(canCreateDiscussions) {
        return node.onChange();
      }), node;
    }
    return h(Select, params), Select.prototype.onBet = function(data) {
      this._betSettings.init(data.denomData, data.hands);
    }, Select.prototype.onChange = function() {
      this._roundHandler.setBet(this._betSettings.coins * this._betSettings.denomination * this._betSettings.hands);
    }, Select;
  }(exports.EventProcessor);
  var fi = function() {
    /**
     * @param {string} context
     * @param {(Object|string)} data
     * @return {undefined}
     */
    function Config(context, data) {
      this._commandConverter = new InlineCompiler(context);
      this._betSettings = new ___err;
      this._betController = new Request(context, this._betSettings, data);
    }
    return Object.defineProperty(Config.prototype, "betSettings", {
      get : function() {
        return this._betSettings;
      },
      enumerable : true,
      configurable : true
    }), Config;
  }();
  var resolveGrpsDef = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var gi = function(t) {
    /**
     * @return {?}
     */
    function Point() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return resolveGrpsDef(Point, t), Object.defineProperty(Point.prototype, "adjustBet", {
      get : function() {
        return this._adjustBet;
      },
      set : function(mymuted) {
        this._adjustBet = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Point.prototype, "tutorialHasShown", {
      get : function() {
        return this._tutorialHasShown;
      },
      set : function(mymuted) {
        this._tutorialHasShown = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Point.prototype, "neverGamble", {
      get : function() {
        return this._neverGamble;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._neverGamble = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Point.prototype, "autoHoldWinHands", {
      get : function() {
        return this._autoHoldWinHands;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._autoHoldWinHands = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Point.prototype.toggleAdjustBet = function() {
      /** @type {boolean} */
      this._adjustBet = !this._adjustBet;
      this.notify();
    }, Point.prototype.toggleNeverGamble = function() {
      /** @type {boolean} */
      this._neverGamble = !this._neverGamble;
      this.notify();
    }, Point.prototype.toggleAutoHoldWinHands = function() {
      /** @type {boolean} */
      this._autoHoldWinHands = !this._autoHoldWinHands;
      this.notify();
    }, Point.prototype.serialize = function(glue) {
      t.prototype.serialize.call(this, glue);
      glue.serializeBoolean("_neverGamble", this);
      glue.serializeBoolean("_autoHoldWinHands", this);
      glue.serializeBoolean("_tutorialHasShown", this);
    }, Point;
  }(self.GameSettings);
  var ApplicationClients = function() {
    /**
     * @param {?} log
     * @param {!Object} dispatcher
     * @return {undefined}
     */
    function init(log, dispatcher) {
      var newNode = this;
      /** @type {!Object} */
      this._dispatcher = dispatcher;
      this._animTask = new exports.Task;
      /** @type {boolean} */
      this._isAnimPlaying = false;
      /** @type {boolean} */
      this._isBonusAnim = false;
      this._logoBaseEntity = this.CreateLogo();
      this._logoBonusEntity = this.CreateLogo();
      var collection = this.LocateLogo(log, "base.logoContainer");
      var manifest = this.LocateLogo(log, "bonus.logoContainer");
      collection.add("Logo1", this._logoBaseEntity);
      manifest.add("Logo2", this._logoBonusEntity);
      this._logoBaseAnim = this._logoBaseEntity.getAnimation(".");
      this._logoBonusAnim = this._logoBonusEntity.getAnimation(".");
      this._logoBaseAnim.play("intro");
      this.setBonusLogoVisible(false);
      dispatcher.addEventListener(self.SplashEvent.SPLASH_HIDE, function(element) {
        return newNode.onSplashHide(element);
      });
      dispatcher.addEventListener(me.MAX_COIN_WIN, function(eventName) {
        return newNode.onWin(eventName);
      });
      dispatcher.addEventListener(me.BONUS_WIN, function(eventName) {
        return newNode.onWin(eventName);
      });
    }
    return init.prototype.CreateLogo = function() {
      return self.ResourceManager.getInstance().getEntityManager().create("Logo");
    }, init.prototype.LocateLogo = function(c, h) {
      return c.getHierarchy(h);
    }, init.prototype.setHands = function(destIdentifier, noStore) {
      /** @type {boolean} */
      this._isAnimPlaying = true;
      if (noStore !== destIdentifier) {
        this._logoBaseAnim.play("intro");
      }
    }, init.prototype.animHandler = function(testObj) {
      var allTraps = this;
      switch(testObj.state) {
        case 0:
          if (this._isAnimPlaying) {
            testObj.startDelayMs(500 * Math.random() + 500);
          } else {
            testObj.startDelayMs(1000 * Math.random() + 2000);
          }
          break;
        case 1:
          if (this._isBonusAnim) {
            this._logoBonusAnim;
          } else {
            this._logoBaseAnim;
          }
          if (this._isAnimPlaying) {
            /** @type {boolean} */
            this._isAnimPlaying = false;
          }
          testObj.execLoop([function(t) {
            return allTraps.animHandler(t);
          }]);
      }
    }, init.prototype.onSplashHide = function(inEl) {
      var allTraps = this;
      this._logoBaseAnim.play("intro");
      this._animTask.startHandler(function(t) {
        return allTraps.animHandler(t);
      });
    }, init.prototype.onWin = function(event) {
      this._logoBaseAnim.play("win");
      /** @type {boolean} */
      this._isAnimPlaying = true;
    }, init.prototype.setBonusLogoVisible = function(bln) {
      /** @type {boolean} */
      this._isBonusAnim = bln;
      this._logoBonusEntity.getDisplay(".").setVisible(bln);
      if (this._isBonusAnim) {
        this._logoBonusAnim.play("intro");
      }
    }, init;
  }();
  var partial = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var EventsMonitor = function(fn) {
    /**
     * @param {!HTMLElement} event
     * @param {!Element} name
     * @param {!Object} value
     * @return {?}
     */
    function select(event, name, value) {
      var item = fn.call(this, event) || this;
      return item._view = name, item._betSettings = value, item._prevHands = item._betSettings.hands, value.addListener(function(err) {
        return item.onBetSettings(err);
      }), event.addEventListener(req.BONUS_SHOW_GAME, function(checked) {
        return item.onBonusLogoVisible(checked);
      }), item;
    }
    return partial(select, fn), select.prototype.onBetSettings = function(data) {
      if (data.isChanged(___err.HANDS)) {
        this._view.setHands(this._betSettings.hands, this._prevHands);
        if (this._prevHands !== this._betSettings.hands) {
          this._prevHands = this._betSettings.hands;
        }
      }
    }, select.prototype.onBonusLogoVisible = function(p) {
      if (p.groupId === req.SHOW_BONUS) {
        this._view.setBonusLogoVisible(true);
      } else {
        if (p.groupId === req.HIDE_BONUS) {
          this._view.setBonusLogoVisible(false);
        }
      }
    }, select;
  }(exports.EventProcessor);
  var mi = function() {
    /**
     * @param {(Object|string)} endpoint
     * @param {!Storage} options
     * @param {?} config
     * @return {undefined}
     */
    function t(endpoint, options, config) {
      this._logoView = new ApplicationClients(options, endpoint);
      this._logoController = new EventsMonitor(endpoint, this._logoView, config.betSettings);
    }
    return t;
  }();
  var GeneratorEvent = function() {
    /**
     * @param {?} tLEncoderDecoder
     * @return {undefined}
     */
    function Als(tLEncoderDecoder) {
      this._textField = tLEncoderDecoder.getTextField("mainHand.infoLine.messageText");
    }
    return Als.prototype.setInfo = function(value) {
      this._textField.setText(value);
    }, Als;
  }();
  var explorerObject = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var HeaderView = function(callback_error) {
    /**
     * @param {?} b
     * @param {!Object} e
     * @param {boolean} n
     * @return {?}
     */
    function e(b, e, n) {
      var result = callback_error.call(this, b) || this;
      return result._gameState = e, result._infoView = n, e.addListener(function(t) {
        return result.onGameState(t);
      }), result;
    }
    return explorerObject(e, callback_error), e.prototype.onGameState = function(t) {
      if (t.isChanged(logger.INFO)) {
        this._infoView.setInfo(this._gameState.info);
      }
    }, e;
  }(exports.EventProcessor);
  var Oi = function() {
    /**
     * @param {?} options
     * @param {?} config
     * @param {?} node
     * @return {undefined}
     */
    function show(options, config, node) {
      var beforeAfterEvent = new GeneratorEvent(node);
      this._controller = new HeaderView(options, config, beforeAfterEvent);
    }
    return show;
  }();
  var updateCanvasAndSuspend = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var options = function(x) {
    /**
     * @return {?}
     */
    function self() {
      return null !== x && x.apply(this, arguments) || this;
    }
    return updateCanvasAndSuspend(self, x), self.DEAL = "DEAL", self.DEAL_ANSWER = "DEALANSWER", self.DRAW = "DRAW", self.DRAW_ANSWER = "DRAW_ANSWER", self.BONUS_REQUEST = "BONUS_REQUEST", self.BONUS_COLLECT = "BONUS_COLLECT", self.BONUS_COLLECT_ANSWER = "BONUS_COLLECT_ANSWER", self.DEAL_REQUEST = "DEAL_REQUEST", self.STATE_CHANGES = "STATE_CHANGE", self;
  }(exports.MegatonEvent);
  var g = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var base = function(a) {
    /**
     * @return {?}
     */
    function n() {
      return a.call(this, options.DEAL_REQUEST) || this;
    }
    return g(n, a), n;
  }(options);
  var originalIPCMainOn = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Node = function(fn) {
    /**
     * @param {?} key
     * @param {?} value
     * @param {string} message
     * @param {number} side
     * @param {?} id
     * @return {?}
     */
    function Field(key, value, message, side, id) {
      var obj = fn.call(this, options.DEAL_ANSWER) || this;
      return obj._coins = key, obj._denom = value, obj._hands = message, obj._cards = side, obj._sortIdx = id, obj;
    }
    return originalIPCMainOn(Field, fn), Object.defineProperty(Field.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "hands", {
      get : function() {
        return this._hands;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "cards", {
      get : function() {
        return this._cards;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "sortIdx", {
      get : function() {
        return this._sortIdx;
      },
      enumerable : true,
      configurable : true
    }), Field;
  }(options);
  var getSharedVerticesInOrder = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var nSmarty = function() {
    /**
     * @param {(!Function|string)} cards
     * @param {!Object} func
     * @param {number} cancelAlreadyScheduledCalls
     * @return {undefined}
     */
    function afterDOMLoad(cards, func, cancelAlreadyScheduledCalls) {
      /** @type {(!Function|string)} */
      this.cards = cards;
      /** @type {!Object} */
      this.winCode = func;
      /** @type {number} */
      this.winAmount = cancelAlreadyScheduledCalls;
    }
    return afterDOMLoad;
  }();
  var screenTypes = function(n) {
    /**
     * @param {boolean} key
     * @param {string} index
     * @param {?} step
     * @return {?}
     */
    function p(key, index, step) {
      var obj = n.call(this, options.DRAW_ANSWER) || this;
      return obj._holdMask = key, obj._hands = index, obj._carGamble = step, obj;
    }
    return getSharedVerticesInOrder(p, n), Object.defineProperty(p.prototype, "holdMask", {
      get : function() {
        return this._holdMask;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "hands", {
      get : function() {
        return this._hands;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "canGamble", {
      get : function() {
        return this._carGamble;
      },
      enumerable : true,
      configurable : true
    }), p;
  }(options);
  var set = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ActionClass = function(dimensions) {
    /**
     * @param {boolean} index
     * @return {?}
     */
    function exports(index) {
      var REGEX = dimensions.call(this, options.DRAW) || this;
      return REGEX._holdMask = index, REGEX;
    }
    return set(exports, dimensions), Object.defineProperty(exports.prototype, "holdMask", {
      get : function() {
        return this._holdMask;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(options);
  var freshScope = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var STATE = function(super$0) {
    /**
     * @return {?}
     */
    function fun() {
      return null !== super$0 && super$0.apply(this, arguments) || this;
    }
    return freshScope(fun, super$0), fun.NONE = 0, fun.DEAL = 1, fun.DRAW = 2, fun.GAMBLE_WAIT = 3, fun.GAMBLE_SPIN_WAIT = 4, fun.COLLECT = 5, fun.DEAL_ENABLE_MRT = 6, fun.DEAL_DISABLE_MRT = 7, fun;
  }(self.ShowButtonsEvent);
  var featureColor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ParsersClass = function(n) {
    /**
     * @param {number} key
     * @param {?} index
     * @param {?} step
     * @return {?}
     */
    function p(key, index, step) {
      var obj = n.call(this, options.DEAL) || this;
      return obj._coins = key, obj._denom = index, obj._hands = step, obj;
    }
    return featureColor(p, n), Object.defineProperty(p.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "denom", {
      get : function() {
        return this._denom;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(p.prototype, "hands", {
      get : function() {
        return this._hands;
      },
      enumerable : true,
      configurable : true
    }), p;
  }(options);
  var ready = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cluster = function(module) {
    /**
     * @param {!Object} key
     * @param {?} response
     * @param {?} index
     * @param {?} store
     * @param {?} settings
     * @param {?} opts
     * @param {!Function} dom
     * @param {?} _
     * @param {number} entries
     * @param {!Object} config
     * @return {?}
     */
    function init(key, response, index, store, settings, opts, dom, _, entries, config) {
      var me = module.call(this, response) || this;
      return me._dispatcher = key, me._roundHandler = index, me._gameState = store, me._betSettings = settings.betSettings, me._handHandler = opts.handHandler, me._handData = opts.handData, me._winManager = dom, me._bonusLogicHandler = _.logicHandler, me._gameSettings = entries, me._config = config, response.registerEvent(constants.DEAL), response.registerEvent(constants.DRAW), response.registerEvent(options.DEAL_ANSWER), response.registerEvent(options.DRAW_ANSWER), response.registerEvent(options.DEAL_REQUEST), 
      response.registerEvent(self.ReconnectEndEvent.RECONNECTEND), response.registerEvent(self.SPFundsErrorEvent.SPFUNDSERROR), me._roundsSequence = [function(t) {
        return me.betHandler(t);
      }, function(data) {
        return me.roundStartHandler(data);
      }, function(t) {
        return me.dealHandler(t);
      }, function(t) {
        return me.drawWaitHandler(t);
      }, function(data) {
        return me.drawHandler(data);
      }, function(t) {
        return me.winHandler(t);
      }, function(t) {
        return me.bonusHandler(t);
      }, function(data) {
        return me.roundEndHandler(data);
      }], me;
    }
    return ready(init, module), init.prototype.roundsHandler = function(canCreateDiscussions) {
      canCreateDiscussions.execLoop(this._roundsSequence);
    }, init.prototype.betHandler = function(b) {
      switch(b.state) {
        case 0:
          if (this._gameState.getHoldMask() > 0) {
            this._gameState.setHoldMask(0);
          }
          this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.DEAL));
        case 1:
          /** @type {null} */
          var e = null;
          for (; null !== (e = this._input.read(b));) {
            if (e.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
              return void b.complete();
            }
            if (e.type !== Node.DEAL_ANSWER && this._input.next(), e.type === constants.DEAL || e.type === Node.DEAL_ANSWER || e.type === base.DEAL_REQUEST) {
              break;
            }
          }
          if (null === e) {
            b.next(1);
            break;
          }
        case 2:
          if (e.type !== Node.DEAL_ANSWER) {
            if (this._gameSettings.adjustBet) {
              this._betSettings.adjustBet(this._roundHandler.balance);
            }
            var action = new ParsersClass(this._betSettings.coins, this._betSettings.denomination, this._betSettings.hands);
            this._dispatcher.dispatch(action);
          }
          this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.NONE));
          b.complete();
      }
    }, init.prototype.roundStartHandler = function(subgoal) {
      this._roundHandler.startRound();
      this._winManager.winHander.clear();
      this._gameState.setInfo("");
      subgoal.complete();
    }, init.prototype.dealHandler = function(state) {
      switch(state.state) {
        case 0:
          this._startTime = exports.SystemManager.getScheduler().getTime();
          this._handHandler.handleFlip(state, false, this._betSettings.hands);
          break;
        case 1:
          /** @type {null} */
          var r = null;
          for (; null !== (r = this._input.read(state));) {
            if (r.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
              return void state.complete();
            }
            if (this._input.next(), r.type === Node.DEAL_ANSWER) {
              break;
            }
          }
          if (null === r) {
            state.next(1);
            break;
          }
        case 2:
          if (r) {
            var data = r;
            this._betSettings.setBet(data.coins, data.denom, data.hands);
            /** @type {number} */
            var i = 0;
            for (; i < this._betSettings.hands; i++) {
              this._handData[i].setValues(data.cards, null, 0, 0);
            }
            this._handHandler.handleFlip(state, true, 1);
            if (this._gameSettings.autoHoldWinHands && 0 !== data.sortIdx) {
              this._gameState.setHoldMask(data.sortIdx);
            }
            this._gameState.setNumHands(data.hands);
            break;
          }
        default:
          state.complete();
      }
    }, init.prototype.drawWaitHandler = function(state) {
      switch(state.state) {
        case 0:
          if (this._input.data && this._input.data.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
            return void state.complete();
          }
          this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.DRAW));
          this._gameState.setInfo("IDS_VP_CHOOSECARDS");
        case 1:
          /** @type {null} */
          var currentScreen = null;
          for (; null !== (currentScreen = this._input.read(state));) {
            if (currentScreen.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
              return void state.complete();
            }
            if (currentScreen.type !== screenTypes.DRAW_ANSWER && this._input.next(), currentScreen.type === constants.DRAW || currentScreen.type === screenTypes.DRAW_ANSWER) {
              break;
            }
          }
          if (null === currentScreen) {
            state.next(1);
            break;
          }
        case 2:
          if (currentScreen.type !== screenTypes.DRAW_ANSWER) {
            var action = new ActionClass(this._gameState.holdMask);
            this._dispatcher.dispatch(action);
          } else {
            this._dispatcher.dispatch(new screenUtil(screenUtil.SND_ON_RECONNECT));
            var oldScreen = currentScreen;
            this._gameState.setHoldMask(oldScreen.holdMask);
          }
          this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.NONE));
          this._gameState.setInfo("");
          state.complete();
      }
    }, init.prototype.drawHandler = function(state) {
      switch(state.state) {
        case 0:
          if (this._input.data && this._input.data.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
            return void state.complete();
          }
          this._handHandler.handleFlip(state, false, 1);
          break;
        case 1:
          /** @type {null} */
          var t = null;
          for (; null !== (t = this._input.read(state)) && t.type !== screenTypes.DRAW_ANSWER;) {
            this._input.next();
          }
          if (null === t) {
            state.next(1);
            break;
          }
        case 2:
          this.processDrawAnser(t);
          state.complete();
      }
    }, init.prototype.processDrawAnser = function(w) {
      /** @type {number} */
      var totalErrors = 0;
      /** @type {number} */
      var i = 0;
      var ncells = w.hands.length;
      for (; i < ncells; i++) {
        var test = w.hands[i];
        totalErrors = totalErrors + test.winAmount;
        this._handData[i].setValues(test.cards, this._handData[0].cards, test.winCode, test.winAmount);
      }
      this._gameState.setCanContinueGamble(w.canGamble && totalErrors > 0);
      this._winManager.winData.holdMask = w.holdMask;
    }, init.prototype.winHandler = function(args) {
      var siteManagementRef = this;
      if (this._input.data && this._input.data.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
        return void args.complete();
      }
      switch(exports.SystemManager.getScheduler().getTime() - this._startTime <= this._config.minRoundTime && (new exports.Task).startHandler(function(users) {
        return siteManagementRef.minRoundDisabler(users);
      }), args.state) {
        case 0:
          args.startHandler(function(primaryTxHex) {
            return siteManagementRef._winManager.winHander.handleWin(primaryTxHex);
          });
          break;
        default:
          args.complete();
      }
    }, init.prototype.minRoundDisabler = function(c) {
      switch(c.state) {
        case 0:
          this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.DEAL_DISABLE_MRT));
          /** @type {number} */
          var diff = exports.SystemManager.getScheduler().getTime() - this._startTime;
          c.startDelayMs(this._config.minRoundTime - diff);
          break;
        case 1:
          this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.DEAL_ENABLE_MRT));
          c.complete();
      }
    }, init.prototype.bonusHandler = function(t) {
      if (this._input.data && this._input.data.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
        return void t.complete();
      }
      this._roundHandler.setWin(this._winManager.winData.winAmount);
      this._bonusLogicHandler.handleBonus(t, this._winManager.winData.winAmount);
    }, init.prototype.roundEndHandler = function(subgoal) {
      if (this._input.data && this._input.data.type === self.SPFundsErrorEvent.SPFUNDSERROR) {
        this._input.next();
        this._dispatcher.dispatch(new self.RealityCheckLossEvent(self.RealityCheckLossEvent.LOSS_COUNTING_SKIPPED_ROUND));
      }
      this._roundHandler.endRound();
      subgoal.complete();
    }, init;
  }(self.LogicManager);
  !function(canCreateDiscussions) {
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.DEAL_ANSWER = 1] = "DEAL_ANSWER";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.DRAW_ANSWER = 2] = "DRAW_ANSWER";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.COLLECT_ANSWER = 3] = "COLLECT_ANSWER";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.BONUS_INITAL = 4] = "BONUS_INITAL";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.BONUS_ANSWER = 5] = "BONUS_ANSWER";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.DRAW_ANSWER_MH = 6] = "DRAW_ANSWER_MH";
  }(Ye || (Ye = {}));
  var screens;
  !function(screens) {
    /** @type {string} */
    screens[screens.DEAL = 1] = "DEAL";
    /** @type {string} */
    screens[screens.DRAW = 2] = "DRAW";
    /** @type {string} */
    screens[screens.COLLECT = 3] = "COLLECT";
    /** @type {string} */
    screens[screens.BONUS = 4] = "BONUS";
    /** @type {string} */
    screens[screens.BONUS_EVENT = 5] = "BONUS_EVENT";
  }(screens || (screens = {}));
  var attr;
  var t = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var polyfill = function(n) {
    /**
     * @return {?}
     */
    function e() {
      return n.call(this, options.BONUS_COLLECT) || this;
    }
    return t(e, n), e;
  }(options);
  var installNativeEvent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var server = function(a) {
    /**
     * @return {?}
     */
    function n() {
      return a.call(this, options.BONUS_REQUEST) || this;
    }
    return installNativeEvent(n, a), n;
  }(options);
  var interf = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RivetView = function(data) {
    /**
     * @param {number} index
     * @return {?}
     */
    function exports(index) {
      var REGEX = data.call(this, options.BONUS_COLLECT_ANSWER) || this;
      return REGEX._winAmount = index, REGEX;
    }
    return interf(exports, data), Object.defineProperty(exports.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      enumerable : true,
      configurable : true
    }), exports;
  }(options);
  var addTab = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var CallChain = function(State) {
    /**
     * @param {!HTMLElement} game
     * @return {?}
     */
    function Game(game) {
      var plugin = State.call(this, game) || this;
      return game.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), game.addEventListener(options.DEAL, function(self) {
        return plugin.onDeal(self);
      }), game.addEventListener(options.DRAW, function(canvas) {
        return plugin.onDraw(canvas);
      }), game.addEventListener(polyfill.BONUS_COLLECT, function(t) {
        return plugin.onBonusCollect(t);
      }), game.addEventListener(server.BONUS_REQUEST, function(t) {
        return plugin.onBonusRequest(t);
      }), plugin;
    }
    return addTab(Game, State), Game.prototype.onCommand = function(event) {
      var data = event.command;
      switch(event.command.type) {
        case Ye.DEAL_ANSWER:
          var headValue = data.getInt(0);
          var loopVariableToken = data.getInt(1);
          /** @type {!Array} */
          var list = [];
          /** @type {number} */
          var i = 2;
          for (; i < 7; i++) {
            list.push(this.processServerCard(data.getInt(i)));
          }
          var svgURI = data.getInt(7);
          var results = data.getInt(8);
          this._dispatcher.dispatch(new self.LogicEvent(new Node(headValue, loopVariableToken, results, list, svgURI)));
          break;
        case Ye.DRAW_ANSWER:
          /** @type {!Array} */
          results = [this.getHand(data, 0, 0)];
          this._dispatcher.dispatch(new self.LogicEvent(new screenTypes(0, results, data.getBoolean(7))));
          break;
        case Ye.DRAW_ANSWER_MH:
          /** @type {number} */
          var index = 0;
          var value = data.getInt(index++);
          var level = data.getInt(index++);
          var l = data.getInt(index++);
          /** @type {!Array} */
          results = [];
          /** @type {number} */
          i = 0;
          for (; i < l; i++, index = index + (level + 2)) {
            results.push(this.getHand(data, value, index));
          }
          var _ = data.getBoolean(index++);
          this._dispatcher.dispatch(new self.LogicEvent(new screenTypes(value, results, _)));
          break;
        case Ye.COLLECT_ANSWER:
          var attributeOptions = data.getInt(0);
          this._dispatcher.dispatch(new self.LogicEvent(new RivetView(attributeOptions)));
      }
    }, Game.prototype.onDeal = function(frame) {
      /** @type {!Array} */
      var options = [String(frame.coins), String(frame.denom), String(frame.hands)];
      var keyboard = new self.Command(screens.DEAL, options);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, keyboard));
    }, Game.prototype.onDraw = function(data) {
      /** @type {!Array} */
      var options = [];
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        options.push(data.holdMask & 1 << i ? "1" : "0");
      }
      var keyboard = new self.Command(screens.DRAW, options);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, keyboard));
    }, Game.prototype.getHand = function(data, level, i) {
      /** @type {!Array} */
      var content = [];
      /** @type {number} */
      var LED_GPIO = 0;
      for (; LED_GPIO < 5; LED_GPIO++) {
        var line = 0 == (level & 1 << LED_GPIO) ? data.getInt(i++) : 99;
        content.push(this.processServerCard(line));
      }
      return new nSmarty(content, data.getInt(i++), data.getInt(i++));
    }, Game.prototype.onBonusCollect = function(result) {
      var checked = new self.Command(screens.COLLECT, []);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, checked));
    }, Game.prototype.onBonusRequest = function(result) {
      var checked = new self.Command(screens.BONUS, []);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, checked));
    }, Game.prototype.processServerCard = function(code) {
      /** @type {number} */
      var t = code;
      return code === Game.WILD_CARD && (t = Game.JOKER_CARD), t;
    }, Game.WILD_CARD = 52, Game.JOKER_CARD = 56, Game;
  }(self.CommandConverter);
  var AppView = function() {
    /**
     * @param {(Image|string)} params
     * @return {undefined}
     */
    function Mouse(params) {
      /** @type {!Array} */
      this._buttons = new Array(5);
      /** @type {!Array} */
      this._labelAnims = new Array(5);
      /** @type {!Array} */
      this._buttonStroke = new Array(5);
      /** @type {number} */
      var name = 0;
      for (; name < 5; name++) {
        this._buttons[name] = this.locateButton(params, name);
        this._labelAnims[name] = this.locateLabel(params, name);
        this._buttonStroke[name] = this.locateButtonStroke(params, name);
      }
    }
    return Mouse.prototype.initButton = function(id, listener) {
      this._buttons[id].addEventListener(self.ButtonEvent.CLICK, listener);
    }, Mouse.prototype.enableButtons = function(name) {
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        this._buttons[i].enable(name);
        this._buttonStroke[i].play("hide");
      }
    }, Mouse.prototype.selectButton = function(name, el) {
      this._buttons[name].select(el);
      this.setLabel(name, el);
    }, Mouse.prototype.locateButton = function(orientation, length) {
      return orientation.getButton("hold" + (length + 1));
    }, Mouse.prototype.locateLabel = function(vars, object) {
      return vars.getAnimation("hold" + (object + 1) + "Label");
    }, Mouse.prototype.locateButtonStroke = function(p, local) {
      return p.getAnimation("hold" + (local + 1) + ".btnStroke");
    }, Mouse.prototype.getButtons = function() {
      return this._buttons;
    }, Mouse.prototype.setLabel = function(name, value) {
      this._labelAnims[name].play(value ? "show" : "hide");
    }, Mouse;
  }();
  var svgTurns = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var window = function(context) {
    /**
     * @param {number} i
     * @return {?}
     */
    function line(i) {
      var childNode = context.call(this, line.LOGIC) || this;
      return childNode._index = i, childNode;
    }
    return svgTurns(line, context), Object.defineProperty(line.prototype, "index", {
      get : function() {
        return this._index;
      },
      enumerable : true,
      configurable : true
    }), line.LOGIC = "LOGIC_UI", line;
  }(exports.MegatonEvent);
  var subSelect = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var io = function() {
    /**
     * @return {undefined}
     */
    function self() {
    }
    return self.KeyUpValues = ["up", "down", "1", "2", "3", "4", "5", "6"], self.KeyDownValues = ["left", "right"], self;
  }();
  var View = function(select) {
    /**
     * @return {?}
     */
    function b() {
      return null !== select && select.apply(this, arguments) || this;
    }
    return subSelect(b, select), b.prototype.onKey = function(keyCode, isDown) {
      var tNextVertex = this.keyboardButtonNode;
      switch(keyCode) {
        case "left":
          tNextVertex = this.keyboardButtonNode.prev;
          break;
        case "right":
          tNextVertex = this.keyboardButtonNode.next;
          break;
        case "up":
        case "down":
          if (!isDown) {
            this.keyboardButtonNode.button.trigger();
          }
          break;
        case "1":
          if (this._buttons.length >= 1) {
            this._buttons[0].trigger();
          }
          break;
        case "2":
          if (this._buttons.length >= 2) {
            this._buttons[1].trigger();
          }
          break;
        case "3":
          if (this._buttons.length >= 3) {
            this._buttons[2].trigger();
          }
          break;
        case "4":
          if (this._buttons.length >= 4) {
            this._buttons[3].trigger();
          }
          break;
        case "5":
          if (this._buttons.length >= 5) {
            this._buttons[4].trigger();
          }
          break;
        case "6":
          if (this._buttons.length >= 6) {
            this._buttons[5].trigger();
          }
      }
      return tNextVertex;
    }, b;
  }(self.KeyboardHandlerNode);
  var update = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Grid = function(sel) {
    /**
     * @param {!Object} renderer
     * @param {!Object} size
     * @param {!Object} parser
     * @return {?}
     */
    function set(renderer, size, parser) {
      var that = sel.call(this, renderer) || this;
      /** @type {!Object} */
      that._dispatcher = renderer;
      /** @type {!Object} */
      that._gameState = size;
      /** @type {!Object} */
      that._logicView = parser;
      size.addListener(function(t) {
        return that.onGameState(t);
      });
      renderer.addEventListener(window.LOGIC, function(checkpoint) {
        return that.onButton(checkpoint.index);
      });
      renderer.addEventListener(STATE.SHOWBUTTONS, function(m) {
        return that.onShowButtons(m);
      });
      renderer.addEventListener(me.MAINHAND_WIN, function(person) {
        return that.onMainHandWin(person);
      });
      renderer.addEventListener(self.KeyboardSettingsEvent.KEYBOARD_INIT, function(person) {
        return that.onKeyboardInit(person);
      });
      renderer.addEventListener(self.KeyboardSettingsEvent.KEYBOARD_INIT, function(person) {
        return that.onKeyboardInit(person);
      });
      renderer.addEventListener(me.LOSE, function(t) {
        return that.onLose(t);
      });
      /** @type {number} */
      var hideSafari = 0;
      for (; hideSafari < 5; hideSafari++) {
        !function(listener) {
          parser.initButton(listener, function() {
            return that.onButton(listener);
          });
        }(hideSafari);
      }
      var container = that._logicView.getButtons();
      return that._KeyboardHandlerNode = new View(container), that;
    }
    return update(set, sel), set.prototype.onLose = function(widget) {
      /** @type {number} */
      var self = 0;
      for (; self < 5; self++) {
        this._logicView.selectButton(self, false);
      }
    }, set.prototype.onGameState = function(t) {
      if (t.isChanged(logger.HOLD)) {
        this._dispatcher.dispatch(new options(options.STATE_CHANGES));
        /** @type {number} */
        var self = 0;
        for (; self < 5; self++) {
          /** @type {boolean} */
          var n = 0 != (this._gameState.holdMask & 1 << self);
          this._logicView.selectButton(self, n);
        }
      }
    }, set.prototype.onButton = function(callback) {
      this._gameState.inverHoldMask(callback);
    }, set.prototype.onShowButtons = function(self) {
      if (this._logicView.enableButtons(self.groupId === STATE.DRAW), self.groupId === STATE.DRAW) {
        self.ResourceManager.getInstance().getKeyboardHandler().initCurrentNode(this._KeyboardHandlerNode);
      }
    }, set.prototype.onMainHandWin = function(type) {
      this._gameState.clear();
      /** @type {number} */
      var self = 0;
      for (; self < 5; self++) {
        this._logicView.selectButton(self, false);
      }
    }, set.prototype.onKeyboardInit = function(type) {
      self.ResourceManager.getInstance().getKeyboardHandler().addCurrentNode(this._KeyboardHandlerNode);
    }, set;
  }(exports.EventProcessor);
  var mongoConnector = function() {
    /**
     * @param {(Object|string)} options
     * @param {!Object} config
     * @param {?} source
     * @return {undefined}
     */
    function onLoad(options, config, source) {
      this._view = new AppView(source);
      this._controller = new Grid(options, config, this._view);
    }
    return onLoad;
  }();
  var Klass = function() {
    /**
     * @param {undefined} message
     * @param {string} list
     * @param {undefined} parent
     * @param {number} src
     * @param {string} styles
     * @param {undefined} store
     * @param {undefined} s
     * @param {undefined} nHashType
     * @param {undefined} nIn
     * @param {undefined} nOut
     * @param {!Object} activation
     * @return {undefined}
     */
    function constructor(message, list, parent, src, styles, store, s, nHashType, nIn, nOut, activation) {
      /** @type {number} */
      this._gameState = src;
      this._commandConverter = this.createLogicCommandConverter(message);
      this._logicHandler = this.createLogicHandler(message, list, parent, src, styles, store, s, nHashType, nIn, nOut);
      this._logicUIManager = this.createLogicUIManager(message, src, activation);
    }
    return Object.defineProperty(constructor.prototype, "logicHandler", {
      get : function() {
        return this._logicHandler;
      },
      enumerable : true,
      configurable : true
    }), constructor.prototype.createLogicCommandConverter = function(name) {
      return new CallChain(name);
    }, constructor.prototype.createLogicHandler = function(map, $state, _, a, b, n, s, wlhash, isSlidingUp, $cont) {
      return new Cluster(map, $state, _, this._gameState, b, n, s, wlhash, isSlidingUp, $cont);
    }, constructor.prototype.createLogicUIManager = function(text, statement, type) {
      return new mongoConnector(text, statement, type);
    }, constructor;
  }();
  !function(canCreateDiscussions) {
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.BEAT_THE_DEALER = 0] = "BEAT_THE_DEALER";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.RED_OR_BLACK = 1] = "RED_OR_BLACK";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.HIGH_OR_LOW = 2] = "HIGH_OR_LOW";
  }(attr || (attr = {}));
  var buttonKeys;
  var getTile = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var jCanvasObject = function(cb) {
    /**
     * @return {?}
     */
    function options() {
      return cb.call(this) || this;
    }
    return getTile(options, cb), Object.defineProperty(options.prototype, "turnIdx", {
      get : function() {
        return this._turnIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(options.prototype, "winCode", {
      get : function() {
        return this._winCode;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(options.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(options.prototype, "infoText", {
      get : function() {
        return this._infoText;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(options.prototype, "selectedIdx", {
      get : function() {
        return this._selectedIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(options.prototype, "initCard", {
      get : function() {
        return this._initCard;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(options.prototype, "cards", {
      get : function() {
        return this._cards;
      },
      enumerable : true,
      configurable : true
    }), options.prototype.clear = function() {
      /** @type {number} */
      this._turnIdx = 0;
    }, options.prototype.next = function() {
      this._turnIdx++;
    }, options.prototype.setInitCard = function(canCreateDiscussions) {
      this._initCard = canCreateDiscussions;
    }, options.prototype.setCards = function(count) {
      /** @type {number} */
      this._cards = count;
    }, options.prototype.select = function(e) {
      /** @type {string} */
      this._selectedIdx = e;
    }, options.prototype.setWin = function(method, schema_name) {
      /** @type {number} */
      this._winAmount = method;
      /** @type {string} */
      this._winCode = schema_name;
    }, options;
  }(exports.Model);
  var circleVsCircle = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var tapeElmtData = function(b) {
    /**
     * @param {number} index
     * @return {?}
     */
    function s(index) {
      var REGEX = b.call(this, s.BONUS_BUTTON) || this;
      return REGEX._index = index, REGEX;
    }
    return circleVsCircle(s, b), Object.defineProperty(s.prototype, "index", {
      get : function() {
        return this._index;
      },
      enumerable : true,
      configurable : true
    }), s.BONUS_BUTTON = "BONUS_UI_BUTTON", s;
  }(self.MegatonUIEvent);
  var query = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var yo = function() {
    /**
     * @param {!Object} view
     * @param {!Object} event
     * @return {undefined}
     */
    function clickPin(view, event) {
      /** @type {!Object} */
      this.button = view;
      /** @type {!Object} */
      this.value = event;
    }
    return clickPin;
  }();
  var lintlog = function(lc) {
    /**
     * @param {(Image|string)} p
     * @return {?}
     */
    function render(p) {
      var o = lc.call(this) || this;
      o._buttonsInfo = o.locateButtons(p);
      o._buttonStroke = o.locateButtonStroke(p);
      var vroot = this;
      /** @type {number} */
      var i = 0;
      var el = o._buttonsInfo.length;
      for (; i < el; i++) {
        !function(i, canCreateDiscussions) {
          vroot._buttonsInfo[i].button.addEventListener(self.ButtonEvent.CLICK, function(canCreateDiscussions) {
            return o.onButton(o._buttonsInfo[i].value);
          });
        }(i);
      }
      /** @type {number} */
      i = 0;
      el = o._buttonStroke.length;
      for (; i < el; i++) {
        o._buttonStroke[i].play("hide");
      }
      return o;
    }
    return query(render, lc), render.prototype.onButton = function(event) {
      this.dispatch(new tapeElmtData(event));
    }, render.prototype.enableButtons = function(name) {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._buttonsInfo.length;
      for (; j < imagesLen; j++) {
        if (name) {
          this._buttonsInfo[j].button.select(false);
        }
        this._buttonsInfo[j].button.enable(name);
      }
    }, render.prototype.setButtonSelect = function(indexvalue) {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._buttonsInfo.length;
      for (; j < imagesLen; j++) {
        if (this._buttonsInfo[j].value === indexvalue) {
          this._buttonsInfo[j].button.select(true);
        }
      }
    }, render.prototype.getButtons = function() {
      /** @type {!Array} */
      var buttons = [];
      /** @type {number} */
      var i = 0;
      for (; i < this._buttonsInfo.length; i++) {
        buttons[i] = this._buttonsInfo[i].button;
      }
      return buttons;
    }, render;
  }(exports.Dispatcher);
  var jscs = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Array = function(log) {
    /**
     * @return {?}
     */
    function WorkerDomAdapter() {
      return null !== log && log.apply(this, arguments) || this;
    }
    return jscs(WorkerDomAdapter, log), WorkerDomAdapter.prototype.locateButtons = function(page) {
      return [new yo(page.getButton("bonus.highLow.highBtn"), 3), new yo(page.getButton("bonus.highLow.lowBtn"), 1)];
    }, WorkerDomAdapter.prototype.locateButtonStroke = function(p) {
      return [p.getAnimation("bonus.highLow.highBtn.btnStroke"), p.getAnimation("bonus.highLow.lowBtn.btnStroke")];
    }, WorkerDomAdapter;
  }(lintlog);
  var linkClickWillUnloadCurrentPage = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var entry = function(Mode) {
    /**
     * @param {string} data
     * @return {?}
     */
    function event(data) {
      var imageData = Mode.call(this, event.SHOW_BUTTONS) || this;
      return imageData._groupId = data, imageData;
    }
    return linkClickWillUnloadCurrentPage(event, Mode), Object.defineProperty(event.prototype, "groupId", {
      get : function() {
        return this._groupId;
      },
      enumerable : true,
      configurable : true
    }), event.SHOW_BUTTONS = "UI_BONUS_SHOW_BUTTONS", event.NONE = 0, event.ALL = 1, event;
  }(exports.MegatonEvent);
  var jsonFiller = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Map = function(out) {
    /**
     * @param {!HTMLElement} connection
     * @param {!Object} client
     * @param {string} events
     * @return {?}
     */
    function Controller(connection, client, events) {
      var $scope = out.call(this, connection) || this;
      /** @type {!Object} */
      $scope._data = client;
      /** @type {string} */
      $scope._views = events;
      /** @type {!Array} */
      $scope._KeyboardHandlerNode = [];
      $scope.setBonusType(attr.RED_OR_BLACK);
      connection.addEventListener(entry.SHOW_BUTTONS, function(value) {
        return $scope.onShowButtons(value);
      });
      /** @type {number} */
      var i = 0;
      for (; i < events.length; i++) {
        events[i].addListener(function(t) {
          return $scope.onButtonClicked(t);
        });
      }
      /** @type {number} */
      i = 0;
      for (; i < events.length; i++) {
        var self = $scope._views[i].getButtons();
        $scope._KeyboardHandlerNode[i] = new View(self);
      }
      return $scope;
    }
    return jsonFiller(Controller, out), Controller.prototype.setBonusType = function(now) {
      /** @type {number} */
      this._bonusType = now;
    }, Controller.prototype.onShowButtons = function(self) {
      if (this._views[this._bonusType].enableButtons(self.groupId === entry.ALL), self.groupId === entry.ALL) {
        var e = self.ResourceManager.getInstance().getKeyboardHandler();
        e.addCurrentNode(this._KeyboardHandlerNode[this._bonusType]);
      } else {
        e = self.ResourceManager.getInstance().getKeyboardHandler();
        e.removeCurrentNode();
      }
    }, Controller.prototype.onButtonClicked = function(message) {
      this._dispatcher.dispatch(message);
      this._views[this._bonusType].setButtonSelect(message.index);
    }, Controller;
  }(exports.EventProcessor);
  var safe_require = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var XTake = function(log) {
    /**
     * @return {?}
     */
    function WorkerDomAdapter() {
      return null !== log && log.apply(this, arguments) || this;
    }
    return safe_require(WorkerDomAdapter, log), WorkerDomAdapter.prototype.locateButtons = function(page) {
      return [new yo(page.getButton("bonus.redBlack.redBtn"), 1), new yo(page.getButton("bonus.redBlack.blackBtn"), 3), new yo(page.getButton("bonus.redBlack.heartBtn"), 7), new yo(page.getButton("bonus.redBlack.diamondBtn"), 5), new yo(page.getButton("bonus.redBlack.clubsBtn"), 4), new yo(page.getButton("bonus.redBlack.spadeBtn"), 6)];
    }, WorkerDomAdapter.prototype.locateButtonStroke = function(p) {
      return [p.getAnimation("bonus.redBlack.redBtn.btnStroke"), p.getAnimation("bonus.redBlack.blackBtn.btnStroke"), p.getAnimation("bonus.redBlack.heartBtn.btnStroke"), p.getAnimation("bonus.redBlack.diamondBtn.btnStroke"), p.getAnimation("bonus.redBlack.clubsBtn.btnStroke"), p.getAnimation("bonus.redBlack.spadeBtn.btnStroke")];
    }, WorkerDomAdapter;
  }(lintlog);
  var canvasIndexFromEvent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var IssuerFingerprint = function(log) {
    /**
     * @return {?}
     */
    function e() {
      return null !== log && log.apply(this, arguments) || this;
    }
    return canvasIndexFromEvent(e, log), e.prototype.locateButtons = function(page) {
      return [new yo(page.getButton("bonus.beatTheDealer.card1"), 1), new yo(page.getButton("bonus.beatTheDealer.card2"), 2), new yo(page.getButton("bonus.beatTheDealer.card3"), 3), new yo(page.getButton("bonus.beatTheDealer.card4"), 4)];
    }, e.prototype.locateButtonStroke = function(p) {
      return [p.getAnimation("bonus.beatTheDealer.card1.btnStroke"), p.getAnimation("bonus.beatTheDealer.card2.btnStroke"), p.getAnimation("bonus.beatTheDealer.card3.btnStroke"), p.getAnimation("bonus.beatTheDealer.card4.btnStroke")];
    }, e;
  }(lintlog);
  var drawIconImage = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Constr = function(tile) {
    /**
     * @param {!Function} params
     * @param {!Function} options
     * @param {?} container
     * @return {?}
     */
    function Container(params, options, container) {
      var self = tile.call(this, params) || this;
      return self._views = self.createUIViews(container), self._controller = new Map(params, options, self._views), self;
    }
    return drawIconImage(Container, tile), Container.prototype.setBonusType = function(name) {
      this._controller.setBonusType(name);
    }, Container.prototype.createUIViews = function(n) {
      /** @type {!Array} */
      var result = [];
      return result[attr.BEAT_THE_DEALER] = new IssuerFingerprint(n), result[attr.RED_OR_BLACK] = new XTake(n), result[attr.HIGH_OR_LOW] = new Array(n), result;
    }, Container;
  }(exports.EventProcessor);
  var Bo = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.RED_TEXT_INFO = "RED_TEXT_INFO", t.RED_TEXT_SYMBOL_INFO = "RED_TEXT_SYMBOL_INFO", t.HIGH_INFO = "HIGH_INFO", t.LOW_INFO = "LOW_INFO", t.BEAT_THE_DEALER_CARD_INFO = "BEAT_THE_DEALER_CARD_INFO", t;
  }();
  var pureColor = function() {
    /**
     * @param {!Entity} entity
     * @param {!Object} scene
     * @return {undefined}
     */
    function CylinderGeometryUpdater(entity, scene) {
      /** @type {!Entity} */
      this._entity = entity;
      /** @type {!Object} */
      this._mainHand = scene;
      /** @type {string} */
      this._infoText = "bonus.infoLine.inner.messageText";
      this._texts = {};
      this.locateTexts(entity);
    }
    return CylinderGeometryUpdater.prototype.locateTexts = function(force) {
    }, CylinderGeometryUpdater.prototype.setLabelText = function(value, size, text) {
    }, CylinderGeometryUpdater.prototype.setCoinInfoTexts = function(a) {
    }, CylinderGeometryUpdater.prototype.execIntro = function(name, isBgroundImg, stgs, index) {
      var $ = this;
      name.execHandler(function(formData) {
        return $.introHandler(isBgroundImg, stgs, index, formData);
      });
    }, CylinderGeometryUpdater.prototype.introHandler = function(isBgroundImg, stgs, index, source) {
      source.complete();
    }, CylinderGeometryUpdater.prototype.showInitCard = function(trackingPeriod, value) {
      value.startDelayMs(0);
    }, CylinderGeometryUpdater.prototype.showCards = function(y, x, index) {
      index.startDelayMs(0);
    }, CylinderGeometryUpdater.prototype.startOutro = function(args, internal, n) {
      var chatFacade = this;
      args.startHandler(function(data) {
        return chatFacade.outroHandler(data, internal, n);
      });
    }, CylinderGeometryUpdater.prototype.outroHandler = function(t, xgh2, xgh3) {
      t.complete();
    }, CylinderGeometryUpdater.prototype.setInfo = function(message) {
      this._entity.getTextField(this._infoText).setText(message);
    }, CylinderGeometryUpdater;
  }();
  var category10Scale = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var booleanOption = function(color) {
    /**
     * @param {(Image|string)} i
     * @param {?} val
     * @return {?}
     */
    function render(i, val) {
      var self = color.call(this, i, val) || this;
      self.locateAnims(i);
      /** @type {number} */
      var j = 0;
      for (; j < 5; j++) {
        self._mainHand.cards[j].hide();
      }
      return self._anim.play("hide"), self.showText(false), self;
    }
    return category10Scale(render, color), render.prototype.introHandler = function(isBgroundImg, stgs, index, source) {
      var cards = this._mainHand.cards;
      if (isBgroundImg) {
        cards[2].unHide();
        this._anim.play("show");
        this.showText(true);
        cards[2].showFace(false, false);
      } else {
        cards[2].showFace(false, true);
      }
      source.complete();
    }, render.prototype.showText = function(value) {
      this._textAnim.play(value ? "common" : "hide");
    }, render.prototype.outroHandler = function(t, xgh2, xgh3) {
      var cards = this._mainHand.cards;
      if (xgh2) {
        switch(t.state) {
          case 0:
            t.startDelayMs(1000);
            break;
          default:
            this._anim.play("hide");
            this.showText(false);
            cards[2].showFace(false, false);
            cards[2].hide();
            t.complete();
        }
      } else {
        t.complete();
      }
    }, render.prototype.showCards = function(y, x, index) {
      var cards = this._mainHand.cards;
      cards[2].setCardValue(y[0]);
      cards[2].showFace(true, true);
      index.startDelayMs(700);
    }, render;
  }(pureColor);
  var setTopicMessages = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ObserverInfo = function(format) {
    /**
     * @return {?}
     */
    function Axis() {
      return null !== format && format.apply(this, arguments) || this;
    }
    return setTopicMessages(Axis, format), Axis.prototype.locateAnims = function(p) {
      this._anim = p.getAnimation("bonus.highLow");
      this._textAnim = p.getAnimation("bonus.infoLine.inner");
    }, Axis.prototype.showText = function(value) {
      this._textAnim.play(value ? "highOrLow" : "hide");
    }, Axis.prototype.locateTexts = function(force) {
      /** @type {string} */
      this._texts[Bo.HIGH_INFO] = "bonus.highLow.highInfo";
      /** @type {string} */
      this._texts[Bo.LOW_INFO] = "bonus.highLow.lowInfo";
    }, Axis.prototype.setCoinInfoTexts = function(a) {
      var e = self.ResourceManager.getInstance().getCreditFormatter();
      self.ResourceManager.getInstance().getMoneyFormatter();
      this.setLabelText(Bo.HIGH_INFO, e.formatCoinValue(2 * a, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      this.setLabelText(Bo.LOW_INFO, e.formatCoinValue(2 * a, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
    }, Axis.prototype.setLabelText = function(key, value, text) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
      if (text) {
        this._entity.getTextField(id).setArgs(text);
      }
    }, Axis;
  }(booleanOption);
  var pageQuality = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ScheduledObserver = function(format) {
    /**
     * @return {?}
     */
    function Axis() {
      return null !== format && format.apply(this, arguments) || this;
    }
    return pageQuality(Axis, format), Axis.prototype.locateAnims = function(p) {
      this._anim = p.getAnimation("bonus.redBlack");
      this._textAnim = p.getAnimation("bonus.infoLine.inner");
    }, Axis.prototype.locateTexts = function(force) {
      /** @type {string} */
      this._texts[Bo.RED_TEXT_INFO] = "bonus.redBlack.redInfo";
      /** @type {string} */
      this._texts[Bo.RED_TEXT_SYMBOL_INFO] = "bonus.redBlack.redSymbolInfo";
    }, Axis.prototype.setCoinInfoTexts = function(a) {
      var e = self.ResourceManager.getInstance().getCreditFormatter();
      self.ResourceManager.getInstance().getMoneyFormatter();
      this.setLabelText(Bo.RED_TEXT_INFO, e.formatCoinValue(2 * a, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      this.setLabelText(Bo.RED_TEXT_SYMBOL_INFO, e.formatCoinValue(4 * a, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
    }, Axis.prototype.setLabelText = function(key, value, text) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
      if (text) {
        this._entity.getTextField(id).setArgs(text);
      }
    }, Axis;
  }(booleanOption);
  var getValueVisualDefine = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var InnerSubscription = function(color) {
    /**
     * @param {!Image} s
     * @param {?} w
     * @return {?}
     */
    function fn(s, w) {
      var self = color.call(this, s, w) || this;
      self._beatTheDealer = s.getAnimation("bonus.beatTheDealer");
      self._textAnim = s.getAnimation("bonus.infoLine.inner");
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        self._mainHand.cards[i].hide();
      }
      return self._beatTheDealer.play("hide"), self._textAnim.play("hide"), self;
    }
    return getValueVisualDefine(fn, color), fn.prototype.introHandler = function(isBgroundImg, stgs, index, data) {
      this._mainHand.cards;
      if (isBgroundImg) {
        /** @type {number} */
        var i = 0;
        for (; i < 5; i++) {
          this._mainHand.cards[i].unHide();
          this._mainHand.cards[i].showFace(false, false);
        }
        this._beatTheDealer.play("show");
        this._textAnim.play("common");
      } else {
        if (stgs) {
          /** @type {number} */
          i = 0;
          for (; i < 5; i++) {
            this._mainHand.cards[i].showFace(false, true);
          }
          this._mainHand.setFaceUp(false);
        } else {
          this._mainHand.showFace(false, 0, false);
        }
      }
      if (stgs) {
        data.execDelayMs(500);
      } else {
        data.execDelayMs(1000);
      }
    }, fn.prototype.showInitCard = function(elem, srces) {
      var cards = this._mainHand.cards;
      cards[0].setCardValue(elem);
      cards[0].showFace(true, true);
      srces.startDelayMs(500);
    }, fn.prototype.showCards = function(cb, index, x) {
      var EditRoute = this;
      x.startHandler(function(item, itemModel) {
        return EditRoute.showCardsHandler(itemModel, item);
      }, cb);
    }, fn.prototype.showCardsHandler = function(item, itemData) {
      var cards = this._mainHand.cards;
      var items = itemData.data;
      /** @type {number} */
      var i = 0;
      for (; i < 4; i++) {
        cards[i + 1].setCardValue(items[i]);
      }
      if (item) {
        /** @type {number} */
        i = 1;
        for (; i < 5; i++) {
          this._mainHand.cards[i].showFace(true, true);
        }
        this._mainHand.setFaceUp(true);
      } else {
        this._mainHand.showFace(true, 0, false, 1);
      }
      if (item) {
        itemData.execDelayMs(500);
      } else {
        itemData.execDelayMs(1000);
      }
    }, fn.prototype.outroHandler = function(t, xgh2, xgh3) {
      this._mainHand.cards;
      if (xgh2) {
        switch(t.state) {
          case 0:
            t.startDelayMs(1000);
            break;
          default:
            this._beatTheDealer.play("hide");
            this._textAnim.play("hide");
            /** @type {number} */
            var i = 0;
            for (; i < 5; i++) {
              this._mainHand.cards[i].hide();
            }
            this._mainHand.setFaceUp(false);
            t.complete();
        }
      } else {
        t.complete();
      }
    }, fn.prototype.locateTexts = function(force) {
      /** @type {string} */
      this._texts[Bo.BEAT_THE_DEALER_CARD_INFO] = "bonus.beatTheDealer.cardInfo";
    }, fn.prototype.setCoinInfoTexts = function(a) {
      var e = self.ResourceManager.getInstance().getCreditFormatter();
      self.ResourceManager.getInstance().getMoneyFormatter();
      this.setLabelText(Bo.BEAT_THE_DEALER_CARD_INFO, e.formatCoinValue(2 * a, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
    }, fn.prototype.setLabelText = function(key, value, text) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
      if (text) {
        this._entity.getTextField(id).setArgs(text);
      }
    }, fn;
  }(pureColor);
  var shouldMouseOutCancel = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Script = function(t) {
    /**
     * @param {?} type
     * @return {?}
     */
    function e(type) {
      var array = t.call(this, e.BONUS_TYPE) || this;
      return array._selectedIdx = type, array;
    }
    return shouldMouseOutCancel(e, t), Object.defineProperty(e.prototype, "selectedIdx", {
      get : function() {
        return this._selectedIdx;
      },
      enumerable : true,
      configurable : true
    }), e.BONUS_TYPE = "BONUS_TYPE", e;
  }(exports.MegatonEvent);
  var mapTokenList = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RegExp = function(options) {
    /**
     * @param {!HTMLElement} name
     * @return {?}
     */
    function Main(name) {
      var plugin = options.call(this, name) || this;
      return name.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), plugin;
    }
    return mapTokenList(Main, options), Main.prototype.onCommand = function(event) {
      var command = event.command;
      switch(event.command.type) {
        case self.ServerCommand.SSPCUSTOMDATA:
          var form = command.getXML(0);
          var tag = this.findXMLNode(form, "custom");
          if (null !== tag) {
            var ele = this.findXMLNode(tag, "Bonusgame");
            if (null !== ele) {
              var value = ele.getAttribute("Value");
              /** @type {number} */
              var text = parseInt(value);
              this._dispatcher.dispatch(new Script(text));
              this._dispatcher.dispatch(new self.LogicEvent(new Script(text)));
            }
          }
      }
    }, Main.prototype.findXMLNode = function(el, name) {
      if (!el.childNodes) {
        return null;
      }
      /** @type {number} */
      var n = 0;
      var numberOfFrustums = el.childNodes.length;
      for (; n < numberOfFrustums; n++) {
        if (el.childNodes[n].nodeName === name) {
          return el.childNodes[n];
        }
      }
      return null;
    }, Main;
  }(self.CommandConverter);
  var lifecycleTest = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var opt = function(t) {
    /**
     * @param {number} index
     * @return {?}
     */
    function store(index) {
      var REGEX = t.call(this, item.BONUS_COLLECT_WIN) || this;
      return REGEX._winAmount = index, REGEX;
    }
    return lifecycleTest(store, t), Object.defineProperty(store.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      enumerable : true,
      configurable : true
    }), store;
  }(item);
  var emit = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RenderController = function(url) {
    /**
     * @param {!HTMLElement} document
     * @param {!Object} key
     * @param {!Object} index
     * @param {?} callback
     * @param {!Object} initialValue
     * @return {?}
     */
    function create(document, key, index, callback, initialValue) {
      var self = url.call(this, document) || this;
      return self._manager = key, self._roundHander = index, self._betSettings = callback, self._gameState = initialValue, document.addEventListener(Script.BONUS_TYPE, function(settings) {
        return self.onBonusType(settings);
      }), document.addEventListener(item.BONUS_INIT, function(args) {
        return self.onBonusText(args);
      }), document.addEventListener(me.BONUS_WIN, function(copy) {
        return self.onBonusWin(copy);
      }), document.addEventListener(opt.BONUS_COLLECT_WIN, function(args) {
        return self.onBonusCollectWin(args);
      }), initialValue.addListener(function(t) {
        return self.onGameState(t);
      }), self;
    }
    return emit(create, url), Object.defineProperty(create.prototype, "bonusType", {
      set : function(value) {
        if (value > attr.HIGH_OR_LOW || value < attr.BEAT_THE_DEALER) {
          value = attr.RED_OR_BLACK;
        }
        /** @type {number} */
        this._bonusType = value;
      },
      enumerable : true,
      configurable : true
    }), create.prototype.onBonusType = function(complete) {
      this._manager.selectBonusGame(complete.selectedIdx);
      this.bonusType = complete.selectedIdx;
    }, create.prototype.onBonusText = function(jumpToNext) {
      /** @type {number} */
      var valueProgess = this._roundHander.win / this._betSettings.denomination;
      this._manager.getBonusView(this._bonusType).setCoinInfoTexts(valueProgess);
    }, create.prototype.onGameState = function(t) {
      if (t.isChanged(logger.INFO)) {
        this._manager.getBonusView(this._bonusType).setInfo(this._gameState.info);
      }
    }, create.prototype.onBonusWin = function(atype) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      /** @type {string} */
      var n = atype.index / this._betSettings.denomination + "";
      var message = PersonModel.getByName("IDS_MSG_CONGRATULATIONS").getText() + " ";
      message = message + (PersonModel.getByName("IDS_X_COINS_UC").getText().replace("%d", n) + ".");
      this._gameState.setInfo(message);
    }, create.prototype.onBonusCollectWin = function(jumpToNext) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      /** @type {string} */
      var n = this._roundHander.win / this._betSettings.denomination + "";
      var message = PersonModel.getByName("IDS_X_COINS_UC").getText().replace("%d", n) + ".";
      this._gameState.setInfo(message);
    }, create;
  }(exports.EventProcessor);
  var thingHasAsProperty = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Event = function(t) {
    /**
     * @param {?} type
     * @return {?}
     */
    function c(type) {
      var array = t.call(this, item.BONUS_SELECT) || this;
      return array._selectedIdx = type, array;
    }
    return thingHasAsProperty(c, t), Object.defineProperty(c.prototype, "selectedIdx", {
      get : function() {
        return this._selectedIdx;
      },
      enumerable : true,
      configurable : true
    }), c;
  }(item);
  var runModuleOnFiles = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var newItem = function(t) {
    /**
     * @param {number} name
     * @return {?}
     */
    function module(name) {
      var obj = t.call(this, item.BONUS_INIT) || this;
      return obj._card = name, obj;
    }
    return runModuleOnFiles(module, t), Object.defineProperty(module.prototype, "card", {
      get : function() {
        return this._card;
      },
      enumerable : true,
      configurable : true
    }), module;
  }(item);
  var m = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Item = function(s) {
    /**
     * @param {?} key
     * @param {?} raw
     * @param {number} connection
     * @param {?} options
     * @param {?} dataModel
     * @return {?}
     */
    function Field(key, raw, connection, options, dataModel) {
      var self = s.call(this, item.BONUS_ANSWER) || this;
      return self._winCode = key, self._winAmount = raw, self._cards = connection, self._canConinue = options, self._selectedIdx = dataModel, self;
    }
    return m(Field, s), Object.defineProperty(Field.prototype, "winCode", {
      get : function() {
        return this._winCode;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "winAmount", {
      get : function() {
        return this._winAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "cards", {
      get : function() {
        return this._cards;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "canContinue", {
      get : function() {
        return this._canConinue;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Field.prototype, "selectedIdx", {
      get : function() {
        return this._selectedIdx;
      },
      enumerable : true,
      configurable : true
    }), Field;
  }(item);
  var start = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var elementobject = function(callback) {
    /**
     * @param {!HTMLElement} rect
     * @return {?}
     */
    function Main(rect) {
      var plugin = callback.call(this, rect) || this;
      return plugin._numCards = 1, rect.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), rect.addEventListener(Event.BONUS_SELECT, function(self) {
        return plugin.onBonusSelect(self);
      }), plugin;
    }
    return start(Main, callback), Main.prototype.setNumCards = function(canCreateDiscussions) {
      /** @type {number} */
      this._numCards = canCreateDiscussions;
    }, Main.prototype.onCommand = function(event) {
      var args = event.command;
      switch(event.command.type) {
        case Ye.BONUS_INITAL:
          this._dispatcher.dispatch(new self.LogicEvent(new newItem(args.getInt(0))));
          this._dispatcher.dispatch(new newItem(args.getInt(0)));
          break;
        case Ye.BONUS_ANSWER:
          /** @type {number} */
          var REQ_ID = 0;
          var kind = args.getInt(REQ_ID++);
          var table = args.getInt(REQ_ID++);
          /** @type {!Array} */
          var itm = [];
          /** @type {number} */
          var a = 0;
          for (; a < this._numCards; a++) {
            itm.push(args.getInt(REQ_ID++));
          }
          /** @type {boolean} */
          var timestamp = !args.getBoolean(REQ_ID++);
          var checked = args.getInt(REQ_ID++);
          var item = new Item(kind, table, itm, timestamp, checked);
          this._dispatcher.dispatch(new self.LogicEvent(item));
      }
    }, Main.prototype.onBonusSelect = function(_self) {
      /** @type {!Array} */
      var options = [String(_self.selectedIdx)];
      var keyboard = new self.Command(screens.BONUS_EVENT, options);
      this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, keyboard));
    }, Main;
  }(self.CommandConverter);
  var clearSetEntry = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Login = function(contains) {
    /**
     * @param {!HTMLElement} e
     * @param {string} response
     * @param {?} app
     * @param {?} v
     * @param {?} display
     * @param {string} startCallback
     * @return {?}
     */
    function set(e, response, app, v, display, startCallback) {
      var self = contains.call(this, e) || this;
      return self._input = response, self._gameSettings = app, self._gameState = display, self._bonusState = startCallback, self._roundHandler = v, self._view = null, self._infoToDisplay = "", self._first = true, self._isDeal = false, self._bonusType = attr.BEAT_THE_DEALER, response.registerEvent(constants.BONUS), response.registerEvent(constants.COLLECT), response.registerEvent(tapeElmtData.BONUS_BUTTON), response.registerEvent(item.BONUS_INIT), response.registerEvent(item.BONUS_ANSWER), response.registerEvent(options.BONUS_COLLECT_ANSWER), 
      e.addEventListener(Script.BONUS_TYPE, function(settings) {
        return self.onBonusType(settings);
      }), self._bonusSequence = [function(t) {
        return self.handleBonusIntro(t);
      }, function(t) {
        return self.handleBonusInit(t);
      }, function(t) {
        return self.handleBonusSelectWait(t);
      }, function(data) {
        return self.handleBonusSelect(data);
      }, function(t) {
        return self.handleBonusResponse(t);
      }, function(t) {
        return self.handleBonusResult(t);
      }], self;
    }
    return clearSetEntry(set, contains), set.prototype.onBonusType = function(complete) {
      this._bonusType = complete.selectedIdx;
    }, set.prototype.setView = function(view) {
      /** @type {!Element} */
      this._view = view;
    }, set.prototype.setInfoToDisplay = function(canCreateDiscussions) {
      this._infoToDisplay = canCreateDiscussions;
    }, set.prototype.handleBonus = function(asyncFunction, extraAsyncArgs) {
      var canvasLayersManager = this;
      this._winAmount = extraAsyncArgs;
      asyncFunction.execHandler(function(j) {
        return canvasLayersManager.bonusHandler(j);
      });
    }, set.prototype.bonusHandler = function(a) {
      var ArgsHandler = this;
      switch(a.state) {
        case 0:
          /** @type {boolean} */
          var n = true;
          if (this._isDeal = false, !this._gameState.canGamble) {
            if (!(this._winAmount > 0)) {
              this._dispatcher.dispatch(new me(me.LOSE, 0));
              a.complete();
              break;
            }
            this._gameState.setInfo("IDS_VP_BONUS5");
            /** @type {boolean} */
            n = false;
          }
          if (n && !this._gameSettings.neverGamble) {
            this._bonusState.clear();
            this._gameState.setInfo("IDS_GAMBLEPROMPT");
            this._dispatcher.dispatch(new req(req.SHOW_PANELS));
            this._dispatcher.dispatch(new item(item.GAMBLE_AVAILABLE));
            this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.GAMBLE_SPIN_WAIT));
          } else {
            if (n) {
              this._dispatcher.dispatch(new polyfill);
            } else {
              var checked = new self.Command(self.ClientCommand.REQUEST_BUYIN_STATUS, []);
              this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.LOGIC_OUT, checked));
              a.complete();
            }
          }
        case 1:
          /** @type {null} */
          var s = null;
          /** @type {null} */
          var boost = null;
          for (; null !== (s = this._input.read(a));) {
            switch(boost = null, s.type !== item.BONUS_INIT && this._input.next(), s.type) {
              case item.BONUS_INIT:
              case constants.BONUS:
                if (this._first && !this._gameSettings.neverGamble) {
                  this._dispatcher.dispatch(new req(req.SHOW_BONUS));
                  /** @type {boolean} */
                  this._first = false;
                }
                boost = s;
                break;
              case options.BONUS_COLLECT_ANSWER:
                boost = s;
                if (this._isDeal) {
                  this._dispatcher.dispatch(new options(options.DEAL_REQUEST));
                }
                this._dispatcher.dispatch(new req(req.HIDE_PANELS));
                if (!this._first) {
                  this._dispatcher.dispatch(new req(req.HIDE_BONUS));
                  /** @type {boolean} */
                  this._first = true;
                }
                break;
              case constants.DEAL:
                /** @type {boolean} */
                this._isDeal = true;
              case constants.COLLECT:
                boost = s;
                if (!(0 === this._roundHandler.win || this._first)) {
                  this._view.startOutro(a, true, this._gameState.numHands);
                  a.next(1);
                }
                this._dispatcher.dispatch(new opt(this._bonusState.winAmount));
                this._dispatcher.dispatch(new polyfill);
                this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.NONE));
                if (this._first) {
                  this._dispatcher.dispatch(new req(req.HIDE_PANELS));
                  if (this._isDeal) {
                    this._dispatcher.dispatch(new options(options.DEAL_REQUEST));
                  }
                  a.complete();
                }
            }
            if (boost) {
              break;
            }
          }
          if (null === boost) {
            a.next(1);
            break;
          }
          switch(this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.NONE)), boost.type) {
            case options.BONUS_COLLECT_ANSWER:
              a.complete();
              break;
            case constants.BONUS:
              this._dispatcher.dispatch(new server);
            case item.BONUS_INIT:
              a.startHandler(function(element) {
                return ArgsHandler.bonusRoundHandler(element);
              });
              a.next(2);
          }break;
        case 2:
          this._roundHandler.setWin(this._bonusState.winAmount);
          if (0 !== this._bonusState.winCode) {
            if (this._gameState.canGamble) {
              if (1 === this._bonusState.winCode) {
                this._gameState.setInfo("IDS_HUD_PUSH");
              }
              this._dispatcher.dispatch(new self.ShowButtonsEvent(STATE.GAMBLE_WAIT));
              this._bonusState.next();
              a.startDelayMs(0);
              a.next(1);
            } else {
              this._gameState.setInfo("IDS_VP_BONUS5");
              this._dispatcher.dispatch(new constants(constants.COLLECT));
              a.startDelayMs(1000);
              a.next(1);
            }
          } else {
            this._gameState.setInfo("");
            this._dispatcher.dispatch(new me(me.LOSE, 0));
            this._dispatcher.dispatch(new req(req.HIDE_PANELS));
            if (!this._first) {
              this._dispatcher.dispatch(new req(req.HIDE_BONUS));
              /** @type {boolean} */
              this._first = true;
            }
            a.complete();
          }
      }
    }, set.prototype.bonusRoundHandler = function(suppressDisabledCheck) {
      suppressDisabledCheck.execSequence(this._bonusSequence);
    }, set.prototype.handleBonusIntro = function(status) {
      this._view.execIntro(status, 0 === this._bonusState.turnIdx, this._gameSettings.fastPlay, this._gameState.numHands);
    }, set.prototype.handleBonusInit = function(value) {
      switch(value.state) {
        case 0:
          /** @type {null} */
          var v = null;
          for (; null !== (v = this._input.read(value)) && (this._input.next(), v.type !== newItem.BONUS_INIT);) {
          }
          if (null === v) {
            value.next(0);
            break;
          }
          var e = v;
          this.processInit(e);
          this._view.showInitCard(e.card, value);
          break;
        default:
          value.complete();
      }
    }, set.prototype.processInit = function(message) {
      this._bonusState.setInitCard(message.card);
    }, set.prototype.handleBonusSelectWait = function(state) {
      switch(state.state) {
        case 0:
          this._dispatcher.dispatch(new entry(entry.ALL));
          this._gameState.setInfo(this._infoToDisplay);
        case 1:
          /** @type {null} */
          var data = null;
          /** @type {number} */
          var item = -1;
          for (; null !== (data = this._input.read(state));) {
            switch(data.type !== Item.BONUS_ANSWER && this._input.next(), data.type) {
              case Item.BONUS_ANSWER:
                item = data.selectedIdx;
                break;
              case tapeElmtData.BONUS_BUTTON:
                item = data.index;
                this._dispatcher.dispatch(new Event(item));
                break;
              case constants.COLLECT:
                /** @type {number} */
                item = 0;
                this._dispatcher.dispatch(new Event(item));
            }
            if (item >= 0) {
              break;
            }
          }
          if (null === data) {
            state.next(1);
            break;
          }
          this._dispatcher.dispatch(new entry(entry.NONE));
          this._gameState.setInfo("");
          this._bonusState.select(item);
          state.complete();
      }
    }, set.prototype.handleBonusSelect = function(subgoal) {
      subgoal.complete();
    }, set.prototype.handleBonusResponse = function(state) {
      switch(state.state) {
        case 0:
          /** @type {null} */
          var data = null;
          for (; null !== (data = this._input.read(state)) && (this._input.next(), data.type !== item.BONUS_ANSWER);) {
          }
          if (null === data) {
            state.next(0);
            break;
          }
          var result = data;
          this.processResult(result);
          this._view.showCards(result.cards, this._gameSettings.fastPlay, state);
          break;
        default:
          if (!(this._bonusState.winAmount > 0)) {
            this._gameState.setInfo("IDS_VP_GAMEOVER");
          }
          state.complete();
      }
    }, set.prototype.processResult = function(data) {
      this._bonusState.select(data.selectedIdx);
      this._bonusState.setCards(data.cards);
      this._bonusState.setWin(data.winAmount, data.winCode);
      if (this._bonusType !== attr.HIGH_OR_LOW && this._bonusType !== attr.BEAT_THE_DEALER || 1 !== this._bonusState.winCode) {
        if (data.winAmount) {
          this._dispatcher.dispatch(new me(me.BONUS_WIN, data.winAmount));
        } else {
          this._dispatcher.dispatch(new me(me.BONUS_LOSE, data.winAmount));
        }
      } else {
        this._gameState.setInfo("IDS_HUD_PUSH");
        this._dispatcher.dispatch(new me(me.BONUS_PUSH, 0));
      }
      this._gameState.setCanContinueGamble(data.canContinue);
    }, set.prototype.handleBonusResult = function(options) {
      switch(options.state) {
        case 0:
          this._view.startOutro(options, 0 === this._bonusState.winCode, this._gameState.numHands);
          break;
        default:
          options.complete();
      }
    }, set;
  }(exports.EventProcessor);
  var MouseEvent = function() {
    /**
     * @param {string} $rootScope
     * @param {string} $state
     * @param {number} confirmDialogService
     * @param {number} persistentStateService
     * @param {number} appActivityService
     * @param {number} notifierService
     * @param {string} FileService
     * @param {?} FileModel
     * @return {undefined}
     */
    function FileEditorController($rootScope, $state, confirmDialogService, persistentStateService, appActivityService, notifierService, FileService, FileModel) {
      /** @type {string} */
      this._views = FileService;
      this._infotexts = FileModel;
      this._logicHandler = new Login($rootScope, $state, confirmDialogService, persistentStateService, appActivityService, notifierService);
      this._commandConverter = this.createCommandConverter($rootScope);
      this.setBonusType(attr.RED_OR_BLACK);
    }
    return Object.defineProperty(FileEditorController.prototype, "logicHandler", {
      get : function() {
        return this._logicHandler;
      },
      enumerable : true,
      configurable : true
    }), FileEditorController.prototype.setBonusType = function(name) {
      this._logicHandler.setView(this._views[name]);
      this._logicHandler.setInfoToDisplay(this._infotexts[name]);
      this._commandConverter.setNumCards(name === attr.BEAT_THE_DEALER ? 4 : 1);
    }, FileEditorController.prototype.createCommandConverter = function(name) {
      return new elementobject(name);
    }, FileEditorController;
  }();
  var rr = function() {
    /**
     * @param {undefined} users
     * @param {undefined} options
     * @param {undefined} name
     * @param {undefined} a
     * @param {number} item
     * @param {string} args
     * @param {?} count
     * @param {number} val
     * @return {undefined}
     */
    function self(users, options, name, a, item, args, count, val) {
      this._bonusState = new jCanvasObject;
      this._bonusViews = this.createViews(count, users, a, options);
      this._infoTexts = this.createInfoTexts();
      this._logicManager = this.createLogicManager(options, name, a, item, args);
      this._uiManager = this.createUIManager(options, users);
      this._commandConverter = new RegExp(options);
      this._controller = new RenderController(options, this, item, val, args);
      this.selectBonusGame(attr.RED_OR_BLACK);
    }
    return Object.defineProperty(self.prototype, "logicHandler", {
      get : function() {
        return this._logicManager.logicHandler;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.createViews = function(suffix, callback, obj, index) {
      var observer = new Macro(callback, 0, 0, obj, index, true);
      /** @type {!Array} */
      var object = [];
      return object[attr.BEAT_THE_DEALER] = new InnerSubscription(callback, observer), object[attr.RED_OR_BLACK] = new ScheduledObserver(callback, observer), object[attr.HIGH_OR_LOW] = new ObserverInfo(callback, observer), object;
    }, self.prototype.createInfoTexts = function() {
      /** @type {!Array} */
      var keysgroups = [];
      return keysgroups[attr.BEAT_THE_DEALER] = "IDS_VP_BONUS1", keysgroups[attr.RED_OR_BLACK] = "IDS_VP_BONUS6", keysgroups[attr.HIGH_OR_LOW] = "IDS_VP_BONUS3", keysgroups;
    }, self.prototype.createLogicManager = function(type, event, point, target, e) {
      return new MouseEvent(type, event, point, target, e, this._bonusState, this._bonusViews, this._infoTexts);
    }, self.prototype.createUIManager = function(args, params) {
      return new Constr(args, this._bonusState, params);
    }, self.prototype.selectBonusGame = function(str) {
      this._logicManager.setBonusType(str);
      this._uiManager.setBonusType(str);
      /** @type {number} */
      this._controller.bonusType = str;
    }, self.prototype.getBonusView = function(ballNumber) {
      return this._bonusViews[ballNumber];
    }, self.BONUS_GAME_NAMES = ["IDS_VP_BONUS_BEATDEALER", "IDS_VP_BONUS_REDORBLACK", "IDS_VP_BONUS_PICKHIGHLOW"], self;
  }();
  var Wrapper = function() {
    /**
     * @param {!HTMLElement} config
     * @param {!Object} e
     * @return {undefined}
     */
    function load(config, e) {
      var sandbox = this;
      /** @type {!Object} */
      this._betSettings = e;
      self.ResourceManager.getInstance().getLayoutManager().setVariable("handLayout", "singleHand");
      self.ResourceManager.getInstance().getLayoutManager().setVariable("bonusType", "redOrBlack");
      e.addListener(function(fs) {
        return sandbox.onBetSettings(fs);
      });
      config.addEventListener(Script.BONUS_TYPE, function(settings) {
        return sandbox.onBonusType(settings);
      });
    }
    return load.prototype.onBetSettings = function(data) {
      if (data.isChanged(___err.HANDS)) {
        /** @type {string} */
        var commandVerb = this._betSettings.hands > 1 ? "multiHand" : "singleHand";
        self.ResourceManager.getInstance().getLayoutManager().setVariable("handLayout", commandVerb);
      }
    }, load.prototype.onBonusType = function(complete) {
      var commandVerb;
      switch(complete.selectedIdx) {
        case attr.BEAT_THE_DEALER:
          /** @type {string} */
          commandVerb = "beatTheDealer";
          break;
        case attr.HIGH_OR_LOW:
          /** @type {string} */
          commandVerb = "highOrLow";
          break;
        case attr.RED_OR_BLACK:
        default:
          /** @type {string} */
          commandVerb = "redOrBlack";
      }
      self.ResourceManager.getInstance().getLayoutManager().setVariable("bonusType", commandVerb);
    }, load;
  }();
  var ar = function() {
    /**
     * @param {?} selector
     * @param {?} callback
     * @return {undefined}
     */
    function on(selector, callback) {
      this._layoutController = new Wrapper(selector, callback);
    }
    return on;
  }();
  var onStart = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var DOM = function(ui) {
    /**
     * @param {number} index
     * @return {?}
     */
    function s(index) {
      var REGEX = ui.call(this, s.PAYTABLE) || this;
      return REGEX._index = index, REGEX;
    }
    return onStart(s, ui), Object.defineProperty(s.prototype, "index", {
      get : function() {
        return this._index;
      },
      enumerable : true,
      configurable : true
    }), s.PAYTABLE = "PAYTABLE", s;
  }(exports.MegatonEvent);
  var _inherits = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MutationObserver = function(t) {
    /**
     * @param {!HTMLElement} parent
     * @return {?}
     */
    function Main(parent) {
      var plugin = t.call(this, parent) || this;
      return parent.addEventListener(self.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), plugin;
    }
    return _inherits(Main, t), Main.prototype.onCommand = function(event) {
      var command = event.command;
      switch(event.command.type) {
        case self.ServerCommand.SSPCUSTOMDATA:
          /** @type {string} */
          var level = "2";
          var p = command.getXML(0);
          var el = this.findXMLNode(p, "custom");
          if (null !== el) {
            var client = this.findXMLNode(el, "Paytable");
            if (null !== client) {
              level = client.getAttribute("Value");
            }
          }
          /** @type {number} */
          var leetLevel = parseInt(level);
          this._dispatcher.dispatch(new self.LogicEvent(new DOM(leetLevel)));
      }
    }, Main.prototype.findXMLNode = function(el, name) {
      if (!el.childNodes) {
        return null;
      }
      /** @type {number} */
      var n = 0;
      var numberOfFrustums = el.childNodes.length;
      for (; n < numberOfFrustums; n++) {
        if (el.childNodes[n].nodeName === name) {
          return el.childNodes[n];
        }
      }
      return null;
    }, Main;
  }(self.CommandConverter);
  var addOptGroup = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Worker = function(buttonEvent) {
    /**
     * @param {!HTMLElement} e
     * @param {!Object} o
     * @param {!Element} f
     * @param {!Object} nodes
     * @return {?}
     */
    function select(e, o, f, nodes) {
      var self = buttonEvent.call(this, e) || this;
      return self._paytableData = o, self._view = f, self._betSettings = nodes, e.addEventListener(DOM.PAYTABLE, function(undefined) {
        return self.onPaytable(undefined);
      }), nodes.addListener(function(err) {
        return self.onBetSettings(err);
      }), o.addListener(function(canCreateDiscussions) {
        return self.onPaytableData();
      }), e.addEventListener(req.BONUS_SHOW_GAME, function(checked) {
        return self.onPaytebleVisible(checked);
      }), self._view.selectTableIndex(self._paytableData.index), self.onPaytableData(), self._prevHands = self._betSettings.hands, self;
    }
    return addOptGroup(select, buttonEvent), select.prototype.onPaytable = function(store) {
      this._paytableData.setIndex(store.index);
    }, select.prototype.onBetSettings = function(data) {
      if (data.isChanged(___err.COINS)) {
        this._view.selectCoins(this._betSettings.coins, false, this._paytableData.getCurrentData());
      }
      if (data.isChanged(___err.HANDS)) {
        this._view.setHands(this._betSettings.hands, this._prevHands);
        if (this._prevHands !== this._betSettings.hands) {
          this._prevHands = this._betSettings.hands;
        }
      }
    }, select.prototype.onPaytableData = function() {
      this._view.selectCoins(this._betSettings.coins, true, this._paytableData.getCurrentData());
    }, select.prototype.onPaytebleVisible = function(p) {
      if (p.groupId === req.SHOW_BONUS) {
        this._view.setPaytableVisible(false);
      } else {
        if (p.groupId === req.HIDE_BONUS) {
          this._view.setPaytableVisible(true);
        }
      }
    }, select;
  }(exports.EventProcessor);
  var check = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var fr = function(body) {
    /**
     * @return {?}
     */
    function cls() {
      var self = body.call(this) || this;
      /** @type {!Array} */
      self._dataArray = new Array(4);
      /** @type {number} */
      var index = 0;
      for (; index < 4; index++) {
        /** @type {!Array} */
        self._dataArray[index] = new Array;
      }
      return self.initDataArray(), self._index = 3, self;
    }
    return check(cls, body), Object.defineProperty(cls.prototype, "index", {
      get : function() {
        return this._index;
      },
      enumerable : true,
      configurable : true
    }), cls.prototype.initDataArray = function() {
    }, cls.prototype.setIndex = function(index) {
      /** @type {number} */
      this._index = index;
      this.notify();
    }, cls.prototype.getCurrentData = function() {
      return this._dataArray[this._index];
    }, cls;
  }(exports.Model);
  var Processing = function() {
    /**
     * @param {!Image} p
     * @param {!Object} value
     * @return {undefined}
     */
    function set(p, value) {
      /** @type {!Array} */
      this._colsMH = [];
      /** @type {!Object} */
      this._dispatcher = value;
      this._paytableDisplay = p.getDisplay(".");
      this._paytable = p.getAnimation(".");
      this._paytable.play("singleHand");
      this._royalValue = p.getAnimation("multiHand.values.royalValue");
      this._tablesSH = p.getAnimation("singleHand.values");
      this._tablesMH = p.getAnimation("multiHand.values");
      /** @type {!Array} */
      this._textFieldsSH = new Array(5);
      /** @type {number} */
      var i = 0;
      for (; i < 5; i++) {
        /** @type {string} */
        var s = "singleHand.values.col" + (i + 1) + "_row";
        /** @type {!Array} */
        this._textFieldsSH[i] = new Array;
        /** @type {number} */
        var idx = 0;
        for (; idx < 10; idx++) {
          this._textFieldsSH[i].push(p.getTextField(s + String(idx + 1)));
          this._textFieldsSH[i][idx].setText("99");
        }
      }
      /** @type {!Array} */
      this._textFieldsMH = new Array;
      /** @type {number} */
      i = 0;
      for (; i < 10; i++) {
        this._textFieldsMH.push(p.getTextField("multiHand.values.row" + String(i + 1)));
        this._textFieldsMH[i].setText("99");
      }
      this._colsSH = p.getAnimation("singleHand.colSelector");
      /** @type {number} */
      i = 0;
      for (; i < 4; i++) {
        this._colsMH[i] = p.getAnimation("multiHand.index" + (i + 1));
      }
    }
    return set.prototype.selectCoins = function(options, opts, optList) {
      this._colsSH.play("select" + options);
      this.updatePaytable(options - 1, opts, optList);
    }, set.prototype.selectTableIndex = function(n) {
      this._tablesSH.play("index" + n);
      this._tablesMH.play("index" + n);
    }, set.prototype.setHands = function(destIdentifier, noStore) {
      if (destIdentifier > 1) {
        this._paytable.play("multiHand");
      } else {
        this._paytable.play("singleHand");
      }
    }, set.prototype.updatePaytable = function(current, params, obj) {
      if (params) {
        /** @type {number} */
        var k = 0;
        for (; k < 5; k++) {
          /** @type {number} */
          var i = 0;
          var r = obj[k].length;
          for (; i < r; i++) {
            this._textFieldsSH[k][i].setText(String(obj[k][i] > -1 ? obj[k][i] : ""));
          }
        }
      }
      /** @type {number} */
      k = 0;
      r = obj[current].length;
      for (; k < r; k++) {
        this._textFieldsMH[k].setText(String(obj[current][k]));
      }
      this._royalValue.play(4 === current ? "color" : "noColor");
    }, set.prototype.setPaytableVisible = function(value) {
      this._paytableDisplay.setVisible(value);
    }, set;
  }();
  var gr = function() {
    /**
     * @param {!Element} process
     * @param {(Element|Window|string)} finish
     * @param {?} duration
     * @return {undefined}
     */
    function init(process, finish, duration) {
      this._commandConverter = new MutationObserver(process);
      this._paytableData = this.createPaytableData();
      this._paytableView = new Processing(finish, process);
      this._paytableController = new Worker(process, this._paytableData, this._paytableView, duration.betSettings);
    }
    return init.prototype.createPaytableData = function() {
      return new fr;
    }, init;
  }();
  var JarallaxAnimation = (function() {
    /**
     * @param {?} canCreateDiscussions
     * @return {undefined}
     */
    function HI(canCreateDiscussions) {
    }
    /**
     * @param {!Object} result
     * @return {undefined}
     */
    HI.prototype.visualFeedback = function(result) {
    };
    /**
     * @param {?} canCreateDiscussions
     * @return {undefined}
     */
    HI.prototype.audioFeedback = function(canCreateDiscussions) {
    };
    /**
     * @return {?}
     */
    HI.prototype.createSound = function() {
      return null;
    };
    /**
     * @return {?}
     */
    HI.prototype.createBlink = function() {
      return null;
    };
  }(), function() {
    /**
     * @param {!HTMLElement} dialog
     * @return {undefined}
     */
    function game(dialog) {
      var $rootScope = this;
      this._blink = this.createBlink();
      this._buttonSnd = this.createSound();
      /**
       * @param {?} canCreateDiscussions
       * @return {?}
       */
      var callback = function(canCreateDiscussions) {
        return $rootScope.audioFeedback(canCreateDiscussions);
      };
      dialog.addEventListener(constants.SETTINGS_CHANGE, callback);
      dialog.addEventListener(constants.HELP, callback);
      dialog.addEventListener(constants.EXIT, callback);
      dialog.addEventListener(constants.TOGGLE_SOUND, callback);
      dialog.addEventListener(constants.TOGGLE_FAST_PLAY, callback);
      dialog.addEventListener(constants.MENU, callback);
      dialog.addEventListener(constants.HISTORY, callback);
      dialog.addEventListener(constants.PLAYFORREAL, callback);
      dialog.addEventListener(self.ModalUIEvent.OK, callback);
      dialog.addEventListener(self.ModalUIEvent.CANCEL, callback);
      dialog.addEventListener(self.ModalUIEvent.EXIT, callback);
      dialog.addEventListener(self.ModalUIEvent.ACTION, callback);
    }
    return game.prototype.visualFeedback = function(result) {
    }, game.prototype.audioFeedback = function(canCreateDiscussions) {
      this._buttonSnd.play();
    }, game.prototype.createSound = function() {
      return self.ResourceManager.getInstance().getSndManager().create("btnClick");
    }, game.prototype.createBlink = function() {
      return self.ResourceManager.getInstance().getEntityManager().getByName("main").getAnimation("blinkLayer");
    }, game;
  }());
  var isTextKey = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var renderer = function(t) {
    /**
     * @return {?}
     */
    function e() {
      return t.call(this, e.VP_BUTTON) || this;
    }
    return isTextKey(e, t), Object.defineProperty(e.prototype, "buttonId", {
      get : function() {
        return this._buttonId;
      },
      set : function(mymuted) {
        this._buttonId = mymuted;
      },
      enumerable : true,
      configurable : true
    }), e.VP_BUTTON = "VP_TUTORIAL_BUTTON", e;
  }(exports.MegatonEvent);
  !function(M) {
    /** @type {string} */
    M[M.OK = 0] = "OK";
    /** @type {string} */
    M[M.NO = 1] = "NO";
    /** @type {string} */
    M[M.YES = 2] = "YES";
    /** @type {string} */
    M[M.EXIT = 3] = "EXIT";
    /** @type {string} */
    M[M.NEXT = 4] = "NEXT";
  }(buttonKeys || (buttonKeys = {}));
  var DB;
  var GoogleMapsPolygonLayer = function() {
    /**
     * @param {string} gameGroup
     * @param {!Object} options
     * @param {!Object} n
     * @param {!Object} state
     * @return {undefined}
     */
    function Game(gameGroup, options, n, state) {
      var SecureScriptElement = this;
      /** @type {number} */
      this._idx = 0;
      /** @type {!Object} */
      this._views = n;
      /** @type {boolean} */
      this._isActive = false;
      /** @type {!Object} */
      this._settings = options;
      /** @type {!Object} */
      this._disabler = state;
      /** @type {string} */
      this._dispatcher = gameGroup;
      this._keyboarHandler = self.ResourceManager.getInstance().getKeyboardHandler();
      this._dispatcher.addEventListener(self.SplashEvent.SPLASH_HIDE, function(st) {
        return SecureScriptElement.onSplashHide(st);
      });
      this.init();
    }
    return Game.prototype.onSplashHide = function(inEl) {
      if (!this._settings.tutorialHasShown) {
        this.start();
        /** @type {boolean} */
        this._settings.tutorialHasShown = true;
        this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_AUTOINIT, 0));
      }
    }, Game.prototype.init = function() {
      /** @type {number} */
      var i = 0;
      var items = this._views;
      for (; i < items.length; i++) {
        items[i].hide();
      }
      this.setupListeners();
    }, Game.prototype.start = function() {
      /** @type {number} */
      this._idx = 0;
      /** @type {boolean} */
      this._isActive = true;
      this._disabler.show();
      this._views[this._idx].show();
      this._keyboarHandler.enableKeyboard(false);
    }, Game.prototype.onToggle = function(event) {
      if (this._isActive) {
        this.exit();
        this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_SKIP, 0));
      } else {
        this.start();
        this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_INIT, 0));
      }
    }, Game.prototype.setupListeners = function() {
      var _this = this;
      this._dispatcher.addEventListener(self.ModalUIEvent.SHOWING, function(st) {
        return _this.onRoundStart(st);
      });
      this._dispatcher.addEventListener(self.RoundEvent.ROUNDSTART, function(st) {
        return _this.onRoundStart(st);
      });
      this._dispatcher.addEventListener(constants.TOGGLE_TUTORIAL, function(open) {
        return _this.onToggle(open);
      });
      /** @type {number} */
      var i = 0;
      var items = this._views;
      for (; i < items.length; i++) {
        items[i].addEventListener(renderer.VP_BUTTON, function(dialog) {
          return _this.onViewButton(dialog);
        });
      }
    }, Game.prototype.onRoundStart = function(ast) {
      this.exit();
    }, Game.prototype.onViewButton = function(dialog) {
      switch(dialog.buttonId) {
        case buttonKeys.NO:
          this.showNext();
          break;
        case buttonKeys.YES:
          this.showNext();
          this.showNext();
          this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_STARTED, 0));
          break;
        case buttonKeys.OK:
          if (this._idx === this._views.length - 1) {
            this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_FINISH, 7));
          }
          this.exit();
          break;
        case buttonKeys.NEXT:
          this.showNext();
          this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_NEXT, 0));
          break;
        case buttonKeys.EXIT:
          this.hideAll();
          this.show(1, true);
          this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_SKIP, 0));
          this._dispatcher.dispatch(new tree.ExternalTutorialEvent(tree.ExternalTutorialEvent.EXTERNAL_TUTORIAL_EXIT, 7));
      }
    }, Game.prototype.showNext = function() {
      if (this._idx >= this._views.length - 1) {
        return void this.exit();
      }
      this.show(this._idx, false);
      this.show(this._idx + 1, true);
    }, Game.prototype.exit = function() {
      this.hideAll();
      this._disabler.hide();
      /** @type {boolean} */
      this._isActive = false;
      if (this._settings.keyboardShortcuts) {
        this._keyboarHandler.enableKeyboard(true);
      }
    }, Game.prototype.hideAll = function() {
      /** @type {number} */
      var i = 0;
      for (; i < this._views.length; i++) {
        this.show(i, false);
      }
    }, Game.prototype.show = function(i, name) {
      /** @type {string} */
      this._idx = i;
      if (name) {
        this._views[this._idx].show();
      } else {
        this._views[this._idx].hide();
      }
    }, Game;
  }();
  var GestureObject = function() {
    /**
     * @param {?} t
     * @return {undefined}
     */
    function initialize(t) {
      this._entity = self.ResourceManager.getInstance().getEntityManager().create("Disabler");
      this._entity.getButton(".").enable(true);
      this._display = this._entity.getDisplay("");
      t.add("tutorialDisabler", this._entity);
      this.hide();
    }
    return initialize.prototype.show = function() {
      this._display.setVisible(true);
    }, initialize.prototype.hide = function() {
      this._display.setVisible(false);
    }, initialize;
  }();
  !function(M) {
    /** @type {string} */
    M[M.OK = 0] = "OK";
    /** @type {string} */
    M[M.NO = 1] = "NO";
    /** @type {string} */
    M[M.YES = 2] = "YES";
    /** @type {string} */
    M[M.EXIT = 3] = "EXIT";
    /** @type {string} */
    M[M.NEXT = 4] = "NEXT";
  }(DB || (DB = {}));
  var values;
  var removeProto = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(state) {
    /** @type {string} */
    state[state.YES_NO = 0] = "YES_NO";
    /** @type {string} */
    state[state.EXIT_NEXT = 1] = "EXIT_NEXT";
    /** @type {string} */
    state[state.OK = 2] = "OK";
  }(values || (values = {}));
  var GameView = function(removePropertyMethod) {
    /**
     * @param {undefined} n
     * @param {undefined} p
     * @param {string} t
     * @param {string} template
     * @return {?}
     */
    function Node(n, p, t, template) {
      var self = removePropertyMethod.call(this) || this;
      return self.init(p, n), self._event = new renderer, self._entity.getTextField(".title").setText(t), self._entity.getTextField(".message").setText(template), self;
    }
    return removeProto(Node, removePropertyMethod), Node.prototype.show = function() {
      this._dispay.setVisible(true);
    }, Node.prototype.hide = function() {
      this._dispay.setVisible(false);
    }, Node.prototype.init = function(type, context) {
      this.initDisplay(context);
      this.initButtons();
      this.setType(type);
    }, Node.prototype.initDisplay = function(context) {
      var directory_epub = self.ResourceManager.getInstance().getEntityManager();
      this._entity = directory_epub.create("TutorialPopup");
      context.add("tutorialPopup" + Node.CNT++, this._entity);
      this._dispay = this._entity.getDisplay("");
      this._animation = this._entity.getAnimation(".buttons");
    }, Node.prototype.initButtons = function() {
      var sound = this;
      this._buttons = {};
      this._buttons[DB.OK] = this._entity.getButton(".okBtn");
      this._buttons[DB.NO] = this._entity.getButton(".noBtn");
      this._buttons[DB.YES] = this._entity.getButton(".yesBtn");
      this._buttons[DB.NEXT] = this._entity.getButton(".nextBtn");
      this._buttons[DB.EXIT] = this._entity.getButton(".exitBtn");
      var settings = this;
      var i;
      for (i in this._buttons) {
        !function(name) {
          settings._buttons[name].addEventListener(self.ButtonEvent.CLICK, function() {
            return sound.onButton(name);
          });
        }(i);
      }
    }, Node.prototype.onButton = function(event) {
      /** @type {number} */
      this._event.buttonId = parseInt(event);
      this.dispatch(this._event);
    }, Node.prototype.setType = function(type) {
      var value;
      switch(type) {
        case values.YES_NO:
          /** @type {string} */
          value = "yesNo";
          this._buttons[DB.NO].enable(true);
          this._buttons[DB.YES].enable(true);
          break;
        case values.EXIT_NEXT:
          /** @type {string} */
          value = "nextExit";
          this._buttons[DB.EXIT].enable(true);
          this._buttons[DB.NEXT].enable(true);
          break;
        case values.OK:
          /** @type {string} */
          value = "ok";
          this._buttons[DB.OK].enable(true);
      }
      this._animation.play(value);
    }, Node.CNT = 0, Node;
  }(exports.EventDispatcher);
  var Ir = function() {
    /**
     * @param {?} text
     * @param {string} props
     * @param {!Object} options
     * @return {undefined}
     */
    function init(text, props, options) {
      if (text = self.ResourceManager.getInstance().getEntityManager().getByName("menu")) {
        this.createDisabler(text);
        this.createViews(text);
        this.createController(props, options);
      }
    }
    return init.prototype.createViews = function(c) {
      /** @type {!Array} */
      this._views = new Array;
      var game = c.getHierarchy(".modalDummy");
      this._views.push(new GameView(game, values.YES_NO, "IDS_M_SETTINGS_L19", "IDS_VP_KSHELP1"));
      this._views.push(new GameView(game, values.OK, "IDS_M_SETTINGS_L19", "IDS_VP_KSHELP2"));
      this._views.push(new GameView(game, values.EXIT_NEXT, "IDS_M_SETTINGS_L19", "IDS_VP_KSHELP3"));
      this._views.push(new GameView(game, values.EXIT_NEXT, "IDS_M_SETTINGS_L19", "IDS_SPACETODEAL"));
      this._views.push(new GameView(game, values.OK, "IDS_M_SETTINGS_L19", "IDS_VP_KSHELP2"));
    }, init.prototype.createController = function(map, options) {
      this._controller = new GoogleMapsPolygonLayer(map, options, this._views, this._disabler);
    }, init.prototype.createDisabler = function(c) {
      var e = c.getHierarchy(".modalDummy");
      this._disabler = new GestureObject(e);
    }, init;
  }();
  var loadFromNPM = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var hasSomeSameKeys = (function(fn) {
    /**
     * @param {?} event
     * @param {?} version
     * @param {?} result
     * @param {?} fileName
     * @return {?}
     */
    function DataURI(event, version, result, fileName) {
      var r = fn.call(this, event, version, result, fileName) || this;
      return r._tutorialManager = r.createTutorialManager(), r;
    }
    loadFromNPM(DataURI, fn);
    /**
     * @return {?}
     */
    DataURI.prototype.createTutorialManager = function() {
      return new Ir(this._entity, this._dispatcher, this._gameSettings);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createConfig = function() {
      return new qn;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createGameSetting = function() {
      return new gi;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createExternalInterface = function() {
      return new ui(this._dispatcher, this._gameSettings, this._roundHandler, this._betManager.betSettings, this._config, this._gameState);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.initGame = function() {
      var e = this;
      fn.prototype.initGame.call(this);
      this.createPaytable();
      var cx = self.ResourceManager.getInstance().getEntityManager();
      this._entity = cx.create("?");
      cx.add("main", this._entity);
      this.createRealityCheckManager();
      var i = self.ResourceManager.getInstance().getSceneManager();
      this._renderOntoTexture = i.createRenderOntoTexture();
      i.addOnContextRestored(function() {
        return e.renderCardBack();
      });
      this._gameState = this.createGameState();
      this._betManager = this.createBetManager();
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createPaytable = function() {
      var actionHelper = self.ResourceManager.getInstance().getEntityManager();
      this._paytableEntity = actionHelper.create("?");
      actionHelper.add("paytable", this._paytableEntity);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createLayoutManager = function() {
      new ar(this._dispatcher, this._betManager.betSettings);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createLogicManager = function() {
      var cx = self.ResourceManager.getInstance().getEntityManager();
      return this._entity = cx.create("?"), cx.add("main", this._entity), this._handManager = this.createHandManager(), this._bonusManager = this.createBonusManager(), this._winManager = this.createWinManager(), this._paytableManager = this.createPaytableManager(), this._logoManager = this.createLogoManager(), this._infoManager = this.createInfoManager(), this._handManager.setWinData(this._winManager.winData), this.createLayoutManager(), this._videoPokerLogicManager = this.createLogicManagerInstance(), 
      this._videoPokerLogicManager.logicHandler;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createLogicManagerInstance = function() {
      return new Klass(this._dispatcher, this._logicQueue, this._roundHandler, this._gameState, this._betManager, this._handManager, this._winManager, this._bonusManager, this._gameSettings, this._config, this._entity);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createGameState = function() {
      return new logger;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createBetManager = function() {
      return new fi(this._dispatcher, this._roundHandler);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createHandManager = function() {
      return new Xn(this._dispatcher, this._entity, this._gameState, this._betManager, this._config.gameName, this._gameSettings);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createBonusManager = function() {
      return new rr(this._entity, this._dispatcher, this._logicQueue, this._gameSettings, this._roundHandler, this._gameState, this._handManager, this._betManager.betSettings);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createWinManager = function() {
      return new Dn(this._dispatcher, this._handManager, this._betManager, this._gameSettings, this._paytableEntity);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createPaytableManager = function() {
      return new gr(this._dispatcher, this._paytableEntity, this._betManager);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createLogoManager = function() {
      return new mi(this._dispatcher, this._entity, this._betManager);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createBetSettings = function() {
      var config = this._config;
      return new IASNoneLeftExtension(config.denom);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    DataURI.prototype.createUIByChannel = function(callback) {
      return this.createUI(callback);
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createViewFactory = function() {
      return new Expression;
    };
    /**
     * @return {?}
     */
    DataURI.prototype.createInfoManager = function() {
      return new Oi(this._dispatcher, this._gameState, this._entity);
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.createRealityCheckManager = function() {
      new tree.RealityCheckManager(this._dispatcher, this._config);
    };
    /**
     * @param {string} file
     * @return {undefined}
     */
    DataURI.prototype.onLoader = function(file) {
      fn.prototype.onLoader.call(this, file);
      if ("common" !== this._config.brand && "" !== this._config.brand && file.id === self.LoaderEventType.COMPLETE) {
        this.renderCardBack();
      }
    };
    /**
     * @return {undefined}
     */
    DataURI.prototype.renderCardBack = function() {
      /** @type {!Array} */
      var wellFormedHtmls = ["", "4", "10", "25", "50", "100", "Bonus"];
      var e = self.ResourceManager.getInstance();
      var n = e.getSceneManager();
      /** @type {number} */
      var i = 0;
      for (; i < wellFormedHtmls.length; i++) {
        var requestedAnnotationType = n.getCustomWebGLTexturesForTemplate("Cards" + wellFormedHtmls[i] + "Back");
        var error = n.getCustomWebGLTexturesForTemplate("Cards" + wellFormedHtmls[i] + "BrandedBack");
        if (null !== requestedAnnotationType && null !== error) {
          var test = requestedAnnotationType[0];
          var props = error[0];
          this._renderOntoTexture.render(test, props, true);
          test.addWebGLRefreshListener(this._renderOntoTexture.render.bind(this._renderOntoTexture, test, props, true));
        }
      }
    };
  }(self.CasinoGame), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  (function(output) {
    /**
     * @param {?} fn
     * @param {?} num
     * @return {?}
     */
    function option(fn, num) {
      return output.call(this, fn, num) || this;
    }
    hasSomeSameKeys(option, output);
    /**
     * @param {string} value
     * @param {?} chart
     * @param {!Object} options
     * @return {?}
     */
    option.prototype.createDisplayView = function(value, chart, options) {
      var reg = new presenter.JackpotDisplayView(value, "jackpot", options);
      return this._config.demoPlay ? (reg.AddScrollMessage("IDS_SCROLL_JP_4", 16746530), reg.AddJackpotMessage("IDS_SCROLL_WIN_JP_1", 16777028), reg.AddJackpotMessage("IDS_SCROLL_WIN_JP_2", 16777028)) : (reg.AddScrollMessage("IDS_SCROLL_JP_DEMO_1", 16746530), reg.AddScrollMessage("IDS_SCROLL_JP_DEMO_2", 16746530), reg.AddScrollMessage("IDS_SCROLL_JP_DEMO_3", 16746530)), reg;
    };
  })(tree.JackpotManager);
  (function() {
    /**
     * @param {?} log
     * @param {!Object} dispatcher
     * @return {undefined}
     */
    function init(log, dispatcher) {
      var newNode = this;
      /** @type {!Object} */
      this._dispatcher = dispatcher;
      this._animTask = new exports.Task;
      /** @type {boolean} */
      this._isAnimPlaying = false;
      /** @type {boolean} */
      this._isBonusAnim = false;
      this._logoBaseEntity = this.CreateLogo();
      this._logoBonusEntity = this.CreateLogo();
      var collection = this.LocateLogo(log, "base.logoContainer");
      var manifest = this.LocateLogo(log, "bonus.logoContainer");
      collection.add("Logo1", this._logoBaseEntity);
      manifest.add("Logo2", this._logoBonusEntity);
      this._logoBaseAnim = this._logoBaseEntity.getAnimation(".");
      this._logoBonusAnim = this._logoBonusEntity.getAnimation(".");
      this._logoBaseAnim.play("intro");
      this.setBonusLogoVisible(false);
      dispatcher.addEventListener(self.SplashEvent.SPLASH_HIDE, function(element) {
        return newNode.onSplashHide(element);
      });
      dispatcher.addEventListener(me.MAX_COIN_WIN, function(eventName) {
        return newNode.onWin(eventName);
      });
      dispatcher.addEventListener(me.BONUS_WIN, function(eventName) {
        return newNode.onWin(eventName);
      });
    }
    /**
     * @return {?}
     */
    init.prototype.CreateLogo = function() {
      return self.ResourceManager.getInstance().getEntityManager().create("Logo");
    };
    /**
     * @param {?} c
     * @param {string} h
     * @return {?}
     */
    init.prototype.LocateLogo = function(c, h) {
      return c.getHierarchy(h);
    };
    /**
     * @param {number} destIdentifier
     * @param {boolean} noStore
     * @return {undefined}
     */
    init.prototype.setHands = function(destIdentifier, noStore) {
      /** @type {boolean} */
      this._isAnimPlaying = true;
      if (noStore !== destIdentifier) {
        this._logoBaseAnim.play("intro");
      }
    };
    /**
     * @param {!Event} testObj
     * @return {undefined}
     */
    init.prototype.animHandler = function(testObj) {
      var allTraps = this;
      switch(testObj.state) {
        case 0:
          if (this._isAnimPlaying) {
            testObj.startDelayMs(500 * Math.random() + 500);
          } else {
            testObj.startDelayMs(1000 * Math.random() + 2000);
          }
          break;
        case 1:
          if (this._isBonusAnim) {
            this._logoBonusAnim;
          } else {
            this._logoBaseAnim;
          }
          if (this._isAnimPlaying) {
            /** @type {boolean} */
            this._isAnimPlaying = false;
          }
          testObj.execLoop([function(t) {
            return allTraps.animHandler(t);
          }]);
      }
    };
    /**
     * @param {?} inEl
     * @return {undefined}
     */
    init.prototype.onSplashHide = function(inEl) {
      var allTraps = this;
      this._logoBaseAnim.play("intro");
      this._animTask.startHandler(function(t) {
        return allTraps.animHandler(t);
      });
    };
    /**
     * @param {number} event
     * @return {undefined}
     */
    init.prototype.onWin = function(event) {
      this._logoBaseAnim.play("win");
      /** @type {boolean} */
      this._isAnimPlaying = true;
    };
    /**
     * @param {boolean} bln
     * @return {undefined}
     */
    init.prototype.setBonusLogoVisible = function(bln) {
      /** @type {boolean} */
      this._isBonusAnim = bln;
      this._logoBonusEntity.getDisplay(".").setVisible(bln);
      if (this._isBonusAnim) {
        this._logoBonusAnim.play("intro");
      }
    };
  })();
  require.d(n, "AAMSSessionMessageController", function() {
    return Buffer;
  });
  require.d(n, "BonusBalanceMessageModalController", function() {
    return Message;
  });
  require.d(n, "ClockController", function() {
    return User;
  });
  require.d(n, "DisablerController", function() {
    return WebSocket;
  });
  require.d(n, "MasterUIController", function() {
    return Fr;
  });
  require.d(n, "PlayConfirmController", function() {
    return Client;
  });
  require.d(n, "PlayForRealController", function() {
    return SymbolTableScope;
  });
  require.d(n, "SettingsController", function() {
    return target;
  });
  require.d(n, "SwipeToHideController", function() {
    return ObservedInfo;
  });
  require.d(n, "GameNameController", function() {
    return KineticToken;
  });
  require.d(n, "ExternalMessageHandler", function() {
    return SessionSubscriber;
  });
  require.d(n, "ExternalMessageManager", function() {
    return WindowSettings;
  });
  require.d(n, "ExternalMessageModalController", function() {
    return Conversion;
  });
  require.d(n, "MessageController", function() {
    return SnackbarInstance;
  });
  require.d(n, "MessageHandler", function() {
    return WSHandler;
  });
  require.d(n, "MessageManager", function() {
    return Socket;
  });
  require.d(n, "ModalController", function() {
    return resource;
  });
  require.d(n, "CommonUIManager", function() {
    return way;
  });
  require.d(n, "Disabler", function() {
    return level;
  });
  require.d(n, "TextLabelEnum", function() {
    return ITEM;
  });
  require.d(n, "AutoplaySettingsViewButton", function() {
    return args;
  });
  require.d(n, "AutoplayViewButton", function() {
    return position;
  });
  require.d(n, "BetPanelViewButton", function() {
    return element;
  });
  require.d(n, "BetPanelViewSlider", function() {
    return sep;
  });
  require.d(n, "InfoView", function() {
    return image_re;
  });
  require.d(n, "SettingsViewButton", function() {
    return s;
  });
  require.d(n, "StatusBarViewButtonBase", function() {
    return data;
  });
  require.d(n, "ModalViewButton", function() {
    return keys;
  });
  require.d(n, "StatusBarControllerBase", function() {
    return Zepto;
  });
  require.d(n, "BonusBalanceModalDesktop", function() {
    return TwitterAPI;
  });
  require.d(n, "DisablerDesktopView", function() {
    return adjustedLevel;
  });
  require.d(n, "ExternalMessageModalDesktop", function() {
    return PoseMetadata;
  });
  require.d(n, "MessageBoxDesktop", function() {
    return UnitTestAssertionFailure;
  });
  require.d(n, "ModalWindowDesktop", function() {
    return sampleUserGroupRoles;
  });
  require.d(n, "PlayConfirmModalDesktop", function() {
    return EventObservable;
  });
  require.d(n, "PlayForRealModalDesktop", function() {
    return Rs;
  });
  require.d(n, "CommonDesktopViewFactory", function() {
    return div;
  });
  require.d(n, "DesktopHoverIndicatorView", function() {
    return magnifier;
  });
  require.d(n, "GameNameViewDesktop", function() {
    return InvalidSourceError;
  });
  require.d(n, "MasterView", function() {
    return Fs;
  });
  require.d(n, "StatusBarViewDesktop", function() {
    return Controller;
  });
  require.d(n, "ButtonControlHtml", function() {
    return constructor;
  });
  require.d(n, "CheckboxControl", function() {
    return ZmPrefAccount;
  });
  require.d(n, "CommonButtonControlHtml", function() {
    return Template;
  });
  require.d(n, "SliderControl", function() {
    return Circle;
  });
  require.d(n, "SliderEasings", function() {
    return destnode;
  });
  require.d(n, "Menu", function() {
    return Image;
  });
  require.d(n, "MenuItem", function() {
    return tokens;
  });
  require.d(n, "NavigationBar", function() {
    return PreferenceDoesNotExistError;
  });
  require.d(n, "NavigationBarButton", function() {
    return Button;
  });
  require.d(n, "SplitView", function() {
    return Resume;
  });
  require.d(n, "ViewArea", function() {
    return DeviceOrientationCameraController;
  });
  require.d(n, "BonusBalanceModalMobile", function() {
    return EventedQueryProcessor;
  });
  require.d(n, "DisablerMobileView", function() {
    return canvas;
  });
  require.d(n, "ExternalMessageModalMobile", function() {
    return cmSoundEffect;
  });
  require.d(n, "MessageBoxMobile", function() {
    return Exception;
  });
  require.d(n, "ModalWindowMobile", function() {
    return top;
  });
  require.d(n, "PlayConfirmModalMobile", function() {
    return Editor;
  });
  require.d(n, "PlayForRealModalMobile", function() {
    return JarallaxObject;
  });
  require.d(n, "AutoplayButton", function() {
    return Ba;
  });
  require.d(n, "AutoplayViewMobile", function() {
    return id;
  });
  require.d(n, "BetPanelViewMobile", function() {
    return pos;
  });
  require.d(n, "CashierViewMobile", function() {
    return Context;
  });
  require.d(n, "CommonMobileViewBase", function() {
    return selector;
  });
  require.d(n, "CommonMobileViewFactory", function() {
    return root;
  });
  require.d(n, "ElementProxy", function() {
    return Type;
  });
  require.d(n, "AutoResizeText", function() {
    return $e;
  });
  require.d(n, "ScalableDiv", function() {
    return Int32Array;
  });
  require.d(n, "DOMHelper", function() {
    return RepositoryApi;
  });
  require.d(n, "GameHistoryViewMobile", function() {
    return StateChange;
  });
  require.d(n, "GameNameViewMobile", function() {
    return ShapeHandlerClass;
  });
  require.d(n, "GameRulesViewMobile", function() {
    return NavigationError;
  });
  require.d(n, "MobileMasterView", function() {
    return Ya;
  });
  require.d(n, "MenuViewMobile", function() {
    return Signature;
  });
  require.d(n, "OrientationPromptView", function() {
    return phylogram;
  });
  require.d(n, "PlayForRealMenuViewMobile", function() {
    return MatchedTags;
  });
  require.d(n, "UIData", function() {
    return $a;
  });
  require.d(n, "SettingsViewMobile", function() {
    return AsyncFor;
  });
  require.d(n, "StatusBarViewMobile", function() {
    return cdn_url;
  });
  require.d(n, "SwipeToHideMobileView", function() {
    return Va;
  });
  require.d(n, "OSPTController", function() {
    return particularLoader;
  });
  require.d(n, "OSPTControllerV2", function() {
    return ru;
  });
  require.d(n, "OSPTSize", function() {
    return ViewType;
  });
  require.d(n, "AutoplaySettingsController", function() {
    return CropDimension;
  });
  require.d(n, "BetPanelController", function() {
    return BufferMergeEvent;
  });
  require.d(n, "ButtonController", function() {
    return Ease;
  });
  require.d(n, "CoinShowerWinCounterView", function() {
    return base16;
  });
  require.d(n, "ExpandingWinCounterViewBase", function() {
    return val;
  });
  require.d(n, "FastPlayQuestionMessageHandler", function() {
    return ArticleManager;
  });
  require.d(n, "FastPlayQuestionMessageManager", function() {
    return FFT;
  });
  require.d(n, "FastPlayQuestionModalController", function() {
    return link;
  });
  require.d(n, "FreeGameMessageHandler", function() {
    return AddressPickerResult;
  });
  require.d(n, "FreeGameMessageManager", function() {
    return Bitmap;
  });
  require.d(n, "FreeGameModalController", function() {
    return ShellMountPasswordDialog;
  });
  require.d(n, "ButtonViewButton", function() {
    return editor;
  });
  require.d(n, "InfoController", function() {
    return Uint8Array;
  });
  require.d(n, "InteractionFeedbackView", function() {
    return Du;
  });
  require.d(n, "PaytableViewButton", function() {
    return request;
  });
  require.d(n, "StatusBarViewButton", function() {
    return settings;
  });
  require.d(n, "VideoSlotBetPanelViewButton", function() {
    return message;
  });
  require.d(n, "VideoSlotBetPanelViewSlider", function() {
    return row;
  });
  require.d(n, "VideoSlotBetSettingsViewButton", function() {
    return context;
  });
  require.d(n, "VideoSlotSettingsViewButton", function() {
    return region;
  });
  require.d(n, "MenuController", function() {
    return Response;
  });
  require.d(n, "MysteryJackpotPanelController", function() {
    return RealTester;
  });
  require.d(n, "MysteryJackpotPanelViewBase", function() {
    return Gu;
  });
  require.d(n, "PaytableController", function() {
    return Route;
  });
  require.d(n, "QuickStopState", function() {
    return event;
  });
  require.d(n, "QuickStopController", function() {
    return TabConfig;
  });
  require.d(n, "StatusBarController", function() {
    return Bucket;
  });
  require.d(n, "VideoSlotBetSettingsController", function() {
    return Component;
  });
  require.d(n, "VideoSlotGamePanelController", function() {
    return Label;
  });
  require.d(n, "VideoSlotInfoController", function() {
    return Task;
  });
  require.d(n, "VideoSlotInfoViewBase", function() {
    return url;
  });
  require.d(n, "VideoSlotSettingsController", function() {
    return DomDelegatedEventHandle;
  });
  require.d(n, "VideoSlotUI", function() {
    return wayXMLs;
  });
  require.d(n, "WinInfoController", function() {
    return Graph;
  });
  require.d(n, "AutoplaySettingsView", function() {
    return hc;
  });
  require.d(n, "BetPanelView", function() {
    return _c;
  });
  require.d(n, "ButtonView", function() {
    return fc;
  });
  require.d(n, "FastPlayModalDesktop", function() {
    return RasterImportEvent;
  });
  require.d(n, "FreeGameModalDesktop", function() {
    return Line;
  });
  require.d(n, "GameButtonViewDesktop", function() {
    return mc;
  });
  require.d(n, "InteractionFeedbackViewDesktop", function() {
    return ViewerRelationshipController;
  });
  require.d(n, "MenuView", function() {
    return Color;
  });
  require.d(n, "OSPTDesktopView", function() {
    return Section;
  });
  require.d(n, "OSPTDesktopViewV2", function() {
    return Oc;
  });
  require.d(n, "PaytableView", function() {
    return OthersSetting;
  });
  require.d(n, "StatusBarView", function() {
    return Document;
  });
  require.d(n, "VideoSlotDesktopHoverIndicatorView", function() {
    return $magnifier;
  });
  require.d(n, "VideoSlotDesktopViewFactory", function() {
    return button1;
  });
  require.d(n, "VideoSlotGamePanelView", function() {
    return xc;
  });
  require.d(n, "VideoSlotInfoView", function() {
    return windowReference;
  });
  require.d(n, "VideoSlotSettingsView", function() {
    return Ramp;
  });
  require.d(n, "VideoSlotUIDesktop", function() {
    return button1Component;
  });
  require.d(n, "ButtonViewMobile", function() {
    return testDataContainer;
  });
  require.d(n, "CoinShowerWinCounterMobileView", function() {
    return copy2;
  });
  require.d(n, "ConfirmFreeGameModalMobile", function() {
    return StaticElement;
  });
  require.d(n, "ExpandingWinCounterMobileView", function() {
    return obj2;
  });
  require.d(n, "FastPlayModalMobile", function() {
    return AttributeTransformer;
  });
  require.d(n, "FreeGameModalMobile", function() {
    return Element;
  });
  require.d(n, "GameButtonViewMobile", function() {
    return timeColEl;
  });
  require.d(n, "InteractionFeedbackViewMobile", function() {
    return astscanner;
  });
  require.d(n, "OSPTMobileView", function() {
    return JSObjectNode;
  });
  require.d(n, "OSPTMobileViewV2", function() {
    return rp;
  });
  require.d(n, "PaytableMobileView", function() {
    return InjectResult;
  });
  require.d(n, "VideoSlotInfoViewMobile", function() {
    return cp;
  });
  require.d(n, "VideoSlotMobileViewFactory", function() {
    return hp;
  });
  require.d(n, "VideoSlotUIMobile", function() {
    return att;
  });
  require.d(n, "VSAutoplayViewMobile", function() {
    return _p;
  });
  require.d(n, "VSBetPanelViewMobile", function() {
    return fp;
  });
  require.d(n, "VSStatusBarViewMobile", function() {
    return ContentFlowItem;
  });
  require.d(n, "ChipController", function() {
    return ClassLink;
  });
  require.d(n, "TableGameButtonViewButton", function() {
    return v;
  });
  require.d(n, "TableGameStatusBarViewButton", function() {
    return user;
  });
  require.d(n, "TableGameStatusBarViewElement", function() {
    return codes;
  });
  require.d(n, "TableGameSettingsViewButton", function() {
    return instance;
  });
  require.d(n, "LimitsPopupController", function() {
    return MapLayer;
  });
  require.d(n, "TableGameMenuController", function() {
    return Path;
  });
  require.d(n, "TableGameStatusBarController", function() {
    return Selector;
  });
  require.d(n, "TableGameButtonController", function() {
    return RelativeElement;
  });
  require.d(n, "TableGameSettingsController", function() {
    return a;
  });
  require.d(n, "TableGameUI", function() {
    return way_list;
  });
  require.d(n, "TableGameButtonView", function() {
    return Wp;
  });
  require.d(n, "ChipView", function() {
    return Up;
  });
  require.d(n, "LimitsPopup", function() {
    return Transition;
  });
  require.d(n, "LimitsSign", function() {
    return AttrLoader;
  });
  require.d(n, "TableGameMenuView", function() {
    return tinycolor;
  });
  require.d(n, "TableGameStatusBarView", function() {
    return ProximityAppsController;
  });
  require.d(n, "TableGameDesktopViewFactory", function() {
    return A;
  });
  require.d(n, "TableGameSettingsView", function() {
    return HeadlessShader;
  });
  require.d(n, "TableGameUIDesktop", function() {
    return swt;
  });
  require.d(n, "TableGameButtonViewMobile", function() {
    return doc_part;
  });
  require.d(n, "ChipViewMobile", function() {
    return eh;
  });
  require.d(n, "TableGameStatusBarViewMobile", function() {
    return f;
  });
  require.d(n, "TableGameMobileViewFactory", function() {
    return elem;
  });
  require.d(n, "TableGameUIData", function() {
    return ah;
  });
  require.d(n, "TableGameSettingsViewMobile", function() {
    return PathString;
  });
  require.d(n, "TableGameUIMobile", function() {
    return c_style;
  });
  require.d(n, "TableLimitsViewMobile", function() {
    return WebdavWrapper;
  });
  require.d(n, "VideoBingoAutoplaySettingsController", function() {
    return Text;
  });
  require.d(n, "VideoBingoBetPanelController", function() {
    return Float32Array;
  });
  require.d(n, "VideoBingoButtonController", function() {
    return Entry;
  });
  require.d(n, "VideoBingoButtonViewButton", function() {
    return e;
  });
  require.d(n, "VideoBingoStatusBarViewButton", function() {
    return o;
  });
  require.d(n, "VideoBingoBetPanelViewButton", function() {
    return column;
  });
  require.d(n, "VideoBingoBetPanelViewSlider", function() {
    return params;
  });
  require.d(n, "VideoBingoBetSettingsViewButton", function() {
    return EventConsts;
  });
  require.d(n, "VideoBingoStatusBarController", function() {
    return Filter;
  });
  require.d(n, "VBOrientationPromptController", function() {
    return WeightVector;
  });
  require.d(n, "VideoBingoBetSettingsController", function() {
    return Receiver;
  });
  require.d(n, "VideoBingoMenuController", function() {
    return LineChart;
  });
  require.d(n, "VideoBingoPaytableController", function() {
    return Redirect;
  });
  require.d(n, "VideoBingoSettingsController", function() {
    return Property;
  });
  require.d(n, "VideoBingoUI", function() {
    return nodes;
  });
  require.d(n, "VideoBingoAutoplaySettingsView", function() {
    return Uh;
  });
  require.d(n, "VideoBingoBetPanelView", function() {
    return kh;
  });
  require.d(n, "VideoBingoButtonView", function() {
    return Gh;
  });
  require.d(n, "VideoBingoStatusBarView", function() {
    return folderDocument;
  });
  require.d(n, "VideoBingoDesktopViewFactory", function() {
    return B;
  });
  require.d(n, "VideoBingoSettingsView", function() {
    return Rovr;
  });
  require.d(n, "VideoBingoUIDesktop", function() {
    return Model;
  });
  require.d(n, "VideoBingoAutoplayViewMobile", function() {
    return v_bottom;
  });
  require.d(n, "VideoBingoButtonViewMobile", function() {
    return nl;
  });
  require.d(n, "VBBetPanelViewMobile", function() {
    return operationDayNode;
  });
  require.d(n, "VBStatusBarViewMobile", function() {
    return Error;
  });
  require.d(n, "VideoBingoMobileViewFactory", function() {
    return left;
  });
  require.d(n, "VideoBingoUIMobile", function() {
    return yAxisSpectrum;
  });
  require.d(n, "VideoPokerBetPanelController", function() {
    return Layer;
  });
  require.d(n, "VideoPokerButtonController", function() {
    return Cell;
  });
  require.d(n, "VideoPokerButtonViewButton", function() {
    return button;
  });
  require.d(n, "VideoPokerButtonAnimButton", function() {
    return firstAtom;
  });
  require.d(n, "VideoPokerPaytableViewButton", function() {
    return ml;
  });
  require.d(n, "VideoPokerStatusBarViewButton", function() {
    return value;
  });
  require.d(n, "VideoPokerBetPanelViewButton", function() {
    return _this;
  });
  require.d(n, "VideoPokerBetPanelViewAnim", function() {
    return rowdim;
  });
  require.d(n, "VideoPokerBetPanelViewSlider", function() {
    return res;
  });
  require.d(n, "VideoPokerBetSettingsViewButton", function() {
    return iVal;
  });
  require.d(n, "VideoPokerSettingsViewButton", function() {
    return includedDoc;
  });
  require.d(n, "VideoPokerMenuController", function() {
    return Proxy;
  });
  require.d(n, "VideoPokerStatusBarController", function() {
    return Cursor;
  });
  require.d(n, "VideoPokerSettingsController", function() {
    return RGBLed;
  });
  require.d(n, "VideoPokerUI", function() {
    return childRelations;
  });
  require.d(n, "VideoPokerBetPanelView", function() {
    return Vl;
  });
  require.d(n, "VideoPokerButtonView", function() {
    return Wl;
  });
  require.d(n, "VideoPokerMenuView", function() {
    return PointLight;
  });
  require.d(n, "VideoPokerStatusBarView", function() {
    return DeviceNameController;
  });
  require.d(n, "VideoPokerUIDesktop", function() {
    return full;
  });
  require.d(n, "VideoPokerUIMobile", function() {
    return simpleDatas;
  });
  require.d(n, "VideoPokerBetPanelViewMobile", function() {
    return newly_sorted_els;
  });
  var ITEM;
  var Buffer = function() {
    /**
     * @param {!Object} dispatcher
     * @return {undefined}
     */
    function Client(dispatcher) {
      var receiver = this;
      /** @type {!Object} */
      this._dispatcher = dispatcher;
      this._dispatcher.addEventListener(self.AAMSSessionResponseEvent.AAMSSESSIONRESPONSE, function(response) {
        return receiver.onMessage(response);
      });
    }
    return Client.prototype.onMessage = function(res) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      var transitions_ = PersonModel.getByName("IDS_AAMS_TICKETID").getText();
      var tbm = PersonModel.getByName("IDS_AAMS_SESSIONID").getText();
      var i = res.sessionId;
      var ticketId = res.ticketId;
      /** @type {string} */
      var n = transitions_ + ticketId + "\n" + tbm + i;
      this._dispatcher.dispatch(new self.MessageEvent(self.MessageEventType.GENERIC, self.MessageEventFlag.OK | self.MessageEventFlag.NOCANCEL, "IDS_SESSIONDETAILS_TITLE", n));
    }, Client;
  }();
  var makeBorder = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var resource = function(callback) {
    /**
     * @param {!HTMLElement} dialog
     * @param {undefined} error
     * @param {undefined} o
     * @param {number} target
     * @param {!Function} txt
     * @return {?}
     */
    function me(dialog, error, o, target, txt) {
      if (void 0 === target) {
        target = self.MessageEventType.GENERIC;
      }
      if (void 0 === txt) {
        /** @type {boolean} */
        txt = true;
      }
      var _this = callback.call(this, dialog) || this;
      return me._windowCnt++, _this._id = target, _this._ctx = exports.Context.newContext(null, null, null), _this._redirect = txt, _this._reconnectPauseState = void 0, _this._visible = false, dialog.addEventListener(self.MessageCloseEvent.CLOSE, function(component) {
        return _this.onMessageClose(component);
      }, _this._ctx), dialog.addEventListener(self.ReconnectEndEvent.RECONNECTEND, function() {
        return _this.onReconnectEnd();
      }), dialog.addEventListener(self.ModalInputEvent.OK, function(popupResponse) {
        return _this.onCallOk(popupResponse);
      }), dialog.addEventListener(self.ModalInputEvent.EXIT, function(popupResponse) {
        return _this.onCallExit(popupResponse);
      }), dialog.addEventListener(self.ModalInputEvent.CANCEL, function(popupResponse) {
        return _this.onCallCancel(popupResponse);
      }), _this.initView(error, o), _this;
    }
    return makeBorder(me, callback), me.hideAll = function() {
      for (; me._stack.length > 0;) {
        me._stack[me._stack.length - 1].hideAll();
      }
    }, me.prototype.initView = function(dialog, localOptions) {
      var me = this;
      if (dialog) {
        /** @type {number} */
        this._flags = localOptions;
        /** @type {!Element} */
        this._view = dialog;
        dialog.initButton(self.ModalViewButton.OK, function() {
          return me.onOk(true);
        });
        dialog.initButton(self.ModalViewButton.CANCEL, function() {
          return me.onCancel();
        });
        dialog.initButton(self.ModalViewButton.EXIT, function() {
          return me.onExit();
        });
        /** @type {boolean} */
        var ignoreCustomerId = (self.MessageEventFlag.OK, 0 != (localOptions & self.MessageEventFlag.OKCANCEL));
        /** @type {boolean} */
        var width = 0 != (localOptions & self.MessageEventFlag.CRITICAL);
        /** @type {boolean} */
        var customerHasCancelledGroupPlan = 0 != (localOptions & self.MessageEventFlag.NOCANCEL);
        dialog.showButton(self.ModalViewButton.OK, !width || ignoreCustomerId);
        dialog.showButton(self.ModalViewButton.EXIT, width);
        dialog.showButton(self.ModalViewButton.CANCEL, (!width || ignoreCustomerId) && !customerHasCancelledGroupPlan);
      }
    }, me.prototype.show = function() {
      this.storeSorted();
      if (me._stack[me._stack.length - 1] === this._view) {
        if (me._stack.length > 1) {
          me._stack[me._stack.length - 2].enable(false);
        }
        this._dispatcher.dispatch(new self.ModalShowingUIEvent(self.ModalUIEvent.SHOWING, this._flags));
        /** @type {boolean} */
        this._visible = true;
        this._view.show(true);
      }
      this.pause(true);
    }, me.prototype.hide = function() {
      /** @type {boolean} */
      var t = false;
      /** @type {number} */
      var z = 0;
      for (; z < me._stack.length; z++) {
        if (me._stack[z] === this._view) {
          me._stack.splice(z, 1);
          /** @type {boolean} */
          t = true;
        }
      }
      if (t) {
        if (this._visible = false, this._view.show(false, true), 0 === me._stack.length) {
          this._view.removeDisabler();
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.ENABLE_BUTTONS));
          this.pause(false);
          this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.HIDING));
        } else {
          var view = me._stack[me._stack.length - 1];
          if (view !== this._view) {
            view.enable(true);
          }
        }
      }
    }, me.prototype.onOk = function(value) {
      if (void 0 === value) {
        /** @type {boolean} */
        value = true;
      }
      if (value) {
        this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.OK));
      }
      this.close();
    }, me.prototype.onCancel = function() {
      this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.CANCEL));
      this.close();
    }, me.prototype.onExit = function() {
      this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.EXIT));
      this._dispatcher.dispatch(new self.ExitEvent(self.ExitEvent.NO_LOGOUT, self.ExitReason.SERVER_MESSAGE));
      this.close();
    }, me.prototype.onMessageClose = function(leader) {
      if (this._id === leader.id) {
        this.onOk(false);
      }
    }, me.prototype.close = function() {
      this.hide();
      if (this._ctx) {
        exports.Context.complete(this._ctx);
        /** @type {null} */
        this._ctx = null;
      }
    }, me.prototype.storeSorted = function() {
      /** @type {boolean} */
      var t = false;
      var view = this._view;
      /** @type {null} */
      var prop = null;
      /** @type {number} */
      var name = 0;
      /** @type {number} */
      var z = me._stack.length;
      for (; name < z; name++) {
        if (me._stack[name].priority > this._view.priority) {
          /** @type {boolean} */
          t = true;
        }
        if (t) {
          prop = me._stack[name];
          me._stack[name] = view;
          view = prop;
        }
      }
      me._stack.push(view);
    }, me.prototype.pause = function(lock) {
      /** @type {string} */
      this._reconnectPauseState = lock;
      if (!exports.SystemManager.getScheduler().reconnecting) {
        exports.SystemManager.getScheduler().pause(lock);
      }
    }, me.prototype.onReconnectEnd = function() {
      if (void 0 != this._reconnectPauseState) {
        this.pause(this._reconnectPauseState);
      }
    }, me.prototype.onCallOk = function(oauthData) {
      /** @type {boolean} */
      var guard = 0 != (this._flags & self.MessageEventFlag.OKCANCEL);
      /** @type {boolean} */
      var n = 0 != (this._flags & self.MessageEventFlag.CRITICAL);
      if (!(!this._visible || n && !guard)) {
        this.onOk();
      }
    }, me.prototype.onCallExit = function(oauthData) {
      /** @type {boolean} */
      var e = 0 != (this._flags & self.MessageEventFlag.CRITICAL);
      if (this._visible && e) {
        this.onExit();
      }
    }, me.prototype.onCallCancel = function(oauthData) {
      /** @type {boolean} */
      var guard = 0 != (this._flags & self.MessageEventFlag.OKCANCEL);
      /** @type {boolean} */
      var n = 0 != (this._flags & self.MessageEventFlag.CRITICAL);
      /** @type {boolean} */
      var i = 0 != (this._flags & self.MessageEventFlag.NOCANCEL);
      if (!(!this._visible || n && !guard || i)) {
        this.onCancel();
      }
    }, me._stack = [], me._windowCnt = 0, me._enabled = true, me;
  }(exports.EventProcessor);
  var setInterval = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Message = function(d) {
    /**
     * @param {!HTMLElement} ch
     * @param {!Function} count
     * @return {?}
     */
    function f(ch, count) {
      var _this = d.call(this, ch, null, self.MessageEventFlag.OK | self.MessageEventFlag.NOCANCEL) || this;
      return _this._viewFactory = count, ch.addEventListener(self.BonusBalanceMessageEvent.BONUSBALANCEMESSAGE, function(t) {
        return _this.onBalanceMessage(t);
      }), _this;
    }
    return setInterval(f, d), f.prototype.onBalanceMessage = function(b) {
      if (this._view) {
        this.hide();
      }
      this._lastBalanceType = b.balanceType;
      var upload = this._viewFactory.createBonusBalanceMessageView(this._dispatcher, b.title, b.message);
      this.initView(upload, this._flags);
      this.show();
    }, f.prototype.onOk = function() {
      d.prototype.onOk.call(this);
      this._dispatcher.dispatch(new self.BonusBalanceMessageResponseEvent(self.BonusBalanceMessageResponseEvent.OK, "", this._lastBalanceType));
    }, f;
  }(resource);
  var exists = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var User = function(group) {
    /**
     * @param {!Object} e
     * @param {?} options
     * @return {?}
     */
    function Tooltip(e, options) {
      var me = group.call(this) || this;
      return me._dispatcher = e, me._useServerTime = false, me._serverTimeOffset = 0, me._nextUpdateTime = 0, me._timeFromServer = true, options.displayClock && (e.addEventListener(self.ServerTimeEvent.SERVERTIME, function(t) {
        return me.onServerTime(t);
      }), exports.SystemManager.getScheduler().addSystemTickListener(function(delta) {
        return me.onTick(delta);
      }), me._useServerTime = options.useServerTime), me;
    }
    return exists(Tooltip, group), Tooltip.prototype.getCalculatedTime = function() {
      return Date.now() + this.getCalculatedOffset();
    }, Tooltip.prototype.getCalculatedDate = function() {
      return new Date(Date.now() + this.getCalculatedOffset());
    }, Tooltip.prototype.getCalculatedOffset = function() {
      return this._useServerTime ? this._serverTimeOffset : 0;
    }, Tooltip.prototype.onServerTime = function(b) {
      /** @type {!Date} */
      var dCurrent = new Date;
      /** @type {number} */
      this._serverTimeOffset = b.serverTimeAsDate.getTime() - dCurrent.getTime();
      this._serverTimeOffset += 60000 * dCurrent.getTimezoneOffset();
      /** @type {number} */
      this._nextUpdateTime = 0;
      /** @type {boolean} */
      this._timeFromServer = true;
    }, Tooltip.prototype.calculateNextUpdateTime = function(maxDigits) {
      return maxDigits + (60000 - maxDigits % 60000);
    }, Tooltip.prototype.onTick = function(delta) {
      var max = this.getCalculatedTime();
      /** @type {number} */
      var n = this._nextUpdateTime - max;
      if (Math.abs(n) > 120000 && (this._nextUpdateTime = 0, this._timeFromServer || this._dispatcher.dispatch(new self.CommandEvent(self.CommandEvent.GAME_OUT, new self.Command(self.ServerCommand.SERVER_TIME, null)))), max > this._nextUpdateTime) {
        var arr = this.getCalculatedDate();
        this.dispatch(new tree.ClockUpdateEvent(arr));
        this._nextUpdateTime = this.calculateNextUpdateTime(max);
      }
      /** @type {boolean} */
      this._timeFromServer = false;
    }, Tooltip;
  }(exports.EventDispatcher);
  var track = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var WebSocket = function(context) {
    /**
     * @param {?} attributes
     * @param {!Function} options
     * @param {undefined} content
     * @return {?}
     */
    function View(attributes, options, content) {
      var _this = context.call(this, attributes) || this;
      return _this._viewFactory = options, _this._dispatcher.addEventListener(self.GameStatusEvent.ENABLE, function() {
        return _this.onHide();
      }), _this._dispatcher.addEventListener(self.GameStatusEvent.DISABLE, function() {
        return _this.onShow();
      }), _this._dispatcher.addEventListener(self.GameStatusEvent.ENABLE_BUTTONS, function() {
        return _this.onEnableButtons();
      }), _this._dispatcher.addEventListener(self.GameStatusEvent.DISABLE_BUTTONS, function() {
        return _this.onDisableButtons();
      }), exports.SystemManager.getDeviceHandler().addEventListener(exports.DeviceEvent.RESIZE, function(value) {
        return _this.onResize(value);
      }), _this.initView(content), _this;
    }
    return track(View, context), View.prototype.onResize = function(elem) {
      this._view.resize(elem.size.width, elem.size.height);
    }, View.prototype.initView = function(template) {
      this._view = this._viewFactory.createDisablerView(template);
    }, View.prototype.show = function(result) {
      if (void 0 === result) {
        /** @type {boolean} */
        result = true;
      }
      this._view.show(result);
      this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.DISABLED));
    }, View.prototype.hide = function() {
      this._view.hide();
      this._hideTimeOut = void 0;
      this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.ENABLED));
    }, View.prototype.enableButtons = function() {
      /** @type {boolean} */
      self.ButtonHandlerPixi.ENABLED = true;
      this._enableTimeOut = void 0;
    }, View.prototype.disableButtons = function() {
      /** @type {boolean} */
      self.ButtonHandlerPixi.ENABLED = false;
      this._disableHandler = void 0;
    }, View.prototype.onShow = function() {
      this.show(false);
    }, View.prototype.onHide = function() {
      var $trashTreeContextMenu = this;
      if (void 0 === this._hideTimeOut) {
        this._hideTimeOut = window.setTimeout(function() {
          return $trashTreeContextMenu.hide();
        }, 1);
      }
    }, View.prototype.onDisableButtons = function(canCreateDiscussions) {
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      this.disableButtons();
      clearTimeout(this._enableTimeOut);
      this._enableTimeOut = void 0;
    }, View.prototype.onEnableButtons = function(canCreateDiscussions) {
      var options = this;
      if (void 0 === canCreateDiscussions) {
        /** @type {boolean} */
        canCreateDiscussions = false;
      }
      if (void 0 === this._enableTimeOut) {
        this._enableTimeOut = window.setTimeout(function() {
          return options.enableButtons();
        }, 200);
      }
    }, View;
  }(exports.EventProcessor);
  var call = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Fr = function(t) {
    /**
     * @param {!HTMLElement} canvas
     * @param {!Element} view
     * @return {?}
     */
    function show(canvas, view) {
      var child = t.call(this, canvas) || this;
      return child._view = view, canvas.addEventListener(self.SplashEvent.SPLASH_SHOW, function() {
        return child.show(false);
      }), canvas.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return child.show(true);
      }), child;
    }
    return call(show, t), show.prototype.show = function(str) {
      this._view.show(false);
    }, show;
  }(exports.EventProcessor);
  var value_read = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Client = function(c) {
    /**
     * @param {!HTMLElement} config
     * @param {!Function} viewer
     * @return {?}
     */
    function Overlay(config, viewer) {
      var res = c.call(this, config, null, 4) || this;
      return res._viewFactory = viewer, config.addEventListener(self.RealityCheckEvent.REALITYCHECKEVENT, function(body) {
        return res.onRealityCheck(body);
      }), res;
    }
    return value_read(Overlay, c), Overlay.prototype.onRealityCheck = function(s) {
      /** @type {number} */
      var nextY = self.MessageEventFlag.OKCANCEL | self.MessageEventFlag.CRITICAL | self.MessageEventFlag.NOCANCEL;
      if (this._view) {
        this.hide();
      }
      var content = this._viewFactory.createPlayConfirmView(this._dispatcher, s, false);
      this.initView(content, nextY);
      this.show();
    }, Overlay.prototype.onOk = function() {
      c.prototype.onOk.call(this);
      this._dispatcher.dispatch(new self.RealityCheckResponseEvent(self.RealityCheckResponseEvent.CONTINUE));
    }, Overlay.prototype.onExit = function() {
      this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.EXIT));
      this._dispatcher.dispatch(new self.ExitEvent(self.ExitEvent.LOGOUT, self.ExitReason.EXIT));
      this.close();
    }, Overlay;
  }(resource);
  var indexOfUntil = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SymbolTableScope = function(item) {
    /**
     * @param {!HTMLElement} to
     * @param {!Object} config
     * @param {!Function} next
     * @return {?}
     */
    function base(to, config, next) {
      var _this = item.call(this, to, null, 2) || this;
      /** @type {!Object} */
      _this._config = config;
      /** @type {!Function} */
      _this._viewFactory = next;
      var in_view_margin = config.playForRealDelay;
      if (in_view_margin < 0) {
        /** @type {number} */
        in_view_margin = 0;
      }
      var refreshed = "mobile" !== config.channel || config.playForRealUrl;
      return _this._showTime = refreshed && config.demoPlay && config.playForRealSigns ? Date.now() + in_view_margin : 0, to.addEventListener(self.RoundEvent.WIN, function(eventName) {
        return _this.onWin(eventName);
      }), _this;
    }
    return indexOfUntil(base, item), base.prototype.onWin = function(event) {
      /** @type {number} */
      var e = Date.now();
      if (this._config.playForRealSigns && this._showTime > 0 && e - this._showTime > 0) {
        this.show();
      }
    }, base.prototype.show = function() {
      this.initView(this._viewFactory.createPlayForRealView(this._dispatcher, false), 2);
      item.prototype.show.call(this);
      /** @type {number} */
      this._showTime = 0;
      this._dispatcher.dispatch(new self.PlayForRealEvent(self.PlayForRealEvent.MESSAGE, this._config.gameId, this._config.user));
    }, base.prototype.onOk = function() {
      item.prototype.onOk.call(this);
      this._dispatcher.dispatch(new self.ExitEvent(self.ExitEvent.LOGOUT, self.ExitReason.PLAYFORREAL));
    }, base.prototype.onCancel = function() {
      item.prototype.onCancel.call(this);
      /** @type {number} */
      var slider = Date.now();
      /** @type {number} */
      this._showTime = slider + base.NEXT_TIME;
    }, base.NEXT_TIME = 60000, base;
  }(resource);
  var isItemInCollection = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var target = function(item) {
    /**
     * @param {!HTMLElement} sprite
     * @param {!Object} text
     * @param {?} next
     * @param {?} id
     * @return {?}
     */
    function text(sprite, text, next, id) {
      var me = item.call(this, sprite, next, id) || this;
      return me._model = text, me._tempStore = new exports.DataSerializer([]), sprite.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, function(domain) {
        return me.onExternalMessage(domain);
      }), me;
    }
    return isItemInCollection(text, item), text.prototype.onExternalMessage = function(request) {
      this._view.resetItems();
    }, text.prototype.show = function() {
      this._tempStore.save(this._model);
      item.prototype.show.call(this);
    }, text.prototype.onCancel = function() {
      this._tempStore.load(this._model);
      item.prototype.onCancel.call(this);
    }, text;
  }(resource);
  var ObservedInfo = function() {
    /**
     * @param {string} value
     * @param {!Element} view
     * @param {?} n
     * @return {undefined}
     */
    function set(value, view, n) {
      var director = this;
      /** @type {string} */
      this._dispatcher = value;
      /** @type {!Element} */
      this._view = view;
      this._targetHeight = n;
      exports.SystemManager.getScheduler().addUpdateListener(function() {
        return director.mainLoop();
      });
      this._deviceManager = exports.SystemManager.getDeviceHandler();
      /** @type {number} */
      this._timestamp = (new Date).getTime();
    }
    return set.prototype.checkResume = function() {
      /** @type {number} */
      var now = (new Date).getTime();
      if (now - this._timestamp > 1500) {
        window.scrollTo(0, 0);
      }
      /** @type {number} */
      this._timestamp = now;
    }, set.prototype.onResize = function() {
      if (window.innerHeight < this._targetHeight) {
        this._view.show(true);
      } else {
        this._view.show(false);
      }
    }, set.prototype.mainLoop = function() {
      this.checkResume();
      this.onResize();
    }, set;
  }();
  var KineticToken = function() {
    /**
     * @param {!HTMLElement} canvas
     * @param {?} options
     * @param {!Element} view
     * @return {undefined}
     */
    function Tooltip(canvas, options, view) {
      var model = this;
      /** @type {!Element} */
      this._view = view;
      if (options.enforceShowGameName) {
        canvas.addEventListener(tree.CommonUIEvent.GAME_NAME_SHOW, function(shown) {
          return void 0 === shown && (shown = null), model.show(true, shown);
        });
        canvas.addEventListener(tree.CommonUIEvent.GAME_NAME_HIDE, function(shown) {
          return void 0 === shown && (shown = null), model.show(false, shown);
        });
        this.setGameTitle(options.gameName);
      }
    }
    return Tooltip.prototype.setGameTitle = function(result) {
      this._view.setGameTitle(result);
    }, Tooltip.prototype.show = function(result, option) {
      if (void 0 === option) {
        /** @type {null} */
        option = null;
      }
      if (this._view) {
        this._view.show(result);
      }
    }, Tooltip;
  }();
  var scalesPool = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SessionSubscriber = function(c) {
    /**
     * @param {!HTMLElement} p
     * @param {string} color
     * @return {?}
     */
    function value(p, color) {
      var me = c.call(this, p, null, 4) || this;
      return me._messageManager = color, p.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, function(domain) {
        return me.onExternalMessage(domain);
      }), me;
    }
    return scalesPool(value, c), value.prototype.destroy = function() {
      resource.hideAll();
    }, value.prototype.onExternalMessage = function(self) {
      this._messageManager.handleExternalMessage(self.messageType, self.id, self.title, self.message, self.okButton, self.exitButton, self.actionButton, self.redirect);
    }, value;
  }(resource);
  var traverseChildNodeTree = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Conversion = function(callback) {
    /**
     * @param {!HTMLElement} item
     * @param {string} key
     * @param {?} index
     * @param {?} name
     * @return {?}
     */
    function self(item, key, index, name) {
      var scope = callback.call(this, item, null, 4, void 0, name) || this;
      return scope._type = key, scope._externalId = index, item.addEventListener(self.ExternalMessageModalInputEvent.OK, function(result) {
        return scope.onCallOk(result);
      }), item.addEventListener(self.ExternalMessageModalInputEvent.ACTION, function(updatedScope) {
        return scope.onCallAction(updatedScope);
      }), item.addEventListener(self.ExternalMessageModalInputEvent.EXIT, function(result) {
        return scope.onCallExit(result);
      }), scope;
    }
    return traverseChildNodeTree(self, callback), self.prototype.initView = function(template) {
      var options = this;
      if (template) {
        /** @type {!Object} */
        this._view = template;
        template.initButton(self.ModalViewButton.OK, function() {
          return options.onOk();
        });
        template.initButton(self.ModalViewButton.EXIT, function() {
          return options.onExit();
        });
        template.initButton(self.ModalViewButton.ACTION, function() {
          return options.onAction();
        });
        /** @type {boolean} */
        var xa = true;
        /** @type {boolean} */
        var width = true;
        if ("ExternalMessage" !== this._type) {
          /** @type {boolean} */
          xa = false;
        }
        if ("PlayConfirm" !== this._type && "ExternalMessage" !== this._type) {
          /** @type {boolean} */
          width = false;
        }
        template.showButton(self.ModalViewButton.OK, true);
        template.showButton(self.ModalViewButton.EXIT, width);
        template.showButton(self.ModalViewButton.ACTION, xa);
      }
    }, self.prototype.onAction = function() {
      this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.ACTION));
      this._dispatcher.dispatch(new self.ExternalMessageResponseEvent(self.ExternalMessageResponseEvent.ACTION, this._externalId));
    }, self.prototype.onOk = function() {
      callback.prototype.onOk.call(this);
      this._dispatcher.dispatch(new self.ExternalMessageResponseEvent(self.ExternalMessageResponseEvent.OK, this._externalId));
    }, self.prototype.onExit = function() {
      var chartData = new self.ExternalMessageResponseEvent(self.ExternalMessageResponseEvent.EXIT, this._externalId);
      this._dispatcher.dispatch(new self.ModalUIEvent(self.ModalUIEvent.EXIT));
      this._dispatcher.dispatch(new self.ExitEvent(self.ExitEvent.LOGOUT, self.ExitReason.EXTERNALMESSAGE_EXIT, chartData));
      this.close();
    }, self.prototype.onCallAction = function(ctx) {
      if (this._visible && this._externalId === ctx.eId) {
        this.onAction();
      }
    }, self.prototype.onCallOk = function(oauthData) {
      if (this._visible && this._externalId === oauthData.eId) {
        this.onOk();
      }
    }, self.prototype.onCallExit = function(oauthData) {
      if (this._visible && this._externalId === oauthData.eId) {
        this.onExit();
      }
    }, self;
  }(resource);
  var ts = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var WindowSettings = function(x) {
    /**
     * @param {?} e
     * @param {!Function} value
     * @return {?}
     */
    function options(e, value) {
      var elem = x.call(this, e) || this;
      return elem._viewFactory = value, elem;
    }
    return ts(options, x), options.prototype.handleExternalMessage = function(port, msg, e, i, value, element, query, completions) {
      var content = this._viewFactory.createExternalMessageView(this._dispatcher, port, msg, e, i, value, element, query);
      content.disableReconnectHandling();
      var self = new Conversion(this._dispatcher, port, msg, completions);
      self.initView(content);
      self.show();
    }, options;
  }(exports.EventProcessor);
  var trace = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SnackbarInstance = function(url) {
    /**
     * @param {!HTMLElement} source
     * @param {number} index
     * @param {number} key
     * @return {?}
     */
    function init(source, index, key) {
      if (void 0 === key) {
        key = self.MessageEventType.GENERIC;
      }
      var that = url.call(this, source) || this;
      return that._id = key, that._flags = index, source.addEventListener(self.ExternalMessageModalInputEvent.CLOSE, function() {
        return that.close();
      }), source.addEventListener(self.ReconnectEndEvent.RECONNECTEND, function() {
        return that.onReconnectEnd();
      }), that;
    }
    return trace(init, url), init.prototype.init = function() {
      this.pause(true);
    }, init.prototype.close = function() {
      this.pause(false);
    }, init.prototype.pause = function(lock) {
      /** @type {string} */
      this._reconnectPauseState = lock;
      if (!exports.SystemManager.getScheduler().reconnecting) {
        exports.SystemManager.getScheduler().pause(lock);
      }
    }, init.prototype.onReconnectEnd = function() {
      this.pause(this._reconnectPauseState);
    }, init;
  }(exports.EventProcessor);
  var get_module_id = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var WSHandler = function(token) {
    /**
     * @param {!HTMLElement} context
     * @param {string} layer
     * @return {?}
     */
    function Player(context, layer) {
      var debug = token.call(this, context) || this;
      return debug._messageManager = layer, context.addEventListener(self.MessageEvent.MESSAGE, function(response) {
        return debug.onMessage(response);
      }), debug;
    }
    return get_module_id(Player, token), Player.prototype.destroy = function() {
      resource.hideAll();
    }, Player.prototype.onMessage = function(msg) {
      this._messageManager.handleMessage(msg.id, msg.title, msg.message, msg.flags);
    }, Player;
  }(exports.EventProcessor);
  var _extends = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Socket = function(View) {
    /**
     * @param {?} name
     * @param {!Function} f
     * @param {!Object} o
     * @return {?}
     */
    function Node(name, f, o) {
      var _this = View.call(this, name) || this;
      return _this._viewFactory = f, _this._config = o, _this;
    }
    return _extends(Node, View), Node.prototype.handleMessage = function(self, component, data, message, sender) {
      if (this._config.disableInGameModals) {
        var instance = new SnackbarInstance(this._dispatcher, message, self);
        instance.init();
      } else {
        var path = this._viewFactory.createMessageView(this._dispatcher, component, data);
        path.disableReconnectHandling();
        instance = new resource(this._dispatcher, path, message, self);
        instance.show();
      }
    }, Node;
  }(exports.EventProcessor);
  var unsubSpy = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var way = function(handler) {
    /**
     * @param {string} url
     * @param {(!Function|RegExp|string)} opts
     * @param {(!Function|RegExp|string)} options
     * @return {?}
     */
    function Connection(url, opts, options) {
      var self = handler.call(this, url, opts, options) || this;
      return self._messageManager = new Socket(url, options, opts), self._messageHandler = new WSHandler(url, self._messageManager), self._externalMessageManager = new WindowSettings(url, options), self._externalMessageHandler = new SessionSubscriber(url, self._externalMessageManager), self._bonusBalanceController = new Message(url, options), self._disablerController = new WebSocket(url, options, opts), self._playConfirmController = new Client(url, options), self._aamsSessionMessageController = new Buffer(url), 
      self;
    }
    return unsubSpy(Connection, handler), Connection.prototype.destroy = function() {
      this._viewFactory.destroy();
    }, Connection.prototype.createPlayForRealController = function(charLoc, name, blockType) {
      new SymbolTableScope(charLoc, name, blockType);
    }, Connection.prototype.createSwipeToHideController = function(func, context, compute) {
      new ObservedInfo(func, context, compute);
    }, Connection.prototype.destroyMessageHandlers = function() {
      this._messageHandler.destroy();
      this._externalMessageHandler.destroy();
    }, Connection;
  }(self.CasinoUIManager);
  var level = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return Object.defineProperty(t.prototype, "opaque", {
      get : function() {
        return null;
      },
      enumerable : true,
      configurable : true
    }), t.prototype.resize = function(byHeight, options) {
    }, t.prototype.show = function(str) {
      if (void 0 === str) {
        /** @type {boolean} */
        str = false;
      }
    }, t.prototype.hide = function() {
    }, t.prototype.update = function() {
    }, t;
  }();
  !function($) {
    /** @type {string} */
    $.CHECKBOX = "SETTING";
    /** @type {string} */
    $.SLIDER = "SLIDER";
  }(ITEM || (ITEM = {}));
  var SymmetryType;
  var args = function() {
    /**
     * @return {undefined}
     */
    function C() {
    }
    return C.STOP_ANY = "STOP_ANY", C.STOP_BONUS = "STOP_BONUS", C.STOP_FS = "STOP_FS", C.STOP_JACKPOT = "STOP_JACKPOT", C.STOP_WIN = "STOP_WIN", C.STOP_BAL_INC = "STOP_BAL_INC", C.STOP_BAL_DEC = "STOP_BAL_DEC", C.START = "START", C.TOGGLE = "TOGGLE", C.NUMBER1 = "NUMBER1", C.NUMBER2 = "NUMBER2", C.NUMBER3 = "NUMBER3", C.NUMBER4 = "NUMBER4", C.NUMBER5 = "NUMBER5", C.setTextLabel = function(t, value) {
      return t + value + "_LABEL";
    }, C.SETTING1_LABEL = "SETTING1_LABEL", C.SETTING2_LABEL = "SETTING2_LABEL", C.SETTING3_LABEL = "SETTING3_LABEL", C.SETTING4_LABEL = "SETTING4_LABEL", C.SLIDER1 = "SLIDER1", C.SLIDER2 = "SLIDER2", C.SLIDER3 = "SLIDER3", C.SLIDER4 = "SLIDER4", C.SLIDER1_LABEL = "SLIDER1_LABEL", C.SLIDER2_LABEL = "SLIDER2_LABEL", C.SLIDER3_LABEL = "SLIDER3_LABEL", C.SLIDER4_LABEL = "SLIDER4_LABEL", C.SLIDER1_CURRENCY = "SLIDER1_CURRENCY", C.SLIDER2_CURRENCY = "SLIDER2_CURRENCY", C.SLIDER3_CURRENCY = "SLIDER3_CURRENCY", 
    C.SLIDER4_CURRENCY = "SLIDER4_CURRENCY", C;
  }();
  var position = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.SLD_AUTOPLAY = "SLD_AUTOPLAY", t.AUTOPLAY_BUTTON = "AUTOPLAY_BUTTON", t;
  }();
  var element = function() {
    /**
     * @return {undefined}
     */
    function PrimitiveType() {
    }
    return PrimitiveType.BETMAX = "BETMAX", PrimitiveType.LINES = "LINES", PrimitiveType.LINES_INC = "LINES_INC", PrimitiveType.LINES_DEC = "LINES_DEC", PrimitiveType.COINS = "COINS", PrimitiveType.COINS_INC = "COINS_INC", PrimitiveType.COINS_DEC = "COINS_DEC", PrimitiveType.DENOM = "DENOM", PrimitiveType.DENOM_INC = "DENOM_INC", PrimitiveType.DENOM_DEC = "DENOM_DEC", PrimitiveType.COINBALANCE_LABEL = "COINBALANCE_LABEL", PrimitiveType.COINBET_LABEL = "COINBET_LABEL", PrimitiveType.COINBET_LABEL_MOBILE = 
    "COINBET_LABEL_MOBILE", PrimitiveType.CASHBET_LABEL = "CASHBET_LABEL", PrimitiveType.BALANCE_CONTAINER = "BALANCE_CONTAINER", PrimitiveType.BALANCE_CAPTION = "BALANCE_CAPTION", PrimitiveType.FREEGAME_CAPTION = "FREEGAME_CAPTION", PrimitiveType;
  }();
  var sep = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.COINS = "COINS", t.DENOM = "DENOM", t;
  }();
  var image_re = function() {
    /**
     * @param {!WebGLRenderingContext} data
     * @return {undefined}
     */
    function Camera(data) {
      this._mode = tree.InfoViewMode.MESSAGE;
      /** @type {!RegExp} */
      this._finalWinRe = /\.00$|\.00[^.\d]/;
      this.initialize(data);
    }
    return Camera.prototype.setMode = function(mode, recursive) {
      if (void 0 === recursive) {
        /** @type {boolean} */
        recursive = false;
      }
      if (this._mode !== tree.InfoViewMode.WIN || recursive) {
        /** @type {string} */
        this._mode = mode;
        if (recursive && (this._message || this._args)) {
          this._textField.setText(this._message);
          this._textField.setArgs(this._args);
        }
      }
    }, Camera.prototype.setMessage = function(value, args, message) {
      if (void 0 === args) {
        /** @type {string} */
        args = "";
      }
      /** @type {string} */
      this._message = value;
      this._args = args;
      if (!(void 0 == this._defaultStyle && void 0 == message)) {
        this._textField.setStyle(void 0 == message ? this._defaultStyle : message);
      }
      if (this._mode !== tree.InfoViewMode.WIN) {
        this._textField.setText(value);
        this._textField.setArgs(args);
      }
    }, Camera.prototype.setWin = function(NODE, REF_NODE) {
      if (this._mode === tree.InfoViewMode.WIN) {
        var node = self.ResourceManager.getInstance().getCreditFormatter().formatCoinValue(NODE);
        this._textField.setText("IDS_MENU_WIN");
        this._textField.setArgs("> " + node);
      }
    }, Camera.prototype.setFinalWin = function(t) {
      if (this._mode === tree.InfoViewMode.WIN) {
        var allTraps = self.ResourceManager.getInstance().getCreditFormatter();
        var m = allTraps.formatCoinValue(t, self.MoneyFormatterFlag.FORCE_DECIMAL);
        if (this._finalWinRe.test(m)) {
          m = allTraps.formatCoinValue(t);
        }
        this._textField.setText("IDS_MENU_WIN");
        this._textField.setArgs("> " + m);
      }
    }, Camera.prototype.setDefaultStyle = function(styles) {
      if (void 0 != styles) {
        /** @type {string} */
        this._defaultStyle = styles;
      }
    }, Camera.prototype.initialize = function(doc) {
      this._defaultStyle = void 0;
      this._textField = doc.getTextField("infoText");
    }, Camera;
  }();
  var s = function() {
    /**
     * @return {undefined}
     */
    function s() {
    }
    return s.SOUND = "SOUND", s.AUTOADJUSTBET = "AUTOADJUSTBET", s.LEFTHANDMODE = "LEFTHANDMODE", s.FASTPLAY = "FASTPLAY", s;
  }();
  var data = function() {
    /**
     * @return {undefined}
     */
    function item() {
    }
    return item.SOUND = "SOUND", item.MOBILE_SOUND = "MOBILE_SOUND", item.FASTPLAY = "FASTPLAY", item.HELP = "HELP", item.MENU = "MENU", item.MOBILE_MENU = "MOBILE_MENU", item.EXIT = "EXIT", item.PLAYFORREAL = "PLAYFORREAL", item;
  }();
  var keys = function() {
    /**
     * @return {undefined}
     */
    function M() {
    }
    return M.OK = "OK", M.CANCEL = "CANCEL", M.EXIT = "EXIT", M.ACTION = "ACTION", M.YES = "YES", M.NO = "NO", M;
  }();
  var traverseRecursive = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Zepto = function(callback) {
    /**
     * @param {!HTMLElement} config
     * @param {!Date} url
     * @param {!Object} user
     * @return {?}
     */
    function Connection(config, url, user) {
      var req = callback.call(this, config) || this;
      return req._statusBarView = url, req._activeButtons = [], req._userId = user.customerId, user.displayClock && (req._clockController = new User(config, user), req._clockController.addEventListener(tree.ClockUpdateEvent.UPDATETIME, function(t) {
        return req.onClockUpdate(t);
      })), config.addEventListener(self.BonusBalanceMessageResponseEvent.OK, function(params) {
        return req.onBonusBalanceMessageResponse(params);
      }), req;
    }
    return traverseRecursive(Connection, callback), Connection.prototype.onClockUpdate = function(e) {
      this._statusBarView.setTime(e.formattedTime);
    }, Connection.prototype.initiateButton = function(id, container, data, i) {
      this._statusBarView.initButton(id, i);
      this._statusBarView.showButton(id, !container);
      this._statusBarView.enableButton(id, !data);
      if (!(container || data)) {
        this._activeButtons.push(id);
      }
    }, Connection.prototype.onBonusBalanceMessageResponse = function(a) {
      this._statusBarView.setBalanceLabelType(a.balanceType);
    }, Connection;
  }(exports.EventProcessor);
  var saveFavorite = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var sampleUserGroupRoles = function(schema) {
    /**
     * @param {string} n
     * @param {number} i
     * @param {!Object} p
     * @param {!Object} q
     * @return {?}
     */
    function item(n, i, p, q) {
      if (void 0 === i) {
        /** @type {number} */
        i = 0;
      }
      if (void 0 === q) {
        /** @type {null} */
        q = null;
      }
      var t = schema.call(this, null) || this;
      /** @type {string} */
      t._winName = n;
      /** @type {number} */
      t._priority = i;
      /** @type {!Object} */
      t._parent = p;
      /** @type {!Object} */
      t._disabler = q;
      /** @type {string} */
      t._buttons[keys.OK] = "okBtn";
      /** @type {string} */
      t._buttons[keys.CANCEL] = "cancelBtn";
      /** @type {string} */
      t._buttons[keys.EXIT] = "exitBtn";
      /** @type {string} */
      t._buttons[keys.ACTION] = "actionBtn";
      /** @type {string} */
      t._buttons[keys.YES] = "yesBtn";
      /** @type {string} */
      t._buttons[keys.NO] = "noBtn";
      var jimple = self.ResourceManager.getInstance().getEntityManager();
      return t._entity = jimple.create(n), null === item._disablerEntity && (item._disablerEntity = self.ResourceManager.getInstance().getEntityManager().create("Disabler"), item._disablerEntity.getButton(".").enable(true)), t.enableButton(keys.OK, true), t.enableButton(keys.CANCEL, true), t.enableButton(keys.EXIT, true), t.enableButton(keys.ACTION, true), t.enableButton(keys.YES, true), t.enableButton(keys.NO, true), t;
    }
    return saveFavorite(item, schema), item.prototype.hideAll = function() {
    }, item.prototype.enable = function(value) {
      if (value) {
        this.sendToFront();
      }
    }, item.prototype.sendToFront = function() {
      this._parent.remove(item._disablerName);
      this._parent.remove(this._winName);
      this._parent.add(item._disablerName, item._disablerEntity);
      this._parent.add(this._winName, this._entity);
    }, item.prototype.show = function(str, e) {
      if (void 0 === e) {
        /** @type {boolean} */
        e = false;
      }
      if (str) {
        this.showWin();
      } else {
        this.hideWin(e);
      }
    }, item.prototype.isVisible = function() {
      return this._entity.getDisplay(".").isVisible();
    }, item.prototype.removeDisabler = function() {
      this._parent.remove(item._disablerName);
    }, item.prototype.showWin = function() {
      return this.enable(true), this._entity.getDisplay(".").setVisible(true), true;
    }, item.prototype.hideWin = function(b) {
      if (void 0 === b) {
        /** @type {boolean} */
        b = false;
      }
      this._entity.getDisplay(".").setVisible(false);
      if (b) {
        this._parent.remove(this._winName);
      }
    }, item._disablerEntity = null, item._disablerName = "disablerWin", item;
  }(self.ViewBase);
  var makeUnique = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var TwitterAPI = function(util) {
    /**
     * @param {?} order
     * @param {?} n
     * @param {string} l
     * @param {string} m
     * @param {number} a
     * @return {?}
     */
    function set(order, n, l, m, a) {
      if (void 0 === a) {
        /** @type {boolean} */
        a = false;
      }
      var that = util.call(this, a ? "MessageBox" : "ServerMessage", 101, order, n) || this;
      return that._title = l, that._message = m, that.setTexts(), that;
    }
    return makeUnique(set, util), set.prototype.setTexts = function() {
      this._entity.getTextField("title").setText(this._title);
      this._entity.getTextField("message").setText(this._message);
    }, set;
  }(sampleUserGroupRoles);
  var ws = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var adjustedLevel = function(text) {
    /**
     * @return {?}
     */
    function data() {
      var collection = text.call(this) || this;
      var element = self.ResourceManager.getInstance().getEntityManager().getByName("modal");
      return collection._disabler = element.getDisplay("disabler"), collection._updater = function() {
        return collection.update();
      }, collection;
    }
    return ws(data, text), Object.defineProperty(data.prototype, "opaque", {
      get : function() {
        return 0 === this._disabler.getAlpha();
      },
      enumerable : true,
      configurable : true
    }), data.prototype.show = function(str) {
      if (void 0 === str) {
        /** @type {boolean} */
        str = false;
      }
      this._disabler.setVisible(true);
      if (str) {
        this._disabler.setAlpha(0);
      }
      if (void 0 !== this._handler) {
        clearTimeout(this._handler);
        this._handler = void 0;
      }
    }, data.prototype.hide = function() {
      if (void 0 === this._handler) {
        this._handler = window.setTimeout(this._updater, 0);
      }
    }, data.prototype.update = function() {
      this._disabler.setVisible(false);
      this._disabler.setAlpha(1);
      this._handler = void 0;
    }, data;
  }(level);
  var getSetEntryCount = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PoseMetadata = function(util) {
    /**
     * @param {?} order
     * @param {?} name
     * @param {string} object
     * @param {?} center
     * @param {string} title
     * @param {string} response
     * @param {?} records
     * @param {?} keys
     * @param {?} instance
     * @return {?}
     */
    function set(order, name, object, center, title, response, records, keys, instance) {
      var self = this;
      /** @type {string} */
      var l = "ActionPanel";
      return "ServerMessage" === object && (l = "MessageBox"), self = util.call(this, l, 100, order, name) || this, self._type = object, self._title = title, self._message = response, self._okButton = records, self._exitButton = keys, self._actionButton = instance, self._entity.getTextField("message2").setText(""), self.setTexts(), self;
    }
    return getSetEntryCount(set, util), set.prototype.setTexts = function(value_in_code) {
      switch(void 0 === value_in_code && (value_in_code = null), this._type) {
        case "ServerMessage":
          this.setButtonText(keys.OK, this._okButton);
          this._entity.getTextField("message").setText(this._message);
          break;
        case "PlayConfirm":
          this.setButtonText(keys.OK, this._okButton);
          this.setButtonText(keys.EXIT, this._exitButton);
          break;
        case "ExternalMessage":
          this.setButtonText(keys.OK, this._okButton);
          this.setButtonText(keys.EXIT, this._exitButton);
          this.setButtonText(keys.ACTION, this._actionButton);
      }
      this._entity.getTextField("title").setText(this._title);
      this._entity.getTextField("message1").setText(this._message);
    }, set;
  }(sampleUserGroupRoles);
  var draw = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var UnitTestAssertionFailure = function(self) {
    /**
     * @param {?} order
     * @param {?} n
     * @param {string} l
     * @param {string} m
     * @param {number} a
     * @return {?}
     */
    function set(order, n, l, m, a) {
      if (void 0 === a) {
        /** @type {boolean} */
        a = false;
      }
      var that = self.call(this, a ? "MessageBox" : "ServerMessage", 100, order, n) || this;
      return that._title = l, that._message = m, that.setTexts(), that;
    }
    return draw(set, self), set.prototype.setTexts = function() {
      this._entity.getTextField("title").setText(this._title);
      this._entity.getTextField("message").setText(this._message);
    }, set;
  }(sampleUserGroupRoles);
  var _createClass = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var EventObservable = function(util) {
    /**
     * @param {?} options
     * @param {?} value
     * @param {!Array} element
     * @return {?}
     */
    function ComboBox(options, value, element) {
      var proto = util.call(this, "RealityCheck", 0, options, value) || this;
      return proto.setTexts(element), proto;
    }
    return _createClass(ComboBox, util), ComboBox.prototype.setTexts = function(t) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      var document = self.ResourceManager.getInstance().getMoneyFormatter();
      this.setText("title", "IDS_RC_HEADING");
      var i;
      i = t.minutes > 1 ? PersonModel.getByName("IDS_RC_MINUTES").getText() : PersonModel.getByName("IDS_RC_MINUTE").getText();
      this.setText("message1", "IDS_RC_PLAYTIME");
      this.setTextArgs("message1", "%d=" + t.minutes + "&%x=" + i);
      this.setText("message2", "IDS_RC_WON");
      this.setTextArgs("message2", "%x=" + document.MoneyToString(t.win, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      this.setText("message3", "IDS_RC_LOST");
      this.setTextArgs("message3", "%x=" + document.MoneyToString(t.bet, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      this.setText("message4", "IDS_RC_CONTINUE");
    }, ComboBox;
  }(sampleUserGroupRoles);
  var getTeplateInfo = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Rs = function(util) {
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    function ComboBox(options, value) {
      var s = util.call(this, "PlayForReal", 0, options, value) || this;
      return s.setTexts(), s.showWin(), s;
    }
    return getTeplateInfo(ComboBox, util), ComboBox.prototype.setTexts = function() {
      this.setText("title", "IDS_M_PLAYFORREAL_TITLE");
      this.setText("message1", "IDS_M_PLAYFORREAL_TEXT");
    }, ComboBox;
  }(sampleUserGroupRoles);
  var insertSelfEdges = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var div = function(super$0) {
    /**
     * @return {?}
     */
    function g() {
      return null !== super$0 && super$0.apply(this, arguments) || this;
    }
    return insertSelfEdges(g, super$0), g.prototype.init = function(c) {
      var section = self.ResourceManager.getInstance().getEntityManager();
      this._entity = section.create("Modal");
      section.add("modal", this._entity);
      this._disabler = this._entity.getDisplay("disabler");
      this._disabler.setVisible(false);
      this._entity.getButton("disabler").enable(true);
      /** @type {!Object} */
      this._config = c;
      this._parent = this._entity.getHierarchy("windows");
    }, g.prototype.createPlayForRealView = function(license, buildingApp) {
      return new Rs(this._parent, this._disabler);
    }, g.prototype.createMessageView = function(replyToken, message, expected, options) {
      return void 0 === options && (options = false), new UnitTestAssertionFailure(this._parent, this._disabler, message, expected);
    }, g.prototype.createBonusBalanceMessageView = function(organizationProfile, store, data, defer_sort) {
      return void 0 === defer_sort && (defer_sort = false), new TwitterAPI(this._parent, this._disabler, store, data);
    }, g.prototype.createExternalMessageView = function(charLoc, name, category, tags, i, depExports, suppressDisabledCheck, element) {
      return new PoseMetadata(this._parent, this._disabler, name, category, tags, i, depExports, suppressDisabledCheck, element);
    }, g.prototype.createDisablerView = function(Widget) {
      return new adjustedLevel;
    }, g.prototype.createPlayConfirmView = function(name, selector, refreshCache) {
      return new EventObservable(this._parent, this._disabler, selector);
    }, g.prototype.createSwipeToHideView = function() {
      return null;
    }, g;
  }(self.CasinoViewFactory);
  var magnifier = function() {
    /**
     * @param {!Object} callback
     * @return {undefined}
     */
    function init(callback) {
      var me = this;
      var buttons = this.getButtons();
      /** @type {number} */
      var i = 0;
      var atlines = buttons;
      for (; i < atlines.length; i++) {
        var a = atlines[i];
        !function(o) {
          o.button.enable(true);
          o.button.addEventListener(self.ButtonHoverEvent.HOVER, function(item) {
            return me.onHover(o.name, item);
          });
          o.button.addEventListener(self.ButtonEvent.CLICK, function(i) {
            return me.onClick(o.name, i);
          });
        }(a);
      }
      var btn = this.getCancelButton();
      btn.enable(true);
      btn.addEventListener(self.ButtonEvent.CLICK, function() {
        return me.reset();
      });
      /** @type {boolean} */
      this._splashMode = true;
      /** @type {boolean} */
      this._roundMode = false;
      /** @type {boolean} */
      this._autoplayMode = false;
      this._scheduler = exports.SystemManager.getScheduler();
      /** @type {boolean} */
      this._shouldHoverHide = false;
      /**
       * @param {?} t
       * @return {?}
       */
      this._boundHoverHideTimeout = function(t) {
        return me.hoverHideTimeout(t);
      };
      this.initEventListeners(callback);
    }
    return init.prototype.getCancelButton = function() {
      return self.ResourceManager.getInstance().getEntityManager().getByName("main").getButton("background");
    }, init.prototype.initEventListeners = function(property) {
      var e = this;
      property.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return e.onSplashHide();
      });
      property.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return e.onRound(true);
      });
      property.addEventListener(self.RoundEvent.ROUNDEND, function() {
        return e.onRound(false);
      });
      property.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return e.onAutoplay(true);
      });
      property.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return e.onAutoplay(false);
      });
    }, init.prototype.onHover = function(val, data) {
      if (!this.checkDisabled()) {
        if (data.state) {
          if (this._shown !== val) {
            if (this._shown) {
              this.hideView(this._shown);
            }
            this.showView(val);
            /** @type {number} */
            this._shown = val;
          }
          /** @type {boolean} */
          this._shouldHoverHide = false;
          if (this._hoverHideContext) {
            exports.Context.complete(this._hoverHideContext);
          }
        } else {
          if (!(data.state || this._shown !== val)) {
            /** @type {boolean} */
            this._shouldHoverHide = true;
            this._hoverHideContext = this._scheduler.wait(this._scheduler.timeToTick(init.HIDE_WAIT_MS), val, this._boundHoverHideTimeout, null);
          }
        }
      }
    }, init.prototype.hoverHideTimeout = function(view) {
      if (this._shouldHoverHide) {
        this.hideView(view);
        /** @type {null} */
        this._shown = null;
        /** @type {boolean} */
        this._shouldHoverHide = false;
      }
      this._hoverHideContext = void 0;
    }, init.prototype.onClick = function(id, position) {
      if (!this.checkDisabled()) {
        /** @type {boolean} */
        this._shouldHoverHide = false;
        if (this._hoverHideContext) {
          exports.Context.complete(this._hoverHideContext);
        }
        if (this._shown !== id) {
          if (this._shown) {
            this.hideView(this._shown);
          }
          this.showView(id);
          /** @type {number} */
          this._shown = id;
        }
      }
    }, init.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._splashMode = false;
    }, init.prototype.onRound = function(isIron) {
      /** @type {string} */
      this._roundMode = isIron;
      if (isIron && this._shown) {
        this.reset();
      }
    }, init.prototype.onAutoplay = function(isIron) {
      /** @type {string} */
      this._autoplayMode = isIron;
      if (isIron && this._shown) {
        this.reset();
      }
    }, init.prototype.checkDisabled = function() {
      return this._splashMode || this._roundMode || this._autoplayMode;
    }, init.prototype.reset = function() {
      this.hideView();
      /** @type {null} */
      this._shown = null;
      if (this._hoverHideContext) {
        exports.Context.complete(this._hoverHideContext);
      }
    }, init.HIDE_WAIT_MS = 200, init;
  }();
  var equal = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var InvalidSourceError = function(t) {
    /**
     * @param {?} callback
     * @return {?}
     */
    function page(callback) {
      var $innerblock = t.call(this, callback) || this;
      return $innerblock.show(false), $innerblock;
    }
    return equal(page, t), page.prototype.setGameTitle = function(t) {
      this._entity.getTextField("gameNameText").setText(t);
    }, page.prototype.show = function(value) {
      this._entity.getDisplay(".").setVisible(value);
    }, page.prototype.isVisible = function() {
      return this._entity.getDisplay(".").isVisible();
    }, page;
  }(self.ViewBase);
  var Fs = function() {
    /**
     * @return {undefined}
     */
    function Module() {
      var section = self.ResourceManager.getInstance().getEntityManager();
      this._entity = section.create("Modal");
      section.add("modal", this._entity);
    }
    return Module.prototype.show = function(value) {
      this._entity.getDisplay(".").setVisible(value);
    }, Module.prototype.isVisible = function() {
      return this._entity.getDisplay(".").isVisible();
    }, Module;
  }();
  var getUrlFromRegistry = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Controller = function(config) {
    /**
     * @param {?} props
     * @param {?} assocName
     * @return {?}
     */
    function LinkCreate(props, assocName) {
      var wrapper = config.call(this, props) || this;
      return wrapper._texts = {}, wrapper;
    }
    return getUrlFromRegistry(LinkCreate, config), LinkCreate.prototype.getBalanceLabel = function() {
      return this._balanceLabelType === self.BonusBalanceEventType.BONUS ? "IDS_BONUS_CAPTION" : "IDS_BALANCE_CAPTION";
    }, LinkCreate.prototype.setBalanceLabelType = function(canCreateDiscussions) {
      /** @type {!Function} */
      this._balanceLabelType = canCreateDiscussions;
      this._entity.getTextField(this._texts.BALANCE).setText(this.getBalanceLabel());
    }, LinkCreate;
  }(self.ViewBase);
  var Type = function() {
    /**
     * @param {!HTMLElement} elem
     * @param {string} text
     * @param {!Array} args
     * @param {?} callback
     * @return {undefined}
     */
    function editor(elem, text, args, callback) {
      /** @type {string} */
      this._idsPrefix = "$HTML_";
      /** @type {!HTMLElement} */
      this._element = elem;
      /** @type {string} */
      this._text = text;
      /** @type {!Array} */
      this._args = args;
      this.refresh(callback);
    }
    return editor.prototype.getElement = function() {
      return this._element;
    }, editor.prototype.setText = function(message) {
      /** @type {string} */
      this._text = message;
    }, editor.prototype.setArgs = function(args) {
      /** @type {!Object} */
      this._args = args;
    }, editor.prototype.refresh = function(context) {
      var PersonModel = self.ResourceManager.getInstance().getStyleManager();
      var name = context.getByName(this._text).getText();
      var numberFormat = PersonModel.getByName(this._idsPrefix + this._text);
      if (numberFormat) {
        var style = numberFormat.getFormat();
        if (style && style.font) {
          this._element.style.fontFamily = style.font;
        }
      }
      if (name = name.replace(/\uFEFF/g, ""), this._args && this._args.length > 0) {
        var existingChoices = this._args.split("&");
        /** @type {number} */
        var i = 0;
        var patchLen = existingChoices.length;
        for (; i < patchLen; i++) {
          var c = existingChoices[i];
          var b = c.split("=");
          if (b.length > 1) {
            var h = b[0];
            var type = b[1];
            var i = name.indexOf(h);
            if (i >= 0) {
              name = name.substr(0, i) + type + name.substr(i + h.length);
            }
          } else {
            if (c.length > 0) {
              switch(c.charAt(0)) {
                case ">":
                  name = name + c.substr(1);
                  break;
                case "<":
                  name = c.substr(1) + name;
              }
            }
          }
        }
      }
      this._element.innerHTML = name;
      this._element.innerText = name;
    }, editor;
  }();
  var $e = function() {
    /**
     * @param {!HTMLElement} elem
     * @param {!Object} parent
     * @param {number} size
     * @param {number} value
     * @return {undefined}
     */
    function set(elem, parent, size, value) {
      /** @type {number} */
      this._scale = size;
      /** @type {!Object} */
      this._parent = parent;
      /** @type {!HTMLElement} */
      this._element = elem;
      /** @type {number} */
      this._fontSize = value;
      /** @type {number} */
      this._currentScale = 1;
    }
    return set.prototype.refresh = function() {
      if (0 !== this._element.clientWidth && 0 !== this._parent.clientWidth && this._element.clientWidth !== this._parent.clientWidth) {
        /** @type {number} */
        var t = 0;
        for (; t < 2; t++) {
          /** @type {number} */
          var index = this._element.clientWidth / this._parent.clientWidth;
          /** @type {number} */
          var thisIndex = this._element.clientHeight / this._parent.clientHeight;
          /** @type {number} */
          var i = index > thisIndex ? index : thisIndex;
          if (i > this._scale) {
            /** @type {number} */
            this._currentScale = this._scale / i * this._currentScale;
            /** @type {string} */
            this._element.style.fontSize = this._currentScale * this._fontSize * exports.SystemManager.getDeviceHandler().resolveWidth() / 100 + "vw";
          }
        }
      }
    }, set.prototype.getElement = function() {
      return this._element;
    }, set;
  }();
  var Int32Array = function() {
    /**
     * @param {!Element} el
     * @param {!Document} value
     * @param {number} arg
     * @param {string} val
     * @param {boolean} opt_validate
     * @return {undefined}
     */
    function set(el, value, arg, val, opt_validate) {
      /** @type {!Element} */
      this._div = el;
      /** @type {!Document} */
      this._parent = value;
      /** @type {number} */
      this._maxWidth = arg;
      /** @type {string} */
      this._maxHeight = val;
      /** @type {boolean} */
      this._leftAligned = opt_validate;
    }
    return set.prototype.update = function() {
      if (this._div.style.transform = "", this._div.clientWidth !== this._parent.clientWidth) {
        /** @type {number} */
        var width = this._div.clientWidth / this._parent.clientWidth;
        /** @type {number} */
        var height = this._div.clientHeight / this._parent.clientHeight;
        /** @type {number} */
        width = width > this._maxWidth ? this._maxWidth / width : 1;
        /** @type {number} */
        height = height > this._maxHeight ? this._maxHeight / height : 1;
        /** @type {number} */
        var stackedDomainMax = (1 - width) / width * 50;
        /** @type {number} */
        var i = this._leftAligned ? -1 : 1;
        /** @type {string} */
        var transform = "scale(" + width + "," + height + ") translate(" + i * stackedDomainMax + "%, 0%)";
        /** @type {string} */
        this._div.style.transform = transform;
        /** @type {string} */
        this._div.style.webkitTransform = transform;
      }
    }, set.prototype.setWidth = function(value) {
      /** @type {number} */
      this._maxWidth = value;
    }, set.prototype.setHeight = function(elem) {
      /** @type {number} */
      this._maxHeight = elem;
    }, set.prototype.getDiv = function() {
      return this._div;
    }, set;
  }();
  var RepositoryApi = function() {
    /**
     * @param {!Object} res
     * @return {undefined}
     */
    function me(res) {
      var MotionChangeRecommendation = this;
      if (this._instances = [], this._autoResizeTexts = [], this._scalableDivs = [], me._instance) {
        throw new Error("Error: Instantiation failed: Use DOMHelper.getInstance() instead of new.");
      }
      me._instance = this;
      /** @type {!Object} */
      this._textManager = res;
      res.addRefreshListener(function() {
        return MotionChangeRecommendation.refresh();
      });
      self.ResourceManager.getInstance().getStyleManager().addRefreshListener(function() {
        return MotionChangeRecommendation.refresh();
      });
    }
    return me.getInstance = function() {
      return me._instance;
    }, me.prototype.getTextManager = function() {
      return me._instance._textManager;
    }, me.prototype.createDiv = function(id, height, value, settings) {
      if (void 0 === id) {
        /** @type {string} */
        id = "";
      }
      if (void 0 === height) {
        /** @type {string} */
        height = "";
      }
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      if (void 0 === settings) {
        /** @type {null} */
        settings = null;
      }
      /** @type {!Element} */
      var el = document.createElement("div");
      return this.setId(el, id), this.setStyle(el, height), "" !== value && this.createElementProxy(el, value, settings), el;
    }, me.prototype.createAutoResizeText = function(getterSetter, context, eventName, bindOnce) {
      var internalCompute = new $e(getterSetter, context, eventName, bindOnce);
      this._autoResizeTexts.push(internalCompute);
    }, me.prototype.getAutoResizeTextTextByDiv = function(canCreateDiscussions) {
      /** @type {number} */
      var i = 0;
      for (; i < this._autoResizeTexts.length; i++) {
        if (this._autoResizeTexts[i].getElement() === canCreateDiscussions) {
          return this._autoResizeTexts[i];
        }
      }
      return null;
    }, me.prototype.createScalableDiv = function(data, start, len, i, eof) {
      if (void 0 === eof) {
        /** @type {boolean} */
        eof = true;
      }
      var view = new Int32Array(data, start, len, i, eof);
      this._scalableDivs.push(view);
    }, me.prototype.getScalableDiv = function(canCreateDiscussions) {
      /** @type {number} */
      var layer_i = 0;
      for (; layer_i < this._scalableDivs.length; layer_i++) {
        if (this._scalableDivs[layer_i].getDiv() === canCreateDiscussions) {
          return this._scalableDivs[layer_i];
        }
      }
      return null;
    }, me.prototype.setTextOf = function(text, name, value) {
      var msg = this.getElementProxyByDiv(text);
      if (!msg) {
        msg = this.createElementProxy(text, name, value);
      }
      msg.setText(name);
      msg.setArgs(value);
      msg.refresh(this._textManager);
    }, me.prototype.createAndAppendDiv = function(t, name, type, value, expectedCos) {
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      if (void 0 === expectedCos) {
        /** @type {null} */
        expectedCos = null;
      }
      /** @type {!Element} */
      var node = document.createElement("div");
      return void 0 !== name && this.setId(node, name), void 0 !== type && this.setStyle(node, type), "" !== value && this.createElementProxy(node, value, expectedCos), this.appendChild(t, node), node;
    }, me.prototype.createAndAppendParagraphDiv = function(a, indent, type, value, add) {
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      if (void 0 === add) {
        /** @type {null} */
        add = null;
      }
      /** @type {!Element} */
      var node = document.createElement("div");
      /** @type {!Element} */
      var val = document.createElement("p");
      return node.appendChild(val), void 0 !== indent && this.setId(node, indent), void 0 !== type && this.setStyle(node, type), "" !== value && this.createElementProxy(val, value, add), this.appendChild(a, node), node;
    }, me.prototype.createTextfield = function(ast, type, i, value, key) {
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      if (void 0 === key) {
        /** @type {string} */
        key = "";
      }
      var t = this.createAndAppendDiv(ast, type, i, key);
      return this.setText(t, value), t;
    }, me.prototype.createImage = function(id, position, type, src) {
      var value = this.createAndAppendDiv(id, position, type);
      return this.setImage(value, src), value;
    }, me.prototype.createImageFromSpriteSheet = function(wrapper, src, dataType, array, value) {
      var result = this.createImage(wrapper, src, dataType, array);
      return this.setImageFromSpriteSheet(result, array, value), result;
    }, me.prototype.setImageFromSpriteSheet = function(image, src, thumb) {
      this.setImage(image, src);
      /** @type {string} */
      image.style.backgroundPosition = -thumb.x + "px " + -thumb.y + "px";
      /** @type {string} */
      image.style.width = thumb.w + "px";
      /** @type {string} */
      image.style.height = thumb.h + "px";
    }, me.prototype.createButton = function(value, func, target) {
      /** @type {!Element} */
      var element = document.createElement("button");
      return element.type = "button", element.id = target, this.setStyle(element, func), this.appendChild(value, element), element;
    }, me.prototype.setWidth = function(n, width) {
      /** @type {string} */
      n.style.width = width + "px";
    }, me.prototype.getWidth = function(elem) {
      var e = elem.style.width;
      return e = e.length > 0 ? e.substring(0, e.length - 2) : "0", parseInt(e);
    }, me.prototype.setHeight = function(elem, value) {
      /** @type {string} */
      elem.style.height = value + "px";
    }, me.prototype.getHeight = function(elem) {
      var e = elem.style.height;
      return e = e.length > 0 ? e.substring(0, e.length - 2) : "0", parseInt(e);
    }, me.prototype.setWidthAndHeight = function(size, width, height) {
      this.setWidth(size, width);
      this.setHeight(size, height);
    }, me.prototype.setX = function(x, val) {
      /** @type {string} */
      x.style.left = val + "px";
    }, me.prototype.getX = function(elem) {
      var e = elem.style.left;
      return e = e.length > 0 ? e.substring(0, e.length - 2) : "0", parseInt(e);
    }, me.prototype.setY = function(elem, val) {
      /** @type {string} */
      elem.style.top = val + "px";
    }, me.prototype.getY = function(line) {
      var e = line.style.top;
      return e = e.length > 0 ? e.substring(0, e.length - 2) : "0", parseInt(e);
    }, me.prototype.setXAndY = function(value, id, n) {
      this.setX(value, id);
      this.setY(value, n);
    }, me.prototype.setText = function(message, text) {
      /** @type {string} */
      message.innerHTML = text;
    }, me.prototype.setTextWidthProxy = function(t, i, value) {
      if (void 0 === value) {
        /** @type {null} */
        value = null;
      }
      /** @type {string} */
      t.innerHTML = i;
      var e = this.getElementProxyByDiv(t);
      if (!e) {
        e = this.createElementProxy(t, i, value);
      }
      e.setText(i);
      e.setArgs(value);
      e.refresh(this._textManager);
    }, me.prototype.setBackgroundColor = function(s, v) {
      if ("number" == typeof v) {
        /** @type {string} */
        var b = v.toString(16);
        /** @type {number} */
        var i = 6 - b.length;
        /** @type {number} */
        var nextCreation = 0;
        for (; nextCreation < i; nextCreation++) {
          /** @type {string} */
          b = "0" + b;
        }
        /** @type {string} */
        v = "#" + b;
      } else {
        if ("string" == typeof v && "#" !== v.substr(0, 1)) {
          /** @type {string} */
          v = "#" + v;
        }
      }
      /** @type {string} */
      s.style.backgroundColor = v;
    }, me.prototype.setImage = function(elem, id) {
      /** @type {string} */
      elem.style.backgroundImage = void 0 === id ? "" : "url(" + id + ")";
    }, me.prototype.setImageOffset = function(spriteView, onMove, onUp) {
      onMove = onMove || 0;
      onUp = onUp || 0;
      /** @type {string} */
      spriteView.style.backgroundPosition = -onMove + "px " + -onUp + "px";
    }, me.prototype.setId = function(element, type) {
      if (void 0 !== type) {
        /** @type {number} */
        element.id = type;
      }
    }, me.prototype.setStyle = function(element, value) {
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      if (value.length > 0) {
        /** @type {string} */
        element.className = value;
      }
    }, me.prototype.appendChild = function(obj, parent) {
      if (void 0 !== obj && obj.appendChild) {
        obj.appendChild(parent);
      }
    }, me.prototype.resizeFontToFitDiv = function(t, p) {
      if (void 0 !== t) {
        /** @type {number} */
        t.style.fontSize = p;
        for (; this.divHasExceededMaxWidth(t, void 0, void 0, void 0) && parseInt(t.style.fontSize) > 6;) {
          /** @type {string} */
          t.style.fontSize = parseInt(t.style.fontSize) - 1 + "px";
        }
      }
    }, me.prototype.divHasExceededMaxWidth = function(tile, tileWidth, tileHeight, screenWidth) {
      if (!tileWidth) {
        /** @type {number} */
        tileWidth = 1;
      }
      if (!screenWidth) {
        /** @type {number} */
        screenWidth = 0;
      }
      var children = tile.children;
      var scaledMapWidth = tileHeight ? tile.parentNode.offsetWidth : tile.offsetWidth;
      /** @type {number} */
      var startX = 0;
      /** @type {number} */
      var i = 0;
      for (; i < children.length; i++) {
        startX = startX + children[i].offsetWidth;
      }
      return startX + screenWidth > scaledMapWidth / tileWidth;
    }, me.prototype.reorderChildrenInDiv = function(names, params) {
      /** @type {number} */
      var i = 0;
      for (; i < params.length; i++) {
        names.appendChild(document.getElementById(params[i]));
      }
    }, me.prototype.touchUpEventInTarget = function(event) {
      if ("mouseup" === event.type || "mousemove" === event.type) {
        /** @type {!Object} */
        var touch = event;
        /** @type {number} */
        var x = touch.pageX - window.pageXOffset;
        /** @type {number} */
        var y = touch.pageY - window.pageYOffset;
        /** @type {(Element|null)} */
        var target = document.elementFromPoint(x, y);
        return null !== target && event.target.id === target.id;
      }
      /** @type {!Object} */
      var orig = event;
      /** @type {number} */
      x = orig.changedTouches[0].pageX - window.pageXOffset;
      /** @type {number} */
      y = orig.changedTouches[0].pageY - window.pageYOffset;
      /** @type {(Element|null)} */
      target = document.elementFromPoint(x, y);
      return null !== target && orig.changedTouches[0].target.id === target.id;
    }, me.prototype.refresh = function() {
      /** @type {number} */
      var i = 0;
      var l = this._instances.length;
      for (; i < l; i++) {
        this._instances[i].refresh(this._textManager);
      }
    }, me.prototype.refreshDynamicallySizedTexts = function() {
    }, me.prototype.createElementProxy = function(object, data, options) {
      var instance = new Type(object, data, options, this._textManager);
      return this._instances.push(instance), instance;
    }, me.prototype.getElementProxyByDiv = function(type) {
      /** @type {number} */
      var i = 0;
      for (; i < this._instances.length; i++) {
        if (this._instances[i].getElement() === type) {
          return this._instances[i];
        }
      }
      return null;
    }, me._instance = null, me;
  }();
  var checkPixelRange = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var constructor = function(x) {
    /**
     * @param {string} options
     * @param {undefined} data
     * @param {number} count
     * @param {?} args
     * @param {?} name
     * @param {?} a
     * @return {?}
     */
    function self(options, data, count, args, name, a) {
      if (void 0 === count) {
        /** @type {string} */
        count = "";
      }
      var self = x.call(this) || this;
      return self._multipleTouches = 0, self._touchInside = false, self._htmlNode = RepositoryApi.getInstance().createAndAppendDiv(data, args, name), self._buttonImage = RepositoryApi.getInstance().createAndAppendDiv(self._htmlNode, count, "btnTransform"), self._caption = RepositoryApi.getInstance().createAndAppendDiv(self._htmlNode, a, void 0, options), self._startDelegate = function(t) {
        return self.onInputDown(t);
      }, self._moveDelegate = function(t) {
        return self.onInputMove(t);
      }, self._endDelegate = function(webcal) {
        return self.onInputUp(webcal);
      }, self.setupEventHandlers(), self._enabled = false, self._visible = false, self;
    }
    return checkPixelRange(self, x), Object.defineProperty(self.prototype, "name", {
      get : function() {
        return this._name;
      },
      set : function(name) {
        /** @type {string} */
        this._name = name;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.disableDefaultAnims = function() {
    }, self.prototype.setHitbox = function(canCreateDiscussions) {
    }, self.prototype.setPointerTarget = function(value) {
      /** @type {!Object} */
      this._hitArea = value;
    }, self.prototype.enable = function(value) {
      /** @type {boolean} */
      this._enabled = value;
      var aExpectedTarget = this._hitArea || this._htmlNode;
      if (this._enabled) {
        if (exports.SystemManager.getDeviceHandler().userAgentString.match("trident") && exports.SystemManager.getDeviceHandler().userAgentString.match("windows phone 8.1")) {
          this._htmlNode.children[0].classList.remove("btnDisabled");
          if (this._htmlNode.children[0].firstElementChild) {
            this._htmlNode.children[0].firstElementChild.classList.remove("btnDisabled");
          }
        } else {
          /** @type {string} */
          this._htmlNode.style.opacity = "1";
        }
        aExpectedTarget.addEventListener(this._downEvent, this._startDelegate, false);
        aExpectedTarget.addEventListener(this._moveEvent, this._moveDelegate, false);
        aExpectedTarget.addEventListener(this._upEvent, this._endDelegate, false);
      } else {
        if (exports.SystemManager.getDeviceHandler().userAgentString.match("trident") && exports.SystemManager.getDeviceHandler().userAgentString.match("windows phone 8.1")) {
          this._htmlNode.children[0].classList.add("btnDisabled");
          if (this._htmlNode.children[0].firstElementChild) {
            this._htmlNode.children[0].firstElementChild.classList.add("btnDisabled");
          }
        } else {
          /** @type {string} */
          this._htmlNode.style.opacity = "0.5";
        }
        aExpectedTarget.removeEventListener(this._downEvent, this._startDelegate, false);
        aExpectedTarget.removeEventListener(this._moveEvent, this._moveDelegate, false);
        aExpectedTarget.removeEventListener(this._upEvent, this._endDelegate, false);
      }
    }, self.prototype.isEnabled = function() {
      return this._enabled;
    }, self.prototype.select = function(e) {
      if (e) {
        this._buttonImage.classList.add("selected");
      } else {
        this._buttonImage.classList.remove("selected");
      }
    }, self.prototype.isSelected = function() {
      return false;
    }, self.prototype.getType = function() {
      return self.ComponentType.BUTTON;
    }, self.prototype.bindNode = function(object) {
    }, self.prototype.dispose = function() {
    }, self.prototype.setVisible = function(value) {
      /** @type {boolean} */
      this._visible = value;
      if (this._visible) {
        /** @type {string} */
        this._htmlNode.style.visibility = "";
      } else {
        /** @type {string} */
        this._htmlNode.style.visibility = "hidden";
      }
    }, self.prototype.getVisible = function() {
      return this._visible;
    }, self.prototype.setupEventHandlers = function() {
      if ("ontouchstart" in window) {
        /** @type {string} */
        this._downEvent = "touchstart";
        /** @type {string} */
        this._upEvent = "touchend";
        /** @type {string} */
        this._moveEvent = "touchmove";
        this._target = this._htmlNode;
      } else {
        /** @type {string} */
        this._downEvent = "mousedown";
        /** @type {string} */
        this._upEvent = "mouseup";
        /** @type {string} */
        this._moveEvent = "mousemove";
        /** @type {!Window} */
        this._target = window;
      }
    }, self.prototype.onInputMove = function(event) {
      if (RepositoryApi.getInstance().touchUpEventInTarget(event)) {
        this._htmlNode.classList.add("scaleup");
        /** @type {boolean} */
        this._touchInside = true;
      } else {
        this._htmlNode.classList.remove("scaleup");
        /** @type {boolean} */
        this._touchInside = false;
      }
    }, self.prototype.onInputDown = function(event) {
      this._htmlNode.classList.add("scaleup");
      /** @type {boolean} */
      this._touchInside = true;
      if (event instanceof TouchEvent && event.touches.length > 1) {
        /** @type {number} */
        this._multipleTouches = event.touches.length;
      }
      event.preventDefault();
    }, self.prototype.onInputUp = function(event) {
      this._htmlNode.classList.remove("scaleup");
      if (this._touchInside) {
        if (this._multipleTouches > 1) {
          /** @type {number} */
          this._multipleTouches = 0;
        } else {
          this.dispatch(new self.ButtonEvent(self.ButtonEvent.CLICK));
        }
        event.preventDefault();
      }
    }, self.prototype.setX = function(x) {
      this.setXAndY(x, void 0);
    }, self.prototype.setY = function(id) {
      this.setXAndY(void 0, id);
    }, self.prototype.setXAndY = function(tx, i) {
      if (void 0 !== tx) {
        /** @type {string} */
        this._htmlNode.style.left = tx + "px";
      }
      if (void 0 !== i) {
        /** @type {string} */
        this._htmlNode.style.top = i + "px";
      }
    }, self.prototype.getDOMNode = function() {
      return this._htmlNode;
    }, self.prototype.innerCaptionAlignment = function() {
      this._buttonImage.appendChild(this._caption);
    }, self.prototype.HandleOrientationChange = function(name) {
      RepositoryApi.getInstance().setStyle(this._htmlNode, name);
      RepositoryApi.getInstance().setStyle(this._buttonImage, name);
      RepositoryApi.getInstance().setStyle(this._caption, name);
    }, self.prototype.setCaption = function(text) {
      /** @type {!Object} */
      this._caption.innerHTML = text;
    }, self.prototype.focus = function(needsMoreTime) {
    }, self.prototype.trigger = function() {
    }, self;
  }(exports.EventDispatcher);
  var isChildOff = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ZmPrefAccount = function(parent) {
    /**
     * @param {number} name
     * @param {number} actions
     * @return {?}
     */
    function self(name, actions) {
      var self = parent.call(this) || this;
      return self._enabled = true, self._checked = false, self._startState = false, self._root = document.createElement("div"), self._background = document.createElement("div"), self._thumb = document.createElement("div"), self._visible = true, self._root.className = "checkbox_root", void 0 !== actions && (self._icon = document.createElement("div"), self._icon.classList.add("checkbox_icon"), self._icon.classList.add(actions), self._root.appendChild(self._icon)), void 0 !== name && (self._text = RepositoryApi.getInstance().createDiv("", 
      "checkbox_text", name), self._root.appendChild(self._text), self._text.innerHTML = name), self._root.appendChild(self._background), self._background.appendChild(self._thumb), self._root.style.position = "absolute", self.setupImages(), self._inputMoveDelegate = function(t) {
        return self.onInputMove(t);
      }, self._inputUpDelegate = function(webcal) {
        return self.onInputUp(webcal);
      }, self.setupEventHandlers(), self._bWantToToggle = false, self._startDragPoint = {
        x : 0,
        y : 0
      }, self._lastDragPoint = {
        x : 0,
        y : 0
      }, self.check(false), self.setXAndY(0, 0), self;
    }
    return isChildOff(self, parent), Object.defineProperty(self.prototype, "name", {
      get : function() {
        return this._name;
      },
      set : function(name) {
        /** @type {string} */
        this._name = name;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.disableDefaultAnims = function() {
    }, self.prototype.setHitbox = function(canCreateDiscussions) {
    }, self.prototype.enable = function(value) {
      /** @type {boolean} */
      this._enabled = value;
      if (this._enabled) {
        /** @type {string} */
        this._root.style.filter = "none";
        /** @type {string} */
        this._root.style.webkitFilter = "none";
      } else {
        /** @type {string} */
        this._root.style.filter = "grayscale(100%)";
        /** @type {string} */
        this._root.style.webkitFilter = "grayscale(100%)";
      }
    }, self.prototype.check = function(state) {
      /** @type {boolean} */
      this._checked = state;
      /** @type {boolean} */
      this._startState = state;
      this.setCssFinalState();
    }, self.prototype.show = function(x) {
      /** @type {string} */
      this._root.style.display = x ? "" : "none";
    }, self.prototype.setCssFinalState = function() {
      if (this.isChecked()) {
        /** @type {string} */
        this._background.className = "checkbox_background_on";
        /** @type {string} */
        this._thumb.className = "checkbox_thumb_on";
        /** @type {string} */
        this._thumb.style.left = "";
      } else {
        /** @type {string} */
        this._background.className = "checkbox_background_off";
        /** @type {string} */
        this._thumb.className = "checkbox_thumb_off";
        /** @type {string} */
        this._thumb.style.left = "";
      }
    }, self.prototype.setCssInternalState = function() {
      var t;
      var sampleJson = this._background.getClientRects();
      if (sampleJson.length > 0 && (t = sampleJson[0]), void 0 !== t) {
        /** @type {number} */
        var n = Math.min(Math.max(0, this._lastDragPoint.x - t.left) / t.width, 1);
        /** @type {number} */
        var default_favicon = -1 * (1 - n) + 3.9 * n;
        /** @type {string} */
        this._thumb.className = "checkbox_thumb_internal";
        /** @type {string} */
        this._thumb.style.left = default_favicon.toString() + "vw";
      }
    }, self.prototype.isChecked = function() {
      return this._checked;
    }, self.prototype.isEnabled = function() {
      return this._enabled;
    }, self.prototype.select = function(data) {
      this.check(data);
    }, self.prototype.isSelected = function() {
      return this.isChecked();
    }, self.prototype.getType = function() {
      return self.ComponentType.BUTTON;
    }, self.prototype.bindNode = function(object) {
    }, self.prototype.dispose = function() {
    }, self.prototype.setupImages = function() {
      this.check(this._checked);
    }, self.prototype.setupEventHandlers = function() {
      var behaviour = this;
      if ("ontouchstart" in window) {
        /** @type {string} */
        this._inputDownEvent = "touchstart";
        /** @type {string} */
        this._inputUpEvent = "touchend";
        /** @type {string} */
        this._inputMoveEvent = "touchmove";
        this._inputTarget = this._background;
      } else {
        /** @type {string} */
        this._inputDownEvent = "mousedown";
        /** @type {string} */
        this._inputUpEvent = "mouseup";
        /** @type {string} */
        this._inputMoveEvent = "mousemove";
        /** @type {!Window} */
        this._inputTarget = window;
      }
      this._background.addEventListener(this._inputDownEvent, function(connection) {
        return behaviour.onInputDown(connection);
      });
    }, self.prototype.onInputMove = function(event) {
      if (this.isEnabled()) {
        var newX;
        var newY;
        if ("mousedown" === event.type || "mousemove" === event.type) {
          /** @type {!Event} */
          var e = event;
          newX = e.pageX;
          newY = e.pageY;
        } else {
          /** @type {!Event} */
          var orig = event;
          if (orig.touches && orig.touches.length > 0) {
            var e = orig.touches[0];
            newX = e.pageX;
            newY = e.pageY;
          }
        }
        this._lastDragPoint.x = newX;
        this._lastDragPoint.y = newY;
        if (newX > this._startDragPoint.x + self.DRAG_BUFFER) {
          /** @type {boolean} */
          this._bWantToToggle = false;
        } else {
          if (newX < this._startDragPoint.x - self.DRAG_BUFFER) {
            /** @type {boolean} */
            this._bWantToToggle = false;
          }
        }
        this.setCssInternalState();
        event.preventDefault();
        event.stopPropagation();
        this.updateMaxSwipeDistance();
      }
    }, self.prototype.onInputDown = function(e) {
      if (this.isEnabled()) {
        var x;
        var y;
        if ("mousedown" === e.type || "mousemove" === e.type) {
          /** @type {!Event} */
          var event = e;
          x = event.pageX;
          y = event.pageY;
        } else {
          /** @type {!Event} */
          var evt = e;
          if (evt.touches && evt.touches.length > 0) {
            var event = evt.touches[0];
            x = event.pageX;
            y = event.pageY;
          }
        }
        /** @type {boolean} */
        this._bWantToToggle = true;
        this._lastDragPoint.x = this._startDragPoint.x = x;
        this._lastDragPoint.y = this._startDragPoint.y = y;
        /** @type {number} */
        this._tapBeginTime = Date.now();
        this._inputTarget.addEventListener(this._inputMoveEvent, this._inputMoveDelegate);
        this._inputTarget.addEventListener(this._inputUpEvent, this._inputUpDelegate);
        /** @type {number} */
        this._maxSwipeDistance = 0;
        e.preventDefault();
        e.stopPropagation();
        this._startState = this._checked;
      }
    }, self.prototype.onInputUp = function(event) {
      if (this.isEnabled()) {
        var position;
        var positions_in_group = this._background.getClientRects();
        if (positions_in_group.length > 0 && (position = positions_in_group[0]), this._bWantToToggle) {
          if (void 0 !== position) {
            /** @type {number} */
            var delta = (this._lastDragPoint.x >= position.left - self.DRAG_BUFFER && (this._lastDragPoint.x, position.right, self.DRAG_BUFFER), this._lastDragPoint.y >= position.top - self.DRAG_HEIGHT && (this._lastDragPoint.y, position.bottom, self.DRAG_HEIGHT), position.width * self.SWIPE_LIMIT);
            var s = this.isChecked() && this._lastDragPoint.x <= this._startDragPoint.x + delta || !this.isChecked() && this._lastDragPoint.x >= this._startDragPoint.x - delta;
            if (s) {
              /** @type {number} */
              var a = Math.min(Math.max(0, this._lastDragPoint.x - position.left) / position.width, 1);
              if (a < 0.5 && this.isChecked() || a > 0.5 && !this.isChecked() || this.isTapped()) {
                this.toggle();
                this.dispatch(new self.ButtonEvent(self.ButtonEvent.CLICK));
              }
            }
          } else {
            this.toggle();
            this.dispatch(new self.ButtonEvent(self.ButtonEvent.CLICK));
          }
        }
        this.setCssFinalState();
        /** @type {boolean} */
        this._bWantToToggle = false;
        this._inputTarget.removeEventListener(this._inputMoveEvent, this._inputMoveDelegate);
        this._inputTarget.removeEventListener(this._inputUpEvent, this._inputUpDelegate);
      }
    }, self.prototype.setX = function(x) {
      this.setXAndY(x, void 0);
    }, self.prototype.setY = function(id) {
      this.setXAndY(void 0, id);
    }, self.prototype.setXAndY = function(tx, i) {
      if (void 0 !== tx) {
        /** @type {string} */
        this._root.style.left = tx + "px";
      }
      if (void 0 !== i) {
        /** @type {string} */
        this._root.style.top = i + "px";
      }
    }, self.prototype.toggle = function() {
      this.check(!this._checked);
    }, self.prototype.getEnabled = function() {
      return this._enabled;
    }, self.prototype.getDOMNode = function() {
      return this._root;
    }, self.prototype.setFontSize = function(size) {
      /** @type {string} */
      this._text.style.fontSize = size + "px";
    }, self.prototype.checkFontSizeAndSetWidth = function(currentValue) {
      return void 0 !== currentValue ? (this._root.style.width = currentValue + "px", this._text && (this._text.style.fontSize = ""), this.checkText(currentValue)) : -1;
    }, self.prototype.getContentWidth = function(context) {
      if (void 0 === context) {
        /** @type {boolean} */
        context = true;
      }
      var totalWidth = this._background.clientWidth;
      return this._icon && (totalWidth = totalWidth + this._icon.clientWidth), this._text && context && (totalWidth = totalWidth + this._text.clientWidth), totalWidth;
    }, self.prototype.reset = function() {
      this.check(this._startState);
      this._inputTarget.removeEventListener(this._inputMoveEvent, this._inputMoveDelegate);
      this._inputTarget.removeEventListener(this._inputUpEvent, this._inputUpDelegate);
    }, self.prototype.setVisible = function(value) {
      /** @type {boolean} */
      this._visible = value;
      if (this._visible) {
        /** @type {string} */
        this._root.style.display = "";
      } else {
        /** @type {string} */
        this._root.style.display = "none";
      }
    }, self.prototype.focus = function() {
    }, self.prototype.trigger = function() {
    }, self.prototype.updateMaxSwipeDistance = function() {
      /** @type {number} */
      var t = Math.abs(this._lastDragPoint.x - this._startDragPoint.x);
      if (t > this._maxSwipeDistance) {
        /** @type {number} */
        this._maxSwipeDistance = t;
      }
    }, self.prototype.isInSwipeMode = function() {
      var wordsByLines = this._background.getClientRects();
      var height = wordsByLines.length > 0 ? wordsByLines[0].width : 0;
      return this._maxSwipeDistance / height > self.SWIPE_LIMIT;
    }, self.prototype.isTapped = function() {
      /** @type {boolean} */
      var hasDataToSync = !this.isInSwipeMode();
      /** @type {number} */
      var value = Date.now();
      /** @type {boolean} */
      var hasAttempts = value - this._tapBeginTime < self.TAP_TIME_LIMIT;
      return hasDataToSync = hasDataToSync || hasAttempts;
    }, self.prototype.checkText = function(url) {
      if (this._text) {
        /** @type {number} */
        var ps = this._text.clientWidth - this.getContentWidth(false);
        return Number(window.getComputedStyle(this._text).fontSize.replace("px", "")) * (0.6 * url / ps);
      }
    }, self.DRAG_BUFFER = 1500, self.DRAG_HEIGHT = 50, self.ROOT_HEIGHT = 40, self.SWIPE_LIMIT = 0.1, self.TAP_TIME_LIMIT = 500, self;
  }(exports.EventDispatcher);
  var componentPlugin = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Template = function(self) {
    /**
     * @param {?} settings
     * @param {?} url
     * @param {number} image
     * @param {?} meta
     * @param {?} name
     * @param {?} data
     * @param {number} path
     * @param {number} version
     * @return {?}
     */
    function Font(settings, url, image, meta, name, data, path, version) {
      if (void 0 === image) {
        /** @type {string} */
        image = "";
      }
      var that = self.call(this, settings, url, image, meta, name, data) || this;
      return that._htmlNode.classList.remove(name), that._buttonImage.classList.add(name), that._captionScale = path || 0.8, that._fontSize = version || 2.3, RepositoryApi.getInstance().createAutoResizeText(that._caption, that._htmlNode, that._captionScale, that._fontSize), that;
    }
    return componentPlugin(Font, self), Font.prototype.setVisible = function(value) {
      self.prototype.setVisible.call(this, value);
      if (this.getVisible()) {
        /** @type {string} */
        this.getDOMNode().style.display = "";
      } else {
        /** @type {string} */
        this.getDOMNode().style.display = "none";
      }
      this.adjustCaptionSize();
    }, Font.prototype.HandleOrientationChange = function(src) {
      if ("ls" === src) {
        this._htmlNode.classList.add("ls");
        this._htmlNode.classList.remove("pt");
      } else {
        this._htmlNode.classList.add("pt");
        this._htmlNode.classList.remove("ls");
      }
      this.adjustCaptionSize();
    }, Font.prototype.addScalableDiv = function(t) {
      this._buttonImage.appendChild(t);
    }, Font.prototype.adjustCaptionSize = function() {
      var MotionChangeRecommendation = RepositoryApi.getInstance().getAutoResizeTextTextByDiv(this._caption);
      if (MotionChangeRecommendation) {
        MotionChangeRecommendation.refresh();
      }
    }, Font;
  }(constructor);
  var destnode = function() {
    /**
     * @return {undefined}
     */
    function config() {
    }
    return config.EASE_LINEAR = "linear", config;
  }();
  var clearClassCycle = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var outgoing = {
    current_value : {
      right_mode_bg_offset : -30,
      left_mode_touch_width : 80,
      hz_mode_touch_top : -25,
      vertical_animation_offset : 30,
      horizontal_animation_offset : -8,
      arrow_animation_width : 6,
      arrow_normal_width : 20,
      vertical_padding_right_calc : 5,
      vertical_padding_right_normal : 10,
      arrow_horizontal_up_position : -0.5,
      arrow_vertcal_up_position : -4.7,
      arrow_down_position : -0.5
    },
    with_caption : {
      ls : {
        left_value_offset : 0,
        slider_offset : 0,
        slider_width : 50
      },
      pt : {
        left_value_offset : 0,
        slider_offset : 0,
        slider_width : 70
      }
    },
    without_caption : {
      ls : {
        left_value_offset : 3,
        slider_offset : 0,
        slider_width : 65
      },
      pt : {
        left_value_offset : 5,
        slider_offset : 9,
        slider_width : 75
      }
    },
    vertical_touch_point_offset : 0,
    left_right_value_scale_padding : 0,
    default_min_width : 48,
    default_max_width : 150
  };
  var Circle = function(name) {
    /**
     * @param {string} target
     * @param {undefined} settings
     * @param {!Object} id
     * @param {!Array} callback
     * @return {?}
     */
    function Slider(target, settings, id, callback) {
      if (void 0 === callback) {
        /** @type {boolean} */
        callback = false;
      }
      var api = name.call(this) || this;
      /** @type {number} */
      api._currentValueMinWidth = outgoing.default_min_width;
      /** @type {number} */
      api._currentValueMaxWidth = outgoing.default_max_width;
      /** @type {number} */
      api._currentValueCurrentWidth = api._currentValueMinWidth;
      /** @type {number} */
      api._verticalModeAnimationOffset = 0;
      /** @type {!Array} */
      api._captionAbove = callback;
      api.setupDivs(target, settings);
      /** @type {boolean} */
      var hasTouch = "ontouchstart" in window;
      /** @type {string} */
      api._inputDownEvent = hasTouch ? "touchstart" : "mousedown";
      /** @type {string} */
      api._inputMoveEvent = hasTouch ? "touchmove" : "mousemove";
      /** @type {string} */
      api._inputUpEvent = hasTouch ? "touchend" : "mouseup";
      /**
       * @param {!Event} event
       * @return {?}
       */
      api._inputDownDelegate = function(event) {
        return api.onInputDown(event);
      };
      /**
       * @param {!Event} event
       * @return {?}
       */
      api._inputMoveDelegate = function(event) {
        return api.onInputMove(event);
      };
      /**
       * @param {!Event} event
       * @return {?}
       */
      api._inputUpDelegate = function(event) {
        return api.onInputUp(event);
      };
      api.setupEventHandlers();
      api.setupImages();
      /** @type {boolean} */
      api._unselectedMode = false;
      /** @type {boolean} */
      api._lockedMode = false;
      /** @type {number} */
      api._currentAlpha = 0.5;
      /** @type {boolean} */
      api._useArrayValues = true;
      api.setValueArray(id);
      api.setSmoothSnaps(false);
      api.setEaseType(destnode.EASE_LINEAR);
      /** @type {boolean} */
      api._verticalMode = false;
      api.setRightMode(false);
      api.updateSlider(0.5);
      /** @type {number} */
      api._startAlpha = 0.5;
      api.updateLeftAndRightValue();
      /** @type {boolean} */
      api._isInputDown = false;
      /** @type {boolean} */
      api._needToNotify = true;
      var self = exports.SystemManager.getDeviceHandler();
      return self && (self.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return api.handleOrientationChange();
      }), self.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return api.handleOrientationChange();
      })), api;
    }
    return clearClassCycle(Slider, name), Slider.prototype.setValueRange = function(limits, max, step) {
      /** @type {boolean} */
      this._useArrayValues = false;
      this.setLimits(limits, max, step);
    }, Slider.prototype.setValueArray = function(t) {
      if (!(t.length < 1)) {
        /** @type {boolean} */
        this._useArrayValues = !this.isItemStepUniform(t);
        this._valueArray = this._useArrayValues ? t : null;
        this.setLimits(t[0], t[t.length - 1], this._useArrayValues ? 0 : t[1] - t[0]);
      }
    }, Slider.prototype.setUnselectedMode = function(a22) {
      /** @type {boolean} */
      this._unselectedMode = a22;
    }, Slider.prototype.getType = function() {
      return self.ComponentType.BUTTON;
    }, Slider.prototype.bindNode = function(object) {
    }, Slider.prototype.dispose = function() {
    }, Slider.prototype.setCaption = function(content, isError) {
      if (void 0 === isError) {
        /** @type {string} */
        isError = "";
      }
      RepositoryApi.getInstance().setTextOf(this._caption, content, isError);
    }, Slider.prototype.getCaption = function() {
      return this._caption;
    }, Slider.prototype.setEaseType = function(canCreateDiscussions) {
      this._handle.style.transitionTimingFunction = canCreateDiscussions;
      this._currentValueBase.style.transitionTimingFunction = canCreateDiscussions;
      this._backgroundFill.style.transitionTimingFunction = canCreateDiscussions;
    }, Slider.prototype.setSmoothSnaps = function(addedRenderer) {
      if (addedRenderer) {
        /** @type {string} */
        this._handle.style.transitionProperty = "margin";
        /** @type {string} */
        this._handle.style.transitionDuration = "0.15s";
        /** @type {string} */
        this._currentValueBase.style.transition = "width 0.25s, top 0.25s, margin 0.15s";
        /** @type {string} */
        this._backgroundFill.style.transitionProperty = "height, width";
        /** @type {string} */
        this._backgroundFill.style.transitionDuration = "0.15s";
      } else {
        /** @type {string} */
        this._handle.style.transitionProperty = "";
        /** @type {string} */
        this._handle.style.transitionDuration = "";
        /** @type {string} */
        this._currentValueBase.style.transitionProperty = "";
        /** @type {string} */
        this._currentValueBase.style.transitionDuration = "";
        /** @type {string} */
        this._backgroundFill.style.transitionProperty = "";
        /** @type {string} */
        this._backgroundFill.style.transitionDuration = "";
      }
      /** @type {boolean} */
      this._smoothSnaps = addedRenderer;
    }, Slider.prototype.setRightMode = function(addedRenderer) {
      /** @type {boolean} */
      this._rightMode = addedRenderer;
      this.setVerticalMode(this._verticalMode);
    }, Slider.prototype.setValueIndex = function(a22) {
      if (this.getCurrentValueIndex() !== a22) {
        /** @type {number} */
        var e = a22 / (this.getNumValues() - 1);
        /** @type {number} */
        e = Math.min(Math.max(e, 0), 1);
        /** @type {boolean} */
        this._needToNotify = false;
        this.updateSlider(e);
        /** @type {number} */
        this._startAlpha = e;
      }
    }, Slider.prototype.setValue = function(num) {
      if (this.getCurrentValue() !== num) {
        var e = this.getIndexOfValue(num);
        if (e > -1) {
          /** @type {boolean} */
          this._needToNotify = false;
          this.setValueIndex(e);
        }
      }
    }, Slider.prototype.getMinValue = function() {
      return this._minValue;
    }, Slider.prototype.getMaxValue = function() {
      return this._maxValue;
    }, Slider.prototype.setMinValue = function(val) {
      var checked = void 0 === this._valueFormat ? val : self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(val, this._valueFormat);
      var attributeTemplate = checked.toString();
      if (this._unselectedMode && 0 === parseInt(val.toString())) {
        /** @type {string} */
        attributeTemplate = "-";
      }
      this._leftValue.innerHTML = attributeTemplate;
    }, Slider.prototype.setMaxValue = function(val) {
      var checked = void 0 === this._valueFormat ? val : self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(val, this._valueFormat);
      this._rightValue.innerHTML = checked.toString();
    }, Slider.prototype.getCurrentValueIndex = function() {
      return this.getValueIndex(this.getCurrentAlpha());
    }, Slider.prototype.getCurrentValue = function() {
      return this.getValue(this.getCurrentValueIndex());
    }, Slider.prototype.getCurrentAlpha = function() {
      return this._currentAlpha;
    }, Slider.prototype.setCurrentAlpha = function(alpha) {
      /** @type {number} */
      this._currentAlpha = alpha;
    }, Slider.prototype.getValueIndex = function(x) {
      var i;
      /** @type {number} */
      var depth = this.getNumValues() - 1;
      if (0 === depth) {
        /** @type {number} */
        i = 0;
      } else {
        /** @type {number} */
        var ratio = 1 / depth;
        /** @type {number} */
        i = Math.floor((x + 0.5 * ratio) / ratio);
      }
      return i;
    }, Slider.prototype.getValue = function(n) {
      return this._useArrayValues ? n < this.getNumValues() && n >= 0 ? this._valueArray[n] : void 0 : this._minValue + this._stepSize * n;
    }, Slider.prototype.getValueByAlpha = function(str) {
      return this.getValue(this.getValueIndex(str));
    }, Slider.prototype.getNumValues = function() {
      return this._useArrayValues ? this._valueArray.length : (this._maxValue - this._minValue) / this._stepSize + 1;
    }, Slider.prototype.setVerticalMode = function(isVertical) {
      /** @type {string} */
      var type = isVertical ? "vertical" : "horizontal";
      /** @type {string} */
      this._root.className = type + " slider_root";
      if (this._captionAbove) {
        this._root.classList.add("captionAbove");
      }
      /** @type {string} */
      this._leftValue.className = type + " slider_left_value";
      /** @type {string} */
      this._slider.className = type + " slider";
      /** @type {string} */
      this._hitArea.className = type + " slider_hitarea";
      /** @type {string} */
      this._background.className = type + " slider_background";
      /** @type {string} */
      this._backgroundFill.className = type + " slider_fill";
      /** @type {string} */
      this._handle.className = " slider_handle";
      /** @type {string} */
      this._rightValue.className = type + " slider_right_value";
      /** @type {string} */
      this._caption.className = type + " slider_caption";
      /** @type {string} */
      this._currentValueBase.className = type + (this._rightMode ? " right" : "");
      if (isVertical) {
        this._root.appendChild(this._row2);
        this._row2.appendChild(this._slider);
        if (this._verticalMode && this._rightMode) {
          this._leftValue.className += " right_mode";
          this._rightValue.className += " right_mode";
        }
      } else {
        this._root.appendChild(this._leftValue);
        this._root.appendChild(this._slider);
        this._root.appendChild(this._rightValue);
        if (this._root.contains(this._row1)) {
          this._root.removeChild(this._row1);
        }
        if (this._root.contains(this._row2)) {
          this._root.removeChild(this._row2);
        }
        if (this._root.contains(this._row3)) {
          this._root.removeChild(this._row3);
        }
      }
      /** @type {string} */
      this._handle.style.marginTop = "";
      /** @type {string} */
      this._currentValueBase.style.top = "";
      /** @type {string} */
      this._backgroundFill.style.height = "";
      /** @type {string} */
      this._handle.style.marginLeft = "";
      /** @type {string} */
      this._currentValueBase.style.marginLeft = "";
      /** @type {string} */
      this._backgroundFill.style.width = "";
      /** @type {boolean} */
      this._verticalMode = isVertical;
      this.updateVisuals();
      this.updateLeftAndRightValue();
      this.updateSlider(this.getCurrentAlpha());
    }, Slider.prototype.onInputUp = function(event) {
      this._startAlpha = this.getCurrentAlpha();
      this.setToDefaultState();
    }, Slider.prototype.enable = function(value) {
      /** @type {boolean} */
      var e = !value || 1 === this.getNumValues();
      if (this._lockedMode !== e) {
        if (e) {
          this.removeEventHandlers();
        } else {
          this.setupEventHandlers();
          this.setVerticalMode(this._verticalMode);
        }
        /** @type {boolean} */
        this._lockedMode = e;
        this.updateVisuals();
        this.updateSlider(this.getCurrentAlpha());
      }
    }, Slider.prototype.isEnabled = function() {
      return this._lockedMode;
    }, Slider.prototype.updateVisuals = function() {
      if (this._lockedMode) {
        if (this._verticalMode) {
          /** @type {string} */
          this._currentValueArrow.style.borderTopColor = "#ccc";
          /** @type {string} */
          this._currentValueArrow.style.borderTopStyle = "solid";
          /** @type {string} */
          this._currentValueBase.style.backgroundColor = "#ccc";
          /** @type {string} */
          this._handle.className = "slider_handle_disabled";
          /** @type {string} */
          this._backgroundFill.style.background = "#fff";
        } else {
          /** @type {string} */
          this._currentValueArrow.style.borderTopColor = "#ccc";
          /** @type {string} */
          this._currentValueArrow.style.borderTopStyle = "solid";
          /** @type {string} */
          this._currentValueBase.style.backgroundColor = "#ccc";
          /** @type {string} */
          this._handle.style.backgroundColor = "#ccc";
          /** @type {string} */
          this._backgroundFill.style.background = "#fff";
        }
      } else {
        /** @type {string} */
        this._backgroundFill.style.background = "";
        /** @type {string} */
        this._background.style.background = "";
        if (this._verticalMode) {
          /** @type {string} */
          this._currentValueArrow.style.borderTopColor = "#fc0";
          /** @type {string} */
          this._currentValueArrow.style.borderTopStyle = "solid";
          /** @type {string} */
          this._currentValueBase.style.backgroundColor = "#fc0";
          /** @type {string} */
          this._handle.className = "slider_handle";
          /** @type {string} */
          this._backgroundFill.style.background = "#fc0";
        } else {
          /** @type {string} */
          this._currentValueArrow.style.borderTopColor = "#fc0";
          /** @type {string} */
          this._currentValueArrow.style.borderTopStyle = "solid";
          /** @type {string} */
          this._currentValueBase.style.backgroundColor = "#fc0";
          /** @type {string} */
          this._handle.style.backgroundColor = "#fc0";
          /** @type {string} */
          this._backgroundFill.style.background = "#fc0";
        }
      }
    }, Slider.prototype.updateSlider = function(o) {
      var i = this.getValueIndex(o);
      var k = this.getCurrentValueIndex();
      /** @type {number} */
      var n = this.getNumValues() - 1;
      /** @type {number} */
      var t = 1;
      if (0 !== n) {
        /** @type {number} */
        t = i / (this.getNumValues() - 1);
      }
      this.hideMinMaxValues(o);
      if (this._verticalMode) {
        this.updateSliderVertical(t, i);
      } else {
        this.updateSliderHorizontal(t, i);
      }
      this.setCurrentAlpha(t);
      if (i !== k && this._needToNotify) {
        this.dispatch(new self.SliderEvent(self.SliderEvent.UPDATE, o, this.getCurrentValueIndex(), i - k, this.getCurrentValue()));
      }
      this.switchZeroState();
      /** @type {boolean} */
      this._needToNotify = true;
    }, Slider.prototype.getDOMNode = function() {
      return this._root;
    }, Slider.prototype.show = function(x) {
      /** @type {string} */
      this._root.style.display = x ? "" : "none";
    }, Slider.prototype.handleOrientationChange = function() {
      this.updateSlider(this._currentAlpha);
    }, Slider.prototype.setValid = function(showPinIncorrect) {
      if (this._lockedMode) {
        return void this.updateVisuals();
      }
      /** @type {boolean} */
      this._isValid = showPinIncorrect;
      if (showPinIncorrect) {
        /** @type {string} */
        this._currentValueBase.style.backgroundColor = "#FFCC00";
        /** @type {string} */
        this._currentValueArrow.style.borderTopColor = "#FFCC00";
        /** @type {string} */
        this._handle.style.backgroundColor = "#FFCC00";
      } else {
        /** @type {string} */
        this._currentValueBase.style.backgroundColor = "red";
        /** @type {string} */
        this._currentValueArrow.style.borderTopColor = "red";
        /** @type {string} */
        this._handle.style.backgroundColor = "red";
      }
    }, Slider.prototype.isValid = function() {
      return this._isValid;
    }, Slider.prototype.setSlider = function(val, e) {
      if (void 0 === e) {
        /** @type {number} */
        e = 0;
      }
      this.updateSliderHorizontal(val, e);
      this.setCurrentValueText(e);
    }, Slider.prototype.setValueFormat = function(diff) {
      /** @type {number} */
      this._valueFormat = diff;
      this.updateLeftAndRightValue();
    }, Slider.prototype.reset = function() {
      this.updateSlider(this._startAlpha);
      this.setToDefaultState();
    }, Slider.prototype.setLimits = function(limits, max, data) {
      /** @type {number} */
      this._minValue = limits;
      this._maxValue = max;
      /** @type {number} */
      this._stepSize = data;
      this.updateSlider(this.getCurrentAlpha());
      this.setVerticalMode(this._verticalMode);
    }, Slider.prototype.isItemStepUniform = function(a) {
      if (a.length < 2) {
        return false;
      }
      /** @type {number} */
      var e = a[1] - a[0];
      /** @type {number} */
      var i = 0;
      for (; i < a.length - 1; i++) {
        if (a[i + 1] - a[i] !== e) {
          return false;
        }
      }
      return true;
    }, Slider.prototype.getIndexOfValue = function(val) {
      return val > this._maxValue ? this.getIndexOfValue(this._maxValue) : this._useArrayValues ? this._valueArray.indexOf(val) : Math.floor((val - this._minValue) / this._stepSize);
    }, Slider.prototype.setToDefaultState = function() {
      /** @type {string} */
      this._currentValueBase.style.top = "";
      /** @type {string} */
      this._currentValueArrow.style.borderTopWidth = "";
      /** @type {string} */
      this._currentValueArrow.style.borderLeftWidth = "";
      /** @type {string} */
      this._currentValueArrow.style.borderRightWidth = "";
      /** @type {number} */
      this._verticalModeAnimationOffset = 0;
      this._root.removeEventListener(this._inputMoveEvent, this._inputMoveDelegate, false);
      window.removeEventListener(this._inputUpEvent, this._inputUpDelegate, false);
      /** @type {boolean} */
      this._isInputDown = false;
    }, Slider.prototype.setupEventHandlers = function() {
      this._handle.addEventListener(this._inputDownEvent, this._inputDownDelegate, false);
      this._hitArea.addEventListener(this._inputDownEvent, this._inputDownDelegate, false);
    }, Slider.prototype.removeEventHandlers = function() {
      this._handle.removeEventListener(this._inputDownEvent, this._inputDownDelegate, false);
      this._hitArea.removeEventListener(this._inputDownEvent, this._inputDownDelegate, false);
      this._hitArea.removeEventListener(this._inputMoveEvent, this._inputMoveDelegate, false);
      window.removeEventListener(this._inputUpEvent, this._inputUpDelegate, false);
    }, Slider.prototype.setupImages = function() {
    }, Slider.prototype.setupDivs = function(parent, key) {
      if (void 0 === key) {
        /** @type {string} */
        key = "";
      }
      /** @type {!Element} */
      this._root = document.createElement("div");
      this._caption = RepositoryApi.getInstance().createDiv("", "", parent, key);
      this._root.appendChild(this._caption);
      /** @type {!Element} */
      this._leftValue = document.createElement("div");
      this._root.appendChild(this._leftValue);
      /** @type {!Element} */
      this._slider = document.createElement("div");
      this._root.appendChild(this._slider);
      /** @type {!Element} */
      this._hitArea = document.createElement("div");
      this._slider.appendChild(this._hitArea);
      /** @type {!Element} */
      this._background = document.createElement("div");
      this._slider.appendChild(this._background);
      /** @type {!Element} */
      this._backgroundFill = document.createElement("div");
      this._background.appendChild(this._backgroundFill);
      /** @type {!Element} */
      this._handle = document.createElement("div");
      this._background.appendChild(this._handle);
      /** @type {!Element} */
      this._currentValueBase = document.createElement("div");
      /** @type {string} */
      this._currentValueBase.id = "currentvalue_base";
      this._background.appendChild(this._currentValueBase);
      /** @type {!Element} */
      this._currentValueText = document.createElement("div");
      /** @type {string} */
      this._currentValueText.id = "arrow_text";
      this._currentValueBase.appendChild(this._currentValueText);
      /** @type {!Element} */
      this._currentValueArrow = document.createElement("div");
      /** @type {string} */
      this._currentValueArrow.id = "currentvalue_arrow";
      this._currentValueBase.appendChild(this._currentValueArrow);
      /** @type {!Element} */
      this._rightValue = document.createElement("div");
      this._root.appendChild(this._rightValue);
      /** @type {!Element} */
      this._row1 = document.createElement("div");
      /** @type {string} */
      this._row1.style.display = "table-row";
      /** @type {!Element} */
      this._row2 = document.createElement("div");
      /** @type {string} */
      this._row2.style.display = "table-row";
      /** @type {!Element} */
      this._row3 = document.createElement("div");
      /** @type {string} */
      this._row3.style.display = "table-row";
      /** @type {string} */
      this._caption.style.pointerEvents = "none";
      /** @type {string} */
      this._leftValue.style.pointerEvents = "none";
      /** @type {string} */
      this._background.style.pointerEvents = "none";
      /** @type {string} */
      this._handle.style.pointerEvents = "all";
      /** @type {string} */
      this._backgroundFill.style.pointerEvents = "none";
      /** @type {string} */
      this._currentValueBase.style.pointerEvents = "none";
      /** @type {string} */
      this._currentValueText.style.pointerEvents = "none";
      /** @type {string} */
      this._currentValueArrow.style.pointerEvents = "none";
      /** @type {string} */
      this._rightValue.style.pointerEvents = "none";
      /** @type {string} */
      this._row1.style.pointerEvents = "none";
      /** @type {string} */
      this._row2.style.pointerEvents = "none";
      /** @type {string} */
      this._row3.style.pointerEvents = "none";
    }, Slider.prototype.hideMinMaxValues = function(t) {
      var textWas = this.getValueIndex(t);
      if (this._lockedMode || 1 === this.getNumValues()) {
        /** @type {string} */
        this._rightValue.style.opacity = "0";
        /** @type {string} */
        this._leftValue.style.opacity = "0";
      } else {
        if (0 === textWas) {
          if (this._verticalMode) {
            /** @type {string} */
            this._rightValue.style.opacity = "0";
            /** @type {string} */
            this._leftValue.style.opacity = "";
          } else {
            /** @type {string} */
            this._leftValue.style.opacity = "";
            /** @type {string} */
            this._rightValue.style.opacity = "";
          }
        } else {
          if (textWas === this.getNumValues() - 1) {
            if (this._verticalMode) {
              /** @type {string} */
              this._leftValue.style.opacity = "0";
              /** @type {string} */
              this._rightValue.style.opacity = "";
            } else {
              /** @type {string} */
              this._rightValue.style.opacity = "";
              /** @type {string} */
              this._leftValue.style.opacity = "";
            }
          } else {
            /** @type {string} */
            this._leftValue.style.opacity = "";
            /** @type {string} */
            this._rightValue.style.opacity = "";
          }
        }
      }
    }, Slider.prototype.calculateSliderPositionVertical = function(t) {
      if ("touchstart" === t.type || "touchmove" === t.type) {
        /** @type {!Object} */
        var s = t;
        if (s.touches && s.touches.length > 0) {
          var payload = s.touches[0];
          var o = this._slider.getBoundingClientRect();
          var y = o.top;
          var scale = o.height;
          var x = payload.clientY + outgoing.vertical_touch_point_offset;
          /** @type {number} */
          var ratio = (x - y) / scale;
          /** @type {number} */
          var u = Math.min(Math.max(ratio, 0), 1);
          return u = 1 - u;
        }
      } else {
        if ("mousedown" === t.type || "mousemove" === t.type) {
          /** @type {!Object} */
          var to = t;
          o = this._slider.getBoundingClientRect();
          y = o.top;
          scale = o.height;
          /** @type {number} */
          ratio = (to.clientY - y) / scale;
          /** @type {number} */
          u = Math.min(Math.max(ratio, 0), 1);
          return u = 1 - u;
        }
      }
      return 0;
    }, Slider.prototype.calculateSliderPositionHorizontal = function(e) {
      if ("touchstart" === e.type || "touchmove" === e.type) {
        /** @type {!Object} */
        var event = e;
        if (event.touches && event.touches.length > 0) {
          var tou = event.touches[0];
          var box = this._slider.getBoundingClientRect();
          var left = box.left;
          var width = box.width;
          var x = tou.clientX;
          /** @type {number} */
          var height = (x - left) / width;
          /** @type {number} */
          var u = Math.min(Math.max(height, 0), 1);
          return u;
        }
      } else {
        if ("mousedown" === e.type || "mousemove" === e.type) {
          /** @type {!Object} */
          var event = e;
          box = this._slider.getBoundingClientRect();
          left = box.left;
          width = box.width;
          /** @type {number} */
          height = (event.clientX - left) / width;
          /** @type {number} */
          u = Math.min(Math.max(height, 0), 1);
          return u;
        }
      }
      return 0;
    }, Slider.prototype.updateSliderHorizontal = function(v, s) {
      /** @type {string} */
      var played = Math.floor(100 * v) + "%";
      /** @type {string} */
      this._handle.style.left = played;
      if (this._isInputDown) {
        /** @type {string} */
        this._currentValueBase.style.top = outgoing.current_value.arrow_horizontal_up_position * exports.SystemManager.getDeviceHandler().resolveWidth() / 100 + "px";
      }
      /** @type {string} */
      this._currentValueBase.style.left = played;
      /** @type {string} */
      this._backgroundFill.style.width = played;
      this.setCurrentValueText(this.getValue(s));
    }, Slider.prototype.updateSliderVertical = function(t, i) {
      var opacity = this.getSliderSize();
      /** @type {string} */
      this._handle.style.marginTop = Math.floor((1 - t) * opacity) + "px";
      if (this._isInputDown) {
        /** @type {string} */
        this._currentValueBase.style.top = outgoing.current_value.arrow_vertcal_up_position * exports.SystemManager.getDeviceHandler().resolveWidth() / 100 + "px";
      }
      this.setCurrentValueText(this.getValue(i));
    }, Slider.prototype.getSliderSize = function() {
      var e = this._background.getClientRects()[0];
      /** @type {number} */
      var t = 0;
      return e && (this._verticalMode ? (t = e.height, t = this._background.clientHeight) : (t = e.width, t = this._background.clientWidth)), t;
    }, Slider.prototype.setCurrentValueText = function(arg) {
      var func = void 0 === this._valueFormat ? arg : self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(arg, this._valueFormat);
      if (this._verticalMode) {
        this.setCurrentTextVertical(func.toString());
      } else {
        this.setCurrentTextHorizontal(func.toString());
      }
    }, Slider.prototype.setCurrentTextVertical = function(tResult) {
      this.displayCurrentValue(tResult);
    }, Slider.prototype.setCurrentTextHorizontal = function(tResult) {
      this.displayCurrentValue(tResult);
    }, Slider.prototype.updateLeftAndRightValue = function() {
      if (this.setMinValue(this.getMinValue()), this.setMaxValue(this.getMaxValue()), this._verticalMode) {
        var a = this._leftValue.clientWidth;
        var norm = this._leftValue.scrollWidth + outgoing.left_right_value_scale_padding;
        /** @type {number} */
        var scale = a / norm;
        /** @type {number} */
        scale = Math.min(scale, 1);
        /** @type {string} */
        this._leftValue.style.transform = "scale(" + scale + ", " + scale + ")";
        /** @type {string} */
        this._leftValue.style.webkitTransform = "scale(" + scale + ", " + scale + ")";
        var x = this._rightValue.clientWidth;
        var step = this._rightValue.scrollWidth + outgoing.left_right_value_scale_padding;
        /** @type {number} */
        var n = x / step;
        /** @type {number} */
        n = Math.min(n, 1);
        /** @type {string} */
        this._rightValue.style.transform = "scale(" + n + ", " + n + ")";
        /** @type {string} */
        this._rightValue.style.webkitTransform = "scale(" + n + ", " + n + ")";
      } else {
        /** @type {string} */
        this._leftValue.style.transform = "";
        /** @type {string} */
        this._rightValue.style.transform = "";
      }
    }, Slider.prototype.switchZeroState = function() {
      if (!this._lockedMode) {
        if (0 === this.getCurrentValue() && this._unselectedMode) {
          this.displayCurrentValue("-");
        }
      }
    }, Slider.prototype.displayCurrentValue = function(t) {
      if (0 === parseInt(t) && this._unselectedMode) {
        /** @type {string} */
        t = "-";
        this.setMinValue(0);
      }
      /** @type {string} */
      this._currentValueBase.innerHTML = t;
      this._currentValueBase.appendChild(this._currentValueArrow);
      this._currentValueBase.appendChild(this._currentValueText);
      /** @type {string} */
      this._currentValueText.innerHTML = t;
    }, Slider.prototype.calculateSliderPosition = function(t) {
      return this._verticalMode ? this.calculateSliderPositionVertical(t) : this.calculateSliderPositionHorizontal(t);
    }, Slider.prototype.onInputDown = function(data) {
      if (void 0 !== data.touches) {
        if (data.touches.length > 1) {
          return;
        }
      }
      if (this._isInputDown = true, this._startAlpha = this.getCurrentAlpha(), this._verticalMode ? (this._verticalModeAnimationOffset = outgoing.current_value.vertical_animation_offset, this._currentValueBase.style.width = this._currentValueCurrentWidth + this._verticalModeAnimationOffset + "px") : (this._currentValueBase.style.top = outgoing.current_value.arrow_down_position * exports.SystemManager.getDeviceHandler().resolveWidth() / 100 + "px", this._currentValueArrow.style.borderTopWidth = outgoing.current_value.arrow_animation_width * 
      exports.SystemManager.getDeviceHandler().resolveWidth() / 100 + "px"), data.target !== this._handle) {
        var e = this.calculateSliderPosition(data);
        this.updateSlider(e);
      }
      this._root.addEventListener(this._inputMoveEvent, this._inputMoveDelegate, false);
      window.addEventListener(this._inputUpEvent, this._inputUpDelegate, false);
    }, Slider.prototype.onInputMove = function(data) {
      if (data.preventDefault(), data.stopPropagation(), void 0 !== data.touches) {
        if (data.touches.length > 1) {
          return;
        }
      }
      var e = this.calculateSliderPosition(data);
      this.updateSlider(e);
    }, Slider;
  }(exports.EventDispatcher);
  !function(ContentType) {
    /** @type {string} */
    ContentType[ContentType.NONE = 0] = "NONE";
    /** @type {string} */
    ContentType[ContentType.HORIZONTAL = 1] = "HORIZONTAL";
    /** @type {string} */
    ContentType[ContentType.VERTICAL = 2] = "VERTICAL";
  }(SymmetryType || (SymmetryType = {}));
  var ViewType;
  var DeviceOrientationCameraController = function() {
    /**
     * @param {?} val
     * @return {undefined}
     */
    function self(val) {
      var s = this;
      this._viewSwipeCallback = val;
      this._root = RepositoryApi.getInstance().createDiv("menu_view_area");
      this._root.addEventListener("touchstart", function(e) {
        return s.onTouchStart(e);
      });
      this._root.addEventListener("touchend", function(e) {
        return s.onTouchEnd(e);
      });
      this._root.addEventListener("touchmove", function(e) {
        return s.onTouchMove(e);
      });
      this._table = RepositoryApi.getInstance().createAndAppendDiv(this._root, "menu_view_area_table");
      /** @type {!Array} */
      this._views = [];
      /** @type {number} */
      this._viewIndex = 0;
      /** @type {number} */
      this._viewWidth = 0;
      /** @type {number} */
      this._viewHeight = 0;
      /** @type {number} */
      this._prevTouchX = 0;
      /** @type {number} */
      this._prevTouchY = 0;
      /** @type {number} */
      this._lastTimeStamp = 0;
      /** @type {number} */
      this._scrollX = 0;
      /** @type {number} */
      this._scrollVelocity = 0;
      this._scrollDirection = SymmetryType.NONE;
      /** @type {number} */
      this._lastTouchTime = 0;
      /** @type {boolean} */
      this._swipeEnabled = true;
    }
    return self.prototype.addView = function(view) {
      if (!view) {
        view = RepositoryApi.getInstance().createDiv();
      }
      var body = RepositoryApi.getInstance().createAndAppendDiv(this._table, void 0, "menu_view");
      return body.appendChild(view), body.style.overflowY = "auto", body.style.setProperty("-webkit-overflow-scrolling", "touch"), this._views.push(body), this.setSize(this._viewWidth, this._viewHeight), this._views.length - 1;
    }, self.prototype.enableSwipe = function(container) {
      /** @type {boolean} */
      this._swipeEnabled = container;
    }, self.prototype.gotoView = function(i, interval) {
      if (i >= 0 && i < this._views.length) {
        if (i !== this._viewIndex) {
          /** @type {number} */
          this._views[this._viewIndex].scrollTop = 0;
        }
        /** @type {number} */
        this._viewIndex = i;
        this.setScrollTransitionDuration(interval);
        this.setScrollOffset(-this._viewIndex * this._viewWidth);
      }
    }, self.prototype.setSize = function(w, h) {
      /** @type {number} */
      this._viewWidth = w;
      /** @type {number} */
      this._viewHeight = h;
      /** @type {string} */
      this._root.style.width = this._viewWidth + "px";
      /** @type {string} */
      this._root.style.height = h + "px";
      /** @type {string} */
      this._table.style.width = this._viewWidth * this._views.length + "px";
      /** @type {string} */
      this._table.style.height = h + "px";
      var nodeSelections = this._table.getElementsByClassName("menu_view");
      /** @type {number} */
      var i = 0;
      for (; i < nodeSelections.length; i++) {
        var last = nodeSelections[i];
        /** @type {string} */
        last.style.width = this._viewWidth + "px";
        /** @type {string} */
        last.style.height = this._viewHeight + "px";
      }
      this.gotoView(this._viewIndex, 0);
    }, self.prototype.getDOMNode = function() {
      return this._root;
    }, self.prototype.scroll = function(distance) {
      this.setScrollOffset(this._scrollX + distance);
    }, self.prototype.setScrollOffset = function(y) {
      /** @type {number} */
      var widestInView = -this._viewWidth * (this._views.length - 1);
      /** @type {number} */
      this._scrollX = Math.max(widestInView, Math.min(0, y));
      /** @type {string} */
      var transform = "translateX(" + this._scrollX + "px)";
      /** @type {string} */
      this._table.style.transform = transform;
      /** @type {string} */
      this._table.style.webkitTransform = transform;
    }, self.prototype.shouldScrollLeft = function(p, tolerance, count) {
      /** @type {number} */
      var i = -this._scrollX - this._viewIndex * this._viewWidth;
      /** @type {boolean} */
      var o = i < -p;
      /** @type {boolean} */
      var Post = this._scrollVelocity > tolerance && i < -count;
      return (o || Post) && this._viewIndex > 0;
    }, self.prototype.shouldScrollRight = function(n, V, key) {
      /** @type {number} */
      var x = -this._scrollX - this._viewIndex * this._viewWidth;
      /** @type {boolean} */
      var inputWin = x > n;
      /** @type {boolean} */
      var winRef = this._scrollVelocity < -V && x > key;
      return (inputWin || winRef) && this._viewIndex < this._views.length - 1;
    }, self.prototype.setScrollTransitionDuration = function(ms) {
      /** @type {string} */
      this._table.style.transition = ms + "ms";
      /** @type {string} */
      this._table.style.webkitTransition = ms + "ms";
    }, self.prototype.getScrollView = function(event) {
      /** @type {!HTMLElement} */
      var target = event;
      for (; target;) {
        if ("menu_view" === target.className) {
          return target;
        }
        target = target.parentElement;
      }
      return null;
    }, self.prototype.onTouchMove = function(event) {
      if (event.touches.length > 1 && event.preventDefault(), this._swipeEnabled) {
        var oldTouch = event.changedTouches[0];
        /** @type {number} */
        var dy = oldTouch.pageX - this._prevTouchX;
        /** @type {number} */
        var dx = oldTouch.pageY - this._prevTouchY;
        /** @type {number} */
        var scale = (event.timeStamp - this._lastTimeStamp) / 1000;
        /** @type {number} */
        this._scrollVelocity = dy / this._viewWidth / scale;
        if (this._scrollDirection === SymmetryType.NONE) {
          if (Math.abs(dy) > Math.abs(dx)) {
            this._scrollDirection = SymmetryType.HORIZONTAL;
          } else {
            this._scrollDirection = SymmetryType.VERTICAL;
          }
        }
        if (this._scrollDirection === SymmetryType.HORIZONTAL) {
          this.scroll(dy);
          event.preventDefault();
        }
        this._prevTouchX = oldTouch.pageX;
        this._prevTouchY = oldTouch.pageY;
        this._lastTimeStamp = event.timeStamp;
        event.stopPropagation();
      }
    }, self.prototype.onTouchEnd = function(event) {
      if (event.touches.length > 1 && event.preventDefault(), this._swipeEnabled) {
        /** @type {number} */
        var e = 0.1 * this._viewWidth;
        /** @type {number} */
        var n = 0.4 * this._viewWidth;
        var i = (this._scrollX, this._viewIndex, this._viewWidth, this._viewIndex);
        if (this.shouldScrollRight(n, 2, e)) {
          i++;
          this._viewSwipeCallback(this._viewIndex, i);
        } else {
          if (this.shouldScrollLeft(n, 2, e)) {
            i--;
            this._viewSwipeCallback(this._viewIndex, i);
          }
        }
        /** @type {number} */
        this._scrollVelocity = 0;
        this.gotoView(i, 300);
      }
    }, self.prototype.onTouchStart = function(e) {
      if (this._swipeEnabled) {
        /** @type {number} */
        var event = e.timeStamp - this._lastTouchTime;
        this._lastTouchTime = e.timeStamp;
        if (e.touches.length > 1 || event < 500 && event > 10) {
          e.preventDefault();
          /** @type {number} */
          this._lastTouchTime = 0;
        }
        var oldTouch = e.changedTouches[0];
        this._prevTouchX = oldTouch.pageX;
        this._prevTouchY = oldTouch.pageY;
        this._scrollDirection = SymmetryType.NONE;
        this.setScrollTransitionDuration(0);
        this._lastTimeStamp = e.timeStamp;
      }
    }, self;
  }();
  var Button = function() {
    /**
     * @param {string} text
     * @return {undefined}
     */
    function self(text) {
      this._root = RepositoryApi.getInstance().createDiv(void 0, "navbar_button");
      this._button = RepositoryApi.getInstance().createAndAppendDiv(this._root, void 0, "navbar_button", text);
      /** @type {string} */
      this._button.innerHTML = text;
      this._selectedIndicator = RepositoryApi.getInstance().createAndAppendDiv(this._root);
      this.deselect();
    }
    return self.prototype.getWidth = function() {
      return this._button.offsetWidth;
    }, self.prototype.select = function() {
      /** @type {string} */
      this._button.className = "navbar_button selected";
      /** @type {string} */
      this._selectedIndicator.className = "navbar_button_indicator";
    }, self.prototype.deselect = function() {
      /** @type {string} */
      this._button.className = "navbar_button";
      /** @type {string} */
      this._selectedIndicator.className = "";
    }, self.prototype.getDOMNode = function() {
      return this._root;
    }, self;
  }();
  var PreferenceDoesNotExistError = function() {
    /**
     * @param {!Object} showLabel
     * @param {?} initialValue
     * @return {undefined}
     */
    function init(showLabel, initialValue) {
      var s = this;
      /** @type {!Object} */
      this._buttonClickCallback = showLabel;
      this._scrollCallback = initialValue;
      this._root = RepositoryApi.getInstance().createDiv("navbar");
      this._root.addEventListener("touchstart", function(e) {
        return s.onTouchStart(e);
      });
      this._root.addEventListener("touchmove", function(e) {
        return s.onTouchMove(e);
      });
      this._buttonContainer = RepositoryApi.getInstance().createAndAppendDiv(this._root, "navbar_table");
      /** @type {!Array} */
      this._buttons = [];
      /** @type {number} */
      this._buttonIndex = 0;
      /** @type {number} */
      this._width = 0;
      /** @type {number} */
      this._prevTouchX = 0;
      /** @type {number} */
      this._scrollX = 0;
      /** @type {string} */
      this._clickEventType = "ontouchstart" in window ? "touchend" : "mouseup";
    }
    return init.prototype.setWidth = function(width) {
      /** @type {number} */
      this._width = width;
      RepositoryApi.getInstance().setWidth(this._root, width);
      this.centerButton(this._buttonIndex, 0);
    }, init.prototype.deselectAll = function() {
      /** @type {number} */
      var i = 0;
      for (; i < this._buttons.length; i++) {
        this._buttons[i].deselect();
      }
    }, init.prototype.addButton = function(options) {
      var listItem = this._buttons.length;
      var button = new Button(options);
      return button.getDOMNode().addEventListener(this._clickEventType, this._buttonClickCallback.bind(this, listItem), false), this._buttonContainer.appendChild(button.getDOMNode()), this._buttons.push(button) - 1;
    }, init.prototype.selectButton = function(name) {
      this.deselectAll();
      /** @type {number} */
      this._buttonIndex = name;
      this._buttons[name].select();
      this.centerButton(name, 200);
    }, init.prototype.getDOMNode = function() {
      return this._root;
    }, init.prototype.getButtonX = function(starCount) {
      /** @type {number} */
      var ret = 0;
      /** @type {number} */
      var i = 0;
      for (; i < starCount; i++) {
        ret = ret + this._buttons[i].getWidth();
      }
      return ret;
    }, init.prototype.centerButton = function(index, time) {
      if (this._buttons.length > 0) {
        /** @type {number} */
        var halfWidth = this._width / 2;
        /** @type {number} */
        var pinHalfWidth = this._buttons[index].getWidth() / 2;
        var languageBlock = this.getButtonX(index);
        /** @type {number} */
        var charsetBitSize = halfWidth - pinHalfWidth - languageBlock;
        this.setScrollTransitionDuration(time);
        this.setScrollOffset(charsetBitSize);
      }
    }, init.prototype.setScrollTransitionDuration = function(ms) {
      /** @type {string} */
      this._buttonContainer.style.transitionDuration = ms + "ms";
      /** @type {string} */
      this._buttonContainer.style.webkitTransitionDuration = ms + "ms";
    }, init.prototype.scroll = function(distance) {
      this.setScrollOffset(this._scrollX + distance);
    }, init.prototype.setScrollOffset = function(y) {
      /** @type {number} */
      var z_score_bound = Math.max(0, this._buttonContainer.offsetWidth - this._width);
      /** @type {number} */
      this._scrollX = Math.max(-z_score_bound, Math.min(0, y));
      /** @type {string} */
      this._buttonContainer.style.marginLeft = this._scrollX + "px";
      this._scrollCallback(-this._scrollX, z_score_bound);
    }, init.prototype.onTouchMove = function(event) {
      var oldTouch = event.changedTouches[0];
      /** @type {number} */
      var scrollX = oldTouch.pageX - this._prevTouchX;
      this.scroll(scrollX);
      this._prevTouchX = oldTouch.pageX;
      event.preventDefault();
    }, init.prototype.onTouchStart = function(event) {
      var oldTouch = event.changedTouches[0];
      this._prevTouchX = oldTouch.pageX;
      this.setScrollTransitionDuration(0);
      event.preventDefault();
    }, init;
  }();
  var Image = function() {
    /**
     * @param {string} key
     * @param {!Object} value
     * @return {undefined}
     */
    function set(key, value) {
      var n = this;
      if (this._gameTitle = key, this._dispatcher = value, this._deviceHandler = exports.SystemManager.getDeviceHandler(), this._sceneManager = self.ResourceManager.getInstance().getSceneManager(), this._deviceHandler && (this._deviceHandler.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return n.HandleOrientationChange();
      }), this._deviceHandler.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return n.HandleOrientationChange();
      })), this._root = document.getElementById("menu"), !this._root) {
        this._root = RepositoryApi.getInstance().createDiv("menu");
        /** @type {(Element|null)} */
        var wafCss = document.getElementById("gamepanel");
        wafCss.parentNode.insertBefore(this._root, wafCss);
      }
      /** @type {string} */
      this._root.style.display = "";
      this._header = RepositoryApi.getInstance().createAndAppendDiv(this._root, "menu_header");
      this._gameTitlePortrait = RepositoryApi.getInstance().createAndAppendDiv(this._header, "gametitle_portrait", "");
      var nameArgs = RepositoryApi.getInstance().createAndAppendDiv(this._header, "navbar_row");
      var code_tree = RepositoryApi.getInstance().createAndAppendDiv(nameArgs, "navbar_row_table");
      this._navbarCell = RepositoryApi.getInstance().createAndAppendDiv(code_tree, "navbar_cell");
      this._navigationBar = new PreferenceDoesNotExistError(function(t) {
        return n.onNavigationBarButtonClick(t);
      }, function(where, end) {
        return n.onNavigationBarScroll(where, end);
      });
      this._navbarCell.appendChild(this._navigationBar.getDOMNode());
      this._gameTitleLandscape = RepositoryApi.getInstance().createAndAppendDiv(code_tree, "gametitle_landscape", "");
      this._overflowIndicator = RepositoryApi.getInstance().createAndAppendDiv(nameArgs, "overflow_indicator");
      this._viewArea = new DeviceOrientationCameraController(function(t, num) {
        return n.onViewSwipe(t, num);
      });
      this._root.appendChild(this._viewArea.getDOMNode());
      /** @type {!Array} */
      this._menuItems = [];
      /** @type {number} */
      this._currentMenuIndex = -1;
      /** @type {number} */
      this._gameTitleScale = 1;
      this.setGameTitle(key);
      this.show(false);
      this.HandleOrientationChange();
      this.onNavigationBarScroll(0, 0);
      this._dispatcher.addEventListener(tree.GameHistoryEvent.CREATE_DETAILS_WINDOW, this.onCreateDetailsWindow.bind(this));
      this._dispatcher.addEventListener(tree.GameHistoryEvent.CLOSE_DETAILS_WINDOW, this.onCloseDetailsWindow.bind(this));
    }
    return set.prototype.onCreateDetailsWindow = function(canCreateDiscussions) {
      this._viewArea.enableSwipe(false);
    }, set.prototype.onCloseDetailsWindow = function(canCreateDiscussions) {
      this._viewArea.enableSwipe(true);
    }, set.prototype.onNavigationBarScroll = function(pt, mark) {
      if (pt === mark || "pt" === exports.DEVICE.orientation) {
        /** @type {string} */
        this._overflowIndicator.style.display = "none";
      } else {
        /** @type {string} */
        this._overflowIndicator.style.display = "block";
      }
    }, set.prototype.show = function(x) {
      /** @type {string} */
      this._root.style.display = x ? "" : "none";
      this.HandleOrientationChange();
      if (this._currentMenuIndex >= 0) {
        if (x) {
          this._menuItems[this._currentMenuIndex].onFocusIn();
        } else {
          this._menuItems[this._currentMenuIndex].onFocusOut();
        }
      }
    }, set.prototype.onViewSwipe = function(i, name) {
      this._menuItems[i].onSwipeOut();
      this._menuItems[name].onSwipeIn();
      this.setFocus(name, 200);
    }, set.prototype.onNavigationBarButtonClick = function(i) {
      this.setFocus(i, 200);
      this._menuItems[i].onClick();
    }, set.prototype.setFocus = function(index, n) {
      if (void 0 === n) {
        /** @type {number} */
        n = 0;
      }
      if (index !== this._currentMenuIndex) {
        this._viewArea.gotoView(index, n);
        this._navigationBar.selectButton(index);
        if (this._menuItems.length > 0) {
          if (this._currentMenuIndex >= 0) {
            this._menuItems[this._currentMenuIndex].onFocusOut();
          }
          /** @type {number} */
          this._currentMenuIndex = index;
          this._menuItems[this._currentMenuIndex].onFocusIn();
        }
      }
    }, set.prototype.addMenuItem = function(item) {
      this._navigationBar.addButton(item.getTitle());
      this._viewArea.addView(item.getView());
      this._menuItems.push(item);
      if (this._currentMenuIndex < 0) {
        this.setFocus(this._menuItems.length - 1);
      }
    }, set.prototype.setGameTitle = function(t) {
      /** @type {string} */
      this._gameTitle = t;
      /** @type {string} */
      this._gameTitlePortrait.innerHTML = t;
      /** @type {string} */
      this._gameTitleLandscape.innerHTML = t;
      if (this._gameTitle.length > 22) {
        this.adjustGameTitleSize();
      }
    }, set.prototype.adjustGameTitleSize = function() {
      var gutterDisplay = this._gameTitleLandscape.parentElement.style.display;
      var oldValue = this._gameTitleLandscape.parentElement.parentElement.style.display;
      var initialDisplay = this._gameTitleLandscape.parentElement.parentElement.parentElement.style.display;
      var parentDisplayValue = this._gameTitleLandscape.parentElement.parentElement.parentElement.parentElement.style.display;
      /** @type {string} */
      this._gameTitleLandscape.parentElement.style.display = "";
      /** @type {string} */
      this._gameTitleLandscape.parentElement.parentElement.style.display = "";
      /** @type {string} */
      this._gameTitleLandscape.parentElement.parentElement.parentElement.style.display = "";
      /** @type {string} */
      this._gameTitleLandscape.parentElement.parentElement.parentElement.parentElement.style.display = "";
      var disp = this._gameTitleLandscape.style.display;
      /** @type {string} */
      this._gameTitleLandscape.style.display = "inline-block";
      this._gameTitleLandscape.innerHTML = this._gameTitle.substring(0, 22);
      var current_width = this._gameTitleLandscape.offsetWidth;
      this._gameTitleLandscape.innerHTML = this._gameTitle;
      var pixelSize = this._gameTitleLandscape.offsetWidth;
      this._gameTitleLandscape.style.display = disp;
      this._gameTitleLandscape.parentElement.style.display = gutterDisplay;
      this._gameTitleLandscape.parentElement.parentElement.style.display = oldValue;
      this._gameTitleLandscape.parentElement.parentElement.parentElement.style.display = initialDisplay;
      this._gameTitleLandscape.parentElement.parentElement.parentElement.parentElement.style.display = parentDisplayValue;
      /** @type {number} */
      this._gameTitleScale = current_width / (pixelSize > 0 ? pixelSize : 1);
      /** @type {number} */
      var a = (1 - this._gameTitleScale) / this._gameTitleScale * 100;
      this._gameTitleLandscape.style.setProperty("-msTransform", "scaleX(" + this._gameTitleScale + ") translate(" + a + "%, 0%)");
      /** @type {string} */
      this._gameTitleLandscape.style.webkitTransform = "scaleX(" + this._gameTitleScale + ") translate(" + a + "%, 0%)";
      /** @type {string} */
      this._gameTitleLandscape.style.transform = "scaleX(" + this._gameTitleScale + ") translate(" + a + "%, 0%)";
    }, set.prototype.HandleOrientationChange = function() {
      if ("pt" === exports.DEVICE.orientation) {
        RepositoryApi.getInstance().setWidth(this._root, exports.DEVICE.pt.w);
        /** @type {string} */
        this._gameTitlePortrait.style.height = "";
        /** @type {string} */
        this._gameTitleLandscape.style.display = "none";
        /** @type {string} */
        this._gameTitlePortrait.style.display = "";
        this._viewArea.getDOMNode().classList.add("portrait");
        this._root.classList.add("pt");
        this._root.classList.remove("ls");
        this._navigationBar.setWidth(exports.DEVICE.pt.w - this._gameTitleLandscape.offsetWidth * this._gameTitleScale);
      } else {
        RepositoryApi.getInstance().setWidth(this._root, exports.DEVICE.ls.w);
        /** @type {string} */
        this._gameTitlePortrait.style.height = "";
        /** @type {string} */
        this._gameTitleLandscape.style.display = "";
        /** @type {string} */
        this._gameTitlePortrait.style.display = "none";
        this._viewArea.getDOMNode().classList.remove("portrait");
        this._root.classList.add("ls");
        this._root.classList.remove("pt");
        this._navigationBar.setWidth(exports.DEVICE.ls.w - this._gameTitleLandscape.offsetWidth * this._gameTitleScale);
      }
      /** @type {(Element|null)} */
      var caption = document.getElementById("bottomPanelWrapper");
      var fudge = caption ? caption.offsetHeight : 0;
      if ("pt" === exports.DEVICE.orientation) {
        this._viewArea.setSize(exports.DEVICE.pt.w, exports.DEVICE.pt.h - this._header.offsetHeight - fudge);
      } else {
        this._viewArea.setSize(exports.DEVICE.ls.w, exports.DEVICE.ls.h - this._header.offsetHeight - fudge);
      }
      /** @type {number} */
      var i = 0;
      for (; i < this._menuItems.length; i++) {
        this._menuItems[i].handleOrientationChange();
      }
      /** @type {string} */
      this._overflowIndicator.style.left = this._navbarCell.clientWidth - this._overflowIndicator.clientWidth + "px";
    }, set.prototype.isVisible = function() {
      return "" === this._root.style.display;
    }, set;
  }();
  var notifyNonGlobalListeners = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var selector = function(path) {
    /**
     * @param {!HTMLElement} target
     * @return {?}
     */
    function self(target) {
      var me = path.call(this) || this;
      return me._root = target, me._buttons = {}, me._sliders = {}, me;
    }
    return notifyNonGlobalListeners(self, path), self.prototype.initButton = function(buttonId, value) {
      var button = this._buttons[buttonId];
      if (button) {
        button.addEventListener(self.ButtonEvent.CLICK, value);
      }
    }, self.prototype.selectButton = function(index, name) {
      var btn = this._buttons[index];
      if (btn) {
        btn.select(name);
      }
    }, self.prototype.showButton = function(buttonId, show) {
      var button = this._buttons[buttonId];
      if (button) {
        button.setVisible(show);
      }
    }, self.prototype.showPanel = function(e, $el) {
    }, self.prototype.setText = function(message, value) {
    }, self.prototype.setTextArgs = function(message, dashicon) {
    }, self.prototype.showElement = function(b, el) {
    }, self.prototype.setButtonText = function(buttonId, text) {
    }, self.prototype.initSlider = function(key, e, el) {
      var slider = this._sliders[key];
      slider.addEventListener(self.SliderEvent.UPDATE, e);
      slider.setValueFormat(el);
    }, self.prototype.hideAll = function() {
    }, self.prototype.resetItems = function() {
      var item;
      var i;
      for (i in this._buttons) {
        if ((item = this._buttons[i]) instanceof ZmPrefAccount) {
          item.reset();
        }
      }
      for (i in this._sliders) {
        this._sliders[i].reset();
      }
    }, self.prototype.getButton = function(type) {
    }, self.prototype.buttonEnabler = function(name, enabled) {
      var b = this._buttons[name];
      if (b) {
        b.enable(enabled);
      }
    }, self;
  }(self.ViewBaseRc);
  var collectSimilarMethods = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var tokens = function(fn) {
    /**
     * @param {string} title
     * @param {?} key
     * @return {?}
     */
    function set(title, key) {
      if (void 0 === title) {
        /** @type {string} */
        title = "MENUITEMTITLE";
      }
      var element = fn.call(this, key) || this;
      return element._title = title, element._view = void 0, element;
    }
    return collectSimilarMethods(set, fn), set.prototype.onFocusIn = function() {
    }, set.prototype.onFocusOut = function() {
    }, set.prototype.onSwipeIn = function() {
    }, set.prototype.onSwipeOut = function() {
    }, set.prototype.onClick = function() {
    }, set.prototype.handleOrientationChange = function() {
    }, set.prototype.getTitle = function() {
      return this._title;
    }, set.prototype.getView = function() {
      return this._view;
    }, set.prototype.onAddedToParent = function() {
    }, set;
  }(selector);
  var _swapImageBlock = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Resume = function(src) {
    /**
     * @param {?} userId
     * @param {?} callback
     * @param {(Object|number|string)} self
     * @param {(Object|number|string)} buf
     * @return {?}
     */
    function init(userId, callback, self, buf) {
      var that = src.call(this, userId, callback) || this;
      return that._menuItems = [], that._view = RepositoryApi.getInstance().createDiv("splitview"), that._firstHalf = RepositoryApi.getInstance().createAndAppendDiv(that._view, "splitview_firsthalf"), that._secondHalf = RepositoryApi.getInstance().createAndAppendDiv(that._view, "splitview_secondhalf"), that._firstHalf.appendChild(self.getView()), that._secondHalf.appendChild(buf.getView()), that._menuItems.push(self), that._menuItems.push(buf), that;
    }
    return _swapImageBlock(init, src), init.prototype.handleOrientationChange = function() {
      var widgetConfig = exports.SystemManager.getDeviceHandler();
      this._firstHalf.className = widgetConfig.orientation;
      this._secondHalf.className = widgetConfig.orientation;
      this._menuItems[0].handleOrientationChange();
      this._menuItems[1].handleOrientationChange();
    }, init;
  }(tokens);
  var iterate = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var top = function(Controller) {
    /**
     * @param {!Object} height
     * @param {?} radius
     * @param {number} objects
     * @param {!Object} p
     * @param {string} r
     * @param {?} player
     * @return {?}
     */
    function set(height, radius, objects, p, r, player) {
      var self = Controller.call(this, null) || this;
      self._winName = radius;
      /** @type {number} */
      self._priority = objects;
      /** @type {!Object} */
      self._dispatcher = height;
      /** @type {!Object} */
      self._parent = p;
      /** @type {!Element} */
      self._htmlNode = document.createElement("div");
      /** @type {string} */
      self._htmlNode.id = r;
      self._htmlNode.classList.add(player);
      if (void 0 === set.DISABLER) {
        self.createDisabler();
      }
      self._htmlNode.addEventListener("touchmove", function(event) {
        event.preventDefault();
      });
      self._titleDiv = RepositoryApi.getInstance().createDiv("modalwin_title_newui", "modalwin_title_newui", " ");
      self._htmlNode.appendChild(self._titleDiv);
      self._messageDiv = RepositoryApi.getInstance().createDiv("modalwin_message_newui", "modalwin_message_newui", " ");
      self._htmlNode.appendChild(self._messageDiv);
      self._btnsDiv = RepositoryApi.getInstance().createAndAppendDiv(self._htmlNode, "modalwin_btn_container", "modalwin_btn_container");
      self.createButtons();
      p.appendChild(self._htmlNode);
      self.handleOrientationChange();
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return self.handleOrientationChange();
      }), scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return self.handleOrientationChange();
      })), self;
    }
    return iterate(set, Controller), Object.defineProperty(set.prototype, "btnsDiv", {
      get : function() {
        return this._btnsDiv;
      },
      enumerable : true,
      configurable : true
    }), set.prototype.hideAll = function() {
      this.hideWin();
    }, set.prototype.enable = function(value) {
      if (value) {
        this.sendToFront();
      } else {
        /** @type {string} */
        this._htmlNode.style.display = "none";
      }
      this.enableButton(keys.OK, value);
      this.enableButton(keys.CANCEL, value);
      this.enableButton(keys.EXIT, value);
      this.enableButton(keys.ACTION, value);
    }, set.prototype.sendToFront = function() {
      if (this._parent.getElementsByClassName("modalwinDarkBox").length > 0) {
        this._parent.removeChild(set.DISABLER);
      }
      /** @type {string} */
      this._htmlNode.style.display = "";
      this._parent.removeChild(this._htmlNode);
      this._parent.appendChild(set.DISABLER);
      this._parent.appendChild(this._htmlNode);
    }, set.prototype.show = function(str) {
      if (str) {
        this.showWin();
      } else {
        this.hideWin();
      }
    }, set.prototype.setTextField = function(yes, value) {
      if ("title" === yes) {
        RepositoryApi.getInstance().setTextWidthProxy(this._titleDiv, value);
      }
      if ("message" === yes) {
        RepositoryApi.getInstance().setTextWidthProxy(this._messageDiv, value);
      }
    }, set.prototype.isVisible = function() {
      return this._htmlNode.classList.contains("hidden");
    }, set.prototype.showButton = function(buttonId, show) {
      Controller.prototype.showButton.call(this, buttonId, show);
      var button = this._buttons[buttonId];
      if (button) {
        button.setVisible(show);
        /** @type {string} */
        button.getDOMNode().style.display = show ? "" : "none";
      }
    }, set.prototype.removeDisabler = function() {
      if (void 0 !== this._parent) {
        this._parent.removeChild(set.DISABLER);
      }
    }, set.prototype.createButtons = function() {
      this._buttons[keys.EXIT] = new constructor("IDS_BTN_EXIT", this._btnsDiv, "", "modalwin_exit_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.OK] = new constructor("IDS_BTN_OK", this._btnsDiv, "", "modalwin_confirm_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.CANCEL] = new constructor("IDS_BTN_CANCEL", this._btnsDiv, "", "modalwin_cancel_btn", void 0, "btnCaptionModalWin");
    }, set.prototype.showWin = function() {
      return !!this._htmlNode.parentNode && (this._parent.style.display = "block", this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.DISABLE_BUTTONS)), this._dispatcher.dispatch(new self.EnableButtonsEvent(false)), this.enable(true), this._htmlNode.classList.remove("hidden"), true);
    }, set.prototype.hideWin = function() {
      if (this._htmlNode.parentNode) {
        this._htmlNode.parentNode.removeChild(this._htmlNode);
      }
    }, set.prototype.handleOrientationChange = function() {
      if ("ls" === exports.DEVICE.orientation) {
        this._htmlNode.classList.add("modalls");
        this._htmlNode.classList.remove("modalpt");
      } else {
        this._htmlNode.classList.add("modalpt");
        this._htmlNode.classList.remove("modalls");
      }
    }, set.prototype.createDisabler = function() {
      if (void 0 === set.DISABLER) {
        var wrap = RepositoryApi.getInstance().createDiv("modalwinDarkBox", "modalwinDarkBox");
        /** @type {string} */
        wrap.style.opacity = "0.5";
        wrap.addEventListener("touchmove", function(event) {
          event.preventDefault();
        });
        /** @type {string} */
        wrap.style.height = "100%";
        /** @type {string} */
        wrap.style.width = "100%";
        set.DISABLER = wrap;
      }
    }, set;
  }(selector);
  var create = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var EventedQueryProcessor = function(y1) {
    /**
     * @param {?} data
     * @param {string} title
     * @param {string} message
     * @param {number} properties
     * @return {?}
     */
    function set(data, title, message, properties) {
      if (void 0 === properties) {
        /** @type {boolean} */
        properties = false;
      }
      var $scope = this;
      /** @type {(Element|null)} */
      var p__11215 = document.getElementById("modalwin_container");
      return $scope = y1.call(this, data, properties ? "MessageBox" : "ServerMessage", 101, p__11215, title, "modalwin") || this, $scope._title = title, $scope._message = message, $scope.setTexts(), $scope.showWin(), $scope;
    }
    return create(set, y1), set.prototype.createButtons = function() {
      this._buttons[keys.OK] = new constructor("IDS_BTN_OK", this.btnsDiv, "", "modalwin_confirm_btn", void 0, "btnCaptionModalWin");
    }, set.prototype.setTexts = function(value_in_code) {
      if (void 0 === value_in_code) {
        /** @type {null} */
        value_in_code = null;
      }
      RepositoryApi.getInstance().setTextOf(this._titleDiv, this._title, "");
      RepositoryApi.getInstance().setTextOf(this._messageDiv, this._message, "");
    }, set;
  }(top);
  var nearestPosition = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var canvas = function(text) {
    /**
     * @param {?} p
     * @return {?}
     */
    function s(p) {
      var self = text.call(this) || this;
      return self._disabler = RepositoryApi.getInstance().createAndAppendDiv(document.getElementById(p.gameContainer), "modalwinBackBox", void 0), self.setupEventHandlers(), self._disabler.addEventListener(self._downEvent, function(pass) {
        return self.onInput(pass);
      }, false), self._disabler.addEventListener(self._moveEvent, function(pass) {
        return self.onInput(pass);
      }, false), self._disabler.addEventListener(self._upEvent, function(pass) {
        return self.onInput(pass);
      }, false), self.hide(), self;
    }
    return nearestPosition(s, text), Object.defineProperty(s.prototype, "opaque", {
      get : function() {
        return "0" === this._disabler.style.opacity;
      },
      enumerable : true,
      configurable : true
    }), s.prototype.resize = function(cssCanvasWidth, cssCanvasHeight) {
      /** @type {string} */
      this._disabler.style.height = cssCanvasHeight + "px";
      /** @type {string} */
      this._disabler.style.width = cssCanvasWidth + "px";
    }, s.prototype.show = function(v) {
      if (void 0 === v) {
        /** @type {boolean} */
        v = true;
      }
      /** @type {string} */
      this._disabler.style.visibility = "visible";
      /** @type {string} */
      this._disabler.style.opacity = v ? "0" : "0.5";
    }, s.prototype.hide = function() {
      /** @type {string} */
      this._disabler.style.visibility = "hidden";
      /** @type {string} */
      this._disabler.style.opacity = "0.0";
    }, s.prototype.onInput = function(event) {
      event.preventDefault();
    }, s.prototype.setupEventHandlers = function() {
      if ("ontouchstart" in window) {
        /** @type {string} */
        this._downEvent = "touchstart";
        /** @type {string} */
        this._upEvent = "touchend";
        /** @type {string} */
        this._moveEvent = "touchmove";
      } else {
        /** @type {string} */
        this._downEvent = "mousedown";
        /** @type {string} */
        this._upEvent = "mouseup";
        /** @type {string} */
        this._moveEvent = "mousemove";
      }
    }, s;
  }(level);
  var det = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var cmSoundEffect = function(y1) {
    /**
     * @param {?} data
     * @param {?} i
     * @param {?} n
     * @param {string} val
     * @param {string} m
     * @param {?} axis
     * @param {?} o
     * @param {?} errors
     * @return {?}
     */
    function set(data, i, n, val, m, axis, o, errors) {
      var self = this;
      /** @type {(Element|null)} */
      var p__11215 = document.getElementById("modalwin_container");
      return self = y1.call(this, data, i, 100, p__11215, val, "modalwin") || this, self._title = val, self._message = m, self._okButton = axis, self._exitButton = o, self._actionButton = errors, self.setTexts(), self.showWin(), self;
    }
    return det(set, y1), set.prototype.createButtons = function() {
      this._buttons[keys.EXIT] = new constructor(this._exitButton, this.btnsDiv, "", "modalwin_exit_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.OK] = new constructor(this._okButton, this.btnsDiv, "", "modalwin_confirm_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.ACTION] = new constructor(this._actionButton, this.btnsDiv, "", "modalwin_info_btn", void 0, "btnCaptionModalWin");
    }, set.prototype.setTexts = function() {
      this.setTextField("title", this._title);
      this.setTextField("message", this._message);
      this._buttons[keys.OK].getDOMNode().lastChild.innerText = this._okButton;
      this._buttons[keys.EXIT].getDOMNode().lastChild.innerText = this._exitButton;
      this._buttons[keys.ACTION].getDOMNode().lastChild.innerText = this._actionButton;
    }, set;
  }(top);
  var segmentSegmentIntersection = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Exception = function(y1) {
    /**
     * @param {?} data
     * @param {string} title
     * @param {string} message
     * @param {number} properties
     * @return {?}
     */
    function Notification(data, title, message, properties) {
      if (void 0 === properties) {
        /** @type {boolean} */
        properties = false;
      }
      var $scope = this;
      /** @type {(Element|null)} */
      var p__11215 = document.getElementById("modalwin_container");
      return $scope = y1.call(this, data, properties ? "MessageBox" : "ServerMessage", 100, p__11215, title, "modalwin") || this, $scope._title = title, $scope._message = message, $scope.setTexts(), $scope.showWin(), $scope;
    }
    return segmentSegmentIntersection(Notification, y1), Notification.prototype.setTexts = function(value_in_code) {
      if (void 0 === value_in_code) {
        /** @type {null} */
        value_in_code = null;
      }
      RepositoryApi.getInstance().setTextOf(this._titleDiv, this._title, "");
      RepositoryApi.getInstance().setTextOf(this._messageDiv, this._message, "");
    }, Notification;
  }(top);
  var paintDefaultChartLabel = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Editor = function(y1) {
    /**
     * @param {?} value
     * @param {!Array} element
     * @param {number} options
     * @return {?}
     */
    function ComboBox(value, element, options) {
      if (void 0 === options) {
        /** @type {boolean} */
        options = false;
      }
      var $scope = this;
      /** @type {(Element|null)} */
      var p__11215 = document.getElementById("modalwin_container");
      return $scope = y1.call(this, value, options ? "MessageBox" : "ServerMessage", 100, p__11215, "IDS_RC_HEADING", "modalwin") || this, $scope.setTexts(element), $scope.showWin(), $scope;
    }
    return paintDefaultChartLabel(ComboBox, y1), ComboBox.prototype.setTexts = function(t) {
      var e = RepositoryApi.getInstance();
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      var document = self.ResourceManager.getInstance().getMoneyFormatter();
      e.setTextOf(this._titleDiv, "IDS_RC_HEADING", "");
      var tasklistConf;
      tasklistConf = t.minutes > 1 ? PersonModel.getByName("IDS_RC_MINUTES").getText() : PersonModel.getByName("IDS_RC_MINUTE").getText();
      var groupNamePrefix = PersonModel.getByName("IDS_RC_PLAYTIME").getText().replace("%d", t.minutes.toString()).replace("%x", tasklistConf);
      var dupeNameCount = PersonModel.getByName("IDS_RC_WON").getText().replace("%x", document.MoneyToString(t.win, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      var u = PersonModel.getByName("IDS_RC_LOST").getText().replace("%x", document.MoneyToString(t.bet, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      var append = PersonModel.getByName("IDS_RC_CONTINUE").getText();
      e.setTextOf(this._messageDiv, groupNamePrefix + "\n" + dupeNameCount + "\n" + u + "\n" + append, "");
    }, ComboBox;
  }(top);
  var transform = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var JarallaxObject = function(y1) {
    /**
     * @param {?} data
     * @param {number} target
     * @return {?}
     */
    function selector(data, target) {
      if (void 0 === target) {
        /** @type {boolean} */
        target = false;
      }
      var s = this;
      /** @type {(Element|null)} */
      var p__11215 = document.getElementById("modalwin_container");
      return s = y1.call(this, data, target ? "MessageBox" : "ServerMessage", 100, p__11215, "IDS_RC_HEADING", "modalwin") || this, s.setTexts(), s.showWin(), s;
    }
    return transform(selector, y1), selector.prototype.setTexts = function() {
      var panelDisplayProcess = RepositoryApi.getInstance();
      panelDisplayProcess.setTextOf(this._titleDiv, "IDS_M_PLAYFORREAL_TITLE", "");
      panelDisplayProcess.setTextOf(this._messageDiv, "IDS_M_PLAYFORREAL_TEXT", "");
    }, selector;
  }(top);
  var updateAccountBalances = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ba = function(appAPI) {
    /**
     * @return {?}
     */
    function self() {
      var self = appAPI.call(this) || this;
      self._root = RepositoryApi.getInstance().createDiv("autoplay_button_wrapper");
      self._button = RepositoryApi.getInstance().createAndAppendDiv(self._root, "autoplay_button", "");
      self._button.classList.add("autoplay_button_spin");
      self._button.classList.add("btnTransform");
      var _portletRow = RepositoryApi.getInstance().createAndAppendDiv(self._root, void 0, "pointerArea");
      return self._spins = RepositoryApi.getInstance().createAndAppendDiv(self._button, "autoplay_button_spins"), self._startEvent = "mousedown", self._endEvent = "mouseup", self._moveEvent = "mousemove", "ontouchstart" in window && (self._startEvent = "touchstart", self._endEvent = "touchend", self._moveEvent = "touchmove"), _portletRow.addEventListener(self._startEvent, function(loading) {
        return self.onStart(loading);
      }, false), _portletRow.addEventListener(self._endEvent, function(e) {
        return self.onEnd(e);
      }, false), _portletRow.addEventListener(self._moveEvent, function(e) {
        return self.onMove(e);
      }, false), self._isEnabled = true, self;
    }
    return updateAccountBalances(self, appAPI), Object.defineProperty(self.prototype, "name", {
      get : function() {
        return this._name;
      },
      set : function(name) {
        /** @type {string} */
        this._name = name;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.enable = function(value) {
      /** @type {boolean} */
      this._isEnabled = value;
      /** @type {string} */
      this._root.style.opacity = value ? "1.0" : "0.5";
    }, self.prototype.isEnabled = function() {
      return this._isEnabled;
    }, self.prototype.select = function() {
    }, self.prototype.isSelected = function() {
      return false;
    }, self.prototype.setAutoPlaying = function(testToFlatten) {
      if (testToFlatten) {
        /** @type {string} */
        this._spins.style.color = "white";
        this._button.classList.add("autoplay_button_stop");
        this._button.classList.remove("autoplay_button_spin");
      } else {
        /** @type {string} */
        this._spins.style.color = "black";
        this._button.classList.remove("autoplay_button_stop");
        this._button.classList.add("autoplay_button_spin");
      }
    }, self.prototype.setCaption = function(text) {
      this.setSpins(Number(text));
    }, self.prototype.setSpins = function(obj1) {
      this._spins.innerHTML = obj1.toString();
    }, self.prototype.getDOMNode = function() {
      return this._root;
    }, self.prototype.getWidth = function() {
      return this._button.clientWidth;
    }, self.prototype.onStart = function(event) {
      if (this._isEnabled) {
        this._root.classList.add("scaleup");
        /** @type {boolean} */
        this._button.buttonPressed = true;
      }
    }, self.prototype.onEnd = function(event) {
      if (this._root.classList.remove("scaleup"), RepositoryApi.getInstance().touchUpEventInTarget(event) && (this._button.buttonPressed = false, this._isEnabled)) {
        /** @type {boolean} */
        var touchEvent = true;
        if ("touchend" === event.type) {
          /** @type {!Object} */
          var e = event;
          if (e) {
            /** @type {boolean} */
            touchEvent = 0 === e.touches.length;
          }
        }
        if (touchEvent) {
          this.dispatch(new self.ButtonEvent(self.ButtonEvent.CLICK));
        }
      }
    }, self.prototype.onMove = function(e) {
      if (this._button.buttonPressed) {
        if (RepositoryApi.getInstance().touchUpEventInTarget(e)) {
          this._root.classList.add("scaleup");
        } else {
          this._root.classList.remove("scaleup");
        }
        e.preventDefault();
        e.stopPropagation();
      }
    }, self.prototype.getType = function() {
      return self.ComponentType.TEXTFIELD;
    }, self.prototype.bindNode = function(object) {
    }, self.prototype.setText = function(message) {
      /** @type {string} */
      this._spins.innerHTML = message;
    }, self.prototype.getText = function() {
      return this._spins.innerHTML;
    }, self.prototype.setArgs = function(args) {
    }, self.prototype.getArgs = function() {
      return "";
    }, self.prototype.setStyle = function(element) {
    }, self.prototype.getStyle = function() {
      return null;
    }, self.prototype.dispose = function() {
    }, self.prototype.disableDefaultAnims = function() {
    }, self.prototype.focus = function(needsMoreTime) {
    }, self.prototype.trigger = function() {
    }, self;
  }(exports.EventDispatcher);
  var doXDomainLoad = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var id = function(src) {
    /**
     * @param {?} value
     * @return {?}
     */
    function self(value) {
      var self = src.call(this, "IDS_MENU_BET_VSLOT", value) || this;
      self._checkboxTexts = {};
      self._sliderTexts = {};
      self.setupHtml();
      self.setupData();
      self.createAutoplay();
      self.createSliders();
      self.createCheckboxes();
      self._buttons[args.TOGGLE] = self._autoplayButton;
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return self.handleOrientationChange();
      }), scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return self.handleOrientationChange();
      })), self.showCheckBox(args.STOP_JACKPOT, false), self;
    }
    return doXDomainLoad(self, src), self.prototype.show = function(str) {
    }, self.prototype.createCheckbox = function(id, name, labelText, checked) {
      var field = new ZmPrefAccount(name, checked);
      return field.getDOMNode().classList.add("betview_checkbox"), field.getDOMNode().style.position = "", labelText.appendChild(field.getDOMNode()), this._buttons[id] = field, field;
    }, self.prototype.disableAutoPlay = function() {
      this._autoplayButton.enable(false);
      var i;
      for (i in this._sliders) {
        if (this._sliders.hasOwnProperty(i)) {
          this._sliders[i].enable(false);
        }
      }
      for (i in this._checkboxTexts) {
        if (this._checkboxTexts.hasOwnProperty(i)) {
          /** @type {string} */
          this._buttons[i].getDOMNode().style.display = "none";
        }
      }
    }, self.prototype.setSliderValueArray = function(index, e) {
      this._sliders[index].setValueArray(e);
    }, self.prototype.getSliderValue = function(name) {
      return this._sliders[name].getCurrentValue();
    }, self.prototype.setSliderValue = function(index, value) {
      this._sliders[index].setValue(value);
    }, self.prototype.setCurrency = function(data) {
      var i;
      for (i in this._sliderTexts) {
        if (this._sliderTexts.hasOwnProperty(i)) {
          var option = this._sliders[i];
          option.setCaption(this._sliderTexts[i], "> (" + data + ")");
        }
      }
    }, self.prototype.isVisible = function() {
      return false;
    }, self.prototype.showSlider = function(index, e) {
      this._sliders[index].show(e);
    }, self.prototype.showCheckBox = function(id, p) {
      this._buttons[id].show(p);
    }, self.prototype.setText = function(message, value) {
    }, self.prototype.setAutoplayButtonValue = function(actualHist) {
      this._autoplayButton.setSpins(actualHist);
    }, self.prototype.setAutoplayButtonState = function(test) {
      this._autoplayButton.setAutoPlaying(test);
    }, self.prototype.handleOrientationChange = function() {
      if ("ls" === exports.DEVICE.orientation) {
        var i;
        for (i in this._sliders) {
          if (this._sliders.hasOwnProperty(i)) {
            this._sliders[i].handleOrientationChange();
          }
        }
      } else {
        for (i in this._sliders) {
          if (this._sliders.hasOwnProperty(i)) {
            this._sliders[i].handleOrientationChange();
          }
        }
      }
    }, self.prototype.setButtonText = function(buttonId, text) {
      if (this._buttons[buttonId]) {
        this._buttons[buttonId].setCaption(text);
      }
    }, self.prototype.setLabelText = function(text, value) {
    }, self.prototype.setSliderPercent = function(percent, wrapMin) {
    }, self.prototype.setSliderValid = function(key, lastVerFailed) {
      this._sliders[key].setValid(lastVerFailed);
    }, self.prototype.isSliderValid = function(key) {
      return this._sliders[key].isValid();
    }, self.prototype.enableSlider = function(index, id) {
      this._sliders[index].enable(id);
    }, self.prototype.showText = function(id, text) {
    }, self.prototype.setSliderMode = function(index, e) {
      this._sliders[index].setUnselectedMode(e);
    }, self.prototype.addSliderPressHandlers = function(attribute, formatters, customFormatters) {
    }, self.prototype.setTexts = function(viewRef, index, queue, update) {
    }, self.prototype.getGeneratedLabel = function(canCreateDiscussions) {
      return null;
    }, self.prototype.createAutoplay = function() {
      this.createSlider(position.SLD_AUTOPLAY, "IDS_AP_CAPTION2", "", this._autoplayContainer, [0, 1]);
      this._autoplayButton = new Ba;
      this._autoplayContainer.appendChild(this._autoplayButton.getDOMNode());
    }, self.prototype.setupData = function() {
      /** @type {string} */
      this._checkboxTexts[args.STOP_ANY] = "IDS_AP_ONANYWIN";
      /** @type {string} */
      this._checkboxTexts[args.STOP_BONUS] = "IDS_AP_ONBONUS";
      /** @type {string} */
      this._checkboxTexts[args.STOP_JACKPOT] = "IDS_AP_ONJACKPOT";
      /** @type {string} */
      this._sliderTexts[args.SLIDER1] = "IDS_AP_WINEXCEEDS";
      /** @type {string} */
      this._sliderTexts[args.SLIDER2] = "IDS_AP_BALANCEINC";
      /** @type {string} */
      this._sliderTexts[args.SLIDER3] = "IDS_AP_BALANCEDEC";
      /** @type {string} */
      this._sliderTexts[args.SLIDER4] = "IDS_AP_LOSSREACHES";
    }, self.prototype.createSliders = function() {
      var pp;
      for (pp in this._sliderTexts) {
        if (this._sliderTexts.hasOwnProperty(pp)) {
          this.createSlider(pp, this._sliderTexts[pp], "", this._aPSettingsContainer, [0, 1]);
        }
      }
    }, self.prototype.createSlider = function(name, value, options, node, radius) {
      var s = new Circle(value, options, radius, true);
      return this._sliders[name] = s, node.appendChild(s.getDOMNode()), s;
    }, self.prototype.createCheckboxes = function() {
      var i;
      for (i in this._checkboxTexts) {
        if (this._checkboxTexts.hasOwnProperty(i)) {
          this._buttons[i] = this.createCheckbox(i, this._checkboxTexts[i], this._aPSettingsContainer, "none");
        }
      }
    }, self.prototype.setupHtml = function() {
      var p = RepositoryApi.getInstance();
      this._view = p.createDiv("betview", "");
      this._autoplayContainer = p.createAndAppendDiv(this._view, "autoplayContainer", "");
      this._aPSettingsContainer = p.createAndAppendDiv(this._view, "betsettingsview", "");
      this._stopAutoPlayCaption = p.createAndAppendDiv(this._aPSettingsContainer, "betview_autoplay", "stop_caption", "IDS_AP_STOPAUTOPLAY");
      this._view.appendChild(this._aPSettingsContainer);
    }, self.prototype.setSliderAppearance = function(index, result, n, title) {
      if (void 0 === title) {
        title = void 0;
      }
      var button = this._sliders[index];
      /** @type {number} */
      button.getDOMNode().style.marginTop = result;
      /** @type {number} */
      button.getDOMNode().style.width = n;
      if (void 0 !== title) {
        button.setCaption(title);
      }
    }, self.SLIDER_SHORT_WIDTH = "38vw", self.SETTINGS_SLIDER_WIDTH = "100vw", self.SLIDER_MARGIN_LS = "4vw", self.SLIDER_MARGIN_PT = "0vw", self;
  }(tokens);
  var walk = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var pos = function(config) {
    /**
     * @param {?} orientation
     * @return {?}
     */
    function init(orientation) {
      var that = config.call(this, "IDS_MENU_BET_VSLOT", orientation) || this;
      that._view = RepositoryApi.getInstance().createDiv("betview", "");
      that.setupLabels();
      that.setupData();
      that.setupSliders();
      var self = exports.SystemManager.getDeviceHandler();
      return self && (self.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return that.handleOrientationChange();
      }), self.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return that.handleOrientationChange();
      })), that;
    }
    return walk(init, config), init.prototype.show = function(str) {
    }, init.prototype.setCurrency = function(data) {
      var slider = this._sliders[element.DENOM];
      if (slider) {
        slider.setCaption(this._sliderData[element.DENOM], "> (" + data + ")");
      }
    }, init.prototype.setSliderValueArray = function(index, e) {
      this._sliders[index].setValueArray(e);
    }, init.prototype.setSliderValue = function(index, value) {
      this._sliders[index].setValue(value);
    }, init.prototype.setSliderIndex = function(index, e) {
      this._sliders[index].setValueIndex(e);
    }, init.prototype.isVisible = function() {
      return false;
    }, init.prototype.showSlider = function(index, e) {
      this._sliders[index].show(e);
    }, init.prototype.setText = function(message, value) {
    }, init.prototype.handleOrientationChange = function() {
      var t = RepositoryApi.getInstance();
      t.getScalableDiv(this._betPanelFirstHalf).update();
      t.getScalableDiv(this._betPanelSecondHalf).update();
    }, init.prototype.setButtonText = function(buttonId, text) {
    }, init.prototype.setLabelText = function(index, value) {
      var n = RepositoryApi.getInstance();
      if (void 0 !== this._labels[index]) {
        /** @type {number} */
        this._labels[index].innerHTML = value;
        n.getScalableDiv(this._betPanelFirstHalf).update();
        n.getScalableDiv(this._betPanelSecondHalf).update();
      }
    }, init.prototype.setLabelArgs = function(formatters, customFormatters) {
    }, init.prototype.enableSlider = function(index, id) {
      this._sliders[index].enable(id);
    }, init.prototype.showPanel = function(index, show) {
      if (void 0 !== this._panels[index]) {
        /** @type {string} */
        this._panels[index].style.visibility = show ? "visible" : "hidden";
      }
    }, init.prototype.createSlider = function(i, value, name, options) {
      var s = new Circle(value, name, options);
      return this._sliders[i] = s, s;
    }, init.prototype.setupSliders = function() {
      var i;
      for (i in this._sliderData) {
        if (this._sliderData.hasOwnProperty(i)) {
          this.createSlider(i, this._sliderData[i], "", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
          this._view.appendChild(this._sliders[i].getDOMNode());
        }
      }
    }, init.prototype.setupLabels = function() {
      var t = RepositoryApi.getInstance();
      var e = t.createDiv("", "balance_container", "");
      this._betPanelFirstHalf = t.createAndAppendDiv(e, "", "first_half", "");
      this._betPanelSecondHalf = t.createAndAppendDiv(e, "", "second_half", "");
      var field = t.createAndAppendDiv(this._betPanelSecondHalf, "", "value", "");
      var node = t.createAndAppendDiv(this._betPanelFirstHalf, "", "value", "");
      t.createScalableDiv(this._betPanelFirstHalf, e, 0.49, 10);
      t.createScalableDiv(this._betPanelSecondHalf, e, 0.49, 10);
      t.createAndAppendDiv(this._betPanelSecondHalf, "", "text", "IDS_BETINCASH_CAPTION");
      t.createAndAppendDiv(this._betPanelFirstHalf, "", "text", "IDS_BETINCOINS_CAPTION");
      this._labels = {};
      this._labels[element.COINBET_LABEL_MOBILE] = node;
      this._labels[element.CASHBET_LABEL] = field;
      this._labels[element.COINBALANCE_LABEL] = t.createDiv("", "", "");
      this._labels[element.COINBET_LABEL] = t.createDiv("", "", "");
      this._panels = {};
      this._panels[element.BALANCE_CONTAINER] = e;
      this._view.appendChild(e);
    }, init.prototype.setupData = function() {
      this._sliderData = {};
      /** @type {string} */
      this._sliderData[element.COINS] = "IDS_COINS_CAPTION";
      /** @type {string} */
      this._sliderData[element.DENOM] = "IDS_COINVALUE_CAPTION";
    }, init;
  }(tokens);
  var hook = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Context = function(uri) {
    /**
     * @param {?} url
     * @param {string} value
     * @param {?} key
     * @param {!Object} liveSrc
     * @return {?}
     */
    function init(url, value, key, liveSrc) {
      var _this = uri.call(this, "IDS_BTN_CASHIER", url) || this;
      return _this._url = value, _this._urlMode = key, _this._dispatcher = liveSrc, _this._view = RepositoryApi.getInstance().createDiv("cashierview"), _this._view.appendChild(_this.createButton()), _this;
    }
    return hook(init, uri), init.prototype.createButton = function() {
      var _this = this;
      var n = RepositoryApi.getInstance().createDiv("cashier_button", "cashierview_button");
      return RepositoryApi.getInstance().createTextfield(n, void 0, void 0, "IDS_BTN_CASHIER", "IDS_BTN_CASHIER"), n.onclick = function() {
        if (_this._urlMode === self.UrlMode.REDIRECT) {
          _this._dispatcher.dispatch(new self.ExitEvent(self.ExitEvent.NO_LOGOUT, self.ExitReason.CASHIER_REDIRECT));
        } else {
          window.open(_this._url, "_blank").focus();
        }
      }, n;
    }, init;
  }(tokens);
  var Va = function() {
    /**
     * @param {!Object} value
     * @return {undefined}
     */
    function init(value) {
      var s = this;
      /** @type {!Object} */
      this._parent = value;
      var dstBuffer = RepositoryApi.getInstance();
      this._background = dstBuffer.createAndAppendDiv(document.getElementById(this._parent), "swipe_background");
      this._arrowDot = dstBuffer.createAndAppendDiv(this._background, "arrow_dot");
      this._hand = dstBuffer.createAndAppendDiv(this._background, "hand");
      this._background.addEventListener("touchstart", function(e) {
        return s.onTouchStart(e);
      });
      this._background.addEventListener("touchmove", function(e) {
        return s.onTouchMove(e);
      });
    }
    return init.prototype.show = function(str) {
      if (str) {
        if (!this._background.classList.contains("bgShow")) {
          this._background.classList.add("bgShow");
        }
        if (this._background.classList.contains("fadeoutAnim")) {
          this._background.classList.remove("fadeoutAnim");
        }
      } else {
        if (this._background.classList.contains("bgShow")) {
          this._background.classList.remove("bgShow");
        }
        if (!this._background.classList.contains("fadeoutAnim")) {
          this._background.classList.add("fadeoutAnim");
        }
      }
    }, init.prototype.onTouchStart = function(event) {
      if (event.touches.length > 1) {
        event.preventDefault();
      }
    }, init.prototype.onTouchMove = function(event) {
      if (event.touches.length > 1) {
        event.preventDefault();
      }
    }, init;
  }();
  var MakeClosure_AddDependencyLoad = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var root = function(request) {
    /**
     * @return {?}
     */
    function load() {
      var subCollection = request.call(this) || this;
      return new RepositoryApi(self.ResourceManager.getInstance().getTextManager()), subCollection._parent = document.getElementById("modalwin_container"), subCollection;
    }
    return MakeClosure_AddDependencyLoad(load, request), load.prototype.destroy = function() {
      this._container.classList.add("hidden");
      this._parent.classList.add("hidden");
      /** @type {(Element|null)} */
      var filterTabGroup = document.getElementById("menu");
      if (filterTabGroup) {
        filterTabGroup.classList.add("hidden");
      }
    }, load.prototype.init = function(c) {
      /** @type {!Object} */
      this._config = c;
      var params = self.ResourceManager.getInstance().getEntityManager();
      var value = params.create("Modal");
      params.add("modal", value);
      this._wrapper = c.gameContainer;
      value.getDisplay("disabler").setVisible(false);
      /** @type {(Element|null)} */
      var tilePane = document.getElementById(this._config.gameContainer);
      /** @type {!Element} */
      this._container = document.createElement("div");
      /** @type {string} */
      this._container.id = "uiWrapper";
      tilePane.appendChild(this._container);
    }, load.prototype.createPlayForRealView = function(selector) {
      return new JarallaxObject(selector);
    }, load.prototype.createMessageView = function(message, config, from, to) {
      return void 0 === to && (to = false), new Exception(message, config, from);
    }, load.prototype.createBonusBalanceMessageView = function(query, cb, n, froot) {
      return void 0 === froot && (froot = false), new EventedQueryProcessor(query, cb, n);
    }, load.prototype.createExternalMessageView = function(sound, type, data, close, volume, pitch, key, selector) {
      return new cmSoundEffect(sound, type, data, close, volume, pitch, key, selector);
    }, load.prototype.createDisablerView = function(name) {
      return new canvas(name);
    }, load.prototype.createPlayConfirmView = function(text, settings, container) {
      return new Editor(text, settings, container);
    }, load.prototype.createSwipeToHideView = function() {
      return new Va(this._wrapper);
    }, load;
  }(self.CasinoViewFactory);
  var mergeCentroids = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var StateChange = function(src) {
    /**
     * @param {?} i
     * @param {string} value
     * @param {string} type
     * @param {!Object} s
     * @return {?}
     */
    function init(i, value, type, s) {
      var e = src.call(this, "IDS_BTN_GAMEHISTORY", i) || this;
      /** @type {string} */
      e._url = value;
      /** @type {string} */
      e._lang = type;
      /** @type {!Object} */
      e._dispatcher = s;
      /** @type {string} */
      e._startEvent = "mousedown";
      /** @type {string} */
      e._endEvent = "mouseup";
      /** @type {string} */
      e._moveEvent = "mousemove";
      /** @type {boolean} */
      e._isTouchDevice = "ontouchstart" in window;
      if (e._isTouchDevice) {
        /** @type {string} */
        e._startEvent = "touchstart";
        /** @type {string} */
        e._endEvent = "touchend";
        /** @type {string} */
        e._moveEvent = "touchmove";
      }
      e._view = RepositoryApi.getInstance().createDiv("gamehistoryview");
      e._gameHistoryOverlay = RepositoryApi.getInstance().createAndAppendDiv(e._view, "gamehistoryoverlay");
      e._gameHistoryOverlay.addEventListener(e._endEvent, function() {
        return e.closeDetailsView();
      });
      e._detailsView = RepositoryApi.getInstance().createAndAppendDiv(e._view, "detailsview");
      /** @type {string} */
      e._detailsView.style.display = "none";
      e._closeDetailsViewButton = RepositoryApi.getInstance().createDiv("closedetails");
      e._closeDetailsViewButton.addEventListener(e._endEvent, function() {
        return e.closeDetailsView();
      }, false);
      e._closeDetailsViewButton.classList.add("gamehistory_closeDetails");
      e._closeDetailsViewButton.classList.add("iconCrossSign");
      /**
       * @return {?}
       */
      e._closeDetailsViewDelegate = function() {
        return e.closeDetailsView();
      };
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return e.handleOrientationChange();
      }), scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return e.handleOrientationChange();
      })), s.addEventListener(self.MegatonUIEvent.MENUSHOW, function(element) {
        return e.onShowMenuEvent(element);
      }), e;
    }
    return mergeCentroids(init, src), init.prototype.loadPage = function(path) {
      var self = this;
      if ("" !== path) {
        /** @type {string} */
        path = path + ("&nocache=" + (new Date).getTime());
        /** @type {string} */
        path = path + "&method=open";
        /** @type {!XMLHttpRequest} */
        var xhr = new XMLHttpRequest;
        xhr.open("GET", path, true);
        xhr.setRequestHeader("Expires", "0");
        xhr.addEventListener("readystatechange", function(request) {
          return self.onReadyStateChange(request);
        });
        xhr.addEventListener("error", function(err) {
          return self.onError(err);
        });
        /** @type {string} */
        xhr.responseType = "document";
        xhr.send();
      }
    }, init.prototype.onReadyStateChange = function(event) {
      var doc = event.target;
      if (4 === doc.readyState && 200 === doc.status) {
        this.createContentDiv(doc.response.body);
      }
    }, init.prototype.onError = function(assembly) {
    }, init.prototype.createContentDiv = function(container) {
      var lang_1 = this;
      this.addDetailsButton(container);
      this._content = RepositoryApi.getInstance().createDiv();
      this._content.innerHTML = container.innerHTML;
      this._view.appendChild(this._content);
      this._roundHistoryElement = this._content.getElementsByClassName("roundhistory")[0];
      /** @type {string} */
      this._roundHistoryElement.style.width = 0.95 * document.getElementById("gamehistoryview").clientWidth + "px";
      var nHead = this._roundHistoryElement.getElementsByClassName("header")[0];
      var headings = nHead.getElementsByTagName("th");
      var desc = RepositoryApi.getInstance().getTextManager().getByName("IDS_DATE_CAPTION").getText();
      var value = RepositoryApi.getInstance().getTextManager().getByName("IDS_GAMENAME_CAPTION").getText();
      var s = RepositoryApi.getInstance().getTextManager().getByName("IDS_BET_CAPTION").getText();
      var a = RepositoryApi.getInstance().getTextManager().getByName("IDS_WIN_CAPTION").getText();
      var hours = RepositoryApi.getInstance().getTextManager().getByName("IDS_DETAILS_CAPTION").getText();
      desc = desc.indexOf(":") > 0 ? desc.substring(0, desc.indexOf(":")) : desc;
      value = value.indexOf(":") > 0 ? value.substring(0, value.indexOf(":")) : value;
      s = s.indexOf(":") > 0 ? s.substring(0, s.indexOf(":")) : s;
      a = a.indexOf(":") > 0 ? a.substring(0, a.indexOf(":")) : a;
      hours = hours.indexOf(":") > 0 ? hours.substring(0, hours.indexOf(":")) : hours;
      /** @type {number} */
      var i = 0;
      for (; i < headings.length; i++) {
        switch(headings[i].id) {
          case "gameHistoryDate":
            headings[i].innerHTML = desc;
            break;
          case "gameHistoryGamename":
            headings[i].innerHTML = value;
            break;
          case "gameHistoryBet":
            headings[i].innerHTML = s;
            break;
          case "gameHistoryWin":
            headings[i].innerHTML = a;
            break;
          case "gameHistoryDetails":
            headings[i].innerHTML = hours;
        }
      }
      var move_elements = this._roundHistoryElement.getElementsByTagName("tr");
      /** @type {number} */
      i = 1;
      for (; i < move_elements.length; i++) {
        move_elements[i].addEventListener(this._startEvent, function(opt_path) {
          return lang_1.checkElementClickedOnTouchStart(opt_path);
        });
        move_elements[i].addEventListener(this._endEvent, function(t) {
          return lang_1.checkElementClickedOnTouchEnd(t);
        });
      }
    }, init.prototype.checkElementClickedOnTouchStart = function(newPath) {
      if (this._isTouchDevice) {
        /** @type {!Object} */
        var origNewPath = newPath;
        this._clickedElementY = origNewPath.changedTouches[0].pageY;
        this._clickedElementX = origNewPath.changedTouches[0].pageX;
      } else {
        /** @type {!Object} */
        var title = newPath;
        this._clickedElementY = title.y;
        this._clickedElementX = title.x;
      }
    }, init.prototype.checkElementClickedOnTouchEnd = function(target) {
      if (this._isTouchDevice) {
        /** @type {!Object} */
        var e = target;
        this._clickedElementYEnd = e.changedTouches[0].pageY;
        this._clickedElementXEnd = e.changedTouches[0].pageX;
      } else {
        /** @type {!Object} */
        var bar = target;
        this._clickedElementYEnd = bar.y;
        this._clickedElementXEnd = bar.x;
      }
      if (this._clickedElementX - this._clickedElementXEnd < 50 && (this._clickedElementY + 20 < this._clickedElementYEnd && !(this._clickedElementY - 20 < this._clickedElementYEnd) || !(this._clickedElementY + 20 < this._clickedElementYEnd) && this._clickedElementY - 20 < this._clickedElementYEnd)) {
        /** @type {!RegExp} */
        var regNodeAttr = /\(([^)]+)\)/;
        var s = target.target.parentElement.lastElementChild.children[0].href;
        /** @type {(Array<string>|null)} */
        var s4 = regNodeAttr.exec(s);
        this.opendetails(s4[1]);
      }
      /** @type {number} */
      this._clickedElementY = -1;
      /** @type {number} */
      this._clickedElementX = -1;
    }, init.prototype.addDetailsButton = function(folder) {
      var elems = folder.getElementsByTagName("a");
      /** @type {number} */
      var i = 0;
      for (; i < elems.length; i++) {
        if (!elems[i].parentElement || "back" !== elems[i].parentElement.id) {
          var elem = elems[i];
          /** @type {string} */
          elem.innerHTML = "";
          /** @type {string} */
          elem.style.pointerEvents = "none";
          var o = RepositoryApi.getInstance().createDiv("detailsButton");
          o.classList.add("gamehistory_showInfo");
          o.classList.add("iconPlusSign");
          elems[i].appendChild(o);
        }
      }
    }, init.prototype.stripElementsByTagName = function(dom, name) {
      /** @type {!Array} */
      var ss = [];
      var result = dom.getElementsByTagName(name);
      /** @type {number} */
      var i = 0;
      for (; i < result.length; i++) {
        ss.push(result[i]);
      }
      /** @type {number} */
      i = 0;
      for (; i < ss.length; i++) {
        ss[i].parentNode.removeChild(ss[i]);
      }
    }, init.prototype.opendetails = function(canCreateDiscussions) {
      /** @type {string} */
      var c_user = "/CasinoHistory/Details/" + canCreateDiscussions + "?lang=" + this._lang;
      this.loadDetails(decodeURIComponent(c_user));
    }, init.prototype.loadDetails = function(url) {
      var o = this;
      /** @type {!XMLHttpRequest} */
      var xhr = new XMLHttpRequest;
      xhr.open("GET", url, true);
      xhr.addEventListener("readystatechange", function(t) {
        return o.onReadyStateChangeDetails(t);
      });
      xhr.addEventListener("error", function(err) {
        return o.onError(err);
      });
      /** @type {string} */
      xhr.responseType = "document";
      xhr.send();
    }, init.prototype.onReadyStateChangeDetails = function(b) {
      var e = b.target;
      if (4 === e.readyState && 200 === e.status) {
        this.createDetailsWindow(e.response.body);
      }
    }, init.prototype.createDetailsWindow = function(t) {
      this.stripElementsByTagName(t, "a");
      this._detailsView.innerHTML = t.innerHTML;
      this._detailsView.appendChild(this._closeDetailsViewButton);
      this.rearrangeTableElements();
      this.removeFillerSpace();
      /** @type {string} */
      this._detailsView.style.display = "inline-block";
      /** @type {!Element} */
      this._roundHistoryDiv = document.getElementsByClassName("roundhistory")[0];
      var y = this._view.parentElement.scrollTop;
      if (this._roundHistoryDiv) {
        /** @type {string} */
        this._view.style.height = 1.1 * this._roundHistoryDiv.clientHeight + "px";
      }
      this._gameHistoryOverlay.classList.add("dimmed");
      this._view.classList.add("dimmed");
      this._view.scrollTop = y;
      this._gameHistoryOverlay.addEventListener(this._endEvent, this._closeDetailsViewDelegate);
      this._dispatcher.dispatch(new tree.GameHistoryEvent(tree.GameHistoryEvent.CREATE_DETAILS_WINDOW));
    }, init.prototype.closeDetailsView = function() {
      /** @type {string} */
      this._detailsView.style.display = "none";
      var b = this._view.scrollTop;
      if (this._roundHistoryDiv) {
        /** @type {string} */
        this._view.style.height = 1.1 * this._roundHistoryDiv.clientHeight + "px";
      }
      this._gameHistoryOverlay.classList.remove("dimmed");
      this._view.classList.remove("dimmed");
      this._gameHistoryOverlay.removeEventListener(this._endEvent, this._closeDetailsViewDelegate);
      this._view.parentElement.scrollTop = b;
      this._dispatcher.dispatch(new tree.GameHistoryEvent(tree.GameHistoryEvent.CLOSE_DETAILS_WINDOW));
    }, init.prototype.rearrangeTableElements = function() {
      var t = this._detailsView.getElementsByTagName("tbody")[0];
      var r = t.getElementsByTagName("tr");
      var p = r[0];
      var i = r.length;
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {string} */
        p.style.width = 0.367 * document.body.clientWidth + "px";
      } else {
        /** @type {string} */
        p.style.width = 0.613 * document.body.clientWidth + "px";
      }
      /** @type {number} */
      var n = 0;
      for (; n < i; n++) {
        /** @type {!Element} */
        var parent = document.createElement("tr");
        p = r[n];
        parent.insertBefore(p.lastChild, parent.childNodes[0]);
        parent.insertBefore(p.lastChild, parent.childNodes[0]);
        t.appendChild(parent);
      }
    }, init.prototype.handleOrientationChange = function() {
      /** @type {string} */
      this._gameHistoryOverlay.style.height = "100%";
      if (this._roundHistoryElement) {
        /** @type {string} */
        this._roundHistoryElement.style.width = 0.95 * document.getElementById("gamehistoryview").clientWidth + "px";
      }
      RepositoryApi.getInstance().setStyle(this._view, exports.DEVICE.orientation);
    }, init.prototype.onFocusOut = function() {
      this.closeDetailsView();
      if (this._content) {
        this._view.removeChild(this._content);
        this._content = void 0;
      }
      clearTimeout(this._statsTimeOut);
    }, init.prototype.onFocusIn = function() {
      var _this = this;
      if (this._content) {
        this._view.removeChild(this._content);
        this._content = void 0;
      }
      this.loadPage(this._url);
      this._statsTimeOut = window.setTimeout(function() {
        _this._dispatcher.dispatch(new self.MegatonUIEvent(self.MegatonUIEvent.HISTORY));
      }, 3000);
    }, init.prototype.onShowMenuEvent = function(suppressDisabledCheck) {
    }, init.prototype.removeFillerSpace = function() {
      if (this._detailsView) {
        var photoBatches = this._detailsView.getElementsByClassName("reel");
        /** @type {number} */
        var batchIndex = 0;
        for (; batchIndex < photoBatches.length; batchIndex++) {
          var elements = photoBatches[batchIndex].getElementsByTagName("td");
          /** @type {number} */
          var i = 0;
          for (; i < elements.length; i++) {
            var element = elements[i];
            if ("&nbsp;" === element.innerHTML) {
              /** @type {string} */
              element.innerHTML = "";
            }
          }
        }
      }
    }, init;
  }(tokens);
  var ShapeHandlerClass = function() {
    /**
     * @param {undefined} name
     * @return {undefined}
     */
    function editor(name) {
      var self = this;
      this.createElement(name);
      this.handleOrientationChange();
      var scope = exports.SystemManager.getDeviceHandler();
      if (scope) {
        scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
          return self.handleOrientationChange();
        });
      }
    }
    return editor.prototype.createElement = function(name) {
      /** @type {!Element} */
      this._gameNameElement = document.createElement("div");
      /** @type {string} */
      this._gameNameElement.id = "gameName";
      this._gameNameElement.classList.add("game_name");
      name.appendChild(this._gameNameElement);
      this.show(false);
    }, editor.prototype.setGameTitle = function(t) {
      /** @type {string} */
      this._gameNameElement.innerHTML = t;
    }, editor.prototype.show = function(str, option) {
      if (str) {
        this._gameNameElement.classList.remove("hidden");
      } else {
        this._gameNameElement.classList.add("hidden");
      }
    }, editor.prototype.isVisible = function() {
      return !this._gameNameElement.classList.contains("hidden");
    }, editor.prototype.handleOrientationChange = function() {
      if ("ls" === exports.DEVICE.orientation) {
        this._gameNameElement.classList.add("ls");
        this._gameNameElement.classList.remove("pt");
      } else {
        this._gameNameElement.classList.add("pt");
        this._gameNameElement.classList.remove("ls");
      }
    }, editor;
  }();
  var validator = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var NavigationError = function(config) {
    /**
     * @param {?} type
     * @param {string} value
     * @param {!Object} scope
     * @return {?}
     */
    function init(type, value, scope) {
      var me = config.call(this, "IDS_BTN_GAME_RULES", type) || this;
      return me._url = value, scope.addEventListener(self.CurrencyEvent.CURRENCY, function(t) {
        return me.init(t);
      }), scope.addEventListener(tree.JackpotStatusEvent.TOGGLE, function() {
        return me.setRefresh(true);
      }), me._dispatcher = scope, me._view = RepositoryApi.getInstance().createDiv("gamerulesview"), me._refresh = true, me;
    }
    return validator(init, config), init.prototype.setRefresh = function(refresh) {
      /** @type {boolean} */
      this._refresh = refresh;
    }, init.prototype.init = function(x) {
      this._currency = x.currency;
    }, init.prototype.loadPage = function(title, name) {
      var self = this;
      /** @type {string} */
      title = title + ("&currency=" + name);
      /** @type {string} */
      title = title + "&method=open";
      /** @type {!XMLHttpRequest} */
      var xhr = new XMLHttpRequest;
      xhr.open("GET", title, true);
      xhr.addEventListener("readystatechange", function(request) {
        return self.onReadyStateChange(request);
      });
      xhr.addEventListener("error", function(err) {
        return self.onError(err);
      });
      /** @type {string} */
      xhr.responseType = "document";
      xhr.send();
    }, init.prototype.onFocusIn = function() {
      var _this = this;
      if (this._refresh) {
        this.loadPage(this._url, this._currency);
        /** @type {boolean} */
        this._refresh = false;
      }
      this._statsTimeOut = window.setTimeout(function() {
        _this._dispatcher.dispatch(new self.MegatonUIEvent(self.MegatonUIEvent.HELP));
      }, 3000);
    }, init.prototype.onFocusOut = function() {
      clearTimeout(this._statsTimeOut);
      /** @type {boolean} */
      this._refresh = false;
    }, init.prototype.onReadyStateChange = function(event) {
      var doc = event.target;
      if (4 === doc.readyState && 200 === doc.status) {
        this.createContentDiv(doc.response.body);
      }
    }, init.prototype.onError = function(assembly) {
    }, init.prototype.createContentDiv = function(container) {
      if (this._content) {
        this._view.removeChild(this._content);
      }
      this.stripElementsByTagName(container, "script");
      this.stripElementsByTagName(container, "a");
      this._content = RepositoryApi.getInstance().createDiv();
      this._content.innerHTML = container.innerHTML;
      this._view.appendChild(this._content);
    }, init.prototype.stripElementsByTagName = function(dom, name) {
      /** @type {!Array} */
      var ss = [];
      var result = dom.getElementsByTagName(name);
      /** @type {number} */
      var i = 0;
      for (; i < result.length; i++) {
        ss.push(result[i]);
      }
      /** @type {number} */
      i = 0;
      for (; i < ss.length; i++) {
        ss[i].parentNode.removeChild(ss[i]);
      }
    }, init;
  }(tokens);
  var Ya = function() {
    /**
     * @return {undefined}
     */
    function GLYFEditor() {
    }
    return GLYFEditor.prototype.show = function(str) {
    }, GLYFEditor.prototype.isVisible = function() {
      return true;
    }, GLYFEditor;
  }();
  var fixFontSmoothing = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Signature = function(value) {
    /**
     * @param {?} options
     * @param {?} scope
     * @param {!NodeList} template
     * @return {?}
     */
    function init(options, scope, template) {
      var me = value.call(this, options, scope) || this;
      /** @type {number} */
      var i = 0;
      for (; i < template.length; i++) {
        me.addMenuItem(template[i]);
        template[i].onAddedToParent();
      }
      return me;
    }
    return fixFontSmoothing(init, value), init.prototype.setPage = function(index) {
      this.onNavigationBarButtonClick(index);
    }, init;
  }(Image);
  var getPrevIndex = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var phylogram = function(array) {
    /**
     * @param {?} element
     * @return {?}
     */
    function JavaScriptLogViewController(element) {
      var self = array.call(this, element) || this;
      return self._prompt = RepositoryApi.getInstance().createAndAppendDiv(self._root, "orientationPrompt"), self;
    }
    return getPrevIndex(JavaScriptLogViewController, array), JavaScriptLogViewController.prototype.show = function(x) {
      /** @type {string} */
      this._prompt.style.display = x ? "" : "none";
    }, JavaScriptLogViewController;
  }(selector);
  var debug = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MatchedTags = function(src) {
    /**
     * @param {?} i
     * @param {!Object} n
     * @return {?}
     */
    function init(i, n) {
      var _this = src.call(this, "IDS_PLAYFORREAL", i) || this;
      return _this._dispatcher = n, _this._view = RepositoryApi.getInstance().createDiv("cashierview"), _this._view.appendChild(_this.createButton()), _this;
    }
    return debug(init, src), init.prototype.createButton = function() {
      var _this = this;
      var n = RepositoryApi.getInstance().createDiv("cashier_button", "cashierview_button");
      return RepositoryApi.getInstance().createTextfield(n, void 0, void 0, "IDS_PLAYFORREAL", "IDS_PLAYFORREAL"), n.onclick = function() {
        _this._dispatcher.dispatch(new self.ExitEvent(self.ExitEvent.NO_LOGOUT, self.ExitReason.PLAYFORREAL_REDIRECT));
      }, n;
    }, init;
  }(tokens);
  var propIf = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var $a = function() {
    /**
     * @param {string} data
     * @param {?} latLon
     * @return {undefined}
     */
    function createInfoWindow(data, latLon) {
      /** @type {string} */
      this.text = data;
      this.styleID = latLon;
    }
    return createInfoWindow;
  }();
  var AsyncFor = function(value) {
    /**
     * @param {?} text
     * @param {?} length
     * @param {!NodeList} params
     * @return {?}
     */
    function add(text, length, params) {
      var me = value.call(this, "IDS_BTN_SETTINGS", text) || this;
      me.InitUIData();
      me._view = RepositoryApi.getInstance().createDiv("settingsview");
      var data;
      /** @type {number} */
      var i = 0;
      var actual_count = params.length;
      for (; i < actual_count; i++) {
        if (void 0 !== (data = me._uIData[params[i]])) {
          me._buttons[params[i]] = me.createCheckbox(params[i], data.text, me._view, data.styleID);
        }
      }
      return me;
    }
    return propIf(add, value), add.prototype.createCheckbox = function(id, name, labelText, checked) {
      var field = new ZmPrefAccount(name, checked);
      return field.getDOMNode().classList.add("settingsview_checkbox"), field.getDOMNode().style.position = "", labelText.appendChild(field.getDOMNode()), this._buttons[id] = field, field;
    }, add.prototype.show = function(str) {
    }, add.prototype.isVisible = function() {
      return false;
    }, add.prototype.InitUIData = function() {
      this._uIData = {};
      this._uIData[s.SOUND] = new $a("IDS_M_SETTINGS_L1", "settingsIconSound");
      this._uIData[s.AUTOADJUSTBET] = new $a("IDS_M_SETTINGS_L9", "settingsIconAutoAdjustBet");
      this._uIData[s.LEFTHANDMODE] = new $a("IDS_M_SETTINGS_L14", "settingsIconLeftHand");
      this._uIData[s.FASTPLAY] = new $a("IDS_M_SETTINGS_L12", "settingsIconFastPlay");
    }, add;
  }(tokens);
  var test = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var cdn_url = function(fn) {
    /**
     * @param {?} event
     * @param {!Object} config
     * @return {?}
     */
    function init(event, config) {
      var me = fn.call(this, event) || this;
      /** @type {boolean} */
      me._showClock = true;
      me._moneyFormatter = self.ResourceManager.getInstance().getMoneyFormatter();
      /** @type {!Object} */
      me._config = config;
      /** @type {string} */
      me._mode = "normal";
      /** @type {number} */
      me._lastTouch = 0;
      me._scales = init.WRAPPER_SCALES;
      me._balanceLabelType = self.BonusBalanceEventType.MIX;
      if (config) {
        /** @type {string} */
        me._mode = config.asCredit ? "credits" : "normal";
      }
      var scope = exports.SystemManager.getDeviceHandler();
      if (scope) {
        scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
          return me.HandleOrientationChange();
        });
        scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
          return me.HandleOrientationChange();
        });
        scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
          return me.onResize();
        });
      }
      var assert = RepositoryApi.getInstance();
      return me._buttonsWrapper = assert.createAndAppendDiv(me._root, "buttonsContainer"), me._gamePanel = document.getElementById("gamepanel") || assert.createAndAppendDiv(me._root, "gamepanel"), me._backgroundImage = assert.createAndAppendDiv(me._gamePanel, "backgroundImg"), me._buttons[data.MOBILE_MENU] = new constructor("", me._gamePanel, "menuImg", "menuButtonWrapper"), me._buttons[data.EXIT] = new constructor("", me._gamePanel, "lobbyImg", "lobbyButtonWrapper"), me._buttons[data.MOBILE_SOUND] = 
      new constructor("", me._gamePanel, "soundImg", "soundButtonWrapper"), me._infoBar = assert.createAndAppendDiv(me._gamePanel, "informationBar"), me._bottomPanelWrapper = assert.createAndAppendDiv(me._gamePanel, "bottomPanelWrapper"), me._pngLogo = assert.createAndAppendDiv(me._bottomPanelWrapper, "pngLogo"), me._portraitPanelWrapper = assert.createAndAppendDiv(me._gamePanel, "portraitPanelWrapper"), me._gamePanel.addEventListener("touchstart", me.onTouchStart, true), me._gamePanel.addEventListener("touchend", 
      me.onTouchStart, true), me.createChildDivs(), me.setLeftHandMode(false), me.showInfoBar(false), me;
    }
    return test(init, fn), init.prototype.setBalanceLabelType = function(isSlidingUp, $cont) {
      if (void 0 === $cont) {
        /** @type {boolean} */
        $cont = false;
      }
      /** @type {!Function} */
      this._balanceLabelType = isSlidingUp;
      RepositoryApi.getInstance().setTextWidthProxy(this._balanceCaption, $cont ? "IDS_MENU_TOTALWIN_ALT" : this.getBalanceLabel());
    }, init.prototype.getBalanceLabel = function() {
      return this._balanceLabelType === self.BonusBalanceEventType.BONUS ? "IDS_BONUS_CAPTION" : "IDS_BALANCE_CAPTION";
    }, init.prototype.createChildDivs = function() {
      var log = RepositoryApi.getInstance();
      /** @type {boolean} */
      this._displayCoins = !this._config || !this._config.asCredit;
      this._clockWrapper = log.createDiv("clockWrapper");
      log.createAndAppendDiv(this._clockWrapper, "clockImg");
      this._localTime = log.createTextfield(this._clockWrapper, "time", void 0, " ");
      this._moneyBalanceWrapper = log.createDiv("moneyBalanceWrapper");
      this._coinsBalanceWrapper = log.createDiv("coinsBalanceWrapper");
      this._coinsBetWrapper = log.createDiv("coinsBetWrapper");
      this._freeGameBetWrapper = log.createDiv("freeGameBetWrapper");
      this._moneyWinWrapper = log.createDiv("moneyWinWrapper");
      this._moneyBetWrapper = log.createDiv("moneyBetWrapper");
      var error = this.getBalanceLabel();
      this._balanceCaption = log.createTextfield(this._moneyBalanceWrapper, "balanceText", void 0, error, error);
      this._coinsCaption = log.createTextfield(this._coinsBalanceWrapper, void 0, "coinsText", "IDS_COINS_CAPTION", "IDS_COINS_CAPTION");
      this._coinBetCaption = log.createTextfield(this._coinsBetWrapper, void 0, "betCoinsText", "IDS_BET_CAPTION", "IDS_BET_CAPTION");
      this._freeGameBetCaption = log.createTextfield(this._freeGameBetWrapper, void 0, "freeGameBetText", "IDS_MENU_FREEBET", "IDS_MENU_FREEBET");
      this._winCaption = log.createTextfield(this._moneyWinWrapper, void 0, "winText", "IDS_MENU_TOTALWIN_ALT", "IDS_MENU_TOTALWIN_ALT");
      this._moneybetCaption = log.createTextfield(this._moneyBetWrapper, void 0, "betMoneyText", "IDS_MENU_TOTALBET_VSLOT_ALT", "IDS_MENU_TOTALBET_VSLOT_ALT");
      this._moneyBalance = log.createTextfield(this._moneyBalanceWrapper, "moneyBalance", void 0, " ");
      this._coinsBalance = log.createTextfield(this._coinsBalanceWrapper, void 0, "coinsBalance", " ");
      this._freeGameBet = log.createTextfield(this._freeGameBetWrapper, void 0, "freeGameBet", " ");
      this._coinsBet = log.createTextfield(this._coinsBetWrapper, void 0, "coinsBet", " ");
      this._moneyWin = log.createTextfield(this._moneyWinWrapper, void 0, "moneyWin", " ");
      this._moneyBet = log.createTextfield(this._moneyBetWrapper, void 0, "moneyBet", " ");
      exports.DEVICE.orientation;
      log.createScalableDiv(this._moneyBalanceWrapper, this._bottomPanelWrapper, this._scales.normal.ls.moneyBalance, 10, false);
      log.createScalableDiv(this._coinsBalanceWrapper, this._bottomPanelWrapper, this._scales.normal.ls.coinsBalance, 10);
      log.createScalableDiv(this._coinsBetWrapper, this._bottomPanelWrapper, this._scales.normal.ls.coinsBet, 10, false);
      log.createScalableDiv(this._freeGameBetWrapper, this._bottomPanelWrapper, this._scales.normal.ls.freeGameBet, 10);
      log.createScalableDiv(this._moneyWinWrapper, this._bottomPanelWrapper, this._scales.normal.ls.moneyWin, 10, false);
      log.createScalableDiv(this._moneyBetWrapper, this._bottomPanelWrapper, this._scales.normal.ls.moneyBet, 10);
      if (this._displayCoins) {
        log.appendChild(this._bottomPanelWrapper, this._clockWrapper);
        log.appendChild(this._bottomPanelWrapper, this._moneyBalanceWrapper);
        log.appendChild(this._bottomPanelWrapper, this._coinsBalanceWrapper);
        log.appendChild(this._bottomPanelWrapper, this._coinsBetWrapper);
        log.appendChild(this._bottomPanelWrapper, this._freeGameBetWrapper);
        log.appendChild(this._bottomPanelWrapper, this._moneyWinWrapper);
        log.appendChild(this._bottomPanelWrapper, this._moneyBetWrapper);
      } else {
        log.appendChild(this._bottomPanelWrapper, this._clockWrapper);
        log.appendChild(this._bottomPanelWrapper, this._moneyBalanceWrapper);
        log.appendChild(this._bottomPanelWrapper, this._freeGameBetWrapper);
        log.appendChild(this._bottomPanelWrapper, this._moneyWinWrapper);
        log.appendChild(this._bottomPanelWrapper, this._moneyBetWrapper);
        this._clockWrapper.classList.add("credits");
        this._pngLogo.classList.add("credits");
        this._moneyBalanceWrapper.classList.add("credits");
        this._freeGameBetWrapper.classList.add("credits");
        this._moneyWinWrapper.classList.add("credits");
        this._moneyBetWrapper.classList.add("credits");
      }
      this._freeGameBetWrapper.classList.add("nodisplay");
      this.HandleOrientationChange();
      if (!this._showClock) {
        /** @type {string} */
        this._clockWrapper.style.display = "none";
      }
    }, init.prototype.showPNGLogo = function(doShowDetailsSection) {
      /** @type {string} */
      this._pngLogo.style.display = doShowDetailsSection ? "" : "none";
    }, init.prototype.handleMysteryJackpot = function() {
    }, init.prototype.HandleOrientationChange = function() {
      var orientation = exports.DEVICE.orientation;
      if ("ls" === orientation) {
        this._gamePanel.classList.add("ls");
        this._buttonsWrapper.classList.add("ls");
        this._gamePanel.classList.remove("pt");
        this._buttonsWrapper.classList.remove("pt");
      } else {
        this._gamePanel.classList.add("pt");
        this._buttonsWrapper.classList.add("pt");
        this._gamePanel.classList.remove("ls");
        this._buttonsWrapper.classList.remove("ls");
      }
      this.updateScalableDivs(orientation);
    }, init.prototype.setLeftHandMode = function(addedRenderer) {
      if (addedRenderer) {
        this._gamePanel.classList.add("lhmode");
        this._buttonsWrapper.classList.add("lhmode");
      } else {
        this._gamePanel.classList.remove("lhmode");
        this._buttonsWrapper.classList.remove("lhmode");
      }
    }, init.prototype.setBalance = function(data) {
    }, init.prototype.setBet = function(t, e) {
      if (void 0 === e) {
        /** @type {boolean} */
        e = false;
      }
      if (!e) {
        this._moneyBet.innerHTML = this._moneyFormatter.MoneyToString(t, self.MoneyFormatterFlag.FORCE_DECIMAL);
      }
      this._freeGameBet.innerHTML = this._moneyFormatter.MoneyToString(t, self.MoneyFormatterFlag.FORCE_DECIMAL);
      RepositoryApi.getInstance().getScalableDiv(this._moneyBetWrapper).update();
      RepositoryApi.getInstance().getScalableDiv(this._coinsBetWrapper).update();
    }, init.prototype.setWin = function(date) {
      /** @type {string} */
      this._moneyWin.style.display = "none";
      if (0 !== date) {
        /** @type {string} */
        this._moneyWin.style.display = "";
        this._moneyWin.innerHTML = this._moneyFormatter.MoneyToString(date, self.MoneyFormatterFlag.FORCE_DECIMAL);
        RepositoryApi.getInstance().getScalableDiv(this._moneyWinWrapper).update();
      }
    }, init.prototype.setTime = function(val) {
      /** @type {string} */
      this._localTime.innerHTML = val;
    }, init.prototype.showClock = function(data) {
      if (true === data) {
        this._clockWrapper.classList.remove("hidden");
      } else {
        this._clockWrapper.classList.add("hidden");
      }
    }, init.prototype.showElement = function(b, el) {
    }, init.prototype.show = function(str) {
      if (str) {
        this._gamePanel.classList.remove("hidden");
        this._buttonsWrapper.classList.remove("hidden");
      } else {
        this._gamePanel.classList.add("hidden");
        this._buttonsWrapper.classList.add("hidden");
      }
    }, init.prototype.onSplash = function(sigma) {
      this.showInfoBar(!sigma);
    }, init.prototype.resizeHandler = function(e) {
      switch(e.state) {
        case 0:
          e.startDelayMs(1000 / 24 * 10);
          break;
        default:
          this.updateScalableDivs(exports.DEVICE.orientation);
          e.complete();
      }
    }, init.prototype.updateScalableDivs = function(aPanel_height) {
      var e = RepositoryApi.getInstance();
      if ("ls" == aPanel_height) {
        if (this._displayCoins) {
          e.getScalableDiv(this._moneyBalanceWrapper).setWidth(this._scales.normal.ls.moneyBalance);
          e.getScalableDiv(this._coinsBalanceWrapper).setWidth(this._scales.normal.ls.coinsBalance);
          e.getScalableDiv(this._freeGameBetWrapper).setWidth(this._scales.normal.ls.freeGameBet);
          e.getScalableDiv(this._moneyBetWrapper).setWidth(this._scales.normal.ls.moneyBet);
          e.getScalableDiv(this._coinsBetWrapper).setWidth(this._scales.normal.ls.coinsBet);
          e.getScalableDiv(this._moneyWinWrapper).setWidth(this._scales.normal.ls.moneyWin);
        } else {
          e.getScalableDiv(this._moneyBalanceWrapper).setWidth(this._scales.credits.ls.moneyBalance);
          e.getScalableDiv(this._coinsBalanceWrapper).setWidth(this._scales.credits.ls.coinsBalance);
          e.getScalableDiv(this._freeGameBetWrapper).setWidth(this._scales.credits.ls.freeGameBet);
          e.getScalableDiv(this._moneyBetWrapper).setWidth(this._scales.credits.ls.moneyBet);
          e.getScalableDiv(this._coinsBetWrapper).setWidth(this._scales.credits.ls.coinsBet);
          e.getScalableDiv(this._moneyWinWrapper).setWidth(this._scales.credits.ls.moneyWin);
        }
      } else {
        if (this._displayCoins) {
          e.getScalableDiv(this._moneyBalanceWrapper).setWidth(this._scales.normal.pt.moneyBalance);
          e.getScalableDiv(this._coinsBalanceWrapper).setWidth(this._scales.normal.pt.coinsBalance);
          e.getScalableDiv(this._freeGameBetWrapper).setWidth(this._scales.normal.pt.freeGameBet);
          e.getScalableDiv(this._moneyBetWrapper).setWidth(this._scales.normal.pt.moneyBet);
          e.getScalableDiv(this._coinsBetWrapper).setWidth(this._scales.normal.pt.coinsBet);
          e.getScalableDiv(this._moneyWinWrapper).setWidth(this._scales.normal.pt.moneyWin);
        } else {
          e.getScalableDiv(this._moneyBalanceWrapper).setWidth(this._scales.credits.pt.moneyBalance);
          e.getScalableDiv(this._coinsBalanceWrapper).setWidth(this._scales.credits.pt.coinsBalance);
          e.getScalableDiv(this._freeGameBetWrapper).setWidth(this._scales.credits.pt.freeGameBet);
          e.getScalableDiv(this._moneyBetWrapper).setWidth(this._scales.credits.pt.moneyBet);
          e.getScalableDiv(this._coinsBetWrapper).setWidth(this._scales.credits.pt.coinsBet);
          e.getScalableDiv(this._moneyWinWrapper).setWidth(this._scales.credits.pt.moneyWin);
        }
      }
      e.getScalableDiv(this._moneyBalanceWrapper).update();
      e.getScalableDiv(this._coinsBalanceWrapper).update();
      e.getScalableDiv(this._freeGameBetWrapper).update();
      e.getScalableDiv(this._moneyBetWrapper).update();
      e.getScalableDiv(this._coinsBetWrapper).update();
      e.getScalableDiv(this._moneyWinWrapper).update();
    }, init.prototype.onResize = function() {
      var me = this;
      (new exports.Task).startHandler(function(size) {
        return me.resizeHandler(size);
      });
    }, init.prototype.onTouchStart = function(event) {
      event.preventDefault();
    }, init.prototype.showInfoBar = function(message) {
      if (message) {
        this._bottomPanelWrapper.classList.remove("hidden");
        this._backgroundImage.classList.remove("hidden");
        this._portraitPanelWrapper.classList.remove("hidden");
        this._buttonsWrapper.classList.remove("hidden");
        this.showPNGLogo(this._config.showPoweredBy);
      } else {
        this._gamePanel.classList.remove("hidden");
        this._bottomPanelWrapper.classList.add("hidden");
        this._backgroundImage.classList.add("hidden");
        this._portraitPanelWrapper.classList.add("hidden");
        this._buttonsWrapper.classList.add("hidden");
        this.showPNGLogo(false);
      }
    }, init.WRAPPER_SCALES = {
      credits : {
        pt : {
          moneyBalance : 0.35,
          coinsBalance : 0.32,
          coinsBet : 0.34,
          freeGameBet : 0.45,
          moneyWin : 0.3,
          moneyBet : 0.3
        },
        ls : {
          moneyBalance : 0.3,
          coinsBalance : 0.15,
          coinsBet : 0.15,
          freeGameBet : 0.2,
          moneyWin : 0.25,
          moneyBet : 0.19
        }
      },
      normal : {
        pt : {
          moneyBalance : 0.4,
          coinsBalance : 0.3,
          coinsBet : 0.3,
          freeGameBet : 0.4,
          moneyWin : 0.4,
          moneyBet : 0.4
        },
        ls : {
          moneyBalance : 0.16,
          coinsBalance : 0.15,
          coinsBet : 0.15,
          freeGameBet : 0.2,
          moneyWin : 0.17,
          moneyBet : 0.17
        }
      }
    }, init.WRAPPER_SCALES_FG = {
      credits : {
        pt : {
          moneyBalance : 0.3,
          coinsBalance : 0.32,
          coinsBet : 0.34,
          freeGameBet : 0.4,
          moneyWin : 0.4,
          moneyBet : 0.3
        },
        ls : {
          moneyBalance : 0.18,
          coinsBalance : 0.15,
          coinsBet : 0.15,
          freeGameBet : 0.2,
          moneyWin : 0.14,
          moneyBet : 0.25
        }
      },
      normal : {
        pt : {
          moneyBalance : 0.3,
          coinsBalance : 0.32,
          coinsBet : 0.34,
          freeGameBet : 0.4,
          moneyWin : 0.4,
          moneyBet : 0.3
        },
        ls : {
          moneyBalance : 0.28,
          coinsBalance : 0.15,
          coinsBet : 0.15,
          freeGameBet : 0.16,
          moneyWin : 0.14,
          moneyBet : 0.1
        }
      }
    }, init;
  }(selector);
  var particularLoader = function() {
    /**
     * @param {!Object} message
     * @param {?} path
     * @param {!Function} matcher
     * @param {!Element} val
     * @param {!Object} args
     * @return {undefined}
     */
    function that(message, path, matcher, val, args) {
      var r = this;
      /** @type {!Object} */
      this._dispatcher = message;
      this._reelManager = path;
      /** @type {!Function} */
      this._paytableData = matcher;
      /** @type {!Element} */
      this._view = val;
      this._symbolsWithText = {};
      /** @type {boolean} */
      this._shown = false;
      /** @type {boolean} */
      this._splashMode = true;
      /** @type {boolean} */
      this._spinningMode = false;
      /** @type {boolean} */
      this._winsMode = false;
      /** @type {boolean} */
      this._freespinMode = false;
      /** @type {boolean} */
      this._featureMode = false;
      /** @type {boolean} */
      this._gambleMode = false;
      /** @type {boolean} */
      this._menuMode = false;
      /** @type {boolean} */
      this._jackpotMode = false;
      /** @type {boolean} */
      this._transitionMode = false;
      /** @type {boolean} */
      this._autoplayMode = false;
      /** @type {number} */
      this._currRow = -1;
      /** @type {number} */
      this._currCol = -1;
      /** @type {boolean} */
      this._shouldHoverHide = false;
      /**
       * @return {?}
       */
      this._boundHoverHideTimeout = function() {
        return r.hoverHideTimeout();
      };
      this.initEventListeners(message, args);
      this.initButtons();
      this.setup();
      this._view.enableButtons(false);
    }
    return that.prototype.initEventListeners = function(bus, messages) {
      var t = this;
      bus.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return t.onSplashHide();
      });
      bus.addEventListener(presenter.SpinEvent.SPIN, function() {
        return t.onReel(true);
      });
      bus.addEventListener(presenter.ReelEvent.ALLSTOPPED, function() {
        return t.onReel(false);
      });
      bus.addEventListener(presenter.FeatureEvent.FEATURESTART, function() {
        return t.onFeature(true);
      });
      bus.addEventListener(presenter.FeatureEvent.FEATURECOMPLETED, function() {
        return t.onFeature(false);
      });
      bus.addEventListener(presenter.FreespinViewEvent.FREESPIN_INTRO, function() {
        return t.onFreespin(true);
      });
      bus.addEventListener(presenter.FreespinViewEvent.FREESPIN_ENDED, function() {
        return t.onFreespin(false);
      });
      bus.addEventListener(presenter.GambleEvent.GAMBLE_START, function() {
        return t.onGamble(true);
      });
      bus.addEventListener(presenter.GambleEvent.GAMBLE_COLLECT, function() {
        return t.onGamble(false);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.MENUSHOW, function() {
        return t.onMenu(true);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.MENUHIDE, function() {
        return t.onMenu(false);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.SHOW_PAYTABLE, function() {
        return t.onMenu(true);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.HIDE_PAYTABLE, function() {
        return t.onMenu(false);
      });
      bus.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function() {
        return t.onJackpot(true);
      });
      bus.addEventListener(presenter.JackpotEndEvent.JACKPOTEND, function() {
        return t.onJackpot(false);
      });
      bus.addEventListener(presenter.WinEvent.INIT, function() {
        return t.onWins(true);
      });
      bus.addEventListener(presenter.WinEvent.DONE, function() {
        return t.onWins(false);
      });
      bus.addEventListener(presenter.WinEvent.DELAY_DONE, function() {
        return t.onWins(false);
      });
      bus.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_SHOWN, function() {
        return t.onTransition(true);
      });
      bus.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_HIDDEN, function() {
        return t.onTransition(false);
      });
      bus.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return t.onAutoplay(true);
      });
      bus.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return t.onAutoplay(false);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.HOVER_INDICATOR_SHOWN, function() {
        return t.onIndicator();
      });
      messages.addListener(function(vs) {
        return t.onBetChange(vs);
      });
    }, that.prototype.setup = function() {
    }, that.prototype.getSymbolId = function(i, index) {
      return this._reelManager.getSymbol(i, index).getId();
    }, that.prototype.getTextBySymbolId = function(keys) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      return this._symbolsWithText[keys.toString()] ? PersonModel.getByName(this._symbolsWithText[keys.toString()]).getText() : "";
    }, that.prototype.addSymbolWithText = function(t, xgh2) {
      /** @type {string} */
      this._symbolsWithText[t.toString()] = xgh2;
    }, that.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._splashMode = false;
      this.update();
    }, that.prototype.onReel = function(isIron) {
      /** @type {boolean} */
      this._spinningMode = isIron;
      this.update();
    }, that.prototype.onWins = function(isIron) {
      /** @type {boolean} */
      this._winsMode = isIron;
      this.update();
    }, that.prototype.onFeature = function(isIron) {
      /** @type {boolean} */
      this._featureMode = isIron;
      this.update();
    }, that.prototype.onFreespin = function(isIron) {
      /** @type {boolean} */
      this._freespinMode = isIron;
      this.update();
    }, that.prototype.onGamble = function(isIron) {
      /** @type {boolean} */
      this._gambleMode = isIron;
      this.update();
    }, that.prototype.onMenu = function(mode) {
      /** @type {boolean} */
      this._menuMode = mode;
      this.update();
    }, that.prototype.onJackpot = function(isIron) {
      /** @type {number} */
      this._jackpotMode = isIron;
      this.update();
    }, that.prototype.onTransition = function(a) {
      /** @type {boolean} */
      this._transitionMode = a;
      this.update();
    }, that.prototype.onAutoplay = function(isIron) {
      /** @type {string} */
      this._autoplayMode = isIron;
      this.update();
    }, that.prototype.onBetChange = function(gl) {
      if (gl.isChanged(presenter.VideoSlotBetSettings.COINS) || gl.isChanged(presenter.VideoSlotBetSettings.LINES) || gl.isChanged(presenter.VideoSlotBetSettings.DENOM) || gl.isChanged(presenter.VideoSlotBetSettings.DENOMINATIONS)) {
        this.showView(false);
      }
    }, that.prototype.onIndicator = function() {
      this.showView(false);
    }, that.prototype.update = function() {
      /** @type {boolean} */
      var state = !(this._splashMode || this._spinningMode || this._jackpotMode || this._winsMode || this._featureMode || this._freespinMode || this._gambleMode || this._menuMode || this._transitionMode || this._autoplayMode);
      this._view.enableButtons(state);
      if (!state) {
        this.showView(false);
      }
    }, that.prototype.initButtons = function() {
      var opt = this;
      var self = this;
      /** @type {number} */
      var hideSafari = 0;
      for (; hideSafari < this._reelManager.getNumReels(); hideSafari++) {
        !function(listener) {
          /** @type {number} */
          var i = 0;
          for (; i < self._reelManager.getNumRows(listener); i++) {
            !function(i) {
              self._view.initButton(listener, i, function() {
                return opt.onClick(listener, i);
              }, function(hash) {
                return opt.onHover(listener, i, hash);
              });
            }(i);
          }
        }(hideSafari);
      }
      this._view.initCancelButton(function() {
        return opt.onCancel();
      });
    }, that.prototype.onClick = function(id, value) {
      var val = this.getSymbolId(id, value);
      if (val < 0 || this._shown && this._currCol === id && this._currRow === value) {
        return void this.showView(false);
      }
      /** @type {boolean} */
      this._shouldHoverHide = false;
      if (this._hoverHideContext) {
        exports.Context.complete(this._hoverHideContext);
      }
      /** @type {number} */
      this._currCol = id;
      /** @type {number} */
      this._currRow = value;
      /** @type {boolean} */
      this._shown = false;
      /** @type {number} */
      var h = Math.floor(this._reelManager.getNumReels() / 2);
      /** @type {boolean} */
      var upper = id <= h;
      var a = this.getTextBySymbolId(val);
      var flattenedVal = this._paytableData.getOSPTValuesByIndex(val);
      this._view.showInfo(id, value, upper, flattenedVal, a);
      this.showView(true);
    }, that.prototype.onHover = function(element, id, item) {
      if (!item.state && this._shown && this._currCol === element && this._currRow === id) {
        /** @type {boolean} */
        this._shouldHoverHide = true;
        var driver = exports.SystemManager.getScheduler();
        this._hoverHideContext = driver.wait(driver.timeToTick(that.HIDE_WAIT_MS), null, this._boundHoverHideTimeout, null);
      } else {
        if (item.state && this._currCol === element && this._currRow === id && this._shouldHoverHide) {
          /** @type {boolean} */
          this._shouldHoverHide = false;
          if (this._hoverHideContext) {
            exports.Context.complete(this._hoverHideContext);
          }
        }
      }
    }, that.prototype.hoverHideTimeout = function() {
      if (this._shouldHoverHide) {
        this.showView(false);
      }
      this._hoverHideContext = void 0;
    }, that.prototype.onCancel = function() {
      this.showView(false);
    }, that.prototype.showView = function(idx) {
      if (this._shown !== idx) {
        /** @type {boolean} */
        this._shown = idx;
        this._view.showInfoField(idx);
        if (!idx) {
          /** @type {number} */
          this._currCol = -1;
          /** @type {number} */
          this._currRow = -1;
        }
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(idx ? presenter.VideoSlotUIEvent.OSPT_SHOWN : presenter.VideoSlotUIEvent.OSPT_HIDDEN));
      }
    }, that.HIDE_WAIT_MS = 200, that;
  }();
  /** @type {function(!Object, ...(Object|null)): !Object} */
  var onStartStopButtonClick = Object.assign || function(obj) {
    var source;
    /** @type {number} */
    var i__7286__auto___11343 = 1;
    /** @type {number} */
    var len__7285__auto___11342 = arguments.length;
    for (; i__7286__auto___11343 < len__7285__auto___11342; i__7286__auto___11343++) {
      source = arguments[i__7286__auto___11343];
      var prop;
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };
  var ru = function() {
    /**
     * @param {!Object} container
     * @param {?} pinboardModule
     * @param {!Function} bookmarksModule
     * @param {!Element} uiModule
     * @param {!Object} args
     * @return {undefined}
     */
    function App(container, pinboardModule, bookmarksModule, uiModule, args) {
      /** @type {!Object} */
      this._dispatcher = container;
      this._reelManager = pinboardModule;
      /** @type {!Function} */
      this._paytableData = bookmarksModule;
      /** @type {!Element} */
      this._view = uiModule;
      /** @type {!Object} */
      this._betSettings = args;
      this._symbolsWithText = {};
      this._disablers = {
        spin : false,
        splash : true,
        jackpot : false,
        winPresentation : false,
        freespin : false,
        feature : false,
        gamble : false,
        menu : false,
        transition : false,
        autoplay : false
      };
      this._activePosition = {
        col : -1,
        row : -1
      };
      this.initEventListeners(container, args);
      this.initButtons();
      this.setup();
      this.update();
    }
    return App.prototype.initEventListeners = function(bus, messages) {
      var t = this;
      bus.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return t.onSplashHide();
      });
      bus.addEventListener(presenter.SpinEvent.SPIN, function() {
        return t.onReel(true);
      });
      bus.addEventListener(presenter.ReelEvent.ALLSTOPPED, function() {
        return t.onReel(false);
      });
      bus.addEventListener(presenter.FeatureEvent.FEATURESTART, function() {
        return t.onFeature(true);
      });
      bus.addEventListener(presenter.FeatureEvent.FEATURECOMPLETED, function() {
        return t.onFeature(false);
      });
      bus.addEventListener(presenter.FreespinViewEvent.FREESPIN_INTRO, function() {
        return t.onFreespin(true);
      });
      bus.addEventListener(presenter.FreespinViewEvent.FREESPIN_ENDED, function() {
        return t.onFreespin(false);
      });
      bus.addEventListener(presenter.GambleEvent.GAMBLE_START, function() {
        return t.onGamble(true);
      });
      bus.addEventListener(presenter.GambleEvent.GAMBLE_COLLECT, function() {
        return t.onGamble(false);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.MENUSHOW, function() {
        return t.onMenu(true);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.MENUHIDE, function() {
        return t.onMenu(false);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.SHOW_PAYTABLE, function() {
        return t.onMenu(true);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.HIDE_PAYTABLE, function() {
        return t.onMenu(false);
      });
      bus.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function() {
        return t.onJackpot(true);
      });
      bus.addEventListener(presenter.JackpotEndEvent.JACKPOTEND, function() {
        return t.onJackpot(false);
      });
      bus.addEventListener(presenter.WinEvent.INIT, function() {
        return t.onWins(true);
      });
      bus.addEventListener(presenter.WinEvent.DONE, function() {
        return t.onWins(false);
      });
      bus.addEventListener(presenter.WinEvent.DELAY_DONE, function() {
        return t.onWins(false);
      });
      bus.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_SHOWN, function() {
        return t.onTransition(true);
      });
      bus.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_HIDDEN, function() {
        return t.onTransition(false);
      });
      bus.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return t.onAutoplay(true);
      });
      bus.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return t.onAutoplay(false);
      });
      bus.addEventListener(presenter.VideoSlotUIEvent.HOVER_INDICATOR_SHOWN, function() {
        return t.hide();
      });
      messages.addListener(function(vs) {
        return t.onBetChange(vs);
      });
    }, App.prototype.setup = function() {
    }, App.prototype.getSymbolId = function(i, index) {
      return this._reelManager.getSymbol(i, index).getId();
    }, App.prototype.getTextBySymbolId = function(keys) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      return this._symbolsWithText[keys.toString()] ? PersonModel.getByName(this._symbolsWithText[keys.toString()]).getText() : "";
    }, App.prototype.addSymbolWithText = function(t, xgh2) {
      /** @type {string} */
      this._symbolsWithText[t.toString()] = xgh2;
    }, App.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._disablers.splash = false;
      this.update();
    }, App.prototype.onReel = function(TF) {
      /** @type {string} */
      this._disablers.spin = TF;
      this.update();
    }, App.prototype.onWins = function(isIron) {
      /** @type {boolean} */
      this._disablers.winPresentation = isIron;
      this.update();
    }, App.prototype.onFeature = function(f) {
      /** @type {string} */
      this._disablers.feature = f;
      this.update();
    }, App.prototype.onFreespin = function(isIron) {
      /** @type {boolean} */
      this._disablers.freespin = isIron;
      this.update();
    }, App.prototype.onGamble = function(isIron) {
      /** @type {boolean} */
      this._disablers.gamble = isIron;
      this.update();
    }, App.prototype.onMenu = function(menu) {
      /** @type {string} */
      this._disablers.menu = menu;
      this.update();
    }, App.prototype.onJackpot = function(isIron) {
      /** @type {boolean} */
      this._disablers.jackpot = isIron;
      this.update();
    }, App.prototype.onTransition = function(a) {
      /** @type {string} */
      this._disablers.transition = a;
      this.update();
    }, App.prototype.onAutoplay = function(enable) {
      /** @type {boolean} */
      this._disablers.autoplay = enable;
      this.update();
    }, App.prototype.onBetChange = function(gl) {
      if (gl.isChanged(presenter.VideoSlotBetSettings.COINS) || gl.isChanged(presenter.VideoSlotBetSettings.LINES) || gl.isChanged(presenter.VideoSlotBetSettings.DENOM) || gl.isChanged(presenter.VideoSlotBetSettings.DENOMINATIONS)) {
        this.hide();
      }
    }, App.prototype.update = function() {
      if (Object.values(this._disablers).indexOf(true) > -1) {
        this._view.enableButtons(false);
        this.hide();
      } else {
        this._view.enableButtons(true);
      }
    }, App.prototype.initButtons = function() {
      var me = this;
      var self = this;
      /** @type {number} */
      var hideSafari = 0;
      for (; hideSafari < this._reelManager.getNumReels(); hideSafari++) {
        !function(listener) {
          /** @type {number} */
          var i = 0;
          for (; i < self._reelManager.getNumRows(listener); i++) {
            !function(item) {
              self._view.initButton(listener, item, function() {
                return me.onClick(listener, item);
              }, function(hash) {
                return me.onHover(listener, item, hash);
              });
            }(i);
          }
        }(hideSafari);
      }
      this._view.initCancelButton(function() {
        return me.hide();
      });
    }, App.prototype.onClick = function(id, item) {
      var cell = {
        col : id,
        row : item
      };
      var item_id = this.getSymbolId(id, item);
      this._clickTime = exports.SystemManager.getScheduler().getTime();
      if (item_id < 0 || this._activePosition.col === cell.col && this._activePosition.row === cell.row) {
        this.hide();
      } else {
        this.cancelHoverOut();
        /** @type {!Object} */
        this._activePosition = onStartStopButtonClick({}, cell);
        this.showInfo(id, item);
      }
    }, App.prototype.showInfo = function(id, args) {
      var n = this.getSymbolId(id, args);
      /** @type {number} */
      var h = Math.floor(this._reelManager.getNumReels() / 2);
      /** @type {boolean} */
      var upper = id <= h;
      var w = this.getTextBySymbolId(n);
      var value = self.ResourceManager.getInstance().getCreditFormatter().creditDisplay;
      var type = value ? this.getOSPTSize() : ViewType.DEFAULT;
      var item = value && type === ViewType.DEFAULT;
      var div = this._paytableData.getSymbolPayouts(item)[n];
      this._view.showInfo(id, args, upper, div, w, type);
      this.show();
    }, App.prototype.onHover = function(data, row, node) {
      /** @type {boolean} */
      var value = this._activePosition.col === data && this._activePosition.row === row;
      if (!node.state && value) {
        if (!(exports.SystemManager.getScheduler().getTime() - this._clickTime < App.HOVEROUT_IGNORE_AFTER_CLICK_MS)) {
          this.onHoverOut();
        }
      } else {
        if (node.state && value) {
          this.onHoverOver();
        }
      }
    }, App.prototype.onHoverOut = function() {
      var t = this;
      /** @type {boolean} */
      this._hoverOutTriggered = true;
      var service_ = exports.SystemManager.getScheduler();
      this._hideWithDelayContext = service_.wait(service_.timeToTick(200), null, function() {
        return t.hideAfterHoverOut();
      }, null);
    }, App.prototype.onHoverOver = function() {
      this.cancelHoverOut();
    }, App.prototype.cancelHoverOut = function() {
      /** @type {boolean} */
      this._hoverOutTriggered = false;
      if (this._hideWithDelayContext) {
        exports.Context.complete(this._hideWithDelayContext);
        this._hideWithDelayContext = void 0;
      }
    }, App.prototype.hideAfterHoverOut = function() {
      if (this._hoverOutTriggered) {
        this.hide();
      }
    }, App.prototype.hide = function() {
      /** @type {boolean} */
      this._hoverOutTriggered = false;
      this._view.showInfoField(false);
      this._activePosition = {
        col : -1,
        row : -1
      };
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.OSPT_HIDDEN));
    }, App.prototype.show = function() {
      this._view.showInfoField(true);
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.OSPT_SHOWN));
    }, App.prototype.getOSPTSize = function() {
      if (self.ResourceManager.getInstance().getCreditFormatter().creditDisplay) {
        var excludeSynced = this._betSettings.denominations.some(function(canCreateDiscussions) {
          return canCreateDiscussions >= 100000;
        });
        /** @type {boolean} */
        var excludeNotSynced = self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol().length > 1;
        if (excludeSynced && excludeNotSynced) {
          return ViewType.TINY;
        }
        if (excludeSynced || excludeNotSynced) {
          return ViewType.SMALL;
        }
      }
      return ViewType.DEFAULT;
    }, App.HIDE_WAIT_MS = 200, App.HOVEROUT_IGNORE_AFTER_CLICK_MS = 50, App;
  }();
  !function(oStyle) {
    /** @type {string} */
    oStyle[oStyle.DEFAULT = 0] = "DEFAULT";
    /** @type {string} */
    oStyle[oStyle.SMALL = 1] = "SMALL";
    /** @type {string} */
    oStyle[oStyle.TINY = 2] = "TINY";
  }(ViewType || (ViewType = {}));
  var event;
  var cmd = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var CropDimension = function(t) {
    /**
     * @param {!HTMLElement} instance
     * @param {!Object} params
     * @param {!Element} item
     * @param {?} res
     * @param {string} u
     * @param {!Object} parent
     * @return {?}
     */
    function init(instance, params, item, res, u, parent) {
      var that = t.call(this, instance, params, item, 0) || this;
      /** @type {!Element} */
      that._view = item;
      /** @type {!Object} */
      that._settings = params;
      /** @type {string} */
      that._roundHandler = u;
      /** @type {!Object} */
      that._betSettings = parent;
      /** @type {boolean} */
      that._isValid = false;
      that._isAutoplayDisabled = res.disableAutoPlay;
      params.addListener(function() {
        return that.onSettingsChange();
      });
      /** @type {boolean} */
      that._shown = false;
      /** @type {boolean} */
      that._splashShown = false;
      that._checkBoxes = {
        STOP_ANY : {
          label : args.STOP_ANY,
          text : "IDS_AP_ONANYWIN",
          enabled : true,
          bindFn : that.onStopAny.bind(that)
        },
        STOP_BONUS : {
          label : args.STOP_BONUS,
          text : "IDS_AP_ONBONUS",
          enabled : that._settings.bonusEnabled,
          bindFn : that.onStopBonus.bind(that)
        },
        STOP_FS : {
          label : args.STOP_FS,
          text : "IDS_AP_ONFREESPINS",
          enabled : that._settings.freeSpinEnabled,
          bindFn : that.onStopFS.bind(that)
        },
        STOP_JACKPOT : {
          label : args.STOP_JACKPOT,
          text : "IDS_AP_ONJACKPOT",
          enabled : that._settings.jackpotEnabled,
          bindFn : that.onStopJackpot.bind(that)
        }
      };
      that._sliders = {
        SLIDER1 : {
          label : args.STOP_WIN,
          text : "IDS_AP_WINEXCEEDS",
          enabled : true,
          bindFn : that.onStopAtWin.bind(that)
        },
        SLIDER2 : {
          label : args.STOP_BAL_INC,
          text : "IDS_AP_BALANCEINC",
          enabled : true,
          bindFn : that.onStopAtBalanceInc.bind(that)
        },
        SLIDER3 : {
          label : args.STOP_BAL_DEC,
          text : "IDS_AP_BALANCEDEC",
          enabled : true,
          bindFn : that.onStopAtBalanceDec.bind(that)
        },
        SLIDER4 : {
          label : args.SLIDER4,
          text : "IDS_AP_LOSSREACHES",
          enabled : params.autoplayLimits,
          bindFn : that.onTotalLossReaches.bind(that)
        }
      };
      that.createButtons(ITEM.CHECKBOX, that._checkBoxes);
      if (res.autoplayReset) {
        instance.addEventListener(presenter.VideoSlotUIEvent.MENUSHOW, function() {
          return that.resetLimitSettings(true);
        });
      }
      instance.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_SHOWN, function(f) {
        return that.onTransitionShown(f);
      });
      instance.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_HIDDEN, function(f) {
        return that.onTransitionHidden(f);
      });
      instance.addEventListener(presenter.VideoSlotUIEvent.AUTOPLAY, function() {
        return that.show();
      });
      instance.addEventListener(tree.AutoplayEvent.AUTOPLAY_TRIGGER, function(it_case) {
        return that.onAutoplayTrigger(it_case);
      });
      instance.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return that.onAutoplayStarted();
      });
      instance.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return that.onAutoplayStopped();
      });
      instance.addEventListener(self.DenominationsEvent.DENOMINATIONS, function(inlets) {
        return that.onDenominations(inlets);
      });
      instance.addEventListener(self.CurrencyEvent.CURRENCY, function(f) {
        return that.onCurrency(f);
      });
      instance.addEventListener(tree.MysteryJackpotCustomDataEvent.CUSTOMDATA, function() {
        return that.addJackpotCheckbox();
      });
      instance.addEventListener(self.SplashEvent.SPLASH_SHOW, function() {
        return that.onSplash(true);
      });
      instance.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return that.onSplash(false);
      });
      instance.addEventListener(self.RealityCheckEvent.REALITYCHECKEVENT, function() {
        return that.onPopup();
      });
      instance.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, function() {
        return that.onPopup();
      });
      u.addListener(function() {
        return that.onRoundStateChange();
      });
      parent.addListener(function(inlets) {
        return that.onDenominations(inlets);
      });
      /** @type {!Array} */
      that._numberButtons = [];
      that._numberButtons.push(args.NUMBER1);
      that._numberButtons.push(args.NUMBER2);
      that._numberButtons.push(args.NUMBER3);
      that._numberButtons.push(args.NUMBER4);
      that._numberButtons.push(args.NUMBER5);
      that._autoSpins = res.autoSpins;
      var eejsConfig = this;
      /** @type {number} */
      var r = 0;
      /** @type {number} */
      var readersLength = that._numberButtons.length;
      for (; r < readersLength; r++) {
        !function(key, canCreateDiscussions) {
          var id = eejsConfig._numberButtons[key];
          item.setButtonText(id, String(eejsConfig._autoSpins[key]));
          item.initButton(id, function() {
            return that.onSpinsButton(that._autoSpins[key]);
          });
          item.enableButton(id, true);
        }(r);
      }
      if (item.initSlider(position.SLD_AUTOPLAY, function(t) {
        return that.onAutoplaySlider(t);
      }), item.addSliderPressHandlers(position.SLD_AUTOPLAY, function(element, clojIsReversed) {
        return that.onSliderDown(element, clojIsReversed);
      }, function(amendNode, e) {
        return that.onSliderUp(amendNode, e);
      }), params.autoplayReset) {
        /** @type {!Array<?>} */
        var value = [0].concat(that._autoSpins);
        item.setSliderValueArray(position.SLD_AUTOPLAY, value);
      } else {
        item.setSliderValueArray(position.SLD_AUTOPLAY, that._autoSpins);
      }
      return params.plays = params.autoplayReset ? 0 : res.defaultAutoSpins, item.initSlider(args.SLIDER1, function(args) {
        return that.onStopAtWin(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), item.addSliderPressHandlers(args.SLIDER1, function(element, clojIsReversed) {
        return that.onSliderDown(element, clojIsReversed);
      }, function(amendNode, e) {
        return that.onSliderUp(amendNode, e);
      }), item.initSlider(args.SLIDER2, function(args) {
        return that.onStopAtBalanceInc(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), item.addSliderPressHandlers(args.SLIDER2, function(element, clojIsReversed) {
        return that.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return that.onSliderUp(t, e);
      }), item.initSlider(args.SLIDER3, function(args) {
        return that.onStopAtBalanceDec(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), item.addSliderPressHandlers(args.SLIDER3, function(element, clojIsReversed) {
        return that.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return that.onSliderUp(t, e);
      }), item.initSlider(args.SLIDER4, function(args) {
        return that.onTotalLossReaches(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), item.addSliderPressHandlers(args.SLIDER4, function(element, clojIsReversed) {
        return that.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return that.onSliderUp(t, e);
      }), item.showSlider(args.SLIDER4, params.autoplayLimits), item.showText(args.SLIDER4_CURRENCY, params.autoplayLimits), item.setSliderValueArray(args.SLIDER1, that.createSliderValueArray(0, 1000000, 100)), item.setSliderValueArray(args.SLIDER2, that.createSliderValueArray(0, 1000000, 100)), item.setSliderValueArray(args.SLIDER3, that.createSliderValueArray(0, 1000000, 100)), that.resetLimitSettings(), params.autoplayLimits && item.setSliderMode(args.SLIDER1, true), item.initButton(args.START, 
      function() {
        return that.onAutoplayStart();
      }), item.enableButton(args.START, true), item.initButton(args.TOGGLE, function() {
        return that.onAutoplayToggle();
      }), item.enableButton(args.TOGGLE, !(params.autoplayReset || that._isAutoplayDisabled)), that.enableSliders(!that._isAutoplayDisabled), res.hasGuaranteedJackpot && that.addJackpotCheckbox(), that;
    }
    return cmd(init, t), init.prototype.show = function() {
      if (!(this._isAutoplayDisabled || this._shown || this._splashShown || this._settings.disabled)) {
        /** @type {boolean} */
        this._shown = true;
        t.prototype.show.call(this);
        this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_STOP));
      }
    }, init.prototype.onSplash = function(sigma) {
      /** @type {string} */
      this._splashShown = sigma;
    }, init.prototype.onTransitionShown = function(a) {
      this._view.enableButton(args.TOGGLE, false);
    }, init.prototype.onTransitionHidden = function(a) {
      this._view.enableButton(args.TOGGLE, !(this._settings.autoplayReset || this._isAutoplayDisabled));
    }, init.prototype.onStopAny = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.TOGGLE_STOP_ANY_WIN));
      this._settings.toggleStopAtAnyWin();
    }, init.prototype.onStopBonus = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.TOGGLE_STOP_BONUS));
      this._settings.toggleStopAtBonusWin();
    }, init.prototype.onStopFS = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.TOGGLE_STOP_FREESPIN));
      this._settings.toggleStopAtFsWin();
    }, init.prototype.onStopJackpot = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.TOGGLE_STOP_JACKPOT));
      this._settings.toggleStopAtJackpotWin();
    }, init.prototype.addJackpotCheckbox = function() {
      if (!this._settings.jackpotEnabled) {
        /** @type {boolean} */
        this._settings.jackpotEnabled = true;
        this.updateButtonByType(ITEM.CHECKBOX, this._view.getGeneratedLabel(args.STOP_JACKPOT), args.STOP_JACKPOT, true);
      }
    }, init.prototype.onSettingsChange = function() {
      this._view.selectButton(args.STOP_ANY, this._settings.stopAtAnyWin);
      this._view.selectButton(args.STOP_FS, this._settings.stopAtFsWin);
      this._view.selectButton(args.STOP_BONUS, this._settings.stopAtBonusWin);
      this._view.selectButton(args.STOP_JACKPOT, this._settings.stopAtJackpotWin);
      this._view.selectButton(args.STOP_WIN, this._settings.stopAtWin);
      this._view.selectButton(args.STOP_BAL_INC, this._settings.stopAtBalanceInc);
      this._view.selectButton(args.STOP_BAL_DEC, this._settings.stopAtBalanceDec);
      /** @type {number} */
      var index = 0;
      var ncells = this._numberButtons.length;
      for (; index < ncells; index++) {
        this._view.selectButton(this._numberButtons[index], this._settings.plays === this._autoSpins[index]);
      }
      this._view.setSliderValue(position.SLD_AUTOPLAY, this._settings.plays);
      this._view.setAutoplayButtonValue(this._settings.plays);
      this._view.setSliderValue(args.SLIDER1, this._settings.stopAtWinValue);
      this._view.setSliderValue(args.SLIDER2, this._settings.stopAtBalanceIncValue);
      this._view.setSliderValue(args.SLIDER3, this._settings.stopAtBalanceDecValue);
      if (this._settings.autoplayLimits) {
        this._view.setSliderValue(args.SLIDER4, this._settings.stopAtTotalLossValue);
      }
    }, init.prototype.onSpinsButton = function(data) {
      this._settings.plays = data;
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_AUTOSPINS));
      if (this._settings.autoplayReset) {
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.onAutoplaySlider = function(state) {
      this._settings.plays = state.slValue;
      if (this._settings.autoplayReset) {
        this._view.setSliderValid(position.SLD_AUTOPLAY, state.slValue > 0);
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.hide = function() {
      /** @type {boolean} */
      this._shown = false;
      t.prototype.hide.call(this);
    }, init.prototype.onOk = function() {
      t.prototype.onOk.call(this);
      this.onAutoplayStart();
    }, init.prototype.onAutoplayStart = function() {
      this._view.show(false);
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_START));
    }, init.prototype.onAutoplayToggle = function() {
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_TOGGLE));
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.MOBILE_MENU));
    }, init.prototype.onAutoplayStarted = function() {
      this._view.setAutoplayButtonState(true);
      this.enableSliders(false);
    }, init.prototype.onAutoplayStopped = function() {
      this._view.setAutoplayButtonState(false);
      this._view.setButtonText(args.TOGGLE, this._settings.plays.toString());
      this.enableSliders(true);
      this.resetLimitSettings();
    }, init.prototype.enableSliders = function(status) {
      status = status && !this._isAutoplayDisabled;
      this._view.enableSlider(position.SLD_AUTOPLAY, status);
      this._view.enableSlider(args.SLIDER1, status);
      this._view.enableSlider(args.SLIDER2, status);
      this._view.enableSlider(args.SLIDER3, status);
      this._view.enableSlider(args.SLIDER4, status);
      this._view.enableButton(args.STOP_ANY, status);
      this._view.enableButton(args.STOP_FS, status);
      this._view.enableButton(args.STOP_BONUS, status);
      this._view.enableButton(args.STOP_JACKPOT, status);
      this._view.enableButton(args.STOP_WIN, status);
      this._view.enableButton(args.STOP_BAL_INC, status);
      this._view.enableButton(args.STOP_BAL_DEC, status);
    }, init.prototype.onAutoplayTrigger = function(it_case) {
      this._settings.playsLeft = it_case.playsLeft;
      this._view.setButtonText(args.TOGGLE, it_case.playsLeft.toString());
    }, init.prototype.onStopAtWin = function(state) {
      this._settings.stopAtWinValue = state.slValue;
    }, init.prototype.onStopAtBalanceInc = function(state) {
      this._settings.stopAtBalanceIncValue = state.slValue;
    }, init.prototype.onStopAtBalanceDec = function(state) {
      this._settings.stopAtBalanceDecValue = state.slValue;
    }, init.prototype.onDenominations = function(state) {
      if (!(state instanceof exports.ChangeEvent && state.isChanged(presenter.VideoSlotBetSettings.ENABLED))) {
        /** @type {number} */
        var t = 100 * this._betSettings.denomination;
        if (this._view.setSliderValueArray(args.SLIDER1, this.createSliderValueArray(0, 100 * t, t)), this._view.setSliderValueArray(args.SLIDER2, this.createSliderValueArray(0, 1000 * t, 10 * t)), this._view.setSliderValueArray(args.SLIDER3, this.createSliderValueArray(0, 1000 * t, 10 * t)), this.resetSliderSettings(), this._settings.autoplayLimits) {
          /** @type {!Array<?>} */
          var value = init.totalLossValues.map(function(radianDif) {
            return radianDif * t / 100;
          });
          this._view.setSliderValueArray(args.SLIDER4, value);
          this.setSliderValid(args.SLIDER4, !this._settings.autoplayReset);
          this.revalidateSliders();
        }
      }
    }, init.prototype.onCurrency = function(a) {
      this._view.setCurrency(self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol());
    }, init.prototype.onTotalLossReaches = function(state) {
      if (this._settings.stopAtTotalLossValue = state.slValue, this._settings.autoplayReset) {
        /** @type {boolean} */
        var 0 = state.slIndex > 0;
        /** @type {boolean} */
        0 = 0 && this._roundHandler.bet <= this._settings.stopAtTotalLossValue;
        this.setSliderValid(args.SLIDER4, 0);
        this.revalidateSliders();
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.enableAutoplayButtonIfSettingsAreValid = function() {
      /** @type {boolean} */
      var status = true;
      if (this._settings.autoplayLimits) {
        status = status && this._isValid;
      }
      status = status && this._settings.plays > 0 && !this._isAutoplayDisabled;
      this._view.enableButton(args.TOGGLE, status);
      this._view.enableButton(args.START, status);
      this._view.enableButton(self.ModalViewButton.OK, status);
    }, init.prototype.resetLimitSettings = function(zoomAware) {
      if (!(zoomAware && this._settings.playsLeft > 0) && this._settings.autoplayReset) {
        this.resetAutoplay();
        this.resetSliderSettings();
        /** @type {number} */
        var index = 0;
        var ncells = this._numberButtons.length;
        for (; index < ncells; index++) {
          this._view.selectButton(this._numberButtons[index], false);
        }
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.resetAutoplay = function() {
      /** @type {number} */
      this._settings.playsLeft = 0;
      this._settings.resetPlays();
      this._view.setSliderValue(position.SLD_AUTOPLAY, 0);
      this._view.setSliderValid(position.SLD_AUTOPLAY, false);
    }, init.prototype.revalidateSliders = function() {
      if (this._settings.autoplayReset) {
        if (this._settings.autoplayLimits) {
          var shape = this._settings.stopAtTotalLossValue;
          /** @type {boolean} */
          var 0 = shape > 0;
          /** @type {boolean} */
          0 = 0 && this._roundHandler.bet <= shape;
          /** @type {boolean} */
          0 = 0 && !this._isAutoplayDisabled;
          this.setSliderValid(args.SLIDER4, 0);
        }
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.createSliderValueArray = function(first, max, n) {
      if (void 0 === first) {
        /** @type {number} */
        first = 0;
      }
      if (void 0 === max) {
        /** @type {number} */
        max = 1000;
      }
      if (void 0 === n) {
        /** @type {number} */
        n = 1;
      }
      /** @type {!Array} */
      var eventPrototypes = [];
      /** @type {number} */
      var a = first;
      for (; a <= max; a = a + n) {
        eventPrototypes.push(a);
      }
      return eventPrototypes;
    }, init.prototype.onRoundStateChange = function() {
      if (this._settings.autoplayReset) {
        this.revalidateSliders();
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.setSliderValid = function(e, lastVerFailed) {
      /** @type {boolean} */
      this._isValid = lastVerFailed;
      this._view.setSliderValid(e, lastVerFailed);
    }, init.prototype.onSliderDown = function(suppressDisabledCheck, isSlidingUp) {
      this._currentSliderDown = suppressDisabledCheck;
      /** @type {!Array} */
      this._startSliderValue = isSlidingUp;
    }, init.prototype.onSliderUp = function(event, fn) {
      if (this._shouldResetSliderToPrev) {
        /** @type {boolean} */
        this._shouldResetSliderToPrev = false;
        this.resetSliderValue(this._currentSliderDown, this._startSliderValue);
      }
      /** @type {string} */
      this._currentSliderDown = "";
      /** @type {number} */
      this._startSliderValue = NaN;
    }, init.prototype.resetSliderValue = function(_wid_attr, data) {
      switch(_wid_attr) {
        case args.SLIDER1:
          this._settings.stopAtWinValue = data;
          break;
        case args.SLIDER2:
          this._settings.stopAtBalanceIncValue = data;
          break;
        case args.SLIDER3:
          this._settings.stopAtBalanceDecValue = data;
          break;
        case args.SLIDER4:
          this._settings.stopAtTotalLossValue = data;
      }
      this.revalidateSliders();
    }, init.prototype.onPopup = function() {
      if (this._currentSliderDown) {
        /** @type {boolean} */
        this._shouldResetSliderToPrev = true;
      }
    }, init.prototype.resetSliderSettings = function() {
      /** @type {number} */
      this._settings.stopAtWinValue = 0;
      /** @type {number} */
      this._settings.stopAtBalanceIncValue = 0;
      /** @type {number} */
      this._settings.stopAtBalanceDecValue = 0;
      /** @type {number} */
      this._settings.stopAtTotalLossValue = 0;
      this.revalidateSliders();
    }, init.prototype.createButtons = function(panel, buttons) {
      var that = this;
      /** @type {!Array<string>} */
      var values = Object.keys(buttons);
      /** @type {number} */
      var psColor = 0;
      /** @type {number} */
      var undefined = values.length + 1;
      values.map(function(name) {
        var options = buttons[name];
        if (options.enabled) {
          psColor++;
        } else {
          undefined--;
        }
        that.createButtonByType(panel, options.label, options.text, options.enabled, options.enabled ? psColor : undefined, options.bindFn);
      });
    }, init.prototype.createButtonByType = function(element, id, body, start, node, value, contstraints) {
      var a = this;
      switch(this._view.setTexts(element, id, body, node), this._view.initButton(id, value), this._view.enableButton(id, start), this._view.showText(args.setTextLabel(element, node), start), element) {
        case ITEM.CHECKBOX:
          this._view.showCheckBox(id, start);
          break;
        case ITEM.SLIDER:
          this._view.addSliderPressHandlers(id, function(element, clojIsReversed) {
            return a.onSliderDown(element, clojIsReversed);
          }, function(t, e) {
            return a.onSliderUp(t, e);
          });
          this._view.showSlider(id, start);
      }
    }, init.prototype.updateButtonByType = function(providerID, url, key, value) {
      switch(this._view.showText(url, value), providerID) {
        case ITEM.CHECKBOX:
          this._view.showCheckBox(key, true);
          break;
        case ITEM.SLIDER:
          this._view.showSlider(key, true);
      }
    }, init.totalLossValues = [0, 100, 200, 500, 1000, 1500, 2000, 2500, 5000, 10000, 15000, 20000, 25000, 50000, 100000, 200000, 500000, 1000000], init;
  }(target);
  var submitCommentWithToken = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var message = function(t) {
    /**
     * @return {?}
     */
    function comment() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return submitCommentWithToken(comment, t), comment.BET_DEC = "BET_DEC", comment.BET_INC = "BET_INC", comment.BET_1ST = "BET_1ST", comment.BET_2ND = "BET_2ND", comment.BET_3RD = "BET_3RD", comment.BET_4TH = "BET_4TH", comment.BET_5TH = "BET_5TH", comment;
  }(element);
  var row = function(t) {
    /**
     * @return {?}
     */
    function comment() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return submitCommentWithToken(comment, t), comment.LINES = "LINES", comment.BET = "BET", comment;
  }(sep);
  var merge = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var BufferMergeEvent = function(button) {
    /**
     * @param {!HTMLElement} menu
     * @param {!Object} component
     * @param {?} width
     * @param {!Element} view
     * @param {!Object} config
     * @return {?}
     */
    function init(menu, component, width, view, config) {
      var me = button.call(this, menu) || this;
      /** @type {!Object} */
      me._roundHandler = component;
      me._betSettings = width;
      /** @type {!Element} */
      me._view = view;
      /** @type {boolean} */
      me._isAutoplay = false;
      /** @type {boolean} */
      me._freeGameMode = false;
      /** @type {number} */
      me._betOffset = 0;
      /** @type {!Array} */
      me._betButtons = [message.BET_1ST, message.BET_2ND, message.BET_3RD, message.BET_4TH, message.BET_5TH];
      /** @type {!Object} */
      me._config = config;
      me._balanceType = self.BonusBalanceEventType.MIX;
      me._betSettings.addListener(function(store) {
        return void 0 === store && (store = null), me.onDataChange(store);
      }, null);
      menu.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      });
      menu.addEventListener(self.CurrencyEvent.CURRENCY, function() {
        return me.onCurrency();
      });
      menu.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return me.onAutoplayStarted();
      });
      menu.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      });
      component.addListener(function() {
        return me.onRoundStateChange();
      });
      menu.addEventListener(presenter.FreeGameConsumedEvent.CONSUMED, function(person) {
        return me.onFreeGameConsumed(person);
      });
      menu.addEventListener(presenter.FreeGameEvent.START, function(element) {
        return me.onFreeGameStart(element);
      });
      menu.addEventListener(presenter.FreeGameEvent.END, function(t) {
        return me.onFreeGameEnd(t);
      });
      menu.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, function(domain) {
        return me.onExternalMessage(domain);
      });
      menu.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return me.updateBetButtons(true);
      });
      menu.addEventListener(self.BonusBalanceMessageResponseEvent.OK, function(t) {
        return me.bonusBalanceResponseHandler(t);
      });
      view.initButton(message.BET_INC, me._betSettings.incDenom.bind(me._betSettings));
      view.initButton(message.BET_DEC, me._betSettings.decDenom.bind(me._betSettings));
      view.enableButton(message.BET_INC, me._betSettings.denom < me._betSettings.denominations.length - 1);
      view.enableButton(message.BET_DEC, me._betSettings.denom > 0);
      var vroot = this;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var l = me._betButtons.length;
      for (; i < l; i++) {
        !function(i, canCreateDiscussions) {
          view.initButton(vroot._betButtons[i], function() {
            return me.onBet(i);
          });
        }(i);
      }
      view.initButton(message.BETMAX, function() {
        return me.onBetMax();
      });
      view.initButton(message.LINES, me._betSettings.incLines.bind(me._betSettings));
      view.initButton(message.LINES_INC, me._betSettings.incLines.bind(me._betSettings));
      view.initButton(message.LINES_DEC, me._betSettings.decLines.bind(me._betSettings));
      view.initButton(message.COINS, me._betSettings.incCoins.bind(me._betSettings));
      view.initButton(message.COINS_INC, me._betSettings.incCoins.bind(me._betSettings));
      view.initButton(message.COINS_DEC, me._betSettings.decCoins.bind(me._betSettings));
      view.initButton(message.DENOM, me._betSettings.incDenom.bind(me._betSettings));
      view.initButton(message.DENOM_INC, me._betSettings.incDenom.bind(me._betSettings));
      view.initButton(message.DENOM_DEC, me._betSettings.decDenom.bind(me._betSettings));
      view.initSlider(row.LINES, function(t) {
        return me.changeLines(t);
      });
      view.initSlider(row.COINS, function(index) {
        return me.changeCoins(index);
      });
      view.initSlider(row.DENOM, function(canCreateDiscussions) {
        return me.changeDenomination(canCreateDiscussions);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL);
      view.initSlider(row.BET, function(canCreateDiscussions) {
        return me.changeDenomination(canCreateDiscussions);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL);
      if (me._betSettings.isLocked(presenter.LockType.FIXED_BET)) {
        view.showSlider(row.LINES, false);
        view.showButton(message.LINES_INC, false);
        view.showButton(message.LINES_DEC, false);
        view.showSlider(message.COINS, false);
        view.showButton(message.COINS_INC, false);
        view.showButton(message.COINS_DEC, false);
        view.showSlider(row.DENOM, false);
        view.enableSlider(row.DENOM, false);
        view.showPanel(message.BALANCE_CONTAINER, false);
      } else {
        view.showSlider(row.BET, false);
        view.enableSlider(row.BET, false);
      }
      if (me._betSettings.isLocked(presenter.LockType.LINE)) {
        view.enableSlider(row.LINES, false);
        view.enableButton(message.LINES, false);
      } else {
        view.enableButton(message.LINES, true);
        view.enableButton(message.LINES_INC, me._betSettings.lines < me._betSettings.maxLines);
        view.enableButton(message.LINES_DEC, me._betSettings.lines > 1);
      }
      if (me._betSettings.isLocked(presenter.LockType.COIN)) {
        view.enableSlider(row.COINS, false);
        view.enableButton(message.COINS, false);
      } else {
        view.enableButton(message.COINS, true);
        view.enableButton(message.COINS_INC, me._betSettings.coins < me._betSettings.maxCoins);
        view.enableButton(message.COINS_DEC, me._betSettings.coins > 1);
      }
      view.enableButton(message.BETMAX, true);
      view.enableButton(message.DENOM, true);
      view.enableButton(message.DENOM_INC, me._betSettings.denom < me._betSettings.denominations.length - 1);
      view.enableButton(message.DENOM_DEC, me._betSettings.denom > 0);
      view.enableButton(message.BET_INC, me._betSettings.denom < me._betSettings.denominations.length - 1);
      view.enableButton(message.BET_DEC, me._betSettings.denom > 0);
      /** @type {number} */
      i = 0;
      /** @type {number} */
      l = me._betButtons.length;
      for (; i < l; i++) {
        view.enableButton(me._betButtons[i], true);
      }
      return me.initBetButtons(), me.initBetData(), me;
    }
    return merge(init, button), init.prototype.getBalanceTypeCaption = function(canCreateDiscussions) {
      var peakSpectrum = self.ResourceManager.getInstance().getCreditFormatter();
      /** @type {string} */
      var n = canCreateDiscussions === self.BonusBalanceEventType.BONUS ? "IDS_BONUS" : "IDS_MENU_BALANCE";
      return peakSpectrum.getCreditString("IDS_LBL_COINS", n);
    }, init.prototype.bonusBalanceResponseHandler = function(result) {
      this._balanceType = result.balanceType;
      if (!this._freeGameMode) {
        this._view.setLabelText(message.BALANCE_CAPTION, this.getBalanceTypeCaption(this._balanceType), ">");
      }
      if (!self.ResourceManager.getInstance().getConfig().asCredit) {
        this.setCoinBalanceLabelBalance(this._lastBalance);
      }
    }, init.prototype.onExternalMessage = function(request) {
      this._view.resetItems();
    }, init.prototype.initBetButtons = function() {
      var t = this;
      this._view.initButton(message.BET_INC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BET_DEC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BET_1ST, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BET_2ND, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BET_3RD, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BET_4TH, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BET_5TH, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.BETMAX, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.LINES, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.LINES_INC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.LINES_DEC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.COINS, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.COINS_INC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.COINS_DEC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.DENOM, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.DENOM_INC, function() {
        return t.onBetChange();
      });
      this._view.initButton(message.DENOM_DEC, function() {
        return t.onBetChange();
      });
    }, init.prototype.onBetChange = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.BET_CHANGE));
    }, init.prototype.onFreeGameConsumed = function(type) {
      this._view.setLabelText(message.COINBALANCE_LABEL, "IDS_MENU_FREEGAMES", "> " + type.freeGames);
    }, init.prototype.initBetData = function() {
      /** @type {boolean} */
      var setids = !!(this._betSettings.lock & presenter.LockType.LINE);
      this._view.setSliderValueArray(row.LINES, this.createSliderValueArray(setids, this._betSettings.maxLines));
      this._view.setSliderValue(row.LINES, this._betSettings.lines);
      this._view.setButtonText(message.LINES, String(this._betSettings.lines));
      this.setDenomSlider();
      this.setBetSlider();
      /** @type {boolean} */
      var ret = !!(this._betSettings.lock & presenter.LockType.COIN);
      this._view.setSliderValueArray(row.COINS, this.createSliderValueArray(ret, this._betSettings.maxCoins));
      this._view.setSliderValue(row.COINS, this._betSettings.coins);
      this._view.setButtonText(message.COINS, String(this._betSettings.coins));
    }, init.prototype.createSliderValueArray = function(first, max) {
      /** @type {!Array} */
      var hash_settings = [];
      var i = first ? max : 1;
      for (; i <= max; ++i) {
        hash_settings.push(i);
      }
      return hash_settings;
    }, init.prototype.setDenomSlider = function() {
      this._view.setSliderValueArray(row.DENOM, this._betSettings.denominations);
      this._view.setSliderIndex(row.DENOM, this._betSettings.denom);
    }, init.prototype.onBet = function(b) {
      this._betSettings.setDenomIndex(b + this._betOffset);
    }, init.prototype.setBetSlider = function() {
      /** @type {!Array} */
      var value = [];
      /** @type {number} */
      var e = 0;
      for (; e < this._betSettings.denominations.length; e++) {
        /** @type {number} */
        value[e] = this._betSettings.denominations[e] * this._betSettings.coins * this._betSettings.lines;
      }
      this._view.setSliderValueArray(row.BET, value);
      this._view.setSliderIndex(row.BET, this._betSettings.denom);
    }, init.prototype.onDataChange = function(data) {
      if (void 0 === data) {
        /** @type {null} */
        data = null;
      }
      /** @type {boolean} */
      var attached = this._state === presenter.VideoSlotShowButtonsEvent.BET;
      /** @type {boolean} */
      var n = attached && !this._isAutoplay && !this._freeGameMode;
      if (data && !data.isChanged(presenter.VideoSlotBetSettings.COINS) || (this._view.setButtonText(message.COINS, this._betSettings.coins.toString()), this._view.setSliderValue(row.COINS, this._betSettings.coins), this._view.enableButton(message.COINS_INC, n && this._betSettings.coins < this._betSettings.maxCoins), this._view.enableButton(message.COINS_DEC, n && this._betSettings.coins > 1)), data && !data.isChanged(presenter.VideoSlotBetSettings.LINES) || (this._view.setButtonText(message.LINES, 
      this._betSettings.lines.toString()), this._view.setSliderValue(row.LINES, this._betSettings.lines), this._view.enableButton(message.LINES_INC, n && this._betSettings.lines < this._betSettings.maxLines), this._view.enableButton(message.LINES_DEC, n && this._betSettings.lines > 1)), !data || data.isChanged(presenter.VideoSlotBetSettings.DENOM)) {
        var assert = self.ResourceManager.getInstance().getMoneyFormatter();
        this._view.setButtonText(message.DENOM, assert.MoneyToString(this._betSettings.denomination, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
        this._view.setSliderIndex(row.DENOM, this._betSettings.denom);
        this._view.enableButton(message.DENOM_INC, n && this._betSettings.denom < this._betSettings.denominations.length - 1);
        this._view.enableButton(message.DENOM_DEC, n && this._betSettings.denom > 0);
        this._view.setSliderIndex(row.BET, this._betSettings.denom);
        this._view.enableButton(message.BET_INC, n && this._betSettings.denom < this._betSettings.denominations.length - 1);
        this._view.enableButton(message.BET_DEC, n && this._betSettings.denom > 0);
        this.updateBetButtons();
        this.setDenomSlider();
      }
      if (!data || data.isChanged(presenter.VideoSlotBetSettings.DENOMINATIONS) || data.isChanged(presenter.VideoSlotBetSettings.LINES) || data.isChanged(presenter.VideoSlotBetSettings.COINS)) {
        if (this._betSettings.isLocked(presenter.LockType.LINE)) {
          this.setBetSlider();
        } else {
          this.setDenomSlider();
        }
      }
    }, init.prototype.onRoundStateChange = function() {
      this._lastBalance = this._roundHandler.balance;
      var t = self.ResourceManager.getInstance().getCreditFormatter();
      if (!this._freeGameMode) {
        var e = self.ResourceManager.getInstance().getMoneyFormatter();
        this.setCoinBalanceLabelBalance(this._lastBalance);
        this._view.setLabelText(message.COINBET_LABEL_MOBILE, this._betSettings.betCoins.toString());
        this._view.setLabelText(message.CASHBET_LABEL, e.MoneyToString(this._roundHandler.bet, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
      }
      this._view.setLabelText(message.COINBET_LABEL, "IDS_MENU_BET", "> " + t.formatCoinValue(this._betSettings.betCoins, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
    }, init.prototype.onShowButtons = function(data) {
      this._state = data.groupId;
      this.updateButtons();
    }, init.prototype.updateButtons = function() {
      /** @type {boolean} */
      var attached = this._state === presenter.VideoSlotShowButtonsEvent.BET;
      /** @type {boolean} */
      var value = attached && !this._isAutoplay && !this._freeGameMode;
      this._view.enableButton(message.BETMAX, !this._betSettings.isLocked(presenter.LockType.COIN) && value);
      if (!(this._betSettings.isLocked(presenter.LockType.COIN) && !this._freeGameMode)) {
        this._view.enableButton(message.COINS, value);
        this._view.enableButton(message.COINS_INC, value && this._betSettings.coins < this._betSettings.maxCoins);
        this._view.enableButton(message.COINS_DEC, value && this._betSettings.coins > 1);
      }
      if (!(this._betSettings.isLocked(presenter.LockType.LINE) && !this._freeGameMode)) {
        this._view.enableButton(message.LINES, value);
        this._view.enableButton(message.LINES_INC, value && this._betSettings.lines < this._betSettings.maxLines);
        this._view.enableButton(message.LINES_DEC, value && this._betSettings.lines > 1);
      }
      this._view.enableButton(message.DENOM, value && this._betSettings.hasMultipleDenominations);
      this._view.enableButton(message.DENOM_INC, value && this._betSettings.denom < this._betSettings.denominations.length - 1);
      this._view.enableButton(message.DENOM_DEC, value && this._betSettings.denom > 0);
      this._view.showButton(message.BET_INC, this.showBetButtonsInGamble());
      this._view.showButton(message.BET_DEC, this.showBetButtonsInGamble());
      this._view.enableButton(message.BET_INC, value && this._betSettings.denom < this._betSettings.denominations.length - 1);
      this._view.enableButton(message.BET_DEC, value && this._betSettings.denom > 0);
      this._view.enableSlider(row.LINES, value);
      this._view.enableSlider(row.COINS, value);
      this._view.enableSlider(row.DENOM, value && this._betSettings.hasMultipleDenominations);
      this._view.enableSlider(row.BET, value);
      this.updateBetButtons();
    }, init.prototype.updateBetButtons = function(zoomAware) {
      if (void 0 === zoomAware) {
        /** @type {boolean} */
        zoomAware = false;
      }
      var data = this._betSettings.denominations;
      var n = this._betSettings.denom;
      var i = this._betButtons.length;
      var date = self.ResourceManager.getInstance().getMoneyFormatter();
      var k = this._betSettings.betCoins;
      /** @type {boolean} */
      var u = this._state === presenter.VideoSlotShowButtonsEvent.BET && !this._isAutoplay && !this._freeGameMode;
      if (data.length <= this._betButtons.length) {
        /** @type {number} */
        this._betOffset = 0;
      } else {
        if (n - this._betOffset >= i ? this._betOffset = n - (i - 1) : n - this._betOffset < 0 && (this._betOffset = n), zoomAware) {
          /** @type {number} */
          var _ref = Math.ceil(this._betButtons.length / 2) - 1;
          /** @type {number} */
          var _j = n - this._betOffset;
          for (; _j > _ref && this._betOffset + i < data.length;) {
            this._betOffset++;
            _j--;
          }
          for (; _j < _ref && this._betOffset > 0;) {
            this._betOffset--;
            _j++;
          }
        }
      }
      /** @type {number} */
      var index = 0;
      var ncells = this._betButtons.length;
      for (; index < ncells; index++) {
        if (index + this._betOffset < data.length) {
          this._view.showButton(this._betButtons[index], this.showBetButtonsInGamble());
          this._view.selectButton(this._betButtons[index], index + this._betOffset === this._betSettings.denom);
          this._view.enableButton(this._betButtons[index], u && index + this._betOffset !== this._betSettings.denom);
          /** @type {boolean} */
          var _ = !this._config.quickBetCurrency;
          this._view.setLabelText(this._betButtons[index], date.MoneyToString(data[index + this._betOffset] * k, (_ ? self.MoneyFormatterFlag.NO_CURRENCY : 0) | self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
        } else {
          this._view.showButton(this._betButtons[index], false);
        }
      }
    }, init.prototype.showBetButtonsInGamble = function() {
      /** @type {boolean} */
      var attached = this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE_SPIN_WAIT;
      /** @type {boolean} */
      var canViewSiteFiles = this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE_WAIT || attached;
      /** @type {boolean} */
      var canViewMyFiles = this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE;
      /** @type {boolean} */
      var canUploadFiles = this._state === presenter.VideoSlotShowButtonsEvent.COLLECT;
      return !((canViewMyFiles || canViewSiteFiles || canUploadFiles) && !this._isAutoplay);
    }, init.prototype.onFreeGameStart = function(data) {
      /** @type {boolean} */
      this._freeGameMode = true;
      this._view.setLabelText(message.BALANCE_CAPTION, "", ">");
      this._view.setLabelText(message.COINBALANCE_LABEL, "IDS_MENU_FREEGAMES", "> " + data.freeGames.toString());
      this._betSettings.initFreeGame(data.denomination, data.bet, data.lines);
      this.updateButtons();
    }, init.prototype.onFreeGameEnd = function(result) {
      /** @type {boolean} */
      this._freeGameMode = false;
      this.onRoundStateChange();
      this._view.setLabelText(message.BALANCE_CAPTION, this.getBalanceTypeCaption(this._balanceType), ">");
      this.setCoinBalanceLabelBalance(this._lastBalance);
      this._betSettings.endFreeGame();
      this.updateButtons();
    }, init.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
      this.updateButtons();
    }, init.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
      this.updateButtons();
    }, init.prototype.setCoinBalanceLabelBalance = function(length) {
      var removedRelations = self.ResourceManager.getInstance().getMoneyFormatter();
      var content = self.ResourceManager.getInstance().getCreditFormatter();
      this._view.setLabelText(message.BALANCE_CAPTION, this.getBalanceTypeCaption(this._balanceType), ">");
      this._view.setLabelText(message.COINBALANCE_LABEL, this.getBalanceTypeCaption(this._balanceType), ">: " + content.getCreditString(String(Math.floor((length > 0 ? length : 0) / this._betSettings.denomination)), removedRelations.MoneyToString(length, self.MoneyFormatterFlag.NO_DENOM_DECIMAL)));
    }, init.prototype.changeLines = function(t) {
      /** @type {number} */
      var e = 0;
      for (; e < Math.abs(t.slStep); ++e) {
        if (t.slStep > 0) {
          this._betSettings.incLines();
        } else {
          this._betSettings.decLines();
        }
      }
    }, init.prototype.changeCoins = function(coins) {
      this._betSettings.coins = coins.slValue;
    }, init.prototype.changeDenomination = function(canCreateDiscussions) {
      this._betSettings.setDenomIndex(canCreateDiscussions.slIndex);
    }, init.prototype.onBetMax = function() {
      this._betSettings.betMax();
      if (this._config.betMaxSpin) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.SPIN));
      }
    }, init.prototype.onCurrency = function() {
      this._view.setCurrency(self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol());
      this.updateBetButtons();
    }, init;
  }(exports.EventProcessor);
  var editor = function() {
    /**
     * @return {undefined}
     */
    function validateReducer() {
    }
    return validateReducer.SPIN = "SPIN", validateReducer.CONTINUE = "CONTINUE", validateReducer.GAMBLE = "GAMBLE", validateReducer.COLLECT = "COLLECT", validateReducer.GAMBLEBTNPANEL = "GAMBLEBTNPANEL", validateReducer.COLLECT_WAIT = "COLLECT_WAIT", validateReducer.APCOUNTER = "APCOUNTER", validateReducer.AUTOPLAY = "AUTOPLAY", validateReducer.AUTOPLAY_STOP = "AUTOPLAY_STOP", validateReducer.PAYTABLE = "PAYTABLE", validateReducer.REELQUICKSTOP = "REELQUICKSTOP", validateReducer;
  }();
  var randomSetMember = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ease = function(startFn) {
    /**
     * @param {!HTMLElement} event
     * @param {?} $el
     * @param {!Element} e
     * @param {?} data
     * @param {?} instance
     * @param {?} options
     * @return {?}
     */
    function set(event, $el, e, data, instance, options) {
      var me = startFn.call(this, event) || this;
      if (me._lastFreeGame = false, me._countQuickStop = false, me._settings = options, me._view = e, me._viewGame = data, me._disableAutoPlay = instance.disableAutoPlay, me._disableFastPlay = instance.disableFastPlay, event.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_SHOWN, function(body) {
        return me.onTransitionShown(body);
      }), event.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_HIDDEN, function(body) {
        return me.onTransitionHidden(body);
      }), event.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), event.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function(it_case) {
        return me.onAutoplayStarted(it_case);
      }), event.addEventListener(tree.AutoplayEvent.AUTOPLAY_TRIGGER, function(it_case) {
        return me.onAutoplayTrigger(it_case);
      }), event.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      }), event.addEventListener(self.GameStatusEvent.DISABLE, function(disabled) {
        return me.onDisable(disabled);
      }), event.addEventListener(self.GameStatusEvent.ENABLE, function(t) {
        return me.onEnable(t);
      }), event.addEventListener(self.ModalShowingUIEvent.SHOWING, function(disabled) {
        return me.onDisable(disabled);
      }), event.addEventListener(self.ModalUIEvent.HIDING, function(t) {
        return me.onEnable(t);
      }), event.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function(t) {
        return me.onMysteryJackpot(t);
      }), event.addEventListener(presenter.JackpotEndEvent.JACKPOTEND, function(t) {
        return me.onMysteryJackpotEnd(t);
      }), event.addEventListener(presenter.VideoSlotUIEvent.SPIN_OR_CONTINUE, function() {
        return me.onSpin();
      }), event.addEventListener(presenter.VideoSlotGambleEvent.GAMBLE, function(element) {
        return me.onGambleSelection(element);
      }), event.addEventListener(presenter.VideoSlotGambleEvent.COLLECT, function() {
        return me.onCollect();
      }), event.addEventListener(self.ExitEvent.LOGOUT, function(dispatch) {
        return me.onLogout(dispatch);
      }), me._dispatcher.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return me.onSplashHide();
      }), event.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_INITED, function() {
        return me.transitionInited();
      }), event.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_HIDDEN, function() {
        return me.transitionHidden();
      }), event.addEventListener(presenter.FreeGameEvent.START, function(element) {
        return me.onFreeGameStart(element);
      }), event.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return me.onRoundStart();
      }), event.addEventListener(presenter.FreespinSpinEvent.FREESPIN_SPIN, function(t) {
        return me.onFreespinSpin(t);
      }), !instance.disableSpaceBarToSpin) {
        /** @type {!Array} */
        var value = [e.getButton(editor.SPIN), e.getButton(editor.CONTINUE)];
        me._KeyboardHandlerNode = new presenter.VideoSlotKeyboardHandlerNode(value);
        self.ResourceManager.getInstance().getKeyboardHandler().addCurrentNode(me._KeyboardHandlerNode);
      }
      return e.initButton(editor.SPIN, function() {
        return me.onSpin();
      }), e.initButton(editor.CONTINUE, function() {
        return me.onContinue();
      }), e.initButton(editor.GAMBLE, function() {
        return me.onGamble();
      }), e.initButton(editor.COLLECT, function() {
        return me.onCollect();
      }), e.initButton(editor.COLLECT_WAIT, function() {
        return me.onCollectWait();
      }), e.initButton(editor.AUTOPLAY, function() {
        return me.onAutoplay();
      }), e.initButton(editor.AUTOPLAY_STOP, function() {
        return me.onAutoplayStop();
      }), e.initButton(editor.APCOUNTER, function() {
        return me.onAutoplayStop();
      }), e.initButton(editor.PAYTABLE, function() {
        return me.onPaytable();
      }), me._viewGame && me._viewGame.initButton(editor.REELQUICKSTOP, function() {
        return me.onReelContinue();
      }), me._state = presenter.VideoSlotShowButtonsEvent.NONE, me._autoplayState = false, me._disabledState = true, me._transitionState = false, me._mysteryJackpotWon = false, me._hasTransition = false, me._splashShowing = true, me._enableContinueDuringAutoplay = instance.enableContinueDuringAutoplay, me.updateButtons(), me;
    }
    return randomSetMember(set, startFn), set.prototype.transitionInited = function() {
      /** @type {boolean} */
      this._hasTransition = true;
    }, set.prototype.transitionHidden = function() {
      /** @type {boolean} */
      this._disabledState = false;
    }, set.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._splashShowing = false;
      this.enableSpins();
    }, set.prototype.enableSpins = function() {
      if (!this._hasTransition) {
        /** @type {boolean} */
        this._disabledState = false;
      }
    }, set.prototype.enableQuickStopCounting = function() {
      /** @type {boolean} */
      this._countQuickStop = true;
    }, set.prototype.updateButtons = function() {
      /** @type {boolean} */
      var evt = this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE_SPIN_WAIT;
      /** @type {boolean} */
      var showConstants = this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE_WAIT || evt;
      /** @type {boolean} */
      var showEffects = this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE;
      /** @type {boolean} */
      var touch = this._state === presenter.VideoSlotShowButtonsEvent.BET;
      /** @type {boolean} */
      var showPackageConstants = this._state === presenter.VideoSlotShowButtonsEvent.COLLECT;
      /** @type {boolean} */
      var hasDataToSync = this._state === presenter.VideoSlotShowButtonsEvent.CONTINUE;
      /** @type {boolean} */
      var hasAttempts = this._state === presenter.VideoSlotShowButtonsEvent.CONTINUE_SPIN || this._state === presenter.VideoSlotShowButtonsEvent.CONTINUE_SPIN_NOAUTOPLAY;
      var u = !this._autoplayState || this._enableContinueDuringAutoplay && (hasDataToSync || hasAttempts);
      if (this._autoplayState) {
        /** @type {boolean} */
        hasDataToSync = hasDataToSync || hasAttempts;
        /** @type {boolean} */
        hasAttempts = false;
      }
      this._invertMode = hasAttempts || touch && this._autoplayState;
      if (this._autoplayState && this._state !== presenter.VideoSlotShowButtonsEvent.NONE) {
        this._viewGame.showButton(editor.REELQUICKSTOP, true);
        this._viewGame.enableButton(editor.REELQUICKSTOP, true);
        this._view.showButton(editor.SPIN, false);
        this._view.enableButton(editor.SPIN, false);
        if (this._enableContinueDuringAutoplay) {
          this._view.showButton(editor.CONTINUE, true);
          this._view.enableButton(editor.CONTINUE, true);
        } else {
          this._view.showButton(editor.CONTINUE, false);
          this._view.enableButton(editor.CONTINUE, false);
        }
      } else {
        this._view.showButton(editor.SPIN, (!hasDataToSync || hasAttempts) && (!this._autoplayState || this._enableContinueDuringAutoplay));
        this._view.enableButton(editor.SPIN, !this._transitionState && (touch || evt || hasAttempts) && u);
        this._view.showButton(editor.CONTINUE, hasDataToSync && !hasAttempts && u);
        this._view.enableButton(editor.CONTINUE, hasDataToSync && !hasAttempts);
        if (this._viewGame) {
          this._viewGame.showButton(editor.REELQUICKSTOP, hasDataToSync && !hasAttempts);
          this._viewGame.enableButton(editor.REELQUICKSTOP, hasDataToSync && !hasAttempts);
        }
      }
      this._view.showPanel(editor.GAMBLEBTNPANEL, (showEffects || showConstants || showPackageConstants) && !this._autoplayState);
      this._view.showButton(editor.COLLECT, (showEffects || showConstants) && !this._autoplayState);
      this._view.enableButton(editor.COLLECT, showConstants && !this._autoplayState);
      this._view.showButton(editor.COLLECT_WAIT, showPackageConstants && !this._autoplayState);
      this._view.enableButton(editor.COLLECT_WAIT, showPackageConstants && !this._autoplayState);
      this._view.enableButton(editor.GAMBLE, showConstants && !this._autoplayState);
      this._view.enableButton(editor.PAYTABLE, !this._mysteryJackpotWon);
      this._view.showButton(editor.APCOUNTER, this._autoplayState && !this._mysteryJackpotWon);
      this._view.enableButton(editor.APCOUNTER, this._autoplayState);
      this._view.showButton(editor.AUTOPLAY, !this._autoplayState);
      this._view.selectButton(editor.AUTOPLAY, this._autoplayState);
      this._view.enableButton(editor.AUTOPLAY, !(this._autoplayState || this._disableAutoPlay || this._transitionState || this._mysteryJackpotWon || showEffects || showPackageConstants));
      this._view.showButton(editor.AUTOPLAY_STOP, this._autoplayState);
      this._view.enableButton(editor.AUTOPLAY_STOP, this._autoplayState && !this._mysteryJackpotWon);
    }, set.prototype.onShowButtons = function(data) {
      switch(this._state = data.groupId, this._state) {
        case presenter.VideoSlotShowButtonsEvent.BET:
        case presenter.VideoSlotShowButtonsEvent.COLLECT:
          this._lastState = this._state;
      }
      this.updateButtons();
    }, set.prototype.onTransitionShown = function(a) {
      /** @type {boolean} */
      this._transitionState = true;
      this.updateButtons();
    }, set.prototype.onTransitionHidden = function(a) {
      /** @type {boolean} */
      this._transitionState = false;
      this.updateButtons();
    }, set.prototype.onMysteryJackpot = function(result) {
      /** @type {boolean} */
      this._mysteryJackpotWon = true;
      this.updateButtons();
    }, set.prototype.onMysteryJackpotEnd = function(result) {
      /** @type {boolean} */
      this._mysteryJackpotWon = false;
      this.updateButtons();
    }, set.prototype.doSpin = function() {
      this._view.enableButton(editor.SPIN, false);
      this._view.showPanel(editor.GAMBLEBTNPANEL, false);
      var password = this._invertMode ? presenter.VideoSlotUIEvent.CONTINUE : presenter.VideoSlotUIEvent.SPIN;
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(password));
    }, set.prototype.onReelContinue = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.REELQUICKSTOP));
      this.onContinue();
    }, set.prototype.onContinue = function() {
      if (this._countQuickStop) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.FAST_PLAY_INCREMENT));
        /** @type {boolean} */
        this._countQuickStop = false;
      }
      if (this._invertMode) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.SPIN));
      } else {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.CONTINUE));
      }
    }, set.prototype.onGamble = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.GAMBLE));
    }, set.prototype.onGambleSelection = function(item) {
      if (this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE_WAIT || this._state === presenter.VideoSlotShowButtonsEvent.GAMBLE_SPIN_WAIT) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.GAMBLE));
      } else {
        if (this._state === presenter.VideoSlotShowButtonsEvent.COLLECT) {
          /** @type {number} */
          var color = 0;
          switch(item.selection) {
            case "red":
              color = presenter.RedOrBlackSelection.RED;
              break;
            case "black":
              color = presenter.RedOrBlackSelection.BLACK;
              break;
            case "clubs":
              color = presenter.RedOrBlackSelection.CLUB;
              break;
            case "spades":
              color = presenter.RedOrBlackSelection.SPADE;
              break;
            case "diamonds":
              color = presenter.RedOrBlackSelection.DIAMOND;
              break;
            case "hearts":
              color = presenter.RedOrBlackSelection.HEART;
          }
          if (color > 0) {
            this._dispatcher.dispatch(new presenter.GambleUIEvent(color));
          }
        }
      }
    }, set.prototype.onCollect = function() {
      if (!(this._state !== presenter.VideoSlotShowButtonsEvent.GAMBLE_WAIT && this._state !== presenter.VideoSlotShowButtonsEvent.GAMBLE_SPIN_WAIT && this._state !== presenter.VideoSlotShowButtonsEvent.COLLECT)) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.COLLECT));
      }
    }, set.prototype.onCollectWait = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.COLLECT));
    }, set.prototype.onAutoplay = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.AUTOPLAY));
    }, set.prototype.onPaytable = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.PAYTABLE));
    }, set.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._autoplayState = false;
      this.updateButtons();
    }, set.prototype.onAutoplayStarted = function(it_case) {
      /** @type {boolean} */
      this._autoplayState = true;
      this._view.setButtonText(editor.APCOUNTER, it_case.playsLeft.toString());
      this._view.setLabelText(editor.APCOUNTER, it_case.playsLeft.toString());
      this.updateButtons();
    }, set.prototype.onAutoplayTrigger = function(it_case) {
      this._view.setButtonText(editor.APCOUNTER, it_case.playsLeft.toString());
      this._view.setLabelText(editor.APCOUNTER, it_case.playsLeft.toString());
    }, set.prototype.onAutoplayStop = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.AUTOPLAY_STOP));
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_STOP));
    }, set.prototype.onDisable = function(event) {
      /** @type {boolean} */
      this._disabledState = true;
    }, set.prototype.onEnable = function(args) {
      if (!this._splashShowing) {
        /** @type {boolean} */
        this._disabledState = false;
        this.updateButtons();
      }
    }, set.prototype.onSpin = function() {
      switch(this._state) {
        case presenter.VideoSlotShowButtonsEvent.BET:
        case presenter.VideoSlotShowButtonsEvent.GAMBLE_SPIN_WAIT:
        case presenter.VideoSlotShowButtonsEvent.CONTINUE_SPIN:
        case presenter.VideoSlotShowButtonsEvent.CONTINUE_SPIN_NOAUTOPLAY:
          if (!(this._autoplayState || this._disabledState)) {
            this.doSpin();
          }
          break;
        case presenter.VideoSlotShowButtonsEvent.GAMBLE_WAIT:
          if (this._lastFreeGame) {
            /** @type {boolean} */
            this._lastFreeGame = false;
            this.onCollect();
          }
          break;
        case presenter.VideoSlotShowButtonsEvent.CONTINUE:
          this.onContinue();
      }
    }, set.prototype.onLogout = function(callback) {
      /** @type {boolean} */
      this._disabledState = true;
      this.updateButtons();
    }, set.prototype.onFreeGameStart = function(inEl) {
      if (1 === inEl.freeGames) {
        /** @type {boolean} */
        this._lastFreeGame = true;
      }
    }, set.prototype.onFreespinSpin = function(result) {
      this.enableQuickStopCounting();
    }, set.prototype.onRoundStart = function() {
      this.enableQuickStopCounting();
    }, set;
  }(exports.EventProcessor);
  var val = function() {
    /**
     * @param {string} settingsCollection
     * @param {number} value
     * @param {number} n
     * @return {undefined}
     */
    function init(settingsCollection, value, n) {
      if (void 0 === value) {
        /** @type {number} */
        value = 5;
      }
      if (void 0 === n) {
        /** @type {number} */
        n = 50;
      }
      var i = this;
      /** @type {string} */
      this._scales = settingsCollection;
      /** @type {number} */
      this._gap = value;
      /** @type {number} */
      this._minOffset = n;
      var s = self.ResourceManager.getInstance().getEntityManager();
      var p = s.create("WinCounter");
      s.add("wincounter", p);
      this._creditFormatter = self.ResourceManager.getInstance().getCreditFormatter();
      this._textField = p.getTextField("text");
      this._display = p.getDisplay(".");
      this._transform = p.getTransform("container");
      this._rootTransform = p.getTransform(".");
      this._geometry = p.getGeometry("text");
      this._winTextField = p.getTextField("IDS_WIN_CAPTION");
      this._winTextField.setText("IDS_MENU_WIN");
      this._winTransform = p.getTransform("IDS_WIN_CAPTION");
      this._coinTransform = p.getTransform("IDS_LBL_COINS");
      this._displayCounter = p.getDisplay("container");
      this._displayWin = p.getDisplay("IDS_WIN_CAPTION");
      this._displayCoin = p.getDisplay("IDS_LBL_COINS");
      this._displayBackground = p.getDisplay("background");
      this._displayBackground.setVisible(false);
      /** @type {boolean} */
      this._visible = true;
      /** @type {number} */
      this._maxCounterWidth = 0;
      /** @type {number} */
      this._value = 0;
      /** @type {number} */
      this._showLevel = 0;
      /** @type {boolean} */
      this._messageSent = false;
      /** @type {number} */
      this._maxTotalWidth = 330;
      /** @type {!RegExp} */
      this._finalWinRe = /\.00$|\.00[^.\d]/;
      this._animator = new exports.SpringAnimator(0.2, 0.3);
      this._animator.addListener(function() {
        return i.onAnimator();
      });
      /** @type {boolean} */
      this._capAnimPlaying = false;
      /** @type {null} */
      this._capWaitTask = null;
      this._winCapTextDisplay = p.getDisplay("wincapText");
      this.setWinLevel(0);
      this.onAnimator();
      this.updateVisibility();
      this.updateLabelPositions();
      this.setBlinkState(0);
    }
    return init.prototype.setTemporaryScales = function(canCreateDiscussions) {
      this._defaultScales = this._scales;
      /** @type {string} */
      this._scales = canCreateDiscussions;
      this.setWinLevel(this._levelIdx);
    }, init.prototype.resetScalesToDefault = function() {
      this._scales = this._defaultScales;
      this.setWinLevel(this._levelIdx);
    }, init.prototype.setMessage = function(data, extras) {
      /** @type {boolean} */
      this._messageSent = true;
      if (this._mode === tree.InfoViewMode.MESSAGE) {
        this.updateVisibility();
      }
    }, init.prototype.hide = function() {
      /** @type {boolean} */
      this._visible = false;
      this.updateVisibility();
    }, init.prototype.show = function() {
      /** @type {boolean} */
      this._visible = true;
      this.updateVisibility();
    }, init.prototype.reset = function() {
      /** @type {number} */
      this._value = 0;
      this._textField.setText("");
      /** @type {number} */
      this._maxCounterWidth = 0;
      this._animator.initValue(this._scales[0]);
      this.setCapAnimationState(false);
      this.updateVisibility();
    }, init.prototype.updateVisibility = function() {
      var value = this._visible && this._levelIdx >= this._showLevel && (!this._messageSent || this._mode !== tree.InfoViewMode.MESSAGE) && this._value > 0;
      var visible = value && this._counterBlinkState;
      this._displayWin.setVisible(visible);
      this._displayCounter.setVisible(this._counterBlinkState);
      this._display.setVisible(value);
      this._displayCoin.setVisible(visible && !this._creditFormatter.creditDisplay);
    }, init.prototype.setWin = function(a, f) {
      /** @type {number} */
      this._value = a;
      this.setCapAnimationState(f);
      var counter = this._creditFormatter.formatCoinValue(a);
      this._textField.setText(counter + " ");
      if (a > 0) {
        this.updateLabelPositions();
        this.updateVisibility();
      }
    }, init.prototype.setCapAnimationState = function(f) {
      var allTraps = this;
      if (f) {
        if (!this._capAnimPlaying) {
          /** @type {boolean} */
          this._capAnimPlaying = true;
          exports.Task.createHandler(function(t) {
            return allTraps.capAnimationHandler(t);
          }).start();
        }
      } else {
        if (this._capAnimPlaying) {
          this.setBlinkState(0);
          if (this._capWaitTask) {
            this._capWaitTask.cancelDelay();
            /** @type {null} */
            this._capWaitTask = null;
          }
          /** @type {boolean} */
          this._capAnimPlaying = false;
        }
      }
    }, init.prototype.capAnimationHandler = function(result) {
      if (this._capAnimPlaying) {
        this.setBlinkState(result.state);
        this._capWaitTask = result.startDelayMs(1000);
      } else {
        this.setBlinkState(0);
        result.complete();
      }
    }, init.prototype.setBlinkState = function(addedRenderer) {
      this._winCapTextDisplay.setVisible(0 != (1 & addedRenderer));
      /** @type {boolean} */
      this._counterBlinkState = 0 == (1 & addedRenderer);
      this.updateVisibility();
      this.updateLabelPositions();
    }, init.prototype.setFinalWin = function(jbmnplsMessage) {
      var message = this._creditFormatter.formatCoinValue(jbmnplsMessage, self.MoneyFormatterFlag.FORCE_DECIMAL);
      if (this._finalWinRe.test(message)) {
        message = this._creditFormatter.formatCoinValue(jbmnplsMessage);
      }
      this._textField.setText(message + " ");
      if (jbmnplsMessage > 0) {
        this.updateLabelPositions();
        this.updateVisibility();
      }
    }, init.prototype.setMode = function(mode) {
      switch(this._mode = mode, mode) {
        case tree.InfoViewMode.WIN:
        case tree.InfoViewMode.WIN_NO_COUNT:
          /** @type {boolean} */
          this._messageSent = false;
          if (mode === tree.InfoViewMode.WIN_NO_COUNT) {
            this._animator.flush();
          }
          break;
        case tree.InfoViewMode.MESSAGE:
      }
      this.setWinLevel(this._levelIdx);
      this.updateVisibility();
    }, init.prototype.setWinLevel = function(startingIndex) {
      if (startingIndex > this._scales.length) {
        startingIndex = this._scales.length;
      }
      if (this._levelIdx !== startingIndex) {
        /** @type {number} */
        this._levelIdx = startingIndex;
        if (0 === this._levelIdx) {
          this.reset();
        } else {
          this._animator.target = this._scales[startingIndex - 1];
        }
      }
      this.updateVisibility();
    }, init.prototype.enable = function(value) {
    }, init.prototype.setDefaultStyle = function(styles) {
    }, init.prototype.onAnimator = function() {
      var newValue = this._animator.value;
      this._transform.setScaleX(newValue);
      this._transform.setScaleY(newValue);
      this.updateLabelPositions();
    }, init.prototype.updateLabelPositions = function() {
      var headSegments = self.ResourceManager.getInstance().getTextManager().getByName(this._winTextField.getText()).getText();
      if (headSegments) {
        /** @type {number} */
        var newValue = 1.2 - 0.05 * Math.max(4, headSegments.length);
        this._winTransform.setScaleX(newValue);
        this._winTransform.setScaleY(newValue);
        this._coinTransform.setScaleX(newValue);
        this._coinTransform.setScaleY(newValue);
      }
      var scale = this._transform.getScaleX();
      this._transform.forceUpdateTransformMatrix();
      var simage_ = this._geometry.getBoundingBox(this._rootTransform);
      if (simage_ && this._displayCounter.isVisible()) {
        var maxWidth = this._maxTotalWidth;
        var w = simage_.width;
        if (w > maxWidth) {
          /** @type {number} */
          var ratio = maxWidth / w;
          /** @type {number} */
          scale = scale * ratio;
          this._transform.setScaleX(scale);
          this._transform.setScaleY(scale);
          /** @type {number} */
          w = w * ratio;
          /** @type {number} */
          this._maxCounterWidth = 0;
        }
        if (w > this._maxCounterWidth) {
          this._maxCounterWidth = w;
          var width = 0.5 * w + this._gap;
          width = width > this._minOffset ? width : this._minOffset;
          this._winTransform.setX(-width);
          this._coinTransform.setX(width);
        }
      }
    }, init;
  }();
  var cb = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var base16 = function(self) {
    /**
     * @param {?} e
     * @return {?}
     */
    function init(e) {
      var protocol = self.call(this, e) || this;
      return protocol._coinShower = protocol.createEmitter(), protocol;
    }
    return cb(init, self), init.prototype.setWinLevel = function(i) {
      if (this._coinShower) {
        this._coinShower.setDensity(2 * i / this._scales.length);
        if (i != this._levelIdx) {
          this._coinShower.burst(15);
        }
      }
      self.prototype.setWinLevel.call(this, i);
    }, init.prototype.setMode = function(mode) {
      self.prototype.setMode.call(this, mode);
      if (this._coinShower) {
        if (mode === tree.InfoViewMode.WIN) {
          this._coinShower.start();
        } else {
          this._coinShower.stop();
        }
      }
    }, init.prototype.createEmitter = function() {
      var PersonModel = self.ResourceManager.getInstance().getEntityManager();
      var spec = PersonModel.getByName("wincounter");
      var elements = tree.CoinShowerEmitter.createPool(spec, "emitter");
      return new tree.CoinShowerEmitter(elements);
    }, init;
  }(val);
  var _setTagName = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ArticleManager = function(t) {
    /**
     * @param {!HTMLElement} host
     * @param {?} port
     * @return {?}
     */
    function Connection(host, port) {
      var config = t.call(this, host) || this;
      return config._fastPlayQuestionMessageManager = port, host.addEventListener(presenter.FastPlayQuestionEvent.SHOW_WINDOW, function(response) {
        return config.onMessage(response);
      }), config;
    }
    return _setTagName(Connection, t), Connection.prototype.onMessage = function(type) {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      var msg = PersonModel.getByName("IDS_MSG_FASTPLAYQUESTION").getText() + "\n" + PersonModel.getByName("IDS_MSG_DISABLE_IN_SETTINGS").getText();
      this._fastPlayQuestionMessageManager.handleMessage(0, "IDS_M_SETTINGS_L12", msg, 0).show();
    }, Connection;
  }(exports.EventProcessor);
  var storeContextPlugin = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var link = function(self) {
    /**
     * @param {?} content
     * @param {?} options
     * @param {?} element
     * @return {?}
     */
    function Modal(content, options, element) {
      var that = self.call(this, content, options, element) || this;
      return that._active = true, that;
    }
    return storeContextPlugin(Modal, self), Object.defineProperty(Modal.prototype, "active", {
      get : function() {
        return this._active;
      },
      enumerable : true,
      configurable : true
    }), Modal.prototype.initView = function(template, localOptions) {
      var _ref2 = this;
      if (template) {
        /** @type {!Element} */
        this._view = template;
        template.initButton(self.ModalViewButton.YES, function() {
          return _ref2.onYes();
        });
        template.initButton(self.ModalViewButton.NO, function() {
          return _ref2.onNo();
        });
        template.showButton(self.ModalViewButton.YES, true);
        template.showButton(self.ModalViewButton.NO, true);
        template.showButton(self.ModalViewButton.EXIT, false);
      }
    }, Modal.prototype.onYes = function() {
      this.close();
      this._dispatcher.dispatch(new presenter.FastPlayQuestionEvent(presenter.FastPlayQuestionEvent.HIDE_WINDOW, 1));
    }, Modal.prototype.onNo = function() {
      self.prototype.hide.call(this);
      self.prototype.onCancel.call(this);
      this._dispatcher.dispatch(new presenter.FastPlayQuestionEvent(presenter.FastPlayQuestionEvent.HIDE_WINDOW, 0));
    }, Modal;
  }(resource);
  var label_mouseover_fn = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var FFT = function(d) {
    /**
     * @param {?} a
     * @param {!Function} fn
     * @return {?}
     */
    function Subscription(a, fn) {
      var $ = d.call(this, a, null, null) || this;
      return $._viewFactory = fn, $;
    }
    return label_mouseover_fn(Subscription, d), Subscription.prototype.handleMessage = function(store, to, data, status) {
      var ac = this._viewFactory.createFastPlayMessageView(this._dispatcher, to, data);
      return new link(this._dispatcher, ac, status);
    }, Subscription;
  }(Socket);
  var getAttr = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var AddressPickerResult = function(b) {
    /**
     * @param {!HTMLElement} result
     * @param {?} now
     * @return {?}
     */
    function loop(result, now) {
      var config = b.call(this, result) || this;
      return config._freeGameMessageManager = now, config._controllers = [], result.addEventListener(presenter.FreeGameMessageEvent.FREEGAMEMESSAGE, function(response) {
        return config.onMessage(response);
      }), config;
    }
    return getAttr(loop, b), loop.prototype.destroy = function() {
      resource.hideAll();
    }, loop.prototype.onMessage = function(message) {
      var controller = this._freeGameMessageManager.handleMessage(message.id, message.title, message.message, message.flags, message.priority);
      controller.show();
      this._controllers.push(controller);
    }, loop;
  }(exports.EventProcessor);
  var parseCharactor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ShellMountPasswordDialog = function(item) {
    /**
     * @param {!HTMLElement} data
     * @param {?} i
     * @param {?} next
     * @return {?}
     */
    function p(data, i, next) {
      var obs = item.call(this, data, i, next) || this;
      return data.addEventListener(self.RoundEvent.ROUNDSTART, function(key) {
        return obs.onRoundStart(key);
      }), obs._active = true, obs;
    }
    return parseCharactor(p, item), Object.defineProperty(p.prototype, "active", {
      get : function() {
        return this._active;
      },
      enumerable : true,
      configurable : true
    }), p.prototype.initView = function(dialog, localOptions) {
      var options = this;
      if (dialog) {
        /** @type {!Element} */
        this._view = dialog;
        if (localOptions === (self.MessageEventFlag.OK | self.MessageEventFlag.NOCANCEL)) {
          dialog.initButton(self.ModalViewButton.OK, function() {
            return options.onOk();
          });
          dialog.showButton(self.ModalViewButton.OK, true);
          dialog.showButton(self.ModalViewButton.EXIT, false);
          dialog.showButton(self.ModalViewButton.CANCEL, false);
        } else {
          if (localOptions === self.MessageEventFlag.CRITICAL) {
            dialog.initButton(self.ModalViewButton.EXIT, function() {
              return options.onExit();
            });
            dialog.showButton(self.ModalViewButton.EXIT, true);
            dialog.showButton(self.ModalViewButton.YES, false);
            dialog.showButton(self.ModalViewButton.NO, false);
            dialog.showButton(self.ModalViewButton.OK, false);
          } else {
            dialog.initButton(self.ModalViewButton.YES, function() {
              return options.onYes();
            });
            dialog.initButton(self.ModalViewButton.NO, function() {
              return options.onNo();
            });
            dialog.showButton(self.ModalViewButton.YES, true);
            dialog.showButton(self.ModalViewButton.NO, true);
            dialog.showButton(self.ModalViewButton.EXIT, false);
          }
        }
      }
    }, p.prototype.onRoundStart = function(ast) {
      this.hide();
    }, p.prototype.onOk = function() {
      item.prototype.onOk.call(this);
      /** @type {boolean} */
      this._active = false;
    }, p.prototype.onYes = function() {
      this.close();
      this._dispatcher.dispatch(new presenter.FreeGameEvent(presenter.FreeGameEvent.ADDITIONAL));
    }, p.prototype.onNo = function() {
      item.prototype.hide.call(this);
      item.prototype.onCancel.call(this);
    }, p;
  }(resource);
  var addToSegment = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Bitmap = function(d) {
    /**
     * @param {?} a
     * @param {!Function} fn
     * @return {?}
     */
    function Subscription(a, fn) {
      var $ = d.call(this, a, null, null) || this;
      return $._viewFactory = fn, $;
    }
    return addToSegment(Subscription, d), Subscription.prototype.handleMessage = function(type, n, text, flags, id) {
      /** @type {boolean} */
      var is_t = type === presenter.FreeGameMessageEventType.ADDITIONAL;
      /** @type {boolean} */
      var WDA_RUNNER_BUNDLE_ID = !is_t;
      /** @type {boolean} */
      var closeExpr = flags === self.MessageEventFlag.CRITICAL;
      /** @type {string} */
      var closingExpr = closeExpr ? "ServerMessage" : "PlayConfirm";
      var t = this._viewFactory.createFreeGameMessageView(this._dispatcher, n, text, id, is_t ? closingExpr : null, false, WDA_RUNNER_BUNDLE_ID);
      return new ShellMountPasswordDialog(this._dispatcher, t, flags);
    }, Subscription;
  }(Socket);
  var staticBootPlugin = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Uint8Array = function(options) {
    /**
     * @param {!HTMLElement} that
     * @param {string} f
     * @param {!Object} o
     * @param {!Object} name
     * @return {?}
     */
    function set(that, f, o, name) {
      var _this = options.call(this, that) || this;
      return _this._view = name, _this._config = o, _this._counter = f, _this._counter.addListener(function(t) {
        return _this.onCounter(t);
      }), that.addEventListener(self.InfoEvent.INFO, function(t) {
        return _this.onInfo(t);
      }), that.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return _this.onStart();
      }), that.addEventListener(self.RoundEvent.ROUNDEND, function(t) {
        return _this.onRoundEnd(t);
      }), _this;
    }
    return staticBootPlugin(set, options), set.prototype.onStart = function() {
      this._counter.reset();
      this._mode = tree.InfoViewMode.MESSAGE;
      this._view.setMode(this._mode);
    }, set.prototype.onRoundEnd = function(result) {
    }, set.prototype.onCounter = function(message) {
      if (message.type === exports.ChangeEvent.CHANGE) {
        this._view.setWin(this._counter.value, this._counter.isCapped);
      } else {
        switch(message.type) {
          case tree.WinCounterEvent.STOP:
            this._view.setFinalWin(this._counter.value);
            this._view.setMode(this._mode, true);
        }
        this._dispatcher.dispatch(message);
      }
    }, set.prototype.onInfo = function(data) {
      switch(data.infoId) {
        case tree.WinInfoEvent.WIN:
          /** @type {!Object} */
          var item = data;
          var name = item.coins;
          if (data instanceof presenter.WinPatternEvent) {
            name = data.winData.coinsToCount;
          }
          var i = item.coinsExt;
          if (name + i > 0) {
            this._view.setMessage("", "");
            this._view.setMode(tree.InfoViewMode.WIN);
            this._counter.addValue(name, item.duration, i);
          }
          break;
        case tree.WinInfoEvent.WIN_NO_COUNT:
          /** @type {!Object} */
          var info = data;
          this._view.setMessage("", "");
          this._view.setMode(tree.InfoViewMode.WIN);
          this._counter.addValue(info.coins, 0, info.coinsExt);
          this._view.setMode(this._mode, true);
          break;
        case tree.WinInfoEvent.IDLE:
        case tree.WinInfoEvent.INFO:
          this._mode = tree.InfoViewMode.MESSAGE;
          this._view.setMode(this._mode);
          this._view.setMessage(data.text, data.args, data.style);
      }
    }, set;
  }(exports.EventProcessor);
  var Du = function() {
    /**
     * @param {?} canCreateDiscussions
     * @return {undefined}
     */
    function HI(canCreateDiscussions) {
      this._blink = this.createBlink();
      this._buttonSnd = this.createSound();
    }
    return HI.prototype.visualFeedback = function(result) {
      this._blink.play("show");
    }, HI.prototype.audioFeedback = function(canCreateDiscussions) {
      this._buttonSnd.play();
    }, HI.prototype.createSound = function() {
      return self.ResourceManager.getInstance().getSndManager().create("btnClick");
    }, HI.prototype.createBlink = function() {
      return self.ResourceManager.getInstance().getEntityManager().getByName("main").getAnimation("blinkLayer");
    }, HI;
  }();
  var request = function() {
    /**
     * @return {undefined}
     */
    function IDBCursor() {
    }
    return IDBCursor.NEXT = "NEXT", IDBCursor.PREV = "PREV", IDBCursor.EXIT = "EXIT", IDBCursor.INDICATOR_PREFIX = "INDICATOR", IDBCursor;
  }();
  var name = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var settings = function(t) {
    /**
     * @return {?}
     */
    function Claim() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return name(Claim, t), Claim.HISTORY = "HISTORY", Claim.TUTORIAL = "TUTORIAL", Claim;
  }(data);
  var context = function() {
    /**
     * @return {undefined}
     */
    function PrimitiveType() {
    }
    return PrimitiveType.COINVALUE = "COINVALUE", PrimitiveType.COINVALUE_INC = "COINVALUE_INC", PrimitiveType.COINVALUE_DEC = "COINVALUE_DEC", PrimitiveType.COINS = "COINS", PrimitiveType.COINS_INC = "COINS_INC", PrimitiveType.COINS_DEC = "COINS_DEC", PrimitiveType.LINES = "LINES", PrimitiveType.LINES_INC = "LINES_INC", PrimitiveType.LINES_DEC = "LINES_DEC", PrimitiveType;
  }();
  var region = function() {
    /**
     * @return {undefined}
     */
    function s() {
    }
    return s.SOUND = "SOUND", s.SPACEBARSPIN = "SPACEBARSPIN", s.LEFTHANDMODE = "LEFTHANDMODE", s.FASTPLAY = "FASTPLAY", s.AUTOADJUSTBET = "AUTOADJUSTBET", s;
  }();
  var assertEquals = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Response = function(val) {
    /**
     * @param {!HTMLElement} start
     * @param {boolean} value
     * @param {!Element} key
     * @return {?}
     */
    function s(start, value, key) {
      var me = val.call(this, start) || this;
      return me._view = key, me._settingsController = value, start.addEventListener(presenter.VideoSlotUIEvent.MENU, function() {
        return me.onSettings();
      }), start.addEventListener(presenter.VideoSlotUIEvent.MOBILE_MENU, function() {
        return me.onShow();
      }), me._settingsController && start.addEventListener(presenter.VideoSlotUIEvent.SHOWLIMITS, function() {
        return me.onShowLimits();
      }), me;
    }
    return assertEquals(s, val), s.prototype.onShow = function() {
      /** @type {boolean} */
      var value = !this._view.isVisible();
      exports.SystemManager.getScheduler().pause(value);
      if ("mobile" === exports.SystemManager.getDeviceHandler().platform) {
        /** @type {string} */
        document.querySelector("canvas").style.display = value ? "none" : "block";
      }
      if (!value && this._settingsController) {
        this._settingsController.save();
      }
      var state;
      state = value ? presenter.VideoSlotUIEvent.MENUSHOW : presenter.VideoSlotUIEvent.MENUHIDE;
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(state));
      this._view.show(value);
    }, s.prototype.onSettings = function() {
      this.onShow();
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.SETTINGS));
    }, s.prototype.onShowLimits = function() {
      if (!this._view.isVisible()) {
        this.onSettings();
        this._view.setPage(1);
      }
    }, s;
  }(exports.EventProcessor);
  var isFunction = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RealTester = function(reference) {
    /**
     * @param {!Object} name
     * @param {!Object} dt
     * @param {!Object} config
     * @return {?}
     */
    function set(name, dt, config) {
      var self = reference.call(this, name) || this;
      /** @type {!Object} */
      self._config = config;
      /** @type {!Object} */
      self._jackpotPanel = dt;
      /** @type {!Object} */
      self._dispatcher = name;
      self._jackpotPanel.mjCongratulations = self._config.mjCongratulations;
      self._jackpotPanel.customContactSupportMessage = self._config.mjContactSupportMessage;
      self._jackpotPanel.initButton("disabler", function() {
        return self.onButton();
      });
      self._jackpotPanel.initButton("button_clicktoclose", function() {
        return self.onButton();
      });
      var app = self._jackpotPanel.entity;
      var p = tree.MJCoinShowerEmitter.createPool(app, "coins_emitter");
      return self._coinsEmitter = new tree.MJCoinShowerEmitter(p), self._fireworksEmitter = new tree.MJFireworkAnimEmitter(tree.MJFireworkAnimEmitter.createPool(app, "fireworks_emitter"), name), self._soundController = new presenter.JackpotSoundController(name), self._dispatcher.addEventListener(presenter.MysteryJackpotClosePopupEvent.CLOSE, function() {
        return self.onCloseEvent();
      }), self._dispatcher.addEventListener(presenter.JackpotShowPanelEvent.JACKPOTSHOWPANEL, function(p) {
        return self.onShowPanel(p);
      }), self._dispatcher.addEventListener(presenter.JackpotShowParticleEvent.JACKPOTSHOWPARTICLE, function(what) {
        return self.onShowParticles(what);
      }), self._dispatcher.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function(step) {
        return self.onJackpotWin(step);
      }), self;
    }
    return isFunction(set, reference), set.prototype.onButton = function() {
      if (this._waitCtx) {
        /** @type {boolean} */
        this._closeOnInput = true;
        exports.Waiter.notifyContext(this._waitCtx);
      }
    }, set.prototype.onCloseEvent = function() {
      if (this._waitCtx) {
        /** @type {boolean} */
        this._closeOnInput = true;
        exports.Waiter.notifyContext(this._waitCtx);
      }
    }, set.prototype.onShowParticles = function(timeout) {
      var allTraps = this;
      timeout.task.startHandler(function(t) {
        return allTraps.showParticlesHandler(t);
      });
    }, set.prototype.onShowPanel = function(actor) {
      var allTraps = this;
      this._level = actor.id;
      actor.task.startHandler(function(t) {
        return allTraps.showPanelHandler(t);
      });
    }, set.prototype.onJackpotWin = function(ast) {
      this._jackpotPanel.setJackpotWin(ast.wonJackpotInfo);
    }, set.prototype.showParticlesHandler = function(result) {
      switch(result.state) {
        case 0:
          this._fireworksEmitter.showMore();
          this._fireworksEmitter.start();
          this._jackpotPanel.playDarkerAnim("show");
          result.startDelayMs(1500);
        default:
          result.complete();
      }
    }, set.prototype.showPanelHandler = function(result) {
      switch(result.state) {
        case 0:
          this._jackpotPanel.show();
          /** @type {boolean} */
          this._closeOnInput = false;
          result.startDelayMs(200);
          break;
        case 1:
          this._coinsEmitter.setDensity(this._level / 5);
          this._coinsEmitter.start();
          this._fireworksEmitter.showLess();
          this._dispatcher.dispatch(new presenter.JackpotPanelEvent(presenter.JackpotPanelEvent.COUNTER_START));
          /** @type {number} */
          var image = 8000 + 4000 * (this._level - 1);
          this._waitCtx = result.startDelayMs(image).ctx;
          this._jackpotPanel.enableButton(true);
          this._dispatcher.dispatch(new presenter.JackpotPanelEvent(presenter.JackpotPanelEvent.POPUP_SHOWING));
          break;
        case 2:
          this._coinsEmitter.stop();
          this._dispatcher.dispatch(new presenter.JackpotPanelEvent(presenter.JackpotPanelEvent.COUNTER_STOP));
          if (this._jackpotPanel.closeJackpot()) {
            this._waitCtx = result.startDelayMs(1000).ctx;
          } else {
            this._waitCtx = result.wait(new exports.Waiter).ctx;
          }
          break;
        case 3:
          /** @type {null} */
          this._waitCtx = null;
          this._jackpotPanel.enableButton(false);
          this._jackpotPanel.hide();
          this._jackpotPanel.playDarkerAnim("hide");
          this._fireworksEmitter.stop();
          result.complete();
          this._dispatcher.dispatch(new presenter.JackpotPanelEvent(presenter.JackpotPanelEvent.POPUP_HIDING));
      }
    }, set;
  }(exports.EventProcessor);
  var Gu = function() {
    /**
     * @return {undefined}
     */
    function init() {
      var PersonModel = self.ResourceManager.getInstance().getEntityManager();
      this._entity = PersonModel.getByName("jackpot");
      if (this._entity) {
        this._anim = this._entity.getAnimation("jackpotPanel");
        this._name = this._entity.getTextField("jp_name");
        this._totalWin = this._entity.getTextField("totalWinSummary");
        this._darkenerAnim = this._entity.getAnimation("darkener");
        this._darkenerAnim.play("hide");
        this._congratulations = this._entity.getTextField("text_congratulations");
        this._youWin = this._entity.getTextField("text_youwin");
        this._claimPrize = this._entity.getTextField("text_claimprize");
        this._clickToClose = this._entity.getTextField("text_clicktoclose");
        this._clickToCloseButton = this._entity.getButton("button_clicktoclose");
        this._clickToCloseStyle = new self.TextStyle;
        this._clickToCloseStyle.underLine = new self.UnderlineStyle(false, 2);
        this._disablerButton = this._entity.getButton("disabler");
        this._anim.play("hide");
      }
    }
    return Object.defineProperty(init.prototype, "entity", {
      get : function() {
        return this._entity;
      },
      enumerable : true,
      configurable : true
    }), init.prototype.initButton = function(text, listener) {
      var sp;
      if ("disabler" == text) {
        sp = this._disablerButton;
      } else {
        if ("button_clicktoclose" == text) {
          sp = this._clickToCloseButton;
        }
      }
      if (sp) {
        sp.addEventListener(self.ButtonEvent.CLICK, listener);
        /** @type {string} */
        sp.name = text;
      }
    }, init.prototype.enableButton = function(enable) {
      if (this._button) {
        this._button.enable(enable);
      }
    }, init.prototype.show = function() {
      this._anim.play("start");
    }, init.prototype.hide = function() {
      this._anim.play("back");
    }, init.prototype.playDarkerAnim = function(type) {
      this._darkenerAnim.play(type);
    }, init.prototype.setJackpotWin = function(data) {
      this._prizeType = data.prizeType;
      this._button = this._prizeType ? this._clickToCloseButton : this._disablerButton;
      this.modifyNonMonetaryJackpotFields();
      /** @type {string} */
      var s = "";
      switch(this._prizeType) {
        case tree.MysteryJackpotType.MONETARY:
          s = self.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(data.wonAmount, self.MoneyFormatterFlag.FORCE_DECIMAL);
          break;
        case tree.MysteryJackpotType.NON_MONETARY:
          s = data.prizeName;
          break;
        case tree.MysteryJackpotType.DEMO:
          s = self.ResourceManager.getInstance().getTextManager().getByName("IDS_MSG_DEMO").getText();
      }
      this._totalWin.setText(s);
      this._name.setText(data.name);
    }, Object.defineProperty(init.prototype, "mjCongratulations", {
      set : function(val) {
        if ("" !== val) {
          var path = val.split(";");
          if ("" !== path[0]) {
            this._congratulations.setText(path[0]);
          }
          if ("" !== path[1]) {
            this._youWin.setText(path[1]);
          }
        }
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(init.prototype, "customContactSupportMessage", {
      set : function(val) {
        var tag = self.ResourceManager.getInstance().getTextManager().getByName("IDS_MJ_CLAIMPRIZE").getText();
        this._customContactSupportMessage = "" === val ? tag : val;
      },
      enumerable : true,
      configurable : true
    }), init.prototype.modifyNonMonetaryJackpotFields = function() {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      if (this._prizeType === tree.MysteryJackpotType.MONETARY) {
        this._clickToClose.setText("");
        this._claimPrize.setText("");
        /** @type {boolean} */
        this._clickToCloseStyle.underLine.display = false;
        this._clickToClose.setStyle(this._clickToCloseStyle);
      } else {
        this._claimPrize.setText(this._customContactSupportMessage);
        this._clickToClose.setText(PersonModel.getByName("IDS_MJ_CLICKTOCLOSE").getText());
        /** @type {boolean} */
        this._clickToCloseStyle.underLine.display = true;
        this._clickToClose.setStyle(this._clickToCloseStyle);
      }
    }, init.prototype.closeJackpot = function() {
      return this._prizeType === tree.MysteryJackpotType.MONETARY || exports.SystemManager.getScheduler().reconnecting || this._closeOnInput;
    }, init;
  }();
  var _getTexture = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Route = function(background) {
    /**
     * @param {!HTMLElement} href
     * @param {(Object|string)} item
     * @param {!Element} context
     * @param {number} dataSet
     * @return {?}
     */
    function render(href, item, context, dataSet) {
      if (void 0 === dataSet) {
        dataSet = void 0;
      }
      var data = background.call(this, href) || this;
      /** @type {(Object|string)} */
      data._data = item;
      /** @type {!Element} */
      data._view = context;
      /** @type {number} */
      data._mainDisplay = dataSet;
      /** @type {boolean} */
      data._splashShown = false;
      data._resourceManager = self.ResourceManager.getInstance();
      href.addEventListener(presenter.VideoSlotUIEvent.PAYTABLE, function() {
        return data.onPaytable();
      });
      href.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_PAYTABLE, item.toggleVisible.bind(item));
      href.addEventListener(presenter.VideoSlotUIEvent.GAMBLE, function() {
        return data.onExit();
      });
      href.addEventListener(presenter.SpinStartEvent.SPIN_START, function(t) {
        return data.onSpin(t);
      });
      href.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function(t) {
        return data.onSpin(t);
      });
      href.addEventListener(presenter.FreespinEvent.INTRO_START, function(t) {
        return data.onSpin(t);
      });
      href.addEventListener(self.SplashEvent.SPLASH_SHOW, function() {
        return data.onSplashScreen(true);
      });
      href.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return data.onSplashScreen(false);
      });
      href.addEventListener(presenter.VideoSlotPaytableEvent.PAYTABLE, function(t) {
        return data.onPaytableCall(t);
      });
      context.initButton(request.EXIT, function() {
        return data.onExit();
      });
      context.initButton(request.NEXT, function() {
        return data.nextPage();
      });
      context.initButton(request.PREV, function() {
        return data.prevPage();
      });
      context.enableButton(request.EXIT, true);
      context.enableButton(request.NEXT, true);
      context.enableButton(request.PREV, true);
      /** @type {number} */
      var i = 1;
      for (; i <= item.numPages; i++) {
        !function(i) {
          context.initButton(request.INDICATOR_PREFIX + i, function() {
            return data.onIndicatorClick(i - 1);
          });
        }(i);
      }
      return data._data.addListener(function(path) {
        return data.onDataChange(path);
      }), data.applyChange(presenter.PaytableChange.VISIBLE), data.applyChange(presenter.PaytableChange.PAGE), data.applyChange(presenter.PaytableChange.BETSETTINGS), data;
    }
    return _getTexture(render, background), render.prototype.onExit = function() {
      if (this._data.visible) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.EXIT_PAYTABLE));
        this._data.exit();
      }
    }, render.prototype.nextPage = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.NEXT_PAYTABLE));
      this._data.nextPage();
    }, render.prototype.prevPage = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.PREV_PAYTABLE));
      this._data.prevPage();
    }, render.prototype.onIndicatorClick = function(name) {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.INDICATOR_PAYTABLE));
      this._data.onIndicatorClick(name);
    }, render.prototype.onSpin = function(event) {
      this._data.exit();
    }, render.prototype.onDataChange = function(data) {
      if (data.isChanged(presenter.PaytableChange.VISIBLE)) {
        this.applyChange(presenter.PaytableChange.VISIBLE);
      }
      if (data.isChanged(presenter.PaytableChange.PAGE)) {
        this.applyChange(presenter.PaytableChange.PAGE);
      }
      if (data.isChanged(presenter.PaytableChange.BETSETTINGS)) {
        this.applyChange(presenter.PaytableChange.BETSETTINGS);
      }
      if (data.isChanged(presenter.PaytableChange.VISIBLE) || data.isChanged(presenter.PaytableChange.PAGE)) {
        this._dispatcher.dispatch(new presenter.VideoSlotPaytableEvent(presenter.VideoSlotPaytableEvent.PAYTABLE_CHANGED, this._data.page, this._data.visible));
      }
    }, render.prototype.applyChange = function(newval) {
      if (0 != (presenter.PaytableChange.PAGE & newval)) {
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.PAYTABLE_CHANGE_PAGE));
        this._view.setPage(this._data.page);
        /** @type {number} */
        var i = 1;
        for (; i <= this._data.numPages; i++) {
          this._view.enableButton(request.INDICATOR_PREFIX + i, this._data.page !== i - 1);
        }
      }
      if (0 != (presenter.PaytableChange.VISIBLE & newval)) {
        var password = this._data.visible ? presenter.VideoSlotUIEvent.SHOW_PAYTABLE : presenter.VideoSlotUIEvent.HIDE_PAYTABLE;
        this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(password));
        this._view.show(this._data.visible);
        if (this._mainDisplay) {
          this._mainDisplay.setVisible(!this._data.visible);
        }
      }
      if (0 != (presenter.PaytableChange.BETSETTINGS & newval)) {
        var messages = this._data.getValues();
        /** @type {number} */
        i = 0;
        for (; i < messages.length; i++) {
          this._view.setText("val" + i, messages[i]);
        }
      }
    }, render.prototype.onSplashScreen = function(isIron) {
      /** @type {boolean} */
      this._splashShown = isIron;
    }, render.prototype.onPaytable = function() {
      this._data.onPaytable();
    }, render.prototype.onPaytableCall = function(item) {
      if (!this._splashShown) {
        if (item.pageNum) {
          this._data.onPaytable(item.pageNum);
        } else {
          this._data.toggleVisible();
        }
      }
    }, render;
  }(exports.EventProcessor);
  var overrideSetFunctions = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(ContentType) {
    /** @type {string} */
    ContentType[ContentType.NONE = 0] = "NONE";
    /** @type {string} */
    ContentType[ContentType.SPIN = 1] = "SPIN";
    /** @type {string} */
    ContentType[ContentType.WIN = 2] = "WIN";
    /** @type {string} */
    ContentType[ContentType.BIGWIN = 4] = "BIGWIN";
    /** @type {string} */
    ContentType[ContentType.FEATURE = 8] = "FEATURE";
    /** @type {string} */
    ContentType[ContentType.FREESPIN = 16] = "FREESPIN";
    /** @type {string} */
    ContentType[ContentType.BONUS = 32] = "BONUS";
  }(event || (event = {}));
  var TabConfig = function(_Namespace) {
    /**
     * @param {?} opts
     * @return {?}
     */
    function set(opts) {
      var self = _Namespace.call(this, opts) || this;
      return self._state = event.NONE, self._dispatcher.addEventListener(presenter.VideoSlotUIEvent.CONTINUE, function(elements) {
        return self.onUIContinue(elements);
      }), self._dispatcher.addEventListener(presenter.SpinStartEvent.SPIN_START, function() {
        return self.onSpin(true);
      }), self._dispatcher.addEventListener(presenter.ReelEvent.ALLSTOPPED, function() {
        return self.onSpin(false);
      }), self._dispatcher.addEventListener(presenter.WinEvent.START, function() {
        return self.onWin(true);
      }), self._dispatcher.addEventListener(presenter.WinEvent.DONE, function() {
        return self.onWin(false);
      }), self._dispatcher.addEventListener(presenter.BigWinViewEvent.START, function() {
        return self.onBigwin(true);
      }), self._dispatcher.addEventListener(presenter.BigWinViewEvent.STOPPED, function() {
        return self.onBigwin(false);
      }), self._dispatcher.addEventListener(presenter.FeatureEvent.FEATURESTART, function() {
        return self.onFeature(true);
      }), self._dispatcher.addEventListener(presenter.FeatureEvent.FEATUREEND, function() {
        return self.onFeature(false);
      }), self._dispatcher.addEventListener(presenter.FreespinEvent.INTRO_START, function() {
        return self.onFreespin(true);
      }), self._dispatcher.addEventListener(presenter.FreespinEvent.FREESPIN_END, function() {
        return self.onFreespin(false);
      }), self._dispatcher.addEventListener(presenter.BonusEvent.BONUS_STARTED, function() {
        return self.onBonus(true);
      }), self._dispatcher.addEventListener(presenter.BonusEvent.BONUS_ENDED, function() {
        return self.onBonus(false);
      }), self;
    }
    return overrideSetFunctions(set, _Namespace), set.prototype.onUIContinue = function(a) {
      this._dispatcher.dispatch(new presenter.QuickStopEvent(this._state));
    }, set.prototype.onSpin = function(event) {
      if (event) {
        this._state |= event.SPIN;
      } else {
        this._state &= ~event.SPIN;
      }
    }, set.prototype.onWin = function(event) {
      if (event) {
        this._state |= event.WIN;
      } else {
        this._state &= ~event.WIN;
      }
    }, set.prototype.onBigwin = function(isIron) {
      if (isIron) {
        this._state |= event.BIGWIN;
      } else {
        this._state &= ~event.BIGWIN;
      }
    }, set.prototype.onFeature = function(isIron) {
      if (isIron) {
        this._state |= event.FEATURE;
      } else {
        this._state &= ~event.FEATURE;
      }
    }, set.prototype.onFreespin = function(isIron) {
      if (isIron) {
        this._state |= event.FREESPIN;
      } else {
        this._state &= ~event.FREESPIN;
      }
    }, set.prototype.onBonus = function(indicator) {
      if (indicator) {
        this._state |= event.BONUS;
      } else {
        this._state &= ~event.BONUS;
      }
    }, set;
  }(exports.EventProcessor);
  var scopedEval = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Bucket = function($) {
    /**
     * @param {!HTMLElement} element
     * @param {!Object} renderer
     * @param {!Object} selector
     * @param {!Date} options
     * @param {!Object} config
     * @return {?}
     */
    function Editor(element, renderer, selector, options, config) {
      var me = $.call(this, element, options, config) || this;
      /** @type {!Date} */
      me._statusBarView = options;
      /** @type {!Object} */
      me._roundHandler = renderer;
      /** @type {!Object} */
      me._gameSettings = selector;
      /** @type {number} */
      me._prevMinutes = -1;
      /** @type {boolean} */
      me._freeGameMode = false;
      /** @type {boolean} */
      me._isAutoplay = false;
      /** @type {boolean} */
      me._needExitCheckOnAutoplayEnd = true;
      renderer.addListener(function() {
        return me.onRoundStateChange();
      });
      selector.addListener(function(t) {
        return me.onSettingsChange(t);
      });
      var isSelected = config.demoPlay && config.playForRealSigns;
      var filterContentFilterByGeometry = config.hideHistory || config.demoPlay;
      return me.initiateButton(settings.SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(settings.MOBILE_SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(settings.FASTPLAY, config.hideFastPlay, config.disableFastPlay, function() {
        return me.onFastPlay();
      }), me.initiateButton(settings.HELP, config.hideHelp, config.disableHelp, function() {
        return me.onHelp();
      }), me.initiateButton(settings.EXIT, config.hideExit, false, function() {
        return me.onExit();
      }), me.initiateButton(settings.MENU, false, false, function() {
        return me.onSettings();
      }), me.initiateButton(settings.MOBILE_MENU, false, false, function() {
        return me.onMenu();
      }), me.initiateButton(settings.HISTORY, filterContentFilterByGeometry, config.disableHistory, function() {
        return me.onHistory();
      }), me.initiateButton(settings.PLAYFORREAL, !isSelected, !isSelected, function() {
        return me.onPlayForReal();
      }), me.initiateButton(settings.TUTORIAL, true, true, function() {
        return me.onTutorial();
      }), options.showClock(config.displayClock), config.disableSound && (options.selectButton(settings.SOUND, false), options.selectButton(settings.MOBILE_SOUND, false)), config.hideExit ? me._needExitCheckOnAutoplayEnd = false : config.disableExitInRound ? element.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(link) {
        return me.onShowExitButton(link);
      }) : me._needExitCheckOnAutoplayEnd = false, element.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), element.addEventListener(presenter.VideoSlotUIEvent.MENUSHOW, function() {
        return me.onMenuShow(true);
      }), element.addEventListener(presenter.VideoSlotUIEvent.MENUHIDE, function() {
        return me.onMenuShow(false);
      }), element.addEventListener(presenter.FreeGameEvent.START, function(element) {
        return me.onFreeGameStart(element);
      }), element.addEventListener(presenter.FreeGameEvent.END, function(t) {
        return me.onFreeGameEnd(t);
      }), element.addEventListener(presenter.FreeGameEvent.LOGOUT, function(t) {
        return me.onFreeGameEnd(t);
      }), element.addEventListener(presenter.FreeGameConsumedEvent.CONSUMED, function(person) {
        return me.onFreeGameConsumed(person);
      }), element.addEventListener(presenter.FreeGameEvent.TOTALWIN, function(t) {
        return me.onFreeGameTotalWin(t);
      }), element.addEventListener(self.SplashEvent.SPLASH_SHOW, function() {
        return me.onSplash(true);
      }), element.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return me.onSplash(false);
      }), element.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return me.onAutoplayStarted();
      }), element.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      }), element.addEventListener(tree.MysteryJackpotCustomDataEvent.CUSTOMDATA, function(t) {
        return me.onMysteryJackpotCustomData(t);
      }), element.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function(ast) {
        return me.onJackpotWin(ast);
      }), element.addEventListener(presenter.JackpotEndEvent.JACKPOTEND, function(t) {
        return me.onJackpotEnd(t);
      }), me._config = config, options.showPNGLogo(config.showPoweredBy), me.onSplash(void 0), me;
    }
    return scopedEval(Editor, $), Editor.prototype.onJackpotWin = function(val) {
      var Toolbar = this;
      this._statusBarView.setWin(val.amount);
      this._activeButtons.map(function(is_file_chosen) {
        return Toolbar._statusBarView.enableButton(is_file_chosen, false);
      });
    }, Editor.prototype.onJackpotEnd = function(result) {
      var Toolbar = this;
      this._activeButtons.map(function(is_file_chosen) {
        return Toolbar._statusBarView.enableButton(is_file_chosen, true);
      });
    }, Editor.prototype.onSettingsChange = function(a) {
      this._statusBarView.selectButton(settings.SOUND, !this._gameSettings.sound);
      this._statusBarView.selectButton(settings.MOBILE_SOUND, !this._gameSettings.sound);
      this._statusBarView.setLeftHandMode(this._gameSettings.leftHandMode);
      this._statusBarView.selectButton(settings.FASTPLAY, !this._gameSettings.fastPlay);
      if (a.isChanged(self.SettingsChange.SOUND)) {
        if (this._gameSettings.sound) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.SOUND_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.SOUND_OFF));
        }
      }
      if (a.isChanged(self.SettingsChange.FASTPLAY)) {
        if (this._gameSettings.fastPlay) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.FASTPLAY_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.FASTPLAY_OFF));
        }
      }
      if (a.isChanged(self.SettingsChange.LEFTHANDMODE)) {
        if (this._gameSettings.leftHandMode) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.LEFTHANDMODE_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.LEFTHANDMODE_OFF));
        }
      }
    }, Editor.prototype.onRoundStateChange = function() {
      if (!this._freeGameMode) {
        this._statusBarView.setBalance(this._roundHandler.balance);
      }
      this._statusBarView.setBet(this._roundHandler.bet, this._freeGameMode);
      this._statusBarView.setWin(this._roundHandler.win);
    }, Editor.prototype.onHelp = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.HELP));
    }, Editor.prototype.onExit = function() {
      exports.SystemManager.getScheduler().pause(false);
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.EXIT));
    }, Editor.prototype.onSound = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.TOGGLE_SOUND));
      this._gameSettings.toggleSound();
    }, Editor.prototype.onFastPlay = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.TOGGLE_FAST_PLAY));
      this._gameSettings.toggleFastPlay();
    }, Editor.prototype.onSettings = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.MENU));
    }, Editor.prototype.onMenu = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.MOBILE_MENU));
    }, Editor.prototype.onHistory = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.HISTORY, this._userId));
    }, Editor.prototype.onPlayForReal = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.PLAYFORREAL));
    }, Editor.prototype.onTutorial = function() {
    }, Editor.prototype.onShowExitButton = function(tag) {
      this._statusBarView.enableButton(settings.EXIT, tag.groupId == presenter.VideoSlotShowButtonsEvent.BET && !this._isAutoplay);
    }, Editor.prototype.onShowButtons = function(match) {
      this._statusBarView.enableButton(settings.MENU, match.groupId === presenter.VideoSlotShowButtonsEvent.BET && !this._isAutoplay);
    }, Editor.prototype.onMenuShow = function(e) {
      this._statusBarView.selectButton(settings.MENU, e && !this._isAutoplay);
      this._statusBarView.selectButton(settings.MOBILE_MENU, e);
    }, Editor.prototype.onFreeGameStart = function(inEl) {
      /** @type {boolean} */
      this._freeGameMode = true;
      this._statusBarView.setFreeGames(inEl.freeGames);
    }, Editor.prototype.onFreeGameEnd = function(result) {
      /** @type {boolean} */
      this._freeGameMode = false;
      this._statusBarView.setNormalMode();
      this.onRoundStateChange();
    }, Editor.prototype.onFreeGameConsumed = function(type) {
      this._statusBarView.setFreeGames(type.freeGames);
    }, Editor.prototype.onFreeGameTotalWin = function(result) {
      this._statusBarView.setTotalWin(result.totalWin);
    }, Editor.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
    }, Editor.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
      if (this._needExitCheckOnAutoplayEnd) {
        this._statusBarView.enableButton(settings.EXIT, !this._roundHandler.running);
      }
      this._statusBarView.enableButton(settings.MENU, !this._roundHandler.running);
    }, Editor.prototype.onSplash = function(b) {
      this._statusBarView.onSplash(b);
      this._statusBarView.showButton(settings.MOBILE_SOUND, b && !this._config.hideSound);
      this._statusBarView.showButton(settings.MOBILE_MENU, !b);
    }, Editor.prototype.onMysteryJackpotCustomData = function(result) {
      this._statusBarView.handleMysteryJackpot();
    }, Editor.prototype.onBonusBalanceMessageResponse = function(a) {
      this._statusBarView.setBalanceLabelType(a.balanceType, this._freeGameMode);
    }, Editor;
  }(Zepto);
  var $timeout = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Component = function(t) {
    /**
     * @param {!HTMLElement} element
     * @param {!Object} v
     * @param {?} data
     * @return {?}
     */
    function show(element, v, data) {
      var me = t.call(this, element, v, data, 0) || this;
      return v.addListener(function(store) {
        return void 0 === store && (store = null), me.onDataChange(store);
      }, null), element.addEventListener(presenter.VideoSlotUIEvent.SETTINGS, function() {
        return me.show();
      }), element.addEventListener(presenter.FreeGameEvent.START, function() {
        return me.onFreeGame(true);
      }), element.addEventListener(presenter.FreeGameEvent.END, function() {
        return me.onFreeGame(false);
      }), element.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), element.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return me.onAutoplayStarted();
      }), element.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      }), element.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return me.onRoundStart();
      }), element.addEventListener(self.RoundEvent.ROUNDEND, function() {
        return me.onRoundEnd();
      }), data.initButton(context.COINVALUE_INC, v.incDenom.bind(v)), data.initButton(context.COINVALUE_DEC, v.decDenom.bind(v)), data.initButton(context.COINS_INC, v.incCoins.bind(v)), data.initButton(context.COINS_DEC, v.decCoins.bind(v)), data.initButton(context.LINES_INC, v.incLines.bind(v)), data.initButton(context.LINES_DEC, v.decLines.bind(v)), me._betSettings = me._model, me.initButtonValues(), me.updateButtons(), me.initButtonData(), me;
    }
    return $timeout(show, t), show.prototype.show = function() {
      this.updateButtons();
      this._tempStore.save(this._model);
    }, show.prototype.initButtonValues = function() {
      this.updateButtonValue(context.COINVALUE, this._betSettings.denomination, true);
      this.updateButtonValue(context.COINS, this._betSettings.coins, false);
      this.updateButtonValue(context.LINES, this._betSettings.lines, false);
    }, show.prototype.onShowButtons = function(data) {
      this._state = data.groupId;
    }, show.prototype.onFreeGame = function(isIron) {
      /** @type {boolean} */
      this._freeGameMode = isIron;
      this.updateButtons();
    }, show.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
    }, show.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
    }, show.prototype.initButtonData = function() {
      var assert = self.ResourceManager.getInstance().getMoneyFormatter();
      var stats = this._model;
      /** @type {boolean} */
      var dayMode = stats.denominationMultiplier >= 100 && stats.denominationMultiplier % 100 == 0;
      var i = dayMode ? self.MoneyFormatterFlag.NO_DECIMALS : self.MoneyFormatterFlag.FORCE_DECIMAL;
      this._view.setButtonText(context.COINVALUE, assert.MoneyToString(stats.denomination, i));
      this._view.setButtonText(context.COINS, stats.coins.toString());
      this._view.setButtonText(context.LINES, stats.lines.toString());
    }, show.prototype.updateButtons = function() {
      /** @type {boolean} */
      var attached = this._state === presenter.VideoSlotShowButtonsEvent.BET;
      /** @type {boolean} */
      var e = attached && !this._isAutoplay && !this._freeGameMode;
      this._view.showButton(context.LINES_INC, !this._freeGameMode && !this._betSettings.isLocked(presenter.LockType.LINE));
      this._view.showButton(context.LINES_DEC, !this._freeGameMode && !this._betSettings.isLocked(presenter.LockType.LINE));
      this._view.enableButton(context.LINES_INC, e && this._betSettings.lines < this._betSettings.maxLines);
      this._view.enableButton(context.LINES_DEC, e && this._betSettings.lines > 1);
      this._view.showButton(context.COINS_INC, !this._freeGameMode && !this._betSettings.isLocked(presenter.LockType.COIN));
      this._view.showButton(context.COINS_DEC, !this._freeGameMode && !this._betSettings.isLocked(presenter.LockType.COIN));
      this._view.enableButton(context.COINS_INC, e && this._betSettings.coins < this._betSettings.maxCoins);
      this._view.enableButton(context.COINS_DEC, e && this._betSettings.coins > 1);
      this._view.showButton(context.COINVALUE_INC, !this._freeGameMode && this._betSettings.hasMultipleDenominations);
      this._view.showButton(context.COINVALUE_DEC, !this._freeGameMode && this._betSettings.hasMultipleDenominations);
      this._view.enableButton(context.COINVALUE_INC, e && this._betSettings.denom < this._betSettings.denominations.length - 1);
      this._view.enableButton(context.COINVALUE_DEC, e && this._betSettings.denom > 0);
    }, show.prototype.formatValue = function(value, type) {
      if (type) {
        var arrHelpers = self.ResourceManager.getInstance().getMoneyFormatter();
        /** @type {boolean} */
        var departure = this._betSettings.denominationMultiplier >= 100 && this._betSettings.denominationMultiplier % 100 == 0;
        var range = departure ? self.MoneyFormatterFlag.NO_DECIMALS : self.MoneyFormatterFlag.FORCE_DECIMAL;
        return arrHelpers.MoneyToString(value, range);
      }
      return value.toString();
    }, show.prototype.updateButtonValue = function(listener, type, name) {
      var value = this.formatValue(type, name);
      this._view.setButtonText(listener, value);
    }, show.prototype.onDataChange = function(data) {
      if (void 0 === data) {
        /** @type {null} */
        data = null;
      }
      if (!(data && !data.isChanged(presenter.VideoSlotBetSettings.DENOM))) {
        this.updateButtonValue(context.COINVALUE, this._betSettings.denomination, true);
      }
      if (!(data && !data.isChanged(presenter.VideoSlotBetSettings.COINS))) {
        this.updateButtonValue(context.COINS, this._betSettings.coins, false);
      }
      if (!(data && !data.isChanged(presenter.VideoSlotBetSettings.LINES))) {
        this.updateButtonValue(context.LINES, this._betSettings.lines, false);
      }
      this.updateButtons();
    }, show.prototype.onRoundStart = function() {
      if (!this._freeGameMode) {
        this._betSettings.enable(false, false);
      }
    }, show.prototype.onRoundEnd = function() {
      if (!this._freeGameMode) {
        this._betSettings.enable(true, false);
      }
    }, show;
  }(target);
  var Label = function() {
    /**
     * @param {!HTMLElement} parent
     * @param {!Object} view
     * @return {undefined}
     */
    function Tooltip(parent, view) {
      if (void 0 === view) {
        /** @type {null} */
        view = null;
      }
      var model = this;
      /** @type {!Object} */
      this._view = view;
      parent.addEventListener(self.SplashEvent.SPLASH_SHOW, function(shown) {
        return void 0 === shown && (shown = null), model.show(false, shown);
      });
      parent.addEventListener(self.SplashEvent.SPLASH_HIDE, function(shown) {
        return void 0 === shown && (shown = null), model.show(true, shown);
      });
    }
    return Tooltip.prototype.show = function(result, option) {
      if (void 0 === option) {
        /** @type {null} */
        option = null;
      }
      if (this._view) {
        this._view.show(result);
      }
    }, Tooltip;
  }();
  var transformDirections = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Task = function(self) {
    /**
     * @param {!HTMLElement} from
     * @param {?} file
     * @param {?} url
     * @param {!Object} response
     * @param {?} cb
     * @return {?}
     */
    function transform(from, file, url, response, cb) {
      var dirHas = self.call(this, from, file, url, cb) || this;
      return dirHas._bigWinMode = false, dirHas._inRound = false, response.addListener(function(fs) {
        return dirHas.onBetSettings(fs);
      }), from.addEventListener(presenter.FreespinEvent.FREESPIN_START, function() {
        return dirHas.onFreespinStart();
      }), from.addEventListener(presenter.BonusEvent.BONUS_STARTED, function() {
        return dirHas.onBonusStart();
      }), from.addEventListener(presenter.ReelEvent.ALLSTOPPED, function(cache) {
        return dirHas.onReelsStopped(cache);
      }), dirHas;
    }
    return transformDirections(transform, self), transform.prototype.onBetSettings = function(m) {
      if (!this._inRound && (m.isChanged(presenter.VideoSlotBetSettings.COINS) || m.isChanged(presenter.VideoSlotBetSettings.LINES) || m.isChanged(presenter.VideoSlotBetSettings.DENOM))) {
        this._view.setMode(tree.InfoViewMode.MESSAGE);
        this._view.setMessage("", null);
      }
    }, transform.prototype.onStart = function() {
      self.prototype.onStart.call(this);
      /** @type {boolean} */
      this._inRound = true;
      this._view.setMode(tree.InfoViewMode.MESSAGE);
      this._view.setMessage("IDS_MSG_GOODLUCK", null);
    }, transform.prototype.onRoundEnd = function(result) {
      /** @type {boolean} */
      this._inRound = false;
    }, transform.prototype.onReelsStopped = function(handler) {
      this._view.setMode(tree.InfoViewMode.MESSAGE);
      this._view.setMessage("", null);
    }, transform.prototype.onFreespinStart = function() {
      this._view.setWin(this._counter.value, this._counter.isCapped);
    }, transform.prototype.onBonusStart = function() {
    }, transform.prototype.onCounter = function(e) {
      if (self.prototype.onCounter.call(this, e), e.type === exports.ChangeEvent.CHANGE) {
        var current = this._counter;
        this._view.setWinLevel(this._bigWinMode ? 1 : current.level);
      }
    }, transform.prototype.onInfo = function(data) {
      /** @type {boolean} */
      var n = data.infoId === presenter.BigWinInfoEvent.BIGWIN;
      if (n !== this._bigWinMode) {
        /** @type {boolean} */
        this._bigWinMode = n;
        var current = this._counter;
        this._view.setWinLevel(this._bigWinMode ? 1 : current.level);
      }
      switch(data.infoId) {
        case tree.WinInfoEvent.IDLE:
          if (this._mode = this._config.bigSummary ? tree.InfoViewMode.BIG_SUMMARY : tree.InfoViewMode.SUMMARY, this._view.setMode(this._mode), data.text) {
            this._view.setMessage(data.text, data.args);
          } else {
            /** @type {!Object} */
            var self = data;
            var $scope = self.winData;
            if ($scope) {
              var _ = self.ResourceManager.getInstance().getCreditFormatter();
              if ($scope.line < 0) {
                if ($scope.coins > 0) {
                  this._view.setMessage(_.getCreditString("IDS_MENU_WONCOINS_SCATTER", "IDS_MENU_WONMONEY_SCATTER"), "%d=" + _.formatCoinValue($scope.coins) + "&%s=" + $scope.cnt);
                }
              } else {
                this._view.setMessage(_.getCreditString("IDS_MENU_WONCOINS_LINE", "IDS_MENU_WONMONEY_LINE"), "%d=" + _.formatCoinValue($scope.coins) + "&%l=" + ($scope.line + 1));
              }
            } else {
              this._view.setMessage("IDS_MENU_CONGRATULATIONS", null);
            }
          }
          break;
        default:
          self.prototype.onInfo.call(this, data);
      }
    }, transform;
  }(Uint8Array);
  var BrowserLine = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var url = function(Editor) {
    /**
     * @return {?}
     */
    function $() {
      var e = null !== Editor && Editor.apply(this, arguments) || this;
      return e.capAnimationHandler = function(stream) {
        switch(stream.state) {
          case 0:
            e.showWinCap();
            stream.startDelayMs(1000);
            break;
          default:
            e.hideWinCap();
            stream.startDelayMs(1000);
            stream.next(0);
        }
      }, e;
    }
    return BrowserLine($, Editor), $.prototype.initialize = function(p) {
      Editor.prototype.initialize.call(this, p);
      /** @type {number} */
      this._coins = 0;
      this._valueTextField = p.getTextField("value");
      this._animation = p.getAnimation("counter");
      this._display = p.getDisplay("value");
      this._winDisplay = p.getDisplay("IDS_WIN_CAPTION");
      this._winTextField = p.getTextField("IDS_WIN_CAPTION");
      this._coinDisplay = p.getDisplay("IDS_LBL_COINS");
      this._coinTextField = p.getTextField("IDS_LBL_COINS");
      this._winCapTextField = p.getTextField("IDS_WINCAP_REACHED");
      this._animation.play("none");
      this._winTextField.setText("IDS_MENU_WIN");
      this._coinTextField.setText("IDS_LBL_COINS");
    }, $.prototype.setMode = function(callback, options) {
      if (void 0 === options && (options = false), this._mode !== tree.InfoViewMode.WIN || options) {
        var opts = self.ResourceManager.getInstance().getCreditFormatter();
        /** @type {string} */
        var type = "none";
        switch(callback) {
          case tree.InfoViewMode.WIN:
            /** @type {string} */
            type = opts.creditDisplay ? "small_credits" : "small";
            break;
          case tree.InfoViewMode.SUMMARY:
            /** @type {string} */
            type = opts.creditDisplay ? "sum_credits" : "sum";
            break;
          case tree.InfoViewMode.BIG_SUMMARY:
            /** @type {string} */
            type = opts.creditDisplay ? "normal_credits" : "normal";
        }
        if (this._message || this._args || this._mode !== tree.InfoViewMode.WIN || callback === tree.InfoViewMode.SUMMARY || tree.InfoViewMode.BIG_SUMMARY) {
          this._animation.play(type);
        }
      }
      Editor.prototype.setMode.call(this, callback, options);
    }, $.prototype.setWin = function(val, valueCheck) {
      if (this._coins = val, this._isCapped = valueCheck, this.setCapAnimationState(valueCheck), !this._isCapped) {
        var numberPolyfill = self.ResourceManager.getInstance().getCreditFormatter();
        var i = numberPolyfill.formatCoinValue(val);
        this._valueTextField.setText(i);
      }
    }, $.prototype.setFinalWin = function(val) {
      if (this._coins = val, !this._isCapped) {
        var numberPolyfill = self.ResourceManager.getInstance().getCreditFormatter();
        var n = numberPolyfill.formatCoinValue(val, self.MoneyFormatterFlag.FORCE_DECIMAL);
        if (this._finalWinRe.test(n)) {
          n = numberPolyfill.formatCoinValue(val);
        }
        this._valueTextField.setText(n);
      }
      this.setCapAnimationState(this._isCapped);
    }, $.prototype.setWinLevel = function(addedRenderer) {
      this.show(false);
    }, $.prototype.enable = function(value) {
      /** @type {boolean} */
      this._enable = value;
    }, $.prototype.show = function(v) {
      /** @type {boolean} */
      this._visible = v;
      this._display.setVisible(v);
      this._winDisplay.setVisible(v);
      this._coinDisplay.setVisible(v);
    }, $.prototype.setCapAnimationState = function(f) {
      if (f) {
        if (void 0 == this._winCapAnimTask) {
          this.startCapAnim();
        }
      } else {
        this.stopCapAnim();
      }
    }, $.prototype.startCapAnim = function() {
      this.stopCapAnim();
      this._winCapAnimTask = exports.Task.createHandler(this.capAnimationHandler);
      this._winCapAnimTask.start();
    }, $.prototype.stopCapAnim = function() {
      if (this._winCapAnimTask) {
        this.hideWinCap();
        this._winCapAnimTask.kill();
        this._winCapAnimTask = void 0;
      }
    }, $.prototype.showWinCap = function() {
      this._winText = this._winTextField.getText();
      this._coinText = this._coinTextField.getText();
      this._valueTextField.setText("");
      this._coinTextField.setText("");
      this._winTextField.setText("");
      this._winCapTextField.setText("IDS_WINCAP_REACHED");
    }, $.prototype.hideWinCap = function() {
      this._winTextField.setText(this._winText);
      this._coinTextField.setText(this._coinText);
      var t = self.ResourceManager.getInstance().getCreditFormatter();
      var topicC = t.formatCoinValue(this._coins);
      this._valueTextField.setText(topicC);
      this._winCapTextField.setText("");
      this.updatePositions();
    }, $.prototype.updatePositions = function() {
    }, $;
  }(image_re);
  var jQuery = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var DomDelegatedEventHandle = function(_this) {
    /**
     * @param {!HTMLElement} win
     * @param {!Object} settings
     * @param {?} data
     * @param {!Object} options
     * @param {?} authenticated
     * @return {?}
     */
    function handler(win, settings, data, options, authenticated) {
      var self = _this.call(this, win, settings, data, 0) || this;
      settings.addListener(function() {
        return self.onSettingsChange();
      });
      /** @type {!Object} */
      self._videoSlotSettings = settings;
      win.addEventListener(presenter.VideoSlotUIEvent.SETTINGS, function() {
        return self.show();
      });
      self._videoSlotBetSettings = authenticated;
      data.initButton(region.SOUND, function() {
        return self.onSounds();
      });
      data.initButton(region.SPACEBARSPIN, function() {
        return self.onSpaceBarSpin();
      });
      data.initButton(region.AUTOADJUSTBET, function() {
        return self.onAutoAdjustBet();
      });
      data.initButton(region.LEFTHANDMODE, function() {
        return self.onLeftHandMode();
      });
      data.initButton(region.FASTPLAY, function() {
        return self.onFastPlay();
      });
      var on_urlredirect = self._dispatcher.dispatch.bind(self._dispatcher, new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_SETTINGS));
      data.initButton(context.COINVALUE_INC, on_urlredirect);
      data.initButton(context.COINVALUE_DEC, on_urlredirect);
      data.initButton(context.COINS_INC, on_urlredirect);
      data.initButton(context.COINS_DEC, on_urlredirect);
      data.initButton(context.LINES_INC, on_urlredirect);
      data.initButton(context.LINES_DEC, on_urlredirect);
      self._cookieStore = new exports.CookieSerializer("settings_" + options.gameId);
      self._cookieStore.load(settings);
      self._betTempStore = new exports.DataSerializer([]);
      if (void 0 == settings.adjustBet) {
        settings.adjustBet = options.defaultAutoAdjustBet;
      }
      if (options.disableSpaceBarToSpin) {
        settings.setkeyboardShortcuts(false);
        data.enableButton(region.SPACEBARSPIN, false);
      } else {
        if (void 0 == settings.keyboardShortcuts) {
          settings.setkeyboardShortcuts(options.defaultSpacebarToSpin);
        }
      }
      /** @type {boolean} */
      var highlightedColumn = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.MOBILE;
      return options.disableFastPlay ? (settings.setFastPlay(false), data.enableButton(region.FASTPLAY, false)) : (void 0 == settings.fastPlay || options.hideFastPlay && highlightedColumn) && settings.setFastPlay(options.defaultFastPlay), options.disableSound ? (self.setInitialSound(false, settings, options), data.enableButton(region.SOUND, false)) : (void 0 == settings.sound || options.hideSound && highlightedColumn) && self.setInitialSound(options.defaultSound, settings, options), self;
    }
    return jQuery(handler, _this), handler.prototype.setInitialSound = function(key, msg, dstId) {
      msg.setSound(key);
    }, handler.prototype.onSounds = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_SETTINGS));
      this._videoSlotSettings.toggleSound();
    }, handler.prototype.onSpaceBarSpin = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_SETTINGS));
      this._videoSlotSettings.toggleKeyboardShortcuts();
    }, handler.prototype.onAutoAdjustBet = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_SETTINGS));
      this._videoSlotSettings.toggleAdjustBet();
    }, handler.prototype.onLeftHandMode = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_SETTINGS));
      this._videoSlotSettings.toggleLeftHandMode();
    }, handler.prototype.onFastPlay = function() {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.UPDATE_SETTINGS));
      this._videoSlotSettings.toggleFastPlay();
    }, handler.prototype.save = function() {
      this._cookieStore.save(this._model);
    }, handler.prototype.onSettingsChange = function() {
      var e = this._model;
      this._view.selectButton(region.SOUND, e.sound);
      this._view.selectButton(region.SPACEBARSPIN, e.keyboardShortcuts);
      this._view.selectButton(region.LEFTHANDMODE, e.leftHandMode);
      this._view.selectButton(region.FASTPLAY, e.fastPlay);
      this._view.selectButton(region.AUTOADJUSTBET, e.adjustBet);
      this.save();
    }, handler.prototype.show = function() {
      _this.prototype.show.call(this);
      this._betTempStore.save(this._videoSlotBetSettings);
    }, handler.prototype.onOk = function() {
      _this.prototype.onOk.call(this);
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.MENUHIDE));
    }, handler.prototype.onCancel = function() {
      var that = this._model;
      var key = that.sound;
      var outgoingController = that.fastPlay;
      var $groupElement = that.keyboardShortcuts;
      _this.prototype.onCancel.call(this);
      that.setSound(key);
      that.setFastPlay(outgoingController);
      that.setkeyboardShortcuts($groupElement);
      this._betTempStore.load(this._videoSlotBetSettings);
      self.ResourceManager.getInstance().getCreditFormatter().denomination = this._videoSlotBetSettings.denomination;
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.MENUHIDE));
    }, handler;
  }(target);
  var notifyEventByMessage = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Graph = function(params) {
    /**
     * @param {!HTMLElement} root
     * @param {string} p
     * @param {!Object} w
     * @param {!Element} name
     * @return {?}
     */
    function set(root, p, w, name) {
      var context = params.call(this, root) || this;
      return context._betSettings = w, context._winCounter = p, context._view = name, context._isInFreespin = false, root.addEventListener(self.InfoEvent.INFO, function(t) {
        return context.onInfo(t);
      }), p.addListener(function(t) {
        return context.onCounter(t);
      }), w.addListener(function(err) {
        return context.onBetSettings(err);
      }), root.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return context.onRoundStart();
      }), root.addEventListener(tree.WinCounterControlEvent.SHOW, function(t) {
        return context.showWinCounter(t);
      }), root.addEventListener(tree.WinCounterControlEvent.HIDE, function(t) {
        return context.hideWinCounter(t);
      }), root.addEventListener(tree.WinCounterControlEvent.RESET, function(t) {
        return context.resetWinCounter(t);
      }), root.addEventListener(tree.WinCounterControlDataEvent.SET_SCALES, function(rs) {
        return context.setWinCounterScales(rs);
      }), root.addEventListener(tree.WinCounterControlEvent.RESET_SCALES, function(t) {
        return context.resetWinCounterScales(t);
      }), root.addEventListener(presenter.FreespinEvent.FREESPIN_START, function() {
        return context.onFreespinStart();
      }), root.addEventListener(presenter.FreespinEvent.FREESPIN_END, function(t) {
        return context.onFreespinEnd(t);
      }), root.addEventListener(presenter.VideoSlotUIEvent.CONTINUE, function() {
        return context.onContinue();
      }), context;
    }
    return notifyEventByMessage(set, params), set.prototype.onFreespinEnd = function(result) {
      /** @type {boolean} */
      this._isInFreespin = false;
    }, set.prototype.onRoundStart = function() {
      this._view.reset();
      this._view.setWinLevel(0);
    }, set.prototype.onFreespinStart = function() {
      /** @type {boolean} */
      this._isInFreespin = true;
      this._view.setWin(this._winCounter.value, this._winCounter.isCapped);
    }, set.prototype.resetWinCounter = function(result) {
      this._view.reset();
    }, set.prototype.hideWinCounter = function(result) {
      this._view.hide();
    }, set.prototype.showWinCounter = function(result) {
      this._view.show();
    }, set.prototype.onCounter = function(e) {
      if (e.type === exports.ChangeEvent.CHANGE) {
        this._view.setWinLevel(this._winCounter.level);
        this._view.setWin(this._winCounter.value, this._winCounter.isCapped);
      } else {
        switch(e.type) {
          case tree.WinCounterEvent.STOP:
            this._view.setFinalWin(this._winCounter.value);
            this._view.setMode(tree.InfoViewMode.MESSAGE);
        }
      }
    }, set.prototype.onInfo = function(data) {
      switch(data.infoId) {
        case tree.WinInfoEvent.WIN:
          this._view.setMode(tree.InfoViewMode.WIN);
          break;
        case tree.WinInfoEvent.WIN_NO_COUNT:
          this._view.setMode(tree.InfoViewMode.WIN_NO_COUNT);
          this._view.setMode(tree.InfoViewMode.MESSAGE);
          break;
        default:
          this._view.setMessage(data.text, data.args);
      }
    }, set.prototype.onBetSettings = function(m) {
      if (!(this._isInFreespin || m.isChanged(presenter.VideoSlotBetSettings.ENABLED))) {
        this._view.reset();
        this._winCounter.bet = this._betSettings.betCoins;
      }
    }, set.prototype.onContinue = function() {
      this._winCounter.stop();
    }, set.prototype.setWinCounterScales = function(row) {
      this._view.setTemporaryScales(row.scales);
    }, set.prototype.resetWinCounterScales = function(result) {
      this._view.resetScalesToDefault();
    }, set;
  }(exports.EventProcessor);
  var ownPropertiesOf = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var wayXMLs = function(path) {
    /**
     * @param {?} response
     * @param {undefined} callback
     * @param {boolean} name
     * @param {!Object} options
     * @param {boolean} i
     * @param {string} text
     * @param {?} item
     * @param {undefined} e
     * @param {boolean} x
     * @param {string} y
     * @param {string} data
     * @param {undefined} value
     * @return {?}
     */
    function set(response, callback, name, options, i, text, item, e, x, y, data, value) {
      var _this = path.call(this, response, options, item) || this;
      _this._betSettings = callback;
      _this._freeGameMessageManager = new Bitmap(response, item);
      _this._freeGameMessageHandler = new AddressPickerResult(response, _this._freeGameMessageManager);
      _this._fastPlayQuestionMessageManager = new FFT(response, item);
      _this._fastPlayQuestionMessageHandler = new ArticleManager(response, _this._fastPlayQuestionMessageManager);
      var updateValueCallback = item.createExpandingWinCounterView();
      _this.createWinInfoController(response, e.winCounter, callback, updateValueCallback);
      var position = _this.createInfoView(item);
      if (position) {
        _this.createInfoController(response, e, options, _this._betSettings, position);
      }
      var json = _this.createJackpotNotificationView(item, options, response);
      _this.createJackpotNotificationController(response, json, options);
      _this.createQuickStopController(response);
      var clock = item.createGamePanelView();
      _this.createVSGamePanelController(response, clock);
      var index = item.createStatusBarView(callback);
      _this.createStatusBarController(response, i, name, index, options);
      var mainCanvas = item.createGameButtonView();
      var uncert = item.createButtonView();
      _this.createButtonController(response, i, uncert, mainCanvas, options, name);
      var id = item.createSettingsView();
      _this.createVSSettingsController(response, name, id, options);
      _this.createVSBetSettingsController(response, callback, id);
      var j = item.createAutoplaySettingsView();
      _this.createAutoplaySettingsController(response, text, j, options, i, callback);
      var el = _this.createBetPanelView(item);
      _this.createBetPanelController(response, i, callback, el, options);
      var filepath = _this.createPaytableView(response, "IDS_BTN_PAYTABLE", item, x.numPages);
      _this.createPaytableController(response, x, filepath);
      var result = _this.createOSPTView(item, value, y, data);
      _this.createOSPTController(response, y, x, result, callback);
      var res = item.createSplitView("IDS_MENU_BET_VSLOT", el, j);
      /** @type {!Array} */
      var type = [res, id, filepath];
      var picSize = item.createJackpotPanelViewBase();
      _this.createVSJackpotPanelController(response, picSize, options);
      if (!(void 0 === options.helpUrl || options.disableHelp || options.hideHelp)) {
        type.push(item.createGameRulesView(options.helpUrl, _this._dispatcher));
      }
      if (!(void 0 === options.historyUrl || options.disableHistory || options.hideHistory)) {
        type.push(item.createGameHistoryView(options.historyUrl + "&custid=" + options.customerId, options.language, _this._dispatcher));
      }
      if (!(void 0 === options.cashierUrl || options.demoPlay)) {
        type.push(item.createCashierView(options.cashierUrl, _this._dispatcher));
      }
      if (options.playForRealUrl && options.demoPlay && options.playForRealSigns) {
        type.push(item.createPlayForRealMenuViewMobile(_this._dispatcher));
      }
      var req = item.createMenuView(options.gameName, response, type, id);
      new Response(response, null, req);
      var $tooltip = item.createGameNameView();
      return _this.createGameNameController(response, options, $tooltip), _this;
    }
    return ownPropertiesOf(set, path), set.prototype.createInfoView = function(searchElement) {
      return searchElement.createInfoView();
    }, set.prototype.createWinInfoController = function(schema, data, options, callback) {
      new Graph(schema, data, options, callback);
    }, set.prototype.createInfoController = function(type, value, options, func, seconds) {
      new Task(type, value.winCounter, options, func, seconds);
    }, set.prototype.createJackpotNotificationView = function(obj, array, e) {
      return array.hasJackpots || array.hasGuaranteedJackpot ? obj.createJackpotNotificationView(e, tree.JackpotType.Mystery) : obj.createJackpotNotificationView(e, tree.JackpotType.InGame);
    }, set.prototype.createJackpotNotificationController = function(name, value, index) {
      new tree.JackpotNotificationController(name, value, index);
    }, set.prototype.createQuickStopController = function(key) {
      new TabConfig(key);
    }, set.prototype.createButtonController = function(f, s, n, i, options, callback) {
      return new Ease(f, s, n, i, options, callback);
    }, set.prototype.createBetPanelView = function(demoItem) {
      return demoItem.createBetPanelView();
    }, set.prototype.createAutoplaySettingsController = function(value, blocks, x, y, top, rotation) {
      return new CropDimension(value, blocks, x, y, top, rotation);
    }, set.prototype.createBetPanelController = function(type, controlName, value, opacity, mergedBuffer) {
      return new BufferMergeEvent(type, controlName, value, opacity, mergedBuffer);
    }, set.prototype.createPaytableController = function(name, options, server) {
      return new Route(name, options, server);
    }, set.prototype.createPaytableView = function(item, param, obj, graphOnly) {
      return obj.createPaytableView(param, graphOnly, item);
    }, set.prototype.createOSPTController = function(categories, options, callback, errorCallback, context) {
      return new particularLoader(categories, options, callback, errorCallback, context);
    }, set.prototype.createOSPTView = function(type, scale, p, parent) {
      return type.createOSPTView(scale, p, parent);
    }, set.prototype.createStatusBarController = function(options, name, value, i, places) {
      return new Bucket(options, name, value, i, places);
    }, set.prototype.createVSSettingsController = function(element, eventName, callback, usePostMessage) {
      return new DomDelegatedEventHandle(element, eventName, callback, usePostMessage, this._betSettings);
    }, set.prototype.createVSBetSettingsController = function(document, name, callback) {
      return new Component(document, name, callback);
    }, set.prototype.createVSGamePanelController = function(text, json) {
      return new Label(text, json);
    }, set.prototype.createVSJackpotPanelController = function(t, xgh2, xgh3) {
      return new RealTester(t, xgh2, xgh3);
    }, set.prototype.createGameNameController = function(type, value, origin) {
      new KineticToken(type, value, origin);
    }, set;
  }(way);
  var checkIfSeenCurentNotes = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var hc = function(util) {
    /**
     * @param {?} p
     * @param {?} n
     * @param {?} i
     * @return {?}
     */
    function init(p, n, i) {
      var that = util.call(this, i, 0, p, n) || this;
      return that.generatedLabels = {}, that._buttons[args.NUMBER1] = "numberBtn1", that._buttons[args.NUMBER2] = "numberBtn2", that._buttons[args.NUMBER3] = "numberBtn3", that._buttons[args.NUMBER4] = "numberBtn4", that._buttons[args.NUMBER5] = "numberBtn5", that._sliders[args.SLIDER1] = "slider1", that._sliders[args.SLIDER2] = "slider2", that._sliders[args.SLIDER3] = "slider3", that._sliders[args.SLIDER4] = "slider4", that._texts[args.SLIDER1_CURRENCY] = "currency1.currency", that._texts[args.SLIDER2_CURRENCY] = 
      "currency2.currency", that._texts[args.SLIDER3_CURRENCY] = "currency3.currency", that._texts[args.SLIDER4_CURRENCY] = "currency4.currency", that._texts[args.SLIDER1_LABEL] = "slider1.title", that._texts[args.SLIDER2_LABEL] = "slider2.title", that._texts[args.SLIDER3_LABEL] = "slider3.title", that._texts[args.SLIDER4_LABEL] = "slider4.title", that.setText(that._texts[args.SLIDER1_LABEL], "IDS_AP_WINEXCEEDS"), that.setText(that._texts[args.SLIDER2_LABEL], "IDS_AP_BALANCEINC"), that.setText(that._texts[args.SLIDER3_LABEL], 
      "IDS_AP_BALANCEDEC"), that.setText(that._texts[args.SLIDER4_LABEL], "IDS_AP_LOSSREACHES"), that.hideWin(), that;
    }
    return checkIfSeenCurentNotes(init, util), init.prototype.initSlider = function(index, e, el) {
      var options = this._sliders[index];
      if (options) {
        var dispatcher = this._entity.getSlider(options);
        dispatcher.addEventListener(self.SliderEvent.UPDATE, e);
        dispatcher.setValueFormat(el);
        this._entity.getAnimation(options + ".redArrow").play("normal");
      }
    }, init.prototype.addSliderPressHandlers = function(key, order, url) {
      var self = this;
      var slider = this._sliders[key];
      if (slider) {
        var windowLayer = this._entity.getSlider(slider);
        windowLayer.addEventListener(self.ButtonEvent.MOUSE_DOWN, function() {
          return self.pressHandler(key, order);
        });
        windowLayer.addEventListener(self.ButtonEvent.MOUSE_UP, function() {
          return self.pressHandler(key, url);
        });
      }
    }, init.prototype.setSliderValue = function(feature, value) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).updateSlider(value);
      }
    }, init.prototype.getSliderValue = function(name) {
      var x = this._sliders[name];
      return x ? this._entity.getSlider(x).getCurrentValue() : NaN;
    }, init.prototype.setSliderValueArray = function(feature, date) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).setValueArray(date);
      }
    }, init.prototype.setAutoplayButtonValue = function(canCreateDiscussions) {
    }, init.prototype.setCurrency = function(value) {
      this.setText(this._texts[args.SLIDER1_CURRENCY], value);
      this.setText(this._texts[args.SLIDER2_CURRENCY], value);
      this.setText(this._texts[args.SLIDER3_CURRENCY], value);
      this.setText(this._texts[args.SLIDER4_CURRENCY], value);
    }, init.prototype.setAutoplayButtonState = function(isIron) {
    }, init.prototype.showButton = function(name, show) {
      var i = this._buttons[name];
      if (i) {
        this._entity.getDisplay(i).setVisible(show);
      }
    }, init.prototype.showCheckBox = function(listener, index) {
      this.showButton(listener, index);
    }, init.prototype.showSlider = function(index, name) {
      var i = this._sliders[index];
      if (i) {
        this._entity.getDisplay(i).setVisible(name);
      }
    }, init.prototype.setSliderPercent = function(key, percent, color) {
      var slider = this._sliders[key];
      if (slider) {
        this._entity.getSlider(slider).setSlider(percent, color);
      }
    }, init.prototype.setSliderValid = function(feature, lastVerFailed) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).setValid(lastVerFailed);
      }
    }, init.prototype.showText = function(id, name) {
      var i = this._texts[id];
      if (i) {
        this._entity.getDisplay(i).setVisible(name);
      }
    }, init.prototype.setSliderMode = function(force_redraw, is_resize) {
    }, init.prototype.enableSlider = function(noCallback, id) {
    }, init.prototype.setTexts = function(t, index, value, _) {
      /** @type {!Array} */
      var ret = [];
      switch(t) {
        case ITEM.CHECKBOX:
          /** @type {!Array} */
          ret = ["setting", "toggleMLTxt"];
          break;
        case ITEM.SLIDER:
          /** @type {!Array} */
          ret = ["slider", "title"];
      }
      var key = args.setTextLabel(t, _);
      this.generatedLabels["" + index] = key;
      /** @type {string} */
      this._buttons[index] = "setting" + _ + ".btn";
      /** @type {string} */
      this._texts[key] = ret[0] + _ + "." + ret[1];
      this.setText(this._texts[key], value);
    }, init.prototype.getGeneratedLabel = function(ballNumber) {
      return this.generatedLabels[ballNumber];
    }, init.prototype.pressHandler = function(event, position) {
      position(event, this.getSliderValue(event));
    }, init;
  }(sampleUserGroupRoles);
  var appendNode = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var _c = function(html) {
    /**
     * @param {?} fields
     * @return {?}
     */
    function me(fields) {
      var me = html.call(this, fields) || this;
      return me._buttons[message.BET_INC] = "betPlusBtn", me._buttons[message.BET_DEC] = "betMinusBtn", me._buttons[message.BET_1ST] = "bet1Btn", me._buttons[message.BET_2ND] = "bet2Btn", me._buttons[message.BET_3RD] = "bet3Btn", me._buttons[message.BET_4TH] = "bet4Btn", me._buttons[message.BET_5TH] = "bet5Btn", me._buttons[message.BETMAX] = "betMaxBtn", me._buttons[message.LINES] = "linesBtn", me._buttons[message.LINES_INC] = "linesPlusBtn", me._buttons[message.LINES_DEC] = "linesMinusBtn", me._buttons[message.COINS] = 
      "coinsBtn", me._buttons[message.COINS_INC] = "coinsPlusBtn", me._buttons[message.COINS_DEC] = "coinsMinusBtn", me._buttons[message.DENOM] = "denominationBtn", me._buttons[message.DENOM_INC] = "denominationPlusBtn", me._buttons[message.DENOM_DEC] = "denominationMinusBtn", me._buttons.AUTOPLAY = "autoPlayBtn", me._buttons.PAYTABLE = "paytableBtn", me._texts = {}, me._texts[message.COINBALANCE_LABEL] = "coinBalanceText", me._texts[message.COINBET_LABEL] = "coinBetText", me._texts[message.BALANCE_CAPTION] = 
      "balanceCaption", me._texts[message.FREEGAME_CAPTION] = "freegameCaption", me._texts[message.BET_1ST] = "bet1Btn.textfield", me._texts[message.BET_2ND] = "bet2Btn.textfield", me._texts[message.BET_3RD] = "bet3Btn.textfield", me._texts[message.BET_4TH] = "bet4Btn.textfield", me._texts[message.BET_5TH] = "bet5Btn.textfield", me;
    }
    return appendNode(me, html), me.prototype.setSliderValue = function(val, values) {
    }, me.prototype.setSliderValueArray = function(marktype, itemData) {
    }, me.prototype.setSliderIndex = function(formatters, customFormatters) {
    }, me.prototype.setCurrency = function(data) {
    }, me.prototype.showSlider = function(token, message) {
    }, me.prototype.isVisible = function() {
      return true;
    }, me.prototype.show = function(str) {
    }, me.prototype.setLabelText = function(key, value, text) {
      var id = this._texts[key];
      if (id) {
        this._entity.getTextField(id).setText(value);
        if (text) {
          this._entity.getTextField(id).setArgs(text);
        }
      }
    }, me.prototype.setLabelArgs = function(key, args) {
      var cached = this._texts[key];
      this._entity.getTextField(cached).setArgs(args);
    }, me.prototype.enableSlider = function(noCallback, id) {
    }, me;
  }(self.ViewBase);
  var field = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var fc = function(options) {
    /**
     * @param {?} dt
     * @return {?}
     */
    function Buttons(dt) {
      var me = options.call(this, dt) || this;
      return me._buttons[editor.SPIN] = "spinBtn", me._buttons[editor.CONTINUE] = "stopBtn", me._buttons[editor.GAMBLE] = "waitGamble.gambleBtn", me._buttons[editor.COLLECT_WAIT] = "collectBtn", me._buttons[editor.COLLECT] = "waitGamble.collectBtn", me._buttons[editor.AUTOPLAY] = "autoPlayBtn", me._buttons[editor.APCOUNTER] = "aPCounterBtn", me._buttons[editor.AUTOPLAY_STOP] = "apStopBtn", me._panels[editor.GAMBLEBTNPANEL] = "waitGamble", me._buttons[editor.PAYTABLE] = "paytableBtn", me._buttons[message.BET_INC] = 
      "betPlusBtn", me._buttons[message.BET_DEC] = "betMinusBtn", me._buttons[message.BET_1ST] = "bet1Btn", me._buttons[message.BET_2ND] = "bet2Btn", me._buttons[message.BET_3RD] = "bet3Btn", me._buttons[message.BET_4TH] = "bet4Btn", me._buttons[message.BET_5TH] = "bet5Btn", me._buttons[message.BETMAX] = "betMaxBtn", me._buttons[message.LINES] = "linesBtn", me._buttons[message.LINES_INC] = "linesPlusBtn", me._buttons[message.LINES_DEC] = "linesMinusBtn", me._buttons[message.COINS] = "coinsBtn", me._buttons[message.COINS_INC] = 
      "coinsPlusBtn", me._buttons[message.COINS_DEC] = "coinsMinusBtn", me._buttons[message.DENOM] = "denominationBtn", me._texts[editor.APCOUNTER] = "aPCounter", me;
    }
    return field(Buttons, options), Buttons.prototype.setLabelText = function(key, value) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
    }, Buttons.prototype.setLabelArgs = function(key, args) {
      var cached = this._texts[key];
      this._entity.getTextField(cached).setArgs(args);
    }, Buttons;
  }(self.ViewBase);
  var getTextLinks = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RasterImportEvent = function(util) {
    /**
     * @param {?} name
     * @param {?} delegate
     * @param {?} type
     * @param {string} title
     * @param {string} message
     * @param {!Array} dashicon
     * @return {?}
     */
    function set(name, delegate, type, title, message, dashicon) {
      if (void 0 === dashicon) {
        /** @type {boolean} */
        dashicon = false;
      }
      var $scope = util.call(this, delegate, 0, name, type) || this;
      return $scope._title = title, $scope._message = message, $scope.setTexts(), $scope.showWin(), $scope;
    }
    return getTextLinks(set, util), set.prototype.setTexts = function() {
      this._entity.getTextField("title").setText(this._title);
      this._entity.getTextField("message").setText(this._message);
    }, set;
  }(sampleUserGroupRoles);
  var fnInvertKeyValues = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Line = function(util) {
    /**
     * @param {?} time
     * @param {string} err
     * @param {?} title
     * @param {string} i
     * @param {string} m
     * @param {?} num
     * @param {number} values
     * @param {number} valid
     * @return {?}
     */
    function set(time, err, title, i, m, num, values, valid) {
      if (void 0 === values) {
        /** @type {boolean} */
        values = false;
      }
      if (void 0 === valid) {
        /** @type {boolean} */
        valid = false;
      }
      var $scope = this;
      /** @type {string} */
      var value = values ? "MessageBox" : "ServerMessage";
      return $scope = util.call(this, valid ? value : err, num, time, title) || this, $scope._title = i, $scope._message = m, $scope.setTexts(), !valid && $scope.showWin(), $scope;
    }
    return fnInvertKeyValues(set, util), set.prototype.setTexts = function() {
      this._entity.getTextField("title").setText(this._title);
      this._entity.getTextField("message").setText(this._message);
    }, set;
  }(sampleUserGroupRoles);
  var stepProcessor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var mc = function(step) {
    /**
     * @return {?}
     */
    function init() {
      var me = this;
      var obj = self.ResourceManager.getInstance().getEntityManager();
      var result = obj.getByName("main");
      return me = step.call(this, result) || this, me._buttons[editor.REELQUICKSTOP] = "blinkBtn", me;
    }
    return stepProcessor(init, step), init.prototype.setLabelText = function(key, value) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
    }, init.prototype.setLabelArgs = function(key, args) {
      var cached = this._texts[key];
      this._entity.getTextField(cached).setArgs(args);
    }, init;
  }(self.ViewBase);
  var ViewerRelationshipController = function() {
    /**
     * @param {!HTMLElement} dialog
     * @return {undefined}
     */
    function game(dialog) {
      var importTranslationsOsm = this;
      this._blink = this.createBlink();
      dialog.addEventListener(presenter.VideoSlotUIEvent.REELQUICKSTOP, function(t) {
        return importTranslationsOsm.visualFeedback(t);
      });
      this._buttonSnd = this.createSound();
      /**
       * @param {?} canCreateDiscussions
       * @return {?}
       */
      var callback = function(canCreateDiscussions) {
        return importTranslationsOsm.audioFeedback(canCreateDiscussions);
      };
      dialog.addEventListener(presenter.VideoSlotUIEvent.BET_CHANGE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.SPIN, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.CONTINUE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.GAMBLE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.COLLECT, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.AUTOPLAY, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.AUTOPLAY_STOP, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.PAYTABLE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.NEXT_PAYTABLE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.PREV_PAYTABLE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.EXIT_PAYTABLE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.INDICATOR_PAYTABLE, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.HELP, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.EXIT, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_SOUND, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_FAST_PLAY, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.MENU, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.HISTORY, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.PLAYFORREAL, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_STOP_ANY_WIN, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_STOP_BONUS, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_STOP_FREESPIN, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.TOGGLE_STOP_JACKPOT, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.UPDATE_AUTOSPINS, callback);
      dialog.addEventListener(presenter.VideoSlotUIEvent.UPDATE_SETTINGS, callback);
      dialog.addEventListener(presenter.GambleUIEvent.GAMBLE_UI, callback);
      dialog.addEventListener(self.SplashEvent.SPLASH_CONTINUE, callback);
      dialog.addEventListener(self.SplashEvent.SPLASH_DONT_SHOW_AGAIN, callback);
      dialog.addEventListener(self.ModalUIEvent.OK, callback);
      dialog.addEventListener(self.ModalUIEvent.CANCEL, callback);
      dialog.addEventListener(self.ModalUIEvent.EXIT, callback);
      dialog.addEventListener(self.ModalUIEvent.ACTION, callback);
    }
    return game.prototype.visualFeedback = function(result) {
      this._blink.play("show");
    }, game.prototype.audioFeedback = function(canCreateDiscussions) {
      this._buttonSnd.play();
    }, game.prototype.createSound = function() {
      return self.ResourceManager.getInstance().getSndManager().create("btnClick");
    }, game.prototype.createBlink = function() {
      return self.ResourceManager.getInstance().getEntityManager().getByName("main").getAnimation("blinkLayer");
    }, game;
  }();
  var Color = function() {
    /**
     * @param {?} res
     * @return {undefined}
     */
    function me(res) {
    }
    return me.prototype.show = function(str) {
    }, me.prototype.isVisible = function() {
      return false;
    }, me.prototype.setPage = function(store) {
    }, me.prototype.setGameTitle = function(t) {
    }, me;
  }();
  var Section = function() {
    /**
     * @param {?} func
     * @param {?} categories
     * @param {?} options
     * @return {undefined}
     */
    function App(func, categories, options) {
      /** @type {string} */
      this._layerName = "osptLayer";
      this._reelManager = categories;
      this._symbolManager = options;
      this._layer = func.getHierarchy(this._layerName);
      this._entityManager = self.ResourceManager.getInstance().getEntityManager();
      /** @type {!Array} */
      this._buttons = [];
      /** @type {!Array} */
      this._btnDisplays = [];
      /** @type {!Array} */
      this._btnTransforms = [];
      this.createInfoField();
      this.createButtons();
      this.createCancelButton(func);
    }
    return App.prototype.initButton = function(type, name, i, tree) {
      if (this._buttons[type][name]) {
        this._buttons[type][name].addEventListener(self.ButtonEvent.CLICK, i);
        this._buttons[type][name].addEventListener(self.ButtonHoverEvent.HOVER, tree);
        this._buttons[type][name].enable(true);
      }
    }, App.prototype.initCancelButton = function(t) {
      this._cancelButton.addEventListener(self.ButtonEvent.CLICK, t);
    }, App.prototype.enableButtons = function(name) {
      /** @type {number} */
      var i = 0;
      for (; i < this._reelManager.getNumReels(); i++) {
        /** @type {number} */
        var j = 0;
        for (; j < this._reelManager.getNumRows(i); j++) {
          this._buttons[i][j].enable(name);
          this._btnDisplays[i][j].setVisible(name);
        }
      }
      this._cancelButton.enable(name);
      if (!name) {
        this.showInfoField(false);
      }
    }, App.prototype.showInfoField = function(value) {
      this._infoField.getDisplay("").setVisible(value);
    }, App.prototype.setInfoFieldPosition = function(xValue, value) {
      this._infoField.getTransform("").setX(xValue);
      this._infoField.getTransform("").setY(value);
    }, App.prototype.showInfo = function(options, type, r, msg, content) {
      /** @type {string} */
      var pos = r ? "right" : "left";
      if ("" === content && msg.length > 0) {
        this._infoAnim.play(pos + "_vals");
      } else {
        if ("" !== content && 0 === msg.length) {
          this._infoAnim.play(pos + "_text");
        } else {
          this._infoAnim.play(pos + "_mixed");
        }
      }
      this.positionInfoField(options, type);
      this.setContent(msg, content);
      this.showInfoField(true);
    }, App.prototype.createInfoField = function() {
      this._infoField = this._entityManager.create("OsptInfo");
      this._layer.add("OsptInfo", this._infoField);
      this._infoAnim = this._infoField.getAnimation(".");
      this.showInfoField(false);
    }, App.prototype.createButtons = function() {
      /** @type {number} */
      var id = 0;
      var ld = this._reelManager.getNumReels();
      for (; id < ld; id++) {
        /** @type {!Array} */
        this._buttons[id] = [];
        /** @type {!Array} */
        this._btnDisplays[id] = [];
        /** @type {!Array} */
        this._btnTransforms[id] = [];
        /** @type {number} */
        var last = 0;
        var i = this._reelManager.getNumRows(id);
        for (; last < i; last++) {
          this.createButton(id, last);
        }
      }
    }, App.prototype.createButton = function(id, name) {
      var scope = this._entityManager.create("OsptBtn");
      this._layer.add("btn" + id + "-" + name, scope);
      this._btnDisplays[id][name] = scope.getDisplay(".");
      this._btnTransforms[id][name] = scope.getTransform(".");
      this._buttons[id][name] = scope.getButton(".");
      this.setPosition(id, name);
    }, App.prototype.createCancelButton = function(obj) {
      this._cancelButton = obj.getButton("background");
      this._cancelButton.enable(true);
    }, App.prototype.setPosition = function(index, type) {
      var widget = this._btnTransforms[index][type];
      var params = this._reelManager.getSymbolPosition(index, type);
      widget.setX(params.x);
      widget.setY(params.y);
    }, App.prototype.setContent = function(data, v) {
      /** @type {number} */
      var i = 0;
      for (; i < data.length; i++) {
        /** @type {number} */
        var f = 5 - i;
        this._infoField.getTextField("val" + f).setText(data[i]);
      }
      this._infoField.getTextField("osptText").setText(v);
    }, App.prototype.positionInfoField = function(k, n) {
      var eye = this._btnTransforms[k][n];
      this.setInfoFieldPosition(eye.getX(), eye.getY());
    }, App;
  }();
  var Oc = function() {
    /**
     * @param {?} pinboardModule
     * @param {!Object} bookmarksModule
     * @param {string} uiModule
     * @return {undefined}
     */
    function App(pinboardModule, bookmarksModule, uiModule) {
      /** @type {string} */
      this._layerName = "osptLayer";
      /** @type {!Object} */
      this._reelManager = bookmarksModule;
      /** @type {string} */
      this._symbolManager = uiModule;
      this._layer = pinboardModule.getHierarchy(this._layerName);
      this._entityManager = self.ResourceManager.getInstance().getEntityManager();
      /** @type {!Array} */
      this._buttons = [];
      /** @type {!Array} */
      this._btnDisplays = [];
      /** @type {!Array} */
      this._btnTransforms = [];
      this.createInfoField();
      this.createButtons();
    }
    return App.prototype.initButton = function(type, name, i, tree) {
      if (this._buttons[type][name]) {
        this._buttons[type][name].addEventListener(self.ButtonEvent.CLICK, i);
        this._buttons[type][name].addEventListener(self.ButtonHoverEvent.HOVER, tree);
        this._buttons[type][name].enable(true);
      }
    }, App.prototype.enableButtons = function(name) {
      /** @type {number} */
      var i = 0;
      for (; i < this._reelManager.getNumReels(); i++) {
        /** @type {number} */
        var j = 0;
        for (; j < this._reelManager.getNumRows(i); j++) {
          this._buttons[i][j].enable(name);
          this._btnDisplays[i][j].setVisible(name);
        }
      }
      if (!name) {
        this.showInfoField(false);
      }
    }, App.prototype.showInfoField = function(value) {
      this._infoField.getDisplay("").setVisible(value);
    }, App.prototype.setInfoFieldPosition = function(xValue, value) {
      this._infoField.getTransform("").setX(xValue);
      this._infoField.getTransform("").setY(value);
    }, App.prototype.showInfo = function(e, callback, r, args, f, type) {
      /** @type {string} */
      var d = r ? "right" : "left";
      /** @type {string} */
      var str = type === ViewType.DEFAULT ? "default" : type === ViewType.SMALL ? "small" : "tiny";
      var data = args.reverse();
      this._infoField.getAnimation("").play(d + "_" + str);
      if (f) {
        this._infoField.getAnimation("" + str).play("text");
      } else {
        if (args.length > 0) {
          this._infoField.getAnimation("" + str).play("size_" + args.length);
        }
      }
      /** @type {number} */
      var i = 0;
      for (; i < data.length; i++) {
        this._infoField.getTextField(str + ".val" + i).setText(data[i]);
      }
      this.positionInfoField(e, callback);
      this.setContent(data, f, type);
      this.showInfoField(true);
    }, App.prototype.createInfoField = function() {
      this._infoField = this._entityManager.create("OsptInfo");
      this._layer.add("OsptInfo", this._infoField);
      this._infoAnim = this._infoField.getAnimation(".");
      this.showInfoField(false);
    }, App.prototype.createButtons = function() {
      /** @type {number} */
      var id = 0;
      var ld = this._reelManager.getNumReels();
      for (; id < ld; id++) {
        /** @type {!Array} */
        this._buttons[id] = [];
        /** @type {!Array} */
        this._btnDisplays[id] = [];
        /** @type {!Array} */
        this._btnTransforms[id] = [];
        /** @type {number} */
        var last = 0;
        var i = this._reelManager.getNumRows(id);
        for (; last < i; last++) {
          this.createButton(id, last);
        }
      }
    }, App.prototype.createButton = function(id, name) {
      var scope = this._entityManager.create("OsptBtn");
      this._layer.add("btn" + id + "-" + name, scope);
      this._btnDisplays[id][name] = scope.getDisplay(".");
      this._btnTransforms[id][name] = scope.getTransform(".");
      this._buttons[id][name] = scope.getButton(".");
      this.setPosition(id, name);
    }, App.prototype.initCancelButton = function() {
    }, App.prototype.setPosition = function(index, type) {
      var widget = this._btnTransforms[index][type];
      var params = this._reelManager.getSymbolPosition(index, type);
      widget.setX(params.x);
      widget.setY(params.y);
    }, App.prototype.setContent = function(data, string, type) {
      /** @type {string} */
      var name = type === ViewType.DEFAULT ? "default" : type === ViewType.SMALL ? "small" : "tiny";
      /** @type {number} */
      var i = 0;
      for (; i < data.length; i++) {
        this._infoField.getTextField(name + ".osptVal" + i).setText(data[i]);
      }
      this._infoField.getTextField(name + ".osptText").setText(string);
      this._infoField.getTextField(name + ".osptCurrencyText").setText("IDS_AMOUNTS_IN_CURRENCY");
      var s = self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol();
      this._infoField.getTextField(name + ".osptCurrencyText").setArgs("%c=" + s);
    }, App.prototype.positionInfoField = function(k, options) {
      var target = this._btnTransforms[k][options];
      this.setInfoFieldPosition(target.getX(), target.getY());
    }, App;
  }();
  var isPropertyDefined = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var OthersSetting = function(config) {
    /**
     * @param {number} stack
     * @param {!Object} index
     * @return {?}
     */
    function set(stack, index) {
      var me = config.call(this, null) || this;
      /** @type {!Object} */
      me._dispatcher = index;
      var provider = self.ResourceManager.getInstance().getEntityManager();
      me._entity = provider.create("?");
      provider.add("paytable", me._entity);
      me._resourceManager = self.ResourceManager.getInstance();
      me._entity.getButton("").enable(true);
      /** @type {string} */
      me._buttons[request.PREV] = "prevBtn";
      /** @type {string} */
      me._buttons[request.NEXT] = "nextBtn";
      /** @type {string} */
      me._buttons[request.EXIT] = "exitBtn";
      /** @type {number} */
      var i = 1;
      for (; i <= stack; i++) {
        /** @type {string} */
        me._buttons[request.INDICATOR_PREFIX + i] = "indicatorBtn" + i;
      }
      return me;
    }
    return isPropertyDefined(set, config), set.prototype.show = function(value) {
      this._entity.getDisplay("").setVisible(value);
    }, set.prototype.isVisible = function() {
      return this._entity.getDisplay("").isVisible();
    }, set.prototype.setPage = function(index) {
      this._entity.getAnimation("").play("page" + (index + 1));
    }, set;
  }(self.ViewBase);
  var compileExpressionStatement = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Document = function(Controller) {
    /**
     * @param {?} data
     * @param {?} namespace
     * @return {?}
     */
    function init(data, namespace) {
      var that = Controller.call(this, data, namespace) || this;
      return that._buttons[settings.SOUND] = "soundsBtn", that._buttons[settings.FASTPLAY] = "fastPlayBtn", that._buttons[settings.HELP] = "infosBtn", that._buttons[settings.MENU] = "settingsBtn", that._buttons[settings.EXIT] = "exitBtn", that._buttons[settings.PLAYFORREAL] = "playForRealBtn", that._buttons[settings.HISTORY] = "historyBtn", that._buttons[settings.TUTORIAL] = "tutorialBtn", that._texts.FG_FREEGAMES = "statusBarFreeGame.freeGamesText", that._texts.FG_TOTALWIN = "statusBarFreeGame.totalWinText", 
      that._texts.FG_FREEBET = "freeBetText", that._texts.FG_WIN = "freeGameWinText", that._texts.BALANCE = "statusBarDefault.balanceText", that._texts.BET = "statusBarDefault.betText", that._texts.WIN = "statusBarDefault.winText", that._entity.getTextField(that._texts.BALANCE).setText(that.getBalanceLabel()), that._entity.getTextField(that._texts.BET).setText("IDS_BET_CAPTION"), that._entity.getTextField(that._texts.WIN).setText("IDS_WIN_CAPTION"), that._entity.getTextField("clock.clockText").setText(""), 
      that._moneyFormatter = self.ResourceManager.getInstance().getMoneyFormatter(), that.setFreeGameMode(), that;
    }
    return compileExpressionStatement(init, Controller), init.prototype.showButton = function(buttonId, show) {
      if (buttonId === settings.PLAYFORREAL) {
        if (show) {
          this._entity.getDisplay("statusBarDefault").setVisible(false);
          /** @type {string} */
          this._texts.BALANCE = "statusBarPFR.balanceText";
          /** @type {string} */
          this._texts.BET = "statusBarPFR.betText";
          /** @type {string} */
          this._texts.WIN = "statusBarPFR.winText";
          this._entity.getTextField(this._texts.BALANCE).setText(this.getBalanceLabel());
          this._entity.getTextField(this._texts.BET).setText("IDS_BET_CAPTION");
          this._entity.getTextField(this._texts.WIN).setText("IDS_WIN_CAPTION");
        } else {
          this._entity.getDisplay("statusBarPFR").setVisible(false);
        }
      }
      Controller.prototype.showButton.call(this, buttonId, show);
    }, init.prototype.setBalance = function(data) {
      var myDoughnutChart = this._moneyFormatter.MoneyToString(data, self.MoneyFormatterFlag.FORCE_DECIMAL);
      this._entity.getTextField(this._texts.BALANCE).setArgs("> " + myDoughnutChart);
    }, init.prototype.showPNGLogo = function(value) {
      this._entity.getDisplay("pngLogo").setVisible(value);
    }, init.prototype.handleMysteryJackpot = function() {
    }, init.prototype.setBet = function(t, start) {
      var textWas = this._moneyFormatter.MoneyToString(t, self.MoneyFormatterFlag.FORCE_DECIMAL);
      if (!start) {
        this._entity.getTextField(this._texts.BET).setArgs("> " + textWas);
      }
      this._entity.getTextField(this._texts.FG_FREEBET).setArgs("> " + textWas);
    }, init.prototype.setWin = function(num) {
      var opt_by = num > 0 ? this._moneyFormatter.MoneyToString(num, self.MoneyFormatterFlag.FORCE_DECIMAL) : "";
      if (!this._isFreeGame) {
        this._entity.getTextField(this._texts.WIN).setArgs("> " + opt_by);
      }
      this._entity.getTextField(this._texts.FG_WIN).setArgs("> " + opt_by);
    }, init.prototype.setFreeGames = function(canCreateDiscussions) {
      /** @type {boolean} */
      this._isFreeGame = true;
      this.setFreeGameMode();
      this._entity.getTextField(this._texts.FG_FREEGAMES).setText("IDS_MENU_FREEGAMES");
      this._entity.getTextField(this._texts.FG_FREEGAMES).setArgs("> " + canCreateDiscussions);
    }, init.prototype.setTotalWin = function(magnifier) {
      var $magnifier = this._moneyFormatter.MoneyToString(magnifier, self.MoneyFormatterFlag.FORCE_DECIMAL);
      if (!this._isFreeGame) {
        this._entity.getTextField(this._texts.FG_TOTALWIN).setText("");
        this._entity.getTextField(this._texts.BET).setText("IDS_MENU_TOTALWIN_ALT");
        this._entity.getTextField(this._texts.BET).setArgs("> " + $magnifier);
      }
      this._entity.getTextField(this._texts.FG_TOTALWIN).setArgs("> " + $magnifier);
    }, init.prototype.setFreeGameMode = function() {
      this._entity.getDisplay("statusBarFreeGame").setVisible(this._isFreeGame);
      if (this._isFreeGame) {
        this.removeNormalMode();
        this._entity.getDisplay("statusBarDefault.balanceText").setVisible(false);
        this._entity.getTextField(this._texts.FG_WIN).setText("IDS_WIN_CAPTION");
        this._entity.getTextField(this._texts.FG_TOTALWIN).setText("IDS_MENU_TOTALWIN_ALT");
        this._entity.getTextField(this._texts.FG_FREEBET).setText("IDS_MENU_FREEBET");
      } else {
        this._entity.getDisplay("statusBarDefault.balanceText").setVisible(true);
        this._entity.getTextField(this._texts.FG_FREEGAMES).setText("");
        this._entity.getTextField(this._texts.FG_TOTALWIN).setText("");
        this._entity.getTextField(this._texts.FG_FREEBET).setText("");
        this._entity.getTextField(this._texts.FG_WIN).setText("");
      }
    }, init.prototype.setNormalMode = function() {
      /** @type {boolean} */
      this._isFreeGame = false;
      this.setFreeGameMode();
      this._entity.getTextField(this._texts.BALANCE).setText(this.getBalanceLabel());
      this._entity.getTextField(this._texts.BET).setText("IDS_BET_CAPTION");
      this._entity.getTextField(this._texts.WIN).setText("IDS_WIN_CAPTION");
    }, init.prototype.removeNormalMode = function() {
      this._entity.getTextField(this._texts.BALANCE).setText("");
      this._entity.getTextField(this._texts.BET).setText("");
      this._entity.getTextField(this._texts.WIN).setText("");
    }, init.prototype.setTime = function(t) {
      this._entity.getTextField("clock.clockText").setText(t);
    }, init.prototype.showClock = function(visible) {
      this._entity.getDisplay("clock").setVisible(visible);
    }, init.prototype.setLeftHandMode = function(addedRenderer) {
    }, init.prototype.setBetInCoins = function(a22) {
    }, init.prototype.onSplash = function(expected) {
      if ("StatusBar" === this._entity.getResourceId()) {
        /** @type {boolean} */
        var value = false === expected;
        this._entity.getDisplay("").setVisible(value);
      }
    }, init;
  }(Controller);
  var inherit = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var $magnifier = function(Client) {
    /**
     * @return {?}
     */
    function ChildPage() {
      var e = null !== Client && Client.apply(this, arguments) || this;
      return e._menuMode = false, e._transitionMode = false, e;
    }
    return inherit(ChildPage, Client), ChildPage.prototype.initEventListeners = function(value) {
      var t = this;
      Client.prototype.initEventListeners.call(this, value);
      value.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_SHOWN, function() {
        return t.onTransition(true);
      });
      value.addEventListener(presenter.VideoSlotGameTransitionEvent.EVENT_HIDDEN, function() {
        return t.onTransition(false);
      });
      value.addEventListener(presenter.VideoSlotUIEvent.MENUSHOW, function() {
        return t.onMenu(true);
      });
      value.addEventListener(presenter.VideoSlotUIEvent.MENUHIDE, function() {
        return t.onMenu(false);
      });
      value.addEventListener(presenter.VideoSlotUIEvent.SHOW_PAYTABLE, function() {
        return t.onMenu(true);
      });
      value.addEventListener(presenter.VideoSlotUIEvent.HIDE_PAYTABLE, function() {
        return t.onMenu(false);
      });
      value.addEventListener(presenter.VideoSlotUIEvent.OSPT_SHOWN, function() {
        return t.onOspt();
      });
      /** @type {!Object} */
      this._dispatcher = value;
    }, ChildPage.prototype.showView = function(type) {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.HOVER_INDICATOR_SHOWN));
    }, ChildPage.prototype.hideView = function(theView) {
      this._dispatcher.dispatch(new presenter.VideoSlotUIEvent(presenter.VideoSlotUIEvent.HOVER_INDICATOR_HIDDEN));
    }, ChildPage.prototype.onMenu = function(mode) {
      /** @type {string} */
      this._menuMode = mode;
      if (mode && this._shown) {
        this.reset();
      }
    }, ChildPage.prototype.onTransition = function(a) {
      /** @type {string} */
      this._transitionMode = a;
      if (a && this._shown) {
        this.reset();
      }
    }, ChildPage.prototype.onOspt = function() {
      if (this._shown) {
        this.reset();
      }
    }, ChildPage.prototype.checkDisabled = function() {
      return Client.prototype.checkDisabled.call(this) || this._menuMode || this._transitionMode;
    }, ChildPage;
  }(magnifier);
  var wrap = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var windowReference = function(editor) {
    /**
     * @param {!Object} e
     * @return {?}
     */
    function render(e) {
      var ext = editor.call(this, e) || this;
      /** @type {boolean} */
      var uboard = !self.ResourceManager.getInstance().getCreditFormatter().creditDisplay;
      return ext._lineUp = new tree.HorizontalLineup(e, "counter", ["IDS_WIN_CAPTION", "value", "IDS_LBL_COINS"], 10, "infoText"), ext._lineUp.enableElement("IDS_LBL_COINS", uboard), ext._textFields = [], ["IDS_WIN_CAPTION", "value", "IDS_LBL_COINS"].forEach(function(delegate) {
        ext._textFields.push(e.getTextField("counter." + delegate));
      }), ext;
    }
    return wrap(render, editor), render.prototype.setMode = function(mode, group) {
      var self = this;
      if (void 0 === group) {
        /** @type {boolean} */
        group = false;
      }
      var s = this._animation.getClipName();
      editor.prototype.setMode.call(this, mode, group);
      if (s !== this._animation.getClipName()) {
        exports.SystemManager.getScheduler().onNextUpdate(function() {
          self._textFields.forEach(function(table) {
            return table.setProperty(self.TextProperty.ALIGN, "center");
          });
          try {
            self._lineUp.update();
          } catch (t) {
          }
        });
      }
    }, render.prototype.updatePositions = function() {
      var self = this;
      this._display.setAlpha(0);
      this._coinDisplay.setAlpha(0);
      this._winDisplay.setAlpha(0);
      exports.SystemManager.getScheduler().onNextUpdate(function() {
        self._textFields.forEach(function(table) {
          return table.setProperty(self.TextProperty.ALIGN, "center");
        });
        try {
          self._lineUp.update();
        } catch (t) {
        }
        self._display.setAlpha(1);
        self._coinDisplay.setAlpha(1);
        self._winDisplay.setAlpha(1);
      });
    }, render;
  }(url);
  var $$schedulers$ember$scheduler$$default = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var button1 = function(target) {
    /**
     * @return {?}
     */
    function DefClass() {
      return null !== target && target.apply(this, arguments) || this;
    }
    return $$schedulers$ember$scheduler$$default(DefClass, target), DefClass.prototype.init = function(c) {
      target.prototype.init.call(this, c);
      /** @type {!Object} */
      this._config = c;
      var config = self.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
    }, DefClass.prototype.createInfoView = function() {
      return new windowReference(this._entity);
    }, DefClass.prototype.createFastPlayMessageView = function(p1, p2, rect, shouldLookForFirstVisibleColumn) {
      return void 0 === shouldLookForFirstVisibleColumn && (shouldLookForFirstVisibleColumn = "PlayConfirm"), new RasterImportEvent(this._parent, shouldLookForFirstVisibleColumn, this._disabler, p2, rect);
    }, DefClass.prototype.createFreeGameMessageView = function(curVal, idx, query, i, options, url, replace) {
      return void 0 === options && (options = "PlayConfirm"), void 0 === url && (url = false), void 0 === replace && (replace = false), new Line(this._parent, options, this._disabler, idx, query, i, null, replace);
    }, DefClass.prototype.createMasterView = function() {
      return new Fs;
    }, DefClass.prototype.createExpandingWinCounterView = function() {
      return new base16(this.createWinCounterScales());
    }, DefClass.prototype.createInteractionFeedbackView = function(options) {
      return new ViewerRelationshipController(options);
    }, DefClass.prototype.createWinCounterScales = function() {
      return [0.5, 0.6, 0.7, 0.85, 1];
    }, DefClass.prototype.createJackpotNotificationView = function(x, obj) {
      return obj === tree.JackpotType.InGame ? new tree.JackpotNotificationViewHTML : new tree.JackpotNotificationViewCanvas;
    }, DefClass;
  }(div);
  var xc = function() {
    /**
     * @param {?} p
     * @return {undefined}
     */
    function InPlaceNotification(p) {
      this._display = p.getDisplay(".");
    }
    return InPlaceNotification.prototype.show = function(x) {
      this._display.setVisible(x);
    }, InPlaceNotification;
  }();
  var calculateFloatContainerPos = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ramp = function(util) {
    /**
     * @param {?} data
     * @param {?} uid
     * @param {?} appName
     * @param {!Array} args
     * @return {?}
     */
    function init(data, uid, appName, args) {
      var self = util.call(this, appName, 0, data, uid) || this;
      self._texts = {};
      /** @type {number} */
      var i = 0;
      var arg_count = args.length;
      for (; i < arg_count; i++) {
        /** @type {string} */
        self._buttons[args[i]] = "setting" + (i + 1) + ".btn";
        /** @type {string} */
        self._texts[args[i]] = "setting" + (i + 1) + ".toggleMLTxt";
        self.enableButton(args[i], true);
      }
      /** @type {string} */
      self._buttons[context.COINVALUE] = "coinValueCnt.valueBtn";
      /** @type {string} */
      self._buttons[context.COINVALUE_INC] = "coinValueCnt.plusBtn";
      /** @type {string} */
      self._buttons[context.COINVALUE_DEC] = "coinValueCnt.minusBtn";
      /** @type {string} */
      self._buttons[context.COINS] = "coinsCnt.valueBtn";
      /** @type {string} */
      self._buttons[context.COINS_INC] = "coinsCnt.plusBtn";
      /** @type {string} */
      self._buttons[context.COINS_DEC] = "coinsCnt.minusBtn";
      /** @type {string} */
      self._buttons[context.LINES] = "linesCnt.valueBtn";
      /** @type {string} */
      self._buttons[context.LINES_INC] = "linesCnt.plusBtn";
      /** @type {string} */
      self._buttons[context.LINES_DEC] = "linesCnt.minusBtn";
      i = args.length;
      for (; i < 7; i++) {
        /** @type {string} */
        var key = "setting" + (i + 1);
        /** @type {string} */
        self._buttons[key] = key;
        self.showButton(key, false);
      }
      return self.setText(self._texts[region.SOUND], "IDS_M_SETTINGS_L1"), self.setText(self._texts[region.FASTPLAY], "IDS_M_SETTINGS_L12"), self.setText(self._texts[region.AUTOADJUSTBET], "IDS_M_SETTINGS_L9"), self.setText(self._texts[region.SPACEBARSPIN], "IDS_M_SETTINGS_L13"), self.setButtonLabel(context.COINVALUE, "IDS_COINVALUE"), self.setButtonLabel(context.COINS, "IDS_VP_COINS"), self.setButtonLabel(context.LINES, "IDS_SLOT_LINES"), self.hideWin(), self;
    }
    return calculateFloatContainerPos(init, util), init.prototype.setButtonLabel = function(button_id, label) {
      var id = this._buttons[button_id] + ".label";
      this._entity.getTextField(id).setText(label);
    }, init;
  }(sampleUserGroupRoles);
  var streamBundlesWatch = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var button1Component = function(target) {
    /**
     * @return {?}
     */
    function config() {
      return null !== target && target.apply(this, arguments) || this;
    }
    return streamBundlesWatch(config, target), config.createCommonStatusBar = function(name) {
      var me = self.ResourceManager.getInstance().getEntityManager();
      var options = me.create("?");
      return me.add("statusbar", options), new Document(options, name);
    }, config.prototype.init = function(b) {
      target.prototype.init.call(this, b);
      self.ResourceManager.getInstance().getKeyboardHandler().initKeyBoardHandler(presenter.VideoSlotKeyboardSettings.KeyUpValues);
    }, config.prototype.createStatusBarView = function() {
      return new Document(this._entity, this._config);
    }, config.prototype.createButtonView = function() {
      return new fc(this._entity);
    }, config.prototype.createBetPanelView = function() {
      return new _c(this._entity);
    }, config.prototype.createGameButtonView = function() {
      return new mc;
    }, config.prototype.createMenuView = function(uppercase, object, args, color) {
      return new Color(color);
    }, config.prototype.createSplitView = function(CSSSelector, parentElement, position) {
      return null;
    }, config.prototype.createOrientationPromptView = function() {
    }, config.prototype.createPaytableView = function(value, param, ctor) {
      return new OthersSetting(param, ctor);
    }, config.prototype.createOSPTView = function(el, name, id) {
      return new Section(el, name, id);
    }, config.prototype.createGamePanelView = function() {
      return new xc(this._entity);
    }, config.prototype.createGameRulesView = function(browserChannel, array) {
      return null;
    }, config.prototype.createGameHistoryView = function(eta, lmbda, n) {
      return null;
    }, config.prototype.createCashierView = function(rect, linesstrip) {
      return null;
    }, config.prototype.createPlayForRealMenuViewMobile = function(canCreateDiscussions) {
      return null;
    }, config.prototype.createSettingsView = function() {
      var t = this.filterButtons([region.SOUND, region.FASTPLAY, region.AUTOADJUSTBET, region.SPACEBARSPIN]);
      return new Ramp(this._parent, this._disabler, "SettingsDlg_videoslot", t);
    }, config.prototype.createAutoplaySettingsView = function() {
      return new hc(this._parent, this._disabler, "AutoPlay");
    }, config.prototype.filterButtons = function(swimlanes) {
      var CloudCmd = this;
      return swimlanes.filter(function(canCreateDiscussions) {
        switch(canCreateDiscussions) {
          case region.FASTPLAY:
            return !CloudCmd._config.hideFastPlay;
          case region.AUTOADJUSTBET:
            return !CloudCmd._config.hideAutoAdjustBet;
          case region.SOUND:
            return !CloudCmd._config.hideSound;
          case region.SPACEBARSPIN:
            return !CloudCmd._config.hideSpaceBarToSpin;
          default:
            return true;
        }
      });
    }, config.prototype.createJackpotPanelViewBase = function() {
      return new Gu;
    }, config.prototype.createGameNameView = function() {
      var t = self.ResourceManager.getInstance().getEntityManager();
      var e = t.create("?");
      return t.add("game_name", e), new InvalidSourceError(e);
    }, config;
  }(button1);
  var ObjectDefineProperty = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Sketch = function(constructor) {
    /**
     * @return {?}
     */
    function e() {
      return null !== constructor && constructor.apply(this, arguments) || this;
    }
    return ObjectDefineProperty(e, constructor), e.prototype.enable = function(value) {
      constructor.prototype.enable.call(this, value);
      this.setVisible(value);
    }, e;
  }(Template);
  var checkTriggered = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var testDataContainer = function(array) {
    /**
     * @param {string} id
     * @param {number} a
     * @return {?}
     */
    function func(id, a) {
      if (void 0 === a) {
        /** @type {number} */
        a = 0.75;
      }
      var t = array.call(this, id) || this;
      /** @type {number} */
      t._CONTAINER_TOP_POSITION = 0.76;
      t.setupDivs(id);
      /** @type {number} */
      t._buttonScaleLowAspect = a;
      var e = exports.SystemManager.getDeviceHandler();
      return e && (e.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return t.HandleOrientationChange();
      }), e.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return t.HandleOrientationChange();
      })), t;
    }
    return checkTriggered(func, array), func.prototype.setupDivs = function(key) {
      this._panels = {};
      this._gamblePanel = RepositoryApi.getInstance().createAndAppendDiv(this._root, "gamblePanel");
      this.createButton(editor.CONTINUE, "IDS_BTN_CONTINUE", key, "vbContinueBtn", "hiddenBtn", "btnContinue", "btnVideBingoCaption", false);
      this.createButton(editor.APCOUNTER, "", key, "apStopBtn", "autoplayButton", "btnAPStop", "btnVideBingoCaption", true);
      this._buttons[editor.SPIN] = new Sketch("", key, "vbSpinBtn", "gameButton", "btnPlay", "btnVideBingoCaption");
      var el = this._buttons[editor.SPIN].getDOMNode();
      var childCompute = RepositoryApi.getInstance().createAndAppendDiv(el, void 0, "pointerArea");
      this._buttons[editor.SPIN].setPointerTarget(childCompute);
      this.createButton(editor.GAMBLE, "IDS_BTN_GAMBLE", this._gamblePanel, "vsBtnGamble", "gambleButton", "btnGamble", "btnVideBingoCaption", false);
      this.createButton(editor.COLLECT, "IDS_BTN_COLLECT", this._gamblePanel, "vbBtnCollect", "collectButton", "btnGamble", "btnVideBingoCaption", false);
      this.createButton(editor.COLLECT_WAIT, "IDS_BTN_COLLECT", this._gamblePanel, "vbBtnCollect", "collectButton", "btnGamble", "btnVideBingoCaption", false);
      this._buttons[editor.SPIN].innerCaptionAlignment();
      this._buttons[editor.CONTINUE].innerCaptionAlignment();
      this._buttons[editor.COLLECT].innerCaptionAlignment();
      this._buttons[editor.COLLECT_WAIT].innerCaptionAlignment();
      this._buttons[editor.APCOUNTER].innerCaptionAlignment();
      this._buttons[editor.GAMBLE].innerCaptionAlignment();
      this._buttons[editor.SPIN].addScalableDiv(RepositoryApi.getInstance().createDiv("spinBtnPulse"));
      this._panels[editor.GAMBLEBTNPANEL] = this._gamblePanel;
    }, func.prototype.createButton = function(id, type, opts, handler, target, config, appName, options) {
      if (void 0 === options && (options = false), this._buttons[id] = new Template(type, opts, handler, target, config, appName), options) {
        var u = this._buttons[id].getDOMNode();
        var cmtcookie = RepositoryApi.getInstance().createAndAppendDiv(u, void 0, "pointerArea");
        this._buttons[id].setPointerTarget(cmtcookie);
      }
    }, func.prototype.HandleOrientationChange = function() {
      var mark = exports.DEVICE.orientation;
      if ("pt" === mark) {
        /** @type {string} */
        mark = "pt";
        this._root.classList.add("pt");
        this._root.classList.remove("ls");
        this._gamblePanel.classList.add("pt");
        this._gamblePanel.classList.remove("ls");
        /** @type {string} */
        this._root.style.top = exports.SystemManager.getDeviceHandler().resolveHeight() * this._CONTAINER_TOP_POSITION + "px";
        if (exports.DEVICE.pt.w / exports.DEVICE.pt.h >= this._buttonScaleLowAspect) {
          this._root.classList.add("smallButtons");
        } else {
          this._root.classList.remove("smallButtons");
        }
      } else {
        /** @type {string} */
        mark = "ls";
        this._root.classList.add("ls");
        this._root.classList.remove("pt");
        this._gamblePanel.classList.add("ls");
        this._gamblePanel.classList.remove("pt");
        /** @type {string} */
        this._root.style.top = "";
      }
      this._buttons[editor.SPIN].HandleOrientationChange(mark);
      this._buttons[editor.CONTINUE].HandleOrientationChange(mark);
      this._buttons[editor.COLLECT].HandleOrientationChange(mark);
      this._buttons[editor.COLLECT_WAIT].HandleOrientationChange(mark);
      this._buttons[editor.GAMBLE].HandleOrientationChange(mark);
      this._buttons[editor.APCOUNTER].HandleOrientationChange(mark);
    }, func.prototype.setAutoplayButton = function(b) {
      /** @type {string} */
      this._buttons[editor.AUTOPLAY] = b;
    }, func.prototype.setButtonText = function(buttonId, text) {
      this._buttons[buttonId].setCaption(text);
    }, func.prototype.showPanel = function(index, on) {
      /** @type {string} */
      this._panels[index].style.display = on ? "" : "none";
    }, func.prototype.setLabelText = function(text, value) {
    }, func.prototype.setLabelArgs = function(formatters, customFormatters) {
    }, func;
  }(selector);
  var addTest = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var obj2 = function(fixture) {
    /**
     * @param {?} a
     * @return {?}
     */
    function i(a) {
      var self = fixture.call(this, a) || this;
      /** @type {number} */
      self._showLevel = 0;
      self._displayBackground.setVisible(true);
      var _portletRow = exports.SystemManager.getDeviceHandler();
      return _portletRow && _portletRow.addEventListener(exports.DeviceEvent.ORIENTATION, function(dappId) {
        return self.handleOrientationChange(dappId);
      }), self.handleOrientationChange(null), self;
    }
    return addTest(i, fixture), i.prototype.handleOrientationChange = function(args) {
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {number} */
        this._maxTotalWidth = 330;
      } else {
        /** @type {number} */
        this._maxTotalWidth = 300;
      }
      this.onAnimator();
    }, i;
  }(val);
  var triggerEvent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var copy2 = function(self) {
    /**
     * @param {?} e
     * @return {?}
     */
    function init(e) {
      var protocol = self.call(this, e) || this;
      return protocol._coinShower = protocol.createEmitter(), protocol;
    }
    return triggerEvent(init, self), init.prototype.setWinLevel = function(i) {
      if (this._coinShower) {
        this._coinShower.setDensity(2 * i / this._scales.length);
        if (i != this._levelIdx) {
          this._coinShower.burst(15);
        }
      }
      self.prototype.setWinLevel.call(this, i);
    }, init.prototype.setMode = function(mode) {
      self.prototype.setMode.call(this, mode);
      if (this._coinShower) {
        if (mode === tree.InfoViewMode.WIN) {
          this._coinShower.start();
        } else {
          this._coinShower.stop();
        }
      }
    }, init.prototype.createEmitter = function() {
      var PersonModel = self.ResourceManager.getInstance().getEntityManager();
      var spec = PersonModel.getByName("wincounter");
      var elements = tree.CoinShowerEmitter.createPool(spec, "emitter");
      return new tree.CoinShowerEmitter(elements);
    }, init;
  }(obj2);
  var getSubs = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var StaticElement = function(a) {
    /**
     * @param {?} g
     * @param {?} i
     * @param {string} val
     * @param {string} m
     * @param {?} b
     * @param {!Array} status
     * @return {?}
     */
    function set(g, i, val, m, b, status) {
      if (void 0 === status) {
        /** @type {boolean} */
        status = false;
      }
      var $scope = this;
      /** @type {(Element|null)} */
      var n = document.getElementById("modalwin_container");
      return $scope = a.call(this, g, i, b, n, val, "modalwin") || this, $scope._title = val, $scope._message = m, $scope.setTexts(), $scope.showWin(), $scope;
    }
    return getSubs(set, a), set.prototype.setTexts = function() {
      var res = RepositoryApi.getInstance();
      res.setTextWidthProxy(this._titleDiv, this._title);
      res.setTextWidthProxy(this._messageDiv, this._message);
    }, set;
  }(top);
  var wrapIfExists = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var AttributeTransformer = function(Emitter) {
    /**
     * @param {?} mode
     * @param {?} key
     * @param {string} title
     * @param {string} message
     * @param {!Array} dashicon
     * @return {?}
     */
    function set(mode, key, title, message, dashicon) {
      if (void 0 === dashicon) {
        /** @type {boolean} */
        dashicon = false;
      }
      var $scope = this;
      /** @type {(Element|null)} */
      var a = document.getElementById("modalwin_container");
      return $scope = Emitter.call(this, mode, key, 0, a, title, "modalwin") || this, $scope._title = title, $scope._message = message, $scope.setTexts(), $scope.showWin(), $scope;
    }
    return wrapIfExists(set, Emitter), set.prototype.enable = function(value) {
      Emitter.prototype.enable.call(this, value);
      this.enableButton(keys.YES, value);
      this.enableButton(keys.NO, value);
      this.enableButton(keys.EXIT, value);
    }, set.prototype.createButtons = function() {
      this._buttons[keys.NO] = new constructor("IDS_BTN_NO", this.btnsDiv, "", "modalwin_cancel_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.YES] = new constructor("IDS_BTN_YES", this.btnsDiv, "", "modalwin_confirm_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.EXIT] = new constructor("IDS_BTN_EXIT", this.btnsDiv, "", "modalwin_exit_btn", void 0, "btnCaptionModalWin");
    }, set.prototype.setTexts = function() {
      var res = RepositoryApi.getInstance();
      res.setTextWidthProxy(this._titleDiv, this._title);
      res.setTextWidthProxy(this._messageDiv, this._message);
    }, set;
  }(top);
  var fn = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Element = function(util) {
    /**
     * @param {?} order
     * @param {?} url
     * @param {string} query
     * @param {string} message
     * @param {?} value
     * @param {!Array} ifNotFound
     * @return {?}
     */
    function set(order, url, query, message, value, ifNotFound) {
      if (void 0 === ifNotFound) {
        /** @type {boolean} */
        ifNotFound = false;
      }
      var $scope = this;
      /** @type {(Element|null)} */
      var selection = document.getElementById("modalwin_container");
      return $scope = util.call(this, order, url, value, selection, query, "modalwin") || this, $scope._title = query, $scope._message = message, $scope.setTexts(), $scope.showWin(), $scope;
    }
    return fn(set, util), set.prototype.enable = function(value) {
      util.prototype.enable.call(this, value);
      this.enableButton(keys.YES, value);
      this.enableButton(keys.NO, value);
      this.enableButton(keys.EXIT, value);
    }, set.prototype.createButtons = function() {
      this._buttons[keys.NO] = new constructor("IDS_BTN_NO", this.btnsDiv, "", "modalwin_cancel_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.YES] = new constructor("IDS_BTN_YES", this.btnsDiv, "", "modalwin_confirm_btn", void 0, "btnCaptionModalWin");
      this._buttons[keys.EXIT] = new constructor("IDS_BTN_EXIT", this.btnsDiv, "", "modalwin_exit_btn", void 0, "btnCaptionModalWin");
    }, set.prototype.setTexts = function() {
      var res = RepositoryApi.getInstance();
      res.setTextWidthProxy(this._titleDiv, this._title);
      res.setTextWidthProxy(this._messageDiv, this._message);
    }, set;
  }(top);
  var describe = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var timeColEl = function(fn) {
    /**
     * @param {string} name
     * @return {?}
     */
    function get(name) {
      var me = fn.call(this, name) || this;
      me._buttons[editor.REELQUICKSTOP] = new Template("IDS_BTN_CONTINUE", name, "vbContinueBtn", "hiddenBtn", "btnContinue", "btnVideBingoCaption");
      var self = exports.SystemManager.getDeviceHandler();
      return self && (self.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return me.HandleOrientationChange();
      }), self.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return me.HandleOrientationChange();
      })), me;
    }
    return describe(get, fn), get.prototype.HandleOrientationChange = function() {
      var q = exports.DEVICE.orientation;
      this._buttons[editor.REELQUICKSTOP].HandleOrientationChange(q);
    }, get.prototype.setLabelText = function(text, value) {
    }, get.prototype.setLabelArgs = function(formatters, customFormatters) {
    }, get;
  }(selector);
  var astscanner = function() {
    /**
     * @param {!HTMLElement} spec
     * @return {undefined}
     */
    function game(spec) {
      var allTraps = this;
      this._blink = this.createBlink();
      spec.addEventListener(presenter.QuickStopEvent.QUICKSTOP, function(t) {
        return allTraps.visualFeedback(t);
      });
    }
    return game.prototype.visualFeedback = function(_) {
      if (_ || this._blink.play("show"), _ instanceof presenter.QuickStopEvent) {
        var status = _.state;
        if (status & event.SPIN || status & event.WIN) {
          this._blink.play("show");
        }
      }
    }, game.prototype.audioFeedback = function(canCreateDiscussions) {
    }, game.prototype.createSound = function() {
      return null;
    }, game.prototype.createBlink = function() {
      return self.ResourceManager.getInstance().getEntityManager().getByName("main").getAnimation("blinkLayer");
    }, game;
  }();
  var JSObjectNode = function() {
    /**
     * @param {?} data
     * @param {?} bookmarksModule
     * @param {string} uiModule
     * @return {undefined}
     */
    function App(data, bookmarksModule, uiModule) {
      /** @type {string} */
      this._layerName = "osptLayer";
      this._reelManager = bookmarksModule;
      /** @type {string} */
      this._symbolManager = uiModule;
      this._layer = data.getHierarchy(this._layerName);
      this._entityManager = self.ResourceManager.getInstance().getEntityManager();
      /** @type {!Array} */
      this._buttons = [];
      /** @type {!Array} */
      this._btnDisplays = [];
      /** @type {!Array} */
      this._btnTransforms = [];
      this.createInfoField();
      this.createButtons();
      this.createCancelButton(data);
    }
    return App.prototype.initButton = function(type, name, i, tree) {
      if (this._buttons[type][name]) {
        this._buttons[type][name].addEventListener(self.ButtonEvent.CLICK, i);
        this._buttons[type][name].addEventListener(self.ButtonHoverEvent.HOVER, tree);
        this._buttons[type][name].enable(true);
      }
    }, App.prototype.initCancelButton = function(t) {
      this._cancelButton.addEventListener(self.ButtonEvent.CLICK, t);
    }, App.prototype.enableButtons = function(name) {
      /** @type {number} */
      var i = 0;
      for (; i < this._reelManager.getNumReels(); i++) {
        /** @type {number} */
        var j = 0;
        for (; j < this._reelManager.getNumRows(i); j++) {
          this._buttons[i][j].enable(name);
          this._btnDisplays[i][j].setVisible(name);
        }
      }
      this._cancelButton.enable(name);
      if (!name) {
        this.showInfoField(false);
      }
    }, App.prototype.showInfoField = function(value) {
      this._infoField.getDisplay("").setVisible(value);
    }, App.prototype.setInfoFieldPosition = function(xValue, value) {
      this._infoField.getTransform("").setX(xValue);
      this._infoField.getTransform("").setY(value);
    }, App.prototype.showInfo = function(options, type, r, msg, content) {
      /** @type {string} */
      var pos = r ? "right" : "left";
      if ("" === content && msg.length > 0) {
        this._infoAnim.play(pos + "_vals");
      } else {
        if ("" !== content && 0 === msg.length) {
          this._infoAnim.play(pos + "_text");
        } else {
          this._infoAnim.play(pos + "_mixed");
        }
      }
      this.positionInfoField(options, type);
      this.setContent(msg, content);
      this.showInfoField(true);
    }, App.prototype.createInfoField = function() {
      this._infoField = this._entityManager.create("OsptInfo");
      this._layer.add("OsptInfo", this._infoField);
      this._infoAnim = this._infoField.getAnimation(".");
      this.showInfoField(false);
    }, App.prototype.createButtons = function() {
      /** @type {number} */
      var id = 0;
      var ld = this._reelManager.getNumReels();
      for (; id < ld; id++) {
        /** @type {!Array} */
        this._buttons[id] = [];
        /** @type {!Array} */
        this._btnDisplays[id] = [];
        /** @type {!Array} */
        this._btnTransforms[id] = [];
        /** @type {number} */
        var last = 0;
        var i = this._reelManager.getNumRows(id);
        for (; last < i; last++) {
          this.createButton(id, last);
        }
      }
    }, App.prototype.createButton = function(id, name) {
      var scope = this._entityManager.create("OsptBtn");
      this._layer.add("btn" + id + "-" + name, scope);
      this._btnDisplays[id][name] = scope.getDisplay(".");
      this._btnTransforms[id][name] = scope.getTransform(".");
      this._buttons[id][name] = scope.getButton(".");
      this.setPosition(id, name);
    }, App.prototype.createCancelButton = function(obj) {
      this._cancelButton = obj.getButton("background");
      this._cancelButton.enable(true);
    }, App.prototype.setPosition = function(index, type) {
      var widget = this._btnTransforms[index][type];
      var params = this._reelManager.getSymbolPosition(index, type);
      widget.setX(params.x);
      widget.setY(params.y);
    }, App.prototype.setContent = function(text, data) {
      /** @type {number} */
      var i = 0;
      for (; i < text.length; i++) {
        /** @type {number} */
        var f = 5 - i;
        this._infoField.getTextField("val" + f).setText(text[i]);
      }
      this._infoField.getTextField("osptText").setText(data);
    }, App.prototype.positionInfoField = function(k, options) {
      var target = this._btnTransforms[k][options];
      this.setInfoFieldPosition(target.getX(), target.getY());
    }, App;
  }();
  var rp = function() {
    /**
     * @param {?} pinboardModule
     * @param {!Object} bookmarksModule
     * @param {?} uiModule
     * @return {undefined}
     */
    function App(pinboardModule, bookmarksModule, uiModule) {
      /** @type {string} */
      this._layerName = "osptLayer";
      /** @type {!Object} */
      this._reelManager = bookmarksModule;
      this._symbolManager = uiModule;
      this._layer = pinboardModule.getHierarchy(this._layerName);
      this._entityManager = self.ResourceManager.getInstance().getEntityManager();
      /** @type {!Array} */
      this._buttons = [];
      /** @type {!Array} */
      this._btnDisplays = [];
      /** @type {!Array} */
      this._btnTransforms = [];
      this.createInfoField();
      this.createButtons();
    }
    return App.prototype.initButton = function(type, name, i, tree) {
      if (this._buttons[type][name]) {
        this._buttons[type][name].addEventListener(self.ButtonEvent.CLICK, i);
        this._buttons[type][name].addEventListener(self.ButtonHoverEvent.HOVER, tree);
        this._buttons[type][name].enable(true);
      }
    }, App.prototype.enableButtons = function(name) {
      /** @type {number} */
      var i = 0;
      for (; i < this._reelManager.getNumReels(); i++) {
        /** @type {number} */
        var j = 0;
        for (; j < this._reelManager.getNumRows(i); j++) {
          this._buttons[i][j].enable(name);
          this._btnDisplays[i][j].setVisible(name);
        }
      }
      if (!name) {
        this.showInfoField(false);
      }
    }, App.prototype.showInfoField = function(value) {
      this._infoField.getDisplay("").setVisible(value);
    }, App.prototype.setInfoFieldPosition = function(xValue, value) {
      this._infoField.getTransform("").setX(xValue);
      this._infoField.getTransform("").setY(value);
    }, App.prototype.showInfo = function(e, callback, r, args, f, type) {
      /** @type {string} */
      var d = r ? "right" : "left";
      /** @type {string} */
      var str = type === ViewType.DEFAULT ? "default" : type === ViewType.SMALL ? "small" : "tiny";
      var data = args.reverse();
      this._infoField.getAnimation("").play(d + "_" + str);
      if (f) {
        this._infoField.getAnimation("" + str).play("text");
      } else {
        if (args.length > 0) {
          this._infoField.getAnimation("" + str).play("size_" + args.length);
        }
      }
      /** @type {number} */
      var i = 0;
      for (; i < data.length; i++) {
        this._infoField.getTextField(str + ".val" + i).setText(data[i]);
      }
      this.positionInfoField(e, callback);
      this.setContent(data, f, type);
      this.showInfoField(true);
    }, App.prototype.createInfoField = function() {
      this._infoField = this._entityManager.create("OsptInfo");
      this._layer.add("OsptInfo", this._infoField);
      this._infoAnim = this._infoField.getAnimation(".");
      this.showInfoField(false);
    }, App.prototype.createButtons = function() {
      /** @type {number} */
      var id = 0;
      var ld = this._reelManager.getNumReels();
      for (; id < ld; id++) {
        /** @type {!Array} */
        this._buttons[id] = [];
        /** @type {!Array} */
        this._btnDisplays[id] = [];
        /** @type {!Array} */
        this._btnTransforms[id] = [];
        /** @type {number} */
        var last = 0;
        var i = this._reelManager.getNumRows(id);
        for (; last < i; last++) {
          this.createButton(id, last);
        }
      }
    }, App.prototype.createButton = function(id, name) {
      var scope = this._entityManager.create("OsptBtn");
      this._layer.add("btn" + id + "-" + name, scope);
      this._btnDisplays[id][name] = scope.getDisplay(".");
      this._btnTransforms[id][name] = scope.getTransform(".");
      this._buttons[id][name] = scope.getButton(".");
      this.setPosition(id, name);
    }, App.prototype.initCancelButton = function() {
    }, App.prototype.setPosition = function(index, type) {
      var widget = this._btnTransforms[index][type];
      var params = this._reelManager.getSymbolPosition(index, type);
      widget.setX(params.x);
      widget.setY(params.y);
    }, App.prototype.setContent = function(data, s, type) {
      /** @type {string} */
      var name = type === ViewType.DEFAULT ? "default" : type === ViewType.SMALL ? "small" : "tiny";
      /** @type {number} */
      var i = 0;
      for (; i < data.length; i++) {
        this._infoField.getTextField(name + ".osptVal" + i).setText(data[i]);
      }
      this._infoField.getTextField(name + ".osptText").setText(s);
      this._infoField.getTextField(name + ".osptCurrencyText").setText("IDS_AMOUNTS_IN_CURRENCY");
      var e = self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol();
      this._infoField.getTextField(name + ".osptCurrencyText").setArgs("%c=" + e);
    }, App.prototype.positionInfoField = function(k, options) {
      var target = this._btnTransforms[k][options];
      this.setInfoFieldPosition(target.getX(), target.getY());
    }, App;
  }();
  var spellAndFixFile = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var InjectResult = function(src) {
    /**
     * @param {?} col
     * @param {?} text
     * @param {!Object} callback
     * @return {?}
     */
    function editor(col, text, callback) {
      var self = src.call(this, col, text) || this;
      /** @type {!Object} */
      self._dispatcher = callback;
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return self.handleOrientationChange();
      }), scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return self.handleOrientationChange();
      })), self;
    }
    return spellAndFixFile(editor, src), editor.prototype.setPage = function(store) {
    }, editor.prototype.show = function(str) {
    }, editor.prototype.onFocusIn = function() {
      var _this = this;
      this._statsTimeOut = window.setTimeout(function() {
        _this._dispatcher.dispatch(new self.MegatonUIEvent(self.MegatonUIEvent.PAYTABLE));
        _this._dispatcher.dispatch(new self.MegatonUIEvent(self.MegatonUIEvent.TOGGLE_PAYTABLE));
      }, 3000);
    }, editor.prototype.isVisible = function() {
      return true;
    }, editor.prototype.onFocusOut = function() {
      clearTimeout(this._statsTimeOut);
    }, editor;
  }(tokens);
  var isGQL = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var cp = function(editor) {
    /**
     * @param {!Object} p
     * @return {?}
     */
    function init(p) {
      var job = editor.call(this, p) || this;
      job._rootDisplay = p.getDisplay("");
      job._shadowDisplay = p.getDisplay("shadow");
      job._shadowGeometry = p.getGeometry("shadow");
      job._counterGeometry = p.getGeometry("counter");
      job._shadowTransform = p.getTransform("shadow");
      /** @type {boolean} */
      var uboard = !self.ResourceManager.getInstance().getCreditFormatter().creditDisplay;
      return job._lineUp = new tree.HorizontalLineup(p, "counter", ["IDS_WIN_CAPTION", "value", "IDS_LBL_COINS"], 10), job._lineUp.enableElement("IDS_LBL_COINS", uboard), job;
    }
    return isGQL(init, editor), init.prototype.setMode = function(mode, group) {
      var Layer = this;
      if (void 0 === group) {
        /** @type {boolean} */
        group = false;
      }
      var o = this._animation.getClipName();
      editor.prototype.setMode.call(this, mode, group);
      if (o !== this._animation.getClipName()) {
        this._rootDisplay.setAlpha(0);
        exports.SystemManager.getScheduler().onNextUpdate(function() {
          Layer.resizeShadow();
          try {
            Layer._lineUp.update();
          } catch (t) {
          }
          Layer._rootDisplay.setAlpha(1);
        });
      }
    }, init.prototype.setMessage = function(msg, value, element) {
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      editor.prototype.setMessage.call(this, msg, value, element);
      if (this._textField.getText() && this._textField.getText().length > 0) {
        this.showShadow();
        this.resizeShadow();
      } else {
        this.hideShadow();
      }
    }, init.prototype.resizeShadow = function() {
      try {
        this._shadowTransform.setScaleX(1);
        this._shadowTransform.setScaleY(1);
        this._shadowTransform.forceUpdateTransformMatrix();
        var cssChanges = this._counterGeometry.getBoundingBox(null);
        var foodIconDefinition = this._shadowGeometry.getBoundingBox(null);
        this._shadowTransform.setScaleX(1.5 * cssChanges.width / foodIconDefinition.width);
        this._shadowTransform.setScaleY(3 * cssChanges.height / foodIconDefinition.height);
      } catch (t) {
      }
    }, init.prototype.hideShadow = function() {
      this._shadowDisplay.setVisible(false);
    }, init.prototype.showShadow = function() {
      this._shadowDisplay.setVisible(true);
    }, init.prototype.show = function(value) {
      editor.prototype.show.call(this, value);
      this._shadowDisplay.setVisible(value);
    }, init.prototype.updatePositions = function() {
      var self = this;
      this._display.setAlpha(0);
      this._coinDisplay.setAlpha(0);
      this._winDisplay.setAlpha(0);
      exports.SystemManager.getScheduler().onNextUpdate(function() {
        try {
          self._lineUp.update();
        } catch (t) {
        }
        self._display.setAlpha(1);
        self._coinDisplay.setAlpha(1);
        self._winDisplay.setAlpha(1);
      });
    }, init;
  }(url);
  var makeJSONFileReader = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var hp = function(t) {
    /**
     * @return {?}
     */
    function parser() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return makeJSONFileReader(parser, t), parser.prototype.init = function(c) {
      t.prototype.init.call(this, c);
      /** @type {!Object} */
      this._config = c;
      var me = self.ResourceManager.getInstance().getEntityManager();
      this._entity = me.create("?");
      me.add("menu", this._entity);
      var handle_star = me.create("?");
      me.add("statusbar", handle_star);
    }, parser.prototype.createInfoView = function() {
      return new cp(this._entity);
    }, parser.prototype.createFastPlayMessageView = function(context, operator, text, el) {
      return void 0 === el && (el = "PlayConfirm"), new AttributeTransformer(context, el, operator, text);
    }, parser.prototype.createFreeGameMessageView = function(options, props, ch, time, tag, childTags, staticElem) {
      return void 0 === tag && (tag = "PlayConfirm"), void 0 === childTags && (childTags = false), void 0 === staticElem && (staticElem = false), staticElem ? new StaticElement(options, tag, props, ch, time, null) : new Element(options, tag, props, ch, time, null);
    }, parser.prototype.createExpandingWinCounterView = function() {
      return new copy2(this.createWinCounterScales());
    }, parser.prototype.createInteractionFeedbackView = function(callnode) {
      return new astscanner(callnode);
    }, parser.prototype.createWinCounterScales = function() {
      return [0.4, 0.45, 0.5, 0.55, 0.6];
    }, parser.prototype.createJackpotNotificationView = function(x, obj) {
      return obj === tree.JackpotType.InGame ? new tree.JackpotNotificationViewHTML : new tree.JackpotNotificationViewCanvas;
    }, parser;
  }(root);
  var playReversibleAnimation = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var _p = function(t) {
    /**
     * @param {?} module
     * @return {?}
     */
    function a(module) {
      return t.call(this, module) || this;
    }
    return playReversibleAnimation(a, t), a.prototype.setupData = function() {
      /** @type {string} */
      this._checkboxTexts[args.STOP_ANY] = "IDS_AP_ONANYWIN";
      /** @type {string} */
      this._checkboxTexts[args.STOP_BONUS] = "IDS_AP_ONBONUS";
      /** @type {string} */
      this._checkboxTexts[args.STOP_FS] = "IDS_AP_ONFREESPINS";
      /** @type {string} */
      this._checkboxTexts[args.STOP_JACKPOT] = "IDS_AP_ONJACKPOT";
      /** @type {string} */
      this._sliderTexts[args.SLIDER1] = "IDS_AP_WINEXCEEDS";
      /** @type {string} */
      this._sliderTexts[args.SLIDER2] = "IDS_AP_BALANCEINC";
      /** @type {string} */
      this._sliderTexts[args.SLIDER3] = "IDS_AP_BALANCEDEC";
      /** @type {string} */
      this._sliderTexts[args.SLIDER4] = "IDS_AP_LOSSREACHES";
    }, a;
  }(id);
  var displayStateStr = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var fp = function(s) {
    /**
     * @param {?} e
     * @return {?}
     */
    function value(e) {
      return s.call(this, e) || this;
    }
    return displayStateStr(value, s), value.prototype.setCurrency = function(data) {
      var slider = this._sliders[row.DENOM];
      if (slider) {
        slider.setCaption(this._sliderData[row.DENOM], "> (" + data + ")");
      }
      var kpi1 = this._sliders[row.BET];
      if (kpi1) {
        kpi1.setCaption(this._sliderData[row.BET], "> (" + data + ")");
      }
    }, value.prototype.setupData = function() {
      s.prototype.setupData.call(this);
      /** @type {string} */
      this._sliderData[row.BET] = "IDS_BET_CAPTION";
      /** @type {string} */
      this._sliderData[row.LINES] = "IDS_LINES_CAPTION";
    }, value;
  }(pos);
  var izRequired = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ContentFlowItem = function(t) {
    /**
     * @param {?} callback
     * @param {?} id
     * @param {?} type
     * @return {?}
     */
    function val(callback, id, type) {
      var o = t.call(this, callback, type) || this;
      return o._betSettings = id, o;
    }
    return izRequired(val, t), val.prototype.createChildDivs = function() {
      t.prototype.createChildDivs.call(this);
      var e = RepositoryApi.getInstance();
      e.setTextWidthProxy(this._winCaption, "IDS_WIN_CAPTION");
      e.setTextWidthProxy(this._moneybetCaption, "IDS_BET_CAPTION");
    }, val.prototype.setBet = function(b, start) {
      t.prototype.setBet.call(this, b, start);
      this._coinsBet.innerHTML = this._betSettings.betCoins.toString();
      RepositoryApi.getInstance().getScalableDiv(this._coinsBetWrapper).update();
    }, val.prototype.setBalance = function(id) {
      this._moneyBalance.innerHTML = this._moneyFormatter.MoneyToString(id, self.MoneyFormatterFlag.FORCE_DECIMAL);
      /** @type {string} */
      this._coinsBalance.innerHTML = String(Math.floor((id > 0 ? id : 0) / this._betSettings.denomination));
      RepositoryApi.getInstance().getScalableDiv(this._moneyBalanceWrapper).update();
      RepositoryApi.getInstance().getScalableDiv(this._coinsBalanceWrapper).update();
    }, val.prototype.setFreeGames = function(pingErr) {
      var e = RepositoryApi.getInstance();
      this._moneyBetWrapper.classList.add("fg");
      this._gamePanel.classList.add("fg");
      this._buttonsWrapper.classList.add("fg");
      this._clockWrapper.classList.add("fg");
      this._moneyWinWrapper.classList.add("fg");
      this._moneyBalanceWrapper.classList.add("fg");
      this._coinsBalanceWrapper.classList.add("fg");
      this._pngLogo.classList.add("fg");
      this._freeGameBetWrapper.classList.remove("nodisplay");
      this._scales = cdn_url.WRAPPER_SCALES_FG;
      e.setTextWidthProxy(this._balanceCaption, "IDS_MENU_TOTALWIN_ALT");
      e.getScalableDiv(this._moneyBalanceWrapper).update();
      if (this._config.asCredit) {
        e.setTextWidthProxy(this._moneybetCaption, "IDS_FREEGAMES_CAPTION");
        e.setTextWidthProxy(this._moneyBet, pingErr.toString());
        /** @type {string} */
        this._moneyBetWrapper.style.display = "";
        /** @type {string} */
        this._coinsBetWrapper.style.display = "";
      } else {
        e.setTextWidthProxy(this._coinsCaption, "IDS_FREEGAMES_CAPTION");
        e.setTextWidthProxy(this._coinsBalance, pingErr.toString());
        /** @type {string} */
        this._moneyBetWrapper.style.display = "none";
        /** @type {string} */
        this._coinsBetWrapper.style.display = "none";
      }
      this.updateScalableDivs(exports.DEVICE.orientation);
    }, val.prototype.setTotalWin = function(level) {
      var container = this._moneyFormatter.MoneyToString(level, self.MoneyFormatterFlag.FORCE_DECIMAL);
      RepositoryApi.getInstance().setTextWidthProxy(this._moneyBalance, container);
    }, val.prototype.setNormalMode = function() {
      this._scales = cdn_url.WRAPPER_SCALES;
      var t = RepositoryApi.getInstance();
      t.setTextWidthProxy(this._coinsCaption, "IDS_COINS_CAPTION");
      t.setTextWidthProxy(this._moneybetCaption, "IDS_BET_CAPTION");
      t.setTextWidthProxy(this._balanceCaption, this.getBalanceLabel());
      t.setTextWidthProxy(this._winCaption, "IDS_WIN_CAPTION");
      t.setTextWidthProxy(this._moneybetCaption, "IDS_BET_CAPTION");
      this._moneyBetWrapper.classList.remove("fg");
      this._gamePanel.classList.remove("fg");
      this._buttonsWrapper.classList.remove("fg");
      this._moneyWinWrapper.classList.remove("fg");
      this._pngLogo.classList.remove("fg");
      this._moneyBalanceWrapper.classList.remove("fg");
      this._coinsBalanceWrapper.classList.remove("fg");
      this._clockWrapper.classList.remove("fg");
      this._freeGameBetWrapper.classList.add("nodisplay");
      /** @type {string} */
      this._moneyBetWrapper.style.display = "";
      /** @type {string} */
      this._coinsBetWrapper.style.display = "";
      RepositoryApi.getInstance().getScalableDiv(this._moneyBalanceWrapper).update();
      RepositoryApi.getInstance().getScalableDiv(this._coinsBetWrapper).update();
      this.updateScalableDivs(exports.DEVICE.orientation);
    }, val.prototype.HandleOrientationChange = function() {
      t.prototype.HandleOrientationChange.call(this);
    }, val;
  }(cdn_url);
  var translationFor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var att = function(field) {
    /**
     * @return {?}
     */
    function WorkerDomAdapter() {
      return null !== field && field.apply(this, arguments) || this;
    }
    return translationFor(WorkerDomAdapter, field), WorkerDomAdapter.prototype.createGamePanelView = function() {
      return new xc(this._entity);
    }, WorkerDomAdapter.prototype.createStatusBarView = function(el) {
      return new ContentFlowItem(this._container, el, this._config);
    }, WorkerDomAdapter.prototype.createButtonView = function() {
      return new testDataContainer(document.getElementById("buttonsContainer"));
    }, WorkerDomAdapter.prototype.createBetPanelView = function() {
      return new fp(this._container);
    }, WorkerDomAdapter.prototype.createPaytableView = function(value, param, connector) {
      return new InjectResult("Paytable", this._container, connector);
    }, WorkerDomAdapter.prototype.createOSPTView = function(x, n, elem) {
      return new JSObjectNode(x, n, elem);
    }, WorkerDomAdapter.prototype.createSettingsView = function() {
      /** @type {!Array} */
      var after = [];
      return this._config.hideSound || after.push(s.SOUND), this._config.hideAutoAdjustBet || after.push(s.AUTOADJUSTBET), after.push(s.LEFTHANDMODE), this._config.hideFastPlay || after.push(s.FASTPLAY), new AsyncFor(this._container, "SettingsDlg_tablegames", after);
    }, WorkerDomAdapter.prototype.createMenuView = function(signature, args, var_args) {
      return new Signature(signature, args, var_args);
    }, WorkerDomAdapter.prototype.createSplitView = function(CSSSelector, parentElement, position) {
      return new Resume("IDS_MENU_BET_VSLOT", this._container, parentElement, position);
    }, WorkerDomAdapter.prototype.createAutoplaySettingsView = function() {
      return new _p(this._container);
    }, WorkerDomAdapter.prototype.createGameRulesView = function(clickRepeater, e) {
      return new NavigationError(this._container, clickRepeater, e);
    }, WorkerDomAdapter.prototype.createGameHistoryView = function(eta, lmbda, n) {
      return new StateChange(this._container, eta, lmbda, n);
    }, WorkerDomAdapter.prototype.createCashierView = function(timeout, value) {
      return new Context(this._container, timeout, this._config.urlMode, value);
    }, WorkerDomAdapter.prototype.createGameButtonView = function() {
      return new timeColEl(document.getElementById("buttonsContainer"));
    }, WorkerDomAdapter.prototype.createOrientationPromptView = function() {
      return new phylogram(this._container);
    }, WorkerDomAdapter.prototype.createPlayForRealMenuViewMobile = function(matchingTag) {
      return new MatchedTags(this._container, matchingTag);
    }, WorkerDomAdapter.prototype.createMasterView = function() {
      return new Ya;
    }, WorkerDomAdapter.prototype.createJackpotPanelViewBase = function() {
      return new Gu;
    }, WorkerDomAdapter.prototype.createGameNameView = function() {
      return new ShapeHandlerClass(this._container);
    }, WorkerDomAdapter;
  }(hp);
  var ClassLink = function() {
    /**
     * @param {!Object} dispatcher
     * @param {!Object} model
     * @param {string} gl
     * @param {!Element} view
     * @param {number} domHelper
     * @return {undefined}
     */
    function View(dispatcher, model, gl, view, domHelper) {
      if (void 0 === domHelper) {
        /** @type {number} */
        domHelper = 6;
      }
      var me = this;
      /** @type {!Object} */
      this._data = model;
      /** @type {string} */
      this._roundHandler = gl;
      /** @type {!Element} */
      this._view = view;
      /** @type {number} */
      this._numberOfChips = 0;
      /** @type {number} */
      this._displayedChips = 6;
      /** @type {number} */
      this._offset = 0;
      /** @type {!Object} */
      this._dispatcher = dispatcher;
      view.init(function(value) {
        return me.onSelect(value);
      }, function(elem) {
        return me.onSwipe(elem);
      }, function(t) {
        return me.onMoveButton(t);
      });
      dispatcher.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      });
      model.addListener(function(store) {
        return void 0 === store && (store = null), me.onDataChange(store);
      }, null);
      this.onDataChange();
    }
    return View.prototype.onShowButtons = function(match) {
      this._view.enable(1 === match.groupId);
    }, View.prototype.onDataChange = function(data) {
      if (void 0 === data) {
        /** @type {null} */
        data = null;
      }
      if (!(data && !data.isChanged(IASNoneLeftExtension.FIELD_CHIPVALUES))) {
        this._numberOfChips = this._data.chipValues.length;
        this._view.setChipValues(this._data.chipValues);
      }
      if (!(data && !data.isChanged(IASNoneLeftExtension.FIELD_CHIPINDEX))) {
        this._view.setChip(this._data.chip);
        this._view.updateChipPositions(this._offset);
      }
    }, View.prototype.onSelect = function(data) {
      /** @type {!Function} */
      this._data.chip = data;
    }, View.prototype.onSwipe = function(elem) {
      /** @type {number} */
      this._offset = elem;
      this._data.chip = this._data.chipValues[this._offset + this._displayedChips - 2];
    }, View.prototype.onMoveButton = function(size) {
      var n_ref = this._view.getStackLength();
      /** @type {number} */
      var n = this._numberOfChips - n_ref;
      var i = this._data.chipIndex + size;
      /** @type {number} */
      i = Math.max(0, Math.min(this._numberOfChips - 1, i));
      this._offset += size;
      /** @type {number} */
      this._offset = Math.max(0, Math.min(n, this._offset));
      this._data.chip = this._data.chipValues[i];
      this._dispatcher.dispatch(new obj(obj.CHIPTRAY_MOVE));
    }, View;
  }();
  var v = function() {
    /**
     * @return {undefined}
     */
    function v() {
    }
    return v.PLAY = "PLAY", v.ROULETTE_PLAY = "ROULETTE_PLAY", v.DEAL = "DEAL", v.REBET = "REBET", v.CLEARALL = "CLEARALL", v.CLEARTABLE = "CLEARTABLE", v.CONTINUE = "CONTINUE", v.HIT = "HIT", v.CALL = "CALL", v.DOUBLE = "DOUBLE", v.SPLIT = "SPLIT", v.STAND = "STAND", v.SURRENDER = "SURRENDER", v.FOLD = "FOLD", v.YES = "YES", v.YES_TO_ALL = "YES_TO_ALL", v.NO = "NO", v.NO_TO_ALL = "NO_TO_ALL", v.UNDO = "UNDO", v.STATISTICS = "STATISTICS", v.PRESET = "PRESET", v;
  }();
  var fmt = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var user = function(option) {
    /**
     * @return {?}
     */
    function exports() {
      return null !== option && option.apply(this, arguments) || this;
    }
    return fmt(exports, option), exports.SOUND = "SOUND", exports.HELP = "HELP", exports.MENU = "MENU", exports.MOBILE_MENU = "MOBILE_MENU", exports.EXIT = "EXIT", exports.PLAYFORREAL = "PLAYFORREAL", exports.HISTORY = "HISTORY", exports.FASTPLAY = "FASTPLAY", exports.TUTORIAL = "TUTORIAL", exports;
  }(data);
  var codes = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.CHIPTRAY = "CHIPTRAY", t;
  }();
  var instance = function() {
    /**
     * @return {undefined}
     */
    function VarsModel() {
    }
    return VarsModel.SOUND = "SOUND", VarsModel.VOICEOVER = "VOICEOVER", VarsModel.MUSIC = "MUSIC", VarsModel.AUTOCLEARWIN = "AUTOCLEARWIN", VarsModel.AUTOCLEARLOSE = "AUTOCLEARLOSE", VarsModel.AUTODEAL = "AUTODEAL", VarsModel.LEFTHANDMODE = "LEFTHANDMODE", VarsModel.FASTPLAY = "FASTPLAY", VarsModel.HISTORYSIMPLE = "HISTORYSIMPLE", VarsModel.HISTORYADVANCED = "HISTORYADVANCED", VarsModel.AUTOCLEARENDOFROUND = "AUTOCLEARENDOFROUND", VarsModel;
  }();
  var next = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MapLayer = function(t) {
    /**
     * @param {?} start
     * @param {!Object} m
     * @param {!Object} format
     * @param {?} ext
     * @return {?}
     */
    function render(start, m, format, ext) {
      var _this = t.call(this, start) || this;
      /** @type {!Object} */
      _this._limits = m;
      m.addListener(function() {
        return _this.onLimits();
      });
      /** @type {!Object} */
      _this._popup = format;
      _this._sign = ext;
      var item = ext.getButton();
      return item.enable(true), item.addEventListener(self.ButtonHoverEvent.HOVER, function(item) {
        return _this.onHover(item);
      }), item.addEventListener(self.ButtonEvent.CLICK, function(play) {
        return _this.onClick(play);
      }), _this;
    }
    return next(render, t), render.prototype.onHover = function(e) {
      this._popup.show(e.state);
    }, render.prototype.onClick = function(elem) {
      this._dispatcher.dispatch(new obj(obj.SHOWLIMITS));
    }, render.prototype.onLimits = function() {
      var Math = self.ResourceManager.getInstance().getMoneyFormatter();
      if (this._popup) {
        var percent = self.MoneyFormatterFlag.NO_DECIMALS;
        var limits = this._limits.limits;
        /** @type {number} */
        var i = 0;
        var ln = limits.length;
        for (; i < ln; i++) {
          if (limits[i] % 100 != 0) {
            percent = self.MoneyFormatterFlag.FORCE_DECIMAL;
            break;
          }
        }
        /** @type {number} */
        i = 0;
        ln = limits.length;
        for (; i < ln; i++) {
          this._popup.setText("limit" + (i + 1), Math.MoneyToString(limits[i], percent));
        }
      }
      if (this._sign) {
        var i = this._limits.getMinLimit();
        var percentile = this._limits.getMaxLimit();
        percent = i % 100 != 0 || percentile % 100 != 0 ? self.MoneyFormatterFlag.FORCE_DECIMAL : self.MoneyFormatterFlag.NO_DECIMALS;
        var title = Math.MoneyToString(i, percent);
        var color = Math.MoneyToString(percentile, percent);
        this._sign.setLimitsText(title, color, "");
      }
    }, render;
  }(exports.EventProcessor);
  var _deleteSingle = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Path = function(session) {
    /**
     * @param {!HTMLElement} actions
     * @param {boolean} pattern
     * @param {!Element} str
     * @return {?}
     */
    function self(actions, pattern, str) {
      var me = session.call(this, actions) || this;
      return me._view = str, me._settingsController = pattern, actions.addEventListener(obj.MENU, function() {
        return me.onSettings();
      }), actions.addEventListener(obj.MOBILE_MENU, function() {
        return me.onShow();
      }), me._settingsController && actions.addEventListener(obj.SHOWLIMITS, function() {
        return me.onShowLimits();
      }), me;
    }
    return _deleteSingle(self, session), self.prototype.onShow = function() {
      /** @type {boolean} */
      var result = !this._view.isVisible();
      if (!result && this._settingsController) {
        this._settingsController.save();
      }
      var state = result ? obj.MENUSHOW : obj.MENUHIDE;
      this._dispatcher.dispatch(new obj(state));
      this._view.show(result);
    }, self.prototype.onSettings = function() {
      this.onShow();
      this._dispatcher.dispatch(new obj(obj.SETTINGS));
    }, self.prototype.onShowLimits = function() {
      if (!this._view.isVisible()) {
        this.onShow();
        this._view.setPage(1);
      }
    }, self;
  }(exports.EventProcessor);
  var def = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Selector = function($) {
    /**
     * @param {!HTMLElement} list
     * @param {!Object} shape
     * @param {!Object} event
     * @param {!Date} ui
     * @param {!Object} config
     * @return {?}
     */
    function add(list, shape, event, ui, config) {
      var me = $.call(this, list, ui, config) || this;
      /** @type {!Date} */
      me._statusBarView = ui;
      /** @type {!Object} */
      me._roundHandler = shape;
      /** @type {!Object} */
      me._gameSettings = event;
      /** @type {number} */
      me._prevMinutes = -1;
      /** @type {boolean} */
      me._freeGameMode = false;
      /** @type {boolean} */
      me._isAutoplay = false;
      /** @type {boolean} */
      me._needExitCheckOnAutoplayEnd = true;
      shape.addListener(function() {
        return me.onRoundStateChange();
      });
      event.addListener(function(t) {
        return me.onSettingsChange(t);
      });
      var isSelected = config.demoPlay && config.playForRealSigns;
      var filterContentFilterByGeometry = config.hideHistory || config.demoPlay;
      return me.initiateButton(user.SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(user.MOBILE_SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(user.FASTPLAY, config.hideFastPlay, config.disableFastPlay, function() {
        return me.onFastPlay();
      }), me.initiateButton(user.HELP, config.hideHelp, config.disableHelp, function() {
        return me.onHelp();
      }), me.initiateButton(user.EXIT, config.hideExit, false, function() {
        return me.onExit();
      }), me.initiateButton(user.MENU, false, false, function() {
        return me.onSettings();
      }), me.initiateButton(user.TUTORIAL, true, true, function() {
        return me.onTutorial();
      }), me.initiateButton(user.MOBILE_MENU, false, false, function() {
        return me.onMenu();
      }), me.initiateButton(user.HISTORY, filterContentFilterByGeometry, config.disableHistory, function() {
        return me.onHistory();
      }), me.initiateButton(user.PLAYFORREAL, !isSelected, !isSelected, function() {
        return me.onPlayForReal();
      }), ui.showClock(config.displayClock), config.disableSound && (ui.selectButton(user.SOUND, false), ui.selectButton(user.MOBILE_SOUND, false)), config.hideExit ? me._needExitCheckOnAutoplayEnd = false : config.disableExitInRound ? list.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(link) {
        return me.onShowExitButton(link);
      }) : me._needExitCheckOnAutoplayEnd = false, list.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(link) {
        return me.onShowExitButton(link);
      }), list.addEventListener(obj.MENUSHOW, function(canCreateDiscussions) {
        return me.onMenuShow(true);
      }), list.addEventListener(obj.MENUHIDE, function(canCreateDiscussions) {
        return me.onMenuShow(false);
      }), list.addEventListener(self.SplashEvent.SPLASH_SHOW, function(canCreateDiscussions) {
        return me.onSplash(true);
      }), list.addEventListener(self.SplashEvent.SPLASH_HIDE, function(canCreateDiscussions) {
        return me.onSplash(false);
      }), list.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function(canCreateDiscussions) {
        return me.onAutoplayStarted();
      }), list.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function(canCreateDiscussions) {
        return me.onAutoplayStopped();
      }), me._config = config, ui.showPNGLogo(config.showPoweredBy), me.onSplash(false), me;
    }
    return def(add, $), add.prototype.onSettingsChange = function(a) {
      this._statusBarView.selectButton(user.SOUND, !this._gameSettings.sound);
      this._statusBarView.selectButton(user.MOBILE_SOUND, !this._gameSettings.sound);
      this._statusBarView.setLeftHandMode(this._gameSettings.leftHandMode);
      this._statusBarView.selectButton(user.FASTPLAY, !this._gameSettings.fastPlay);
      if (a.isChanged(self.SettingsChange.SOUND)) {
        if (this._gameSettings.sound) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.SOUND_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.SOUND_OFF));
        }
      }
      if (a.isChanged(self.SettingsChange.FASTPLAY)) {
        if (this._gameSettings.fastPlay) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.FASTPLAY_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.FASTPLAY_OFF));
        }
      }
      if (a.isChanged(self.SettingsChange.LEFTHANDMODE)) {
        if (this._gameSettings.leftHandMode) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.LEFTHANDMODE_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.LEFTHANDMODE_OFF));
        }
      }
    }, add.prototype.onRoundStateChange = function() {
      if (!this._freeGameMode) {
        this._statusBarView.setBalance(this._roundHandler.balance);
      }
      this._statusBarView.setBet(this._roundHandler.bet, this._freeGameMode);
      this._statusBarView.setWin(this._roundHandler.win);
    }, add.prototype.onHelp = function() {
      this._dispatcher.dispatch(new obj(obj.HELP));
    }, add.prototype.onExit = function() {
      exports.SystemManager.getScheduler().pause(false);
      this._dispatcher.dispatch(new obj(obj.EXIT));
    }, add.prototype.onSound = function() {
      this._dispatcher.dispatch(new obj(obj.TOGGLE_SOUND));
      this._gameSettings.toggleSound();
    }, add.prototype.onFastPlay = function() {
      this._dispatcher.dispatch(new obj(obj.TOGGLE_FAST_PLAY));
      this._gameSettings.toggleFastPlay();
    }, add.prototype.onSettings = function() {
      this._dispatcher.dispatch(new obj(obj.MENU));
    }, add.prototype.onMenu = function() {
      this._dispatcher.dispatch(new obj(obj.MOBILE_MENU));
    }, add.prototype.onHistory = function() {
      this._dispatcher.dispatch(new obj(obj.HISTORY, this._userId));
    }, add.prototype.onPlayForReal = function() {
      this._dispatcher.dispatch(new obj(obj.PLAYFORREAL));
    }, add.prototype.onShowExitButton = function(tag) {
      this._statusBarView.enableButton(user.EXIT, tag.groupId == State.BET && !this._isAutoplay);
    }, add.prototype.onShowButtons = function(self) {
      this._statusBarView.enableButton(user.MENU, self.groupId === State.BET && !this._isAutoplay);
    }, add.prototype.onMenuShow = function(e) {
      this._statusBarView.selectButton(user.MENU, e && !this._isAutoplay);
      this._statusBarView.showElement(codes.CHIPTRAY, !e);
      this._statusBarView.selectButton(user.MOBILE_MENU, e);
    }, add.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
    }, add.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
      if (this._needExitCheckOnAutoplayEnd) {
        this._statusBarView.enableButton(user.EXIT, !this._roundHandler.running);
      }
      this._statusBarView.enableButton(user.MENU, !this._roundHandler.running);
    }, add.prototype.onSplash = function(b) {
      this._statusBarView.onSplash(b);
      this._statusBarView.showButton(user.MOBILE_SOUND, b && !this._config.hideSound);
      this._statusBarView.showButton(user.MOBILE_MENU, !b);
    }, add.prototype.onTutorial = function() {
    }, add;
  }(Zepto);
  var decodeCellType = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RelativeElement = function(type) {
    /**
     * @param {!HTMLElement} e
     * @param {!Object} l
     * @param {!Object} str
     * @param {!Element} val
     * @return {?}
     */
    function set(e, l, str, val) {
      var me = type.call(this, e) || this;
      return me._roundHandler = l, me._betHandler = str, me._view = val, me._useDealButton = false, me._useRouletteButton = false, e.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), l.addListener(function() {
        return me.onRoundStateChange();
      }), val.initButton(v.PLAY, function() {
        return me.onSpin();
      }), val.initButton(v.ROULETTE_PLAY, function() {
        return me.onSpin();
      }), val.initButton(v.DEAL, function() {
        return me.onSpin();
      }), val.initButton(v.CLEARTABLE, function() {
        return me.onClearTable();
      }), val.initButton(v.REBET, function() {
        return me.onRebet();
      }), val.initButton(v.CLEARALL, function() {
        return me.onClearAll();
      }), val.initButton(v.CONTINUE, function() {
        return me.onContinue();
      }), val.initButton(v.HIT, function() {
        return me.onHit();
      }), val.initButton(v.CALL, function() {
        return me.onCall();
      }), val.initButton(v.DOUBLE, function() {
        return me.onDouble();
      }), val.initButton(v.SPLIT, function() {
        return me.onSplit();
      }), val.initButton(v.STAND, function() {
        return me.onStand();
      }), val.initButton(v.SURRENDER, function() {
        return me.onSurrender();
      }), val.initButton(v.FOLD, function() {
        return me.onFold();
      }), val.initButton(v.YES, function() {
        return me.onInsuranceYes();
      }), val.initButton(v.NO, function() {
        return me.onInsuranceNo();
      }), val.initButton(v.YES_TO_ALL, function() {
        return me.onInsuranceYesToAll();
      }), val.initButton(v.NO_TO_ALL, function() {
        return me.onInsuranceNoToAll();
      }), val.initButton(v.UNDO, function() {
        return me.onUndo();
      }), val.initButton(v.STATISTICS, function() {
        return me.onStatistics();
      }), val.initButton(v.PRESET, function() {
        return me.onPreset();
      }), val.showButton(v.ROULETTE_PLAY, false), val.showButton(v.HIT, false), val.showButton(v.CALL, false), val.showButton(v.PLAY, false), val.showButton(v.DEAL, false), val.showButton(v.DOUBLE, false), val.showButton(v.SPLIT, false), val.showButton(v.STAND, false), val.showButton(v.SURRENDER, false), val.showButton(v.FOLD, false), val.showButton(v.YES, false), val.showButton(v.NO, false), val.showButton(v.YES_TO_ALL, false), val.showButton(v.NO_TO_ALL, false), val.showButton(v.UNDO, false), val.showButton(v.STATISTICS, 
      false), val.showButton(v.PRESET, false), me._state = State.NONE, me._view.enableButton(v.CLEARTABLE, true), me._view.enableButton(v.CLEARALL, true), me._view.enableButton(v.REBET, true), me._view.enableButton(v.CONTINUE, true), me._buttonSnd = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.DESKTOP ? self.ResourceManager.getInstance().getSndManager().create("btnClick") : null, me.updateButtons(), me;
    }
    return decodeCellType(set, type), set.prototype.onResourceEvent = function(canCreateDiscussions) {
    }, set.prototype.onShowButtons = function(data) {
      this._state = data.groupId;
      this.updateButtons();
    }, set.prototype.onRoundStateChange = function() {
      this.updateButtons();
    }, set.prototype.updateButtons = function() {
      var j = this._betHandler.hasSavedBets();
      /** @type {boolean} */
      var bypass = 0 !== this._roundHandler.bet;
      /** @type {boolean} */
      var newValue = this._state === State.CONTINUE;
      /** @type {boolean} */
      var i = this._state === State.CLEAR || this._state === State.BET && !bypass;
      var showNoContacs = i && j;
      /** @type {boolean} */
      var _defaultPin = this._state === State.CLEAR;
      this._view.showButton(v.CLEARTABLE, i);
      this._view.enableButton(v.CLEARTABLE, _defaultPin);
      this._view.showButton(v.REBET, showNoContacs);
      this._view.enableButton(v.REBET, this._betHandler.getPrevTotalBet() <= this._roundHandler.balance);
      this._view.showButton(v.CONTINUE, newValue);
      var id = this._useRouletteButton ? v.ROULETTE_PLAY : this._useDealButton ? v.DEAL : v.PLAY;
      /** @type {boolean} */
      var title = this._state === State.BET && (bypass || !j);
      var value = this._betHandler.isValid();
      this._view.showButton(id, title);
      this._view.enableButton(id, value);
      this._view.showButton(v.CLEARALL, title);
      this._view.enableButton(v.CLEARALL, this._state === State.BET && bypass);
      if (title) {
        this._view.showButton(v.CLEARTABLE, false);
      }
    }, set.prototype.onSpin = function() {
      this._dispatcher.dispatch(new obj(obj.PLAY));
      this._betHandler.saveBets();
      this.onButton();
    }, set.prototype.onContinue = function() {
      this._dispatcher.dispatch(new obj(obj.CONTINUE));
      this.onButton();
    }, set.prototype.onRebet = function() {
      this._dispatcher.dispatch(new obj(obj.REBET));
      this.onButton();
    }, set.prototype.onClearAll = function() {
      this._betHandler.clearBets();
      this.onButton();
    }, set.prototype.onClearTable = function() {
      this._dispatcher.dispatch(new obj(obj.CLEARTABLE));
      this.onButton();
    }, set.prototype.onUndo = function() {
      this._dispatcher.dispatch(new obj(obj.UNDO));
      this.onButton();
    }, set.prototype.onStatistics = function() {
      this._dispatcher.dispatch(new obj(obj.STATISTICS));
      this.onButton();
    }, set.prototype.onPreset = function() {
      this._dispatcher.dispatch(new obj(obj.PRESET));
      this.onButton();
    }, set.prototype.onButton = function() {
      if (this._buttonSnd) {
        this._buttonSnd.play();
      }
    }, set.prototype.onStand = function() {
      this._dispatcher.dispatch(new obj(obj.STAND));
    }, set.prototype.onDouble = function() {
      this._dispatcher.dispatch(new obj(obj.DOUBLE));
    }, set.prototype.onSplit = function() {
      this._dispatcher.dispatch(new obj(obj.SPLIT));
    }, set.prototype.onHit = function() {
      this._dispatcher.dispatch(new obj(obj.HIT));
    }, set.prototype.onSurrender = function() {
      this._dispatcher.dispatch(new obj(obj.SURRENDER));
    }, set.prototype.onInsuranceYes = function() {
      this._dispatcher.dispatch(new obj(obj.INSURANCE_YES));
    }, set.prototype.onInsuranceNo = function() {
      this._dispatcher.dispatch(new obj(obj.INSURANCE_NO));
    }, set.prototype.onInsuranceYesToAll = function() {
      this._dispatcher.dispatch(new obj(obj.INSURANCE_YES_TO_ALL));
    }, set.prototype.onInsuranceNoToAll = function() {
      this._dispatcher.dispatch(new obj(obj.INSURANCE_NO_TO_ALL));
    }, set.prototype.onCall = function() {
      this._dispatcher.dispatch(new obj(obj.CALL));
    }, set.prototype.onFold = function() {
      this._dispatcher.dispatch(new obj(obj.FOLD));
    }, set;
  }(exports.EventProcessor);
  var makeGetMethodReturnsExpectedValueTest = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var a = function(_this) {
    /**
     * @param {!HTMLElement} connection
     * @param {!Object} settings
     * @param {?} data
     * @param {!Object} options
     * @return {?}
     */
    function setup(connection, settings, data, options) {
      var self = _this.call(this, connection, settings, data, 0) || this;
      /** @type {boolean} */
      self._isSettingsButtonSoundEnabled = true;
      /** @type {!Object} */
      self._settings = settings;
      settings.addListener(function() {
        return self.onSettingsChange();
      });
      connection.addEventListener(obj.SETTINGS, self.show.bind(self));
      data.initButton(instance.SOUND, settings.toggleSound.bind(settings));
      data.initButton(instance.VOICEOVER, settings.toggleVoiceOver.bind(settings));
      data.initButton(instance.MUSIC, settings.toggleMusic.bind(settings));
      data.initButton(instance.AUTOCLEARWIN, settings.toggleAutoClearWin.bind(settings));
      data.initButton(instance.AUTOCLEARLOSE, settings.toggleAutoClearLose.bind(settings));
      data.initButton(instance.AUTOCLEARENDOFROUND, settings.toggleAutoClearRoundEnd.bind(settings));
      data.initButton(instance.LEFTHANDMODE, settings.toggleLeftHandMode.bind(settings));
      data.initButton(instance.AUTODEAL, settings.toggleAutoDeal.bind(settings));
      data.initButton(instance.FASTPLAY, settings.toggleFastPlay.bind(settings));
      data.initButton(instance.HISTORYSIMPLE, function() {
        return self.onHistorySimple();
      });
      data.initButton(instance.HISTORYADVANCED, function() {
        return self.onHistoryAdvanced();
      });
      var readOnlyFn = options.baccaratHistory;
      if (!(0 != readOnlyFn && 3 != readOnlyFn && 4 != readOnlyFn)) {
        data.showButton(instance.HISTORYSIMPLE, false);
        data.showTextfield(instance.HISTORYSIMPLE, false);
      }
      if (readOnlyFn < 3) {
        data.showButton(instance.HISTORYADVANCED, false);
        data.showTextfield(instance.HISTORYADVANCED, false);
      }
      self._cookieStore = new exports.CookieSerializer("settings_" + options.gameId);
      self._cookieStore.load(settings);
      /** @type {boolean} */
      var highlightedColumn = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.MOBILE;
      return options.disableFastPlay ? (settings.setFastPlay(false), data.enableButton(instance.FASTPLAY, false)) : (void 0 == settings.fastPlay || options.hideFastPlay && highlightedColumn) && settings.setFastPlay(options.defaultFastPlay), options.disableSound ? (settings.setSound(false), settings.voiceOver = false, data.enableButton(instance.SOUND, false), data.enableButton(instance.VOICEOVER, false), data.enableButton(instance.MUSIC, false)) : options.hideSound && highlightedColumn ? (options.defaultSound ? 
      void 0 === settings.voiceOver && (settings.voiceOver = options.defaultSound) : settings.voiceOver = false, self.setInitialSound(options.defaultSound, settings, options)) : void 0 == settings.sound && self.setInitialSound(options.defaultSound, settings, options), self;
    }
    return makeGetMethodReturnsExpectedValueTest(setup, _this), setup.prototype.setInitialSound = function(key, msg, dstId) {
      /** @type {boolean} */
      msg.wasVoiceOver = true;
      msg.setSound(key);
    }, setup.prototype.save = function() {
      this._cookieStore.save(this._model);
    }, setup.prototype.onSelect = function(p) {
      p.apply(this._model);
    }, setup.prototype.onHistorySimple = function() {
      if (!this._settings.gameHistorySimple) {
        /** @type {boolean} */
        this._settings.gameHistoryAdvanced = false;
      }
      this._settings.toggleGameHistorySimple();
    }, setup.prototype.onHistoryAdvanced = function() {
      if (!this._settings.gameHistoryAdvanced) {
        /** @type {boolean} */
        this._settings.gameHistorySimple = false;
      }
      this._settings.toggleGameHistoryAdvanced();
    }, setup.prototype.onSettingsChange = function() {
      if (this._isSettingsButtonSoundEnabled) {
        this._dispatcher.dispatch(new obj(obj.SETTINGS_CHANGE));
      }
      var e = this._model;
      this._view.selectButton(instance.SOUND, e.sound);
      this._view.selectButton(instance.VOICEOVER, e.voiceOver);
      this._view.selectButton(instance.MUSIC, e.music);
      this._view.selectButton(instance.AUTOCLEARWIN, e.autoClearWin);
      this._view.selectButton(instance.AUTOCLEARLOSE, e.autoClearLose);
      this._view.selectButton(instance.AUTOCLEARENDOFROUND, e.autoClearRoundEnd);
      this._view.selectButton(instance.LEFTHANDMODE, e.leftHandMode);
      this._view.selectButton(instance.AUTODEAL, e.autoDeal);
      this._view.selectButton(instance.FASTPLAY, e.fastPlay);
      this._view.selectButton(instance.HISTORYSIMPLE, e.gameHistorySimple);
      this._view.selectButton(instance.HISTORYADVANCED, e.gameHistoryAdvanced);
      this._view.enableButton(instance.VOICEOVER, e.sound);
      this._view.enableButton(instance.MUSIC, e.sound);
      this.save();
    }, setup.prototype.onOk = function() {
      _this.prototype.onOk.call(this);
      this._dispatcher.dispatch(new obj(obj.MENUHIDE));
    }, setup.prototype.onCancel = function() {
      var that = this._model;
      var key = that.sound;
      var keyfinder = that.voiceOver;
      var n = that.music;
      var dataArea = that.autoClearWin;
      var lockMaskWrap = that.autoClearLose;
      var lockMask = that.autoClearRoundEnd;
      var $groupElement = that.autoDeal;
      var resourceSpecs = that.leftHandMode;
      var p = that.gameHistorySimple;
      var previousButtonBar = that.gameHistoryAdvanced;
      /** @type {boolean} */
      this._isSettingsButtonSoundEnabled = false;
      _this.prototype.onCancel.call(this);
      that.setSound(key);
      that.voiceOver = keyfinder;
      that.music = n;
      that.autoClearWin = dataArea;
      that.autoClearLose = lockMaskWrap;
      that.autoClearRoundEnd = lockMask;
      that.autoDeal = $groupElement;
      that.leftHandMode = resourceSpecs;
      that.gameHistorySimple = p;
      that.gameHistoryAdvanced = previousButtonBar;
      /** @type {boolean} */
      this._isSettingsButtonSoundEnabled = true;
      this._dispatcher.dispatch(new obj(obj.MENUHIDE));
    }, setup;
  }(target);
  var emitTestAsync = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var way_list = function(test) {
    /**
     * @param {(Object|string)} value
     * @param {string} e
     * @param {string} d
     * @param {!Object} options
     * @param {boolean} next
     * @param {boolean} done
     * @param {?} assert
     * @return {?}
     */
    function b(value, e, d, options, next, done, assert) {
      var self = test.call(this, value, options, assert) || this;
      var c = assert.createChipView();
      self.createChipController(value, e, next, c, 6);
      var p = assert.createStatusBarView(c);
      self.createStatusBarController(value, next, d, options, p);
      var h = assert.createButtonView();
      self.createButtonController(value, next, done, h);
      var undefined = assert.createSettingsView();
      var obj = new a(value, d, undefined, options);
      self._tableLimitsView = assert.createTableLimitsView(self._dispatcher);
      /** @type {!Array} */
      var params = [undefined, self._tableLimitsView];
      if (!(void 0 === options.helpUrl || options.disableHelp || options.hideHelp)) {
        params.push(assert.createGameRulesView(options.helpUrl, value));
      }
      if (!(void 0 === options.historyUrl || options.disableHistory || options.hideHistory || options.demoPlay)) {
        params.push(assert.createGameHistoryView(options.historyUrl + "&custid=" + options.customerId, options.language, self._dispatcher));
      }
      if (!(void 0 === options.cashierUrl || options.demoPlay)) {
        params.push(assert.createCashierView(options.cashierUrl, self._dispatcher));
      }
      if (options.playForRealUrl && options.demoPlay && options.playForRealSigns) {
        params.push(assert.createPlayForRealMenuViewMobile(self._dispatcher));
      }
      self._menuView = assert.createMenuView(options.gameName, value, params, undefined);
      if ("mobile" === options.channel) {
        new Path(value, obj, self._menuView);
      } else {
        new Path(value, null, self._menuView);
      }
      var media = assert.createGameNameView();
      return self.createGameNameController(value, options, media), self;
    }
    return emitTestAsync(b, test), b.prototype.show = function(result) {
      this._viewFactory.show(result);
    }, b.prototype.destroy = function() {
      test.prototype.destroy.call(this);
      this._viewFactory.destroy();
    }, b.prototype.createLimitsPopup = function(container, type) {
      var name = this._viewFactory.createLimitsPopup(type);
      var i = this._viewFactory.createLimitsSign("tableLimitsBtn");
      if (name) {
        new MapLayer(this._dispatcher, container, name, i);
      } else {
        new MapLayer(this._dispatcher, container, this._tableLimitsView, i);
      }
    }, b.prototype.createButtonController = function(text, x, n, i) {
      new RelativeElement(text, x, n, i);
    }, b.prototype.createChipController = function(type, ast, className, baseCol, ao) {
      new ClassLink(type, ast, className, baseCol, ao);
    }, b.prototype.createStatusBarController = function(name, path, str, i, options) {
      new Selector(name, path, str, options, i);
    }, b.prototype.createGameNameController = function(type, value, origin) {
      new KineticToken(type, value, origin);
    }, b;
  }(way);
  var extractMixinName = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Wp = function(super$0) {
    /**
     * @param {?} a
     * @return {?}
     */
    function func(a) {
      var self = super$0.call(this, a) || this;
      return self._entity.getAnimation(".buttons").play("fourButtonLayout"), self._buttons[v.REBET] = "rebetBtn", self._buttons[v.CLEARALL] = "clearBtn", self._buttons[v.CLEARTABLE] = "clearTableBtn", self._buttons[v.PLAY] = "spinBtn", self._buttons[v.ROULETTE_PLAY] = "spinRouletteBtn", self._buttons[v.DEAL] = "dealBtn", self._buttons[v.CONTINUE] = "stopBtn", self._buttons[v.CALL] = "callBtn", self._buttons[v.HIT] = "hitBtn", self._buttons[v.DOUBLE] = "doubleBtn", self._buttons[v.SPLIT] = "splitBtn", 
      self._buttons[v.STAND] = "standBtn", self._buttons[v.FOLD] = "foldBtn", self._buttons[v.SURRENDER] = "surrenderBtn", self._buttons[v.YES_TO_ALL] = "yesToAllBtn", self._buttons[v.YES] = "yesBtn", self._buttons[v.NO] = "noBtn", self._buttons[v.NO_TO_ALL] = "noToAllBtn", self._buttons[v.UNDO] = "undoBtn", self._buttons[v.STATISTICS] = "statBtn", self._buttons[v.PRESET] = "presetBtn", self;
    }
    return extractMixinName(func, super$0), func.prototype.initButton = function(buttonId, listener) {
      super$0.prototype.initButton.call(this, buttonId, listener);
      var button = this._buttons[buttonId];
      if (button) {
        this.hideToolTip(button);
      }
    }, func.prototype.addToolTipOnHover = function(buttonId) {
      var me = this;
      var button = this._buttons[buttonId];
      if (button) {
        this._entity.getButton(button).addEventListener(self.ButtonHoverEvent.HOVER, function(inAgent) {
          if (inAgent.state) {
            me.showToolTip(button);
          } else {
            me.hideToolTip(button);
          }
        });
      }
    }, func.prototype.showToolTip = function(duration) {
      this._entity.getAnimation(duration + ".toolTip").play("show");
    }, func.prototype.hideToolTip = function(e) {
      this._entity.getAnimation(e + ".toolTip").play("hide");
    }, func;
  }(self.ViewBase);
  var Up = function() {
    /**
     * @param {!Object} usual_flow
     * @return {undefined}
     */
    function options(usual_flow) {
      /** @type {!Object} */
      this._entity = usual_flow;
      this._chipEntities = {};
      this._chipButtons = {};
      /** @type {!Array} */
      this._chipHolders = [];
      /** @type {!Array} */
      this._chipValues = [];
      /** @type {number} */
      this._offset = 0;
    }
    return options.prototype.init = function(obj, x, elem, index) {
      var o = this;
      if (void 0 === index) {
        /** @type {number} */
        index = 8;
      }
      /** @type {!Function} */
      this._selectCallback = obj;
      /** @type {!Function} */
      this._moveCallback = elem;
      this._trayLengthAnim = this._entity.getAnimation("chips");
      var CoffeeShop = self.ResourceManager.getInstance().getEntityManager();
      /** @type {number} */
      var i = 0;
      for (; i < index; i++) {
        this._chipHolders.push(this._entity.getHierarchy("chip" + i));
      }
      var cssPropValueList = IASNoneLeftExtension._chipSet;
      var phpr = this;
      /** @type {number} */
      i = 0;
      for (; i < cssPropValueList.length; i++) {
        !function(i) {
          var value = cssPropValueList[i];
          /** @type {string} */
          var id = 0 === value ? "Erase" : "Chip" + value;
          var scope = CoffeeShop.create(id);
          phpr._chipEntities[id] = scope;
          var o = scope.getButton("");
          o.addEventListener(self.ButtonEvent.CLICK, function() {
            return o.onSelect(value);
          });
          phpr._chipButtons[id] = o;
        }(i);
      }
      /** @type {null} */
      this._selected = null;
      this._chipLeftBtn = this._entity.getButton("chipLeftBtn");
      this._chipRightBtn = this._entity.getButton("chipRightBtn");
      this._chipLeftBtn.enable(true);
      this._chipRightBtn.enable(true);
      this._chipLeftBtn.addEventListener(self.ButtonEvent.CLICK, function() {
        return o.onMove(-1);
      });
      this._chipRightBtn.addEventListener(self.ButtonEvent.CLICK, function() {
        return o.onMove(1);
      });
      var scope = exports.SystemManager.getDeviceHandler();
      if (scope) {
        scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
          return o.handleOrientationChange();
        });
        scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
          return o.handleOrientationChange();
        });
        this.handleOrientationChange();
      }
    }, options.prototype.handleOrientationChange = function() {
      var Quick = self.ResourceManager.getInstance().getSceneManager();
      /** @type {number} */
      var current_char_count = Quick.getCanvasWidth() / Quick.getCanvasHeight();
      if (current_char_count >= options.ASPECT_LIMIT_4 && this._chipValues.length >= options.NUM_CHIPS_4) {
        /** @type {number} */
        this._stackLength = options.NUM_CHIPS_4;
        this._trayLengthAnim.play("size4");
      } else {
        if (current_char_count >= options.ASPECT_LIMIT_3 && this._chipValues.length >= options.NUM_CHIPS_3) {
          /** @type {number} */
          this._stackLength = options.NUM_CHIPS_3;
          this._trayLengthAnim.play("size3");
        } else {
          if (current_char_count >= options.ASPECT_LIMIT_2 && this._chipValues.length >= options.NUM_CHIPS_2) {
            /** @type {number} */
            this._stackLength = options.NUM_CHIPS_2;
            this._trayLengthAnim.play("size2");
          } else {
            /** @type {number} */
            this._stackLength = options.NUM_CHIPS_1;
            this._trayLengthAnim.play("size1");
          }
        }
      }
      this.updateChipPositions(this._offset);
    }, options.prototype.getStackLength = function() {
      return this._stackLength;
    }, options.prototype.show = function(str) {
    }, options.prototype.updateChipPositions = function(start) {
      /** @type {number} */
      this._offset = start;
      this.setChips(this._chipValues);
    }, options.prototype.setChipValues = function(t) {
      this.setChips(t);
      /** @type {!Object} */
      this._chipValues = t;
      this.handleOrientationChange();
    }, options.prototype.setChips = function(args) {
      /** @type {number} */
      var j = 0;
      var imagesLen = this._chipHolders.length;
      for (; j < imagesLen; j++) {
        if (this._chipHolders[j].remove("chip"), j + this._offset < args.length) {
          var i = args[j + this._offset];
          /** @type {string} */
          var check = 0 === i ? "Erase" : "Chip" + i;
          this._chipHolders[j].add("chip", this._chipEntities[check]);
        }
      }
    }, options.prototype.setChip = function(canCreateDiscussions) {
      /** @type {string} */
      var selected = 0 === canCreateDiscussions ? "Erase" : "Chip" + canCreateDiscussions;
      if (selected !== this._selected) {
        var account = this._chipButtons[selected];
        if (account) {
          account.select(true);
          if (this._selected) {
            this._chipButtons[this._selected].select(false);
          }
          /** @type {string} */
          this._selected = selected;
        }
      }
    }, options.prototype.enable = function(value) {
      var i;
      for (i in this._chipButtons) {
        if (this._chipButtons.hasOwnProperty(i)) {
          this._chipButtons[i].enable(value);
        }
      }
      this._chipLeftBtn.enable(value);
      this._chipRightBtn.enable(value);
    }, options.prototype.onSelect = function(index) {
      this._selectCallback(index);
    }, options.prototype.onMove = function(b) {
      this._moveCallback(b);
    }, options.NUM_CHIPS_1 = 5, options.NUM_CHIPS_2 = 6, options.NUM_CHIPS_3 = 7, options.NUM_CHIPS_4 = 8, options.ASPECT_LIMIT_1 = 1.48, options.ASPECT_LIMIT_2 = 1.44, options.ASPECT_LIMIT_3 = 1.58, options.ASPECT_LIMIT_4 = 1.7, options;
  }();
  var $ = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Transition = function(slider) {
    /**
     * @param {?} c
     * @param {string} value
     * @return {?}
     */
    function block(c, value) {
      var node = slider.call(this, self.ResourceManager.getInstance().getEntityManager().create(value)) || this;
      return c.getHierarchy("tableLimitsOverlay").add("limits", node._entity), node._textManager = self.ResourceManager.getInstance().getTextManager(), node._textManager.addRefreshListener(function() {
        return node.onTextRefresh();
      }), node.show(false), node;
    }
    return $(block, slider), block.prototype.show = function(value) {
      this._entity.getDisplay(".").setVisible(value);
    }, block.prototype.isVisible = function() {
      return this._entity.getDisplay(".").isVisible();
    }, block.prototype.onTextRefresh = function() {
      var crossfilterable_layers = this._textManager.getByName("IDS_MW_TEXT").getText().split("\n");
      /** @type {number} */
      var layer_i = 0;
      for (; layer_i < crossfilterable_layers.length; layer_i++) {
        this.setText("text" + (layer_i + 1), crossfilterable_layers[layer_i]);
      }
    }, block;
  }(self.ViewBase);
  var AttrLoader = function() {
    /**
     * @param {!Entity} entity
     * @param {string} prefix
     * @return {undefined}
     */
    function set(entity, prefix) {
      if (void 0 === prefix) {
        /** @type {string} */
        prefix = "";
      }
      /** @type {!Entity} */
      this._entity = entity;
      /** @type {string} */
      this._prefix = prefix;
    }
    return set.prototype.getButton = function() {
      return this._entity.getButton(this._prefix);
    }, set.prototype.setLimitsText = function(t, s, n) {
      this._entity.getTextField(this._prefix + ".tableLimitsText.tableLimitsTextDesktop.limit1").setText(t);
      this._entity.getTextField(this._prefix + ".tableLimitsText.tableLimitsTextDesktop.limit2").setText(s);
    }, set;
  }();
  var tinycolor = function() {
    /**
     * @param {?} res
     * @return {undefined}
     */
    function me(res) {
    }
    return me.prototype.setGameTitle = function(t) {
    }, me.prototype.show = function(str) {
    }, me.prototype.isVisible = function() {
      return false;
    }, me.prototype.setPage = function(store) {
    }, me;
  }();
  var make = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ProximityAppsController = function(fn) {
    /**
     * @param {?} event
     * @return {?}
     */
    function init(event) {
      var me = fn.call(this, event) || this;
      return me._texts.BALANCE = "balanceText", me._buttons[user.SOUND] = "soundsBtn", me._buttons[user.FASTPLAY] = "fastPlayBtn", me._buttons[user.HELP] = "infosBtn", me._buttons[user.MENU] = "settingsBtn", me._buttons[user.EXIT] = "exitBtn", me._buttons[user.PLAYFORREAL] = "playForRealBtn", me._buttons[user.HISTORY] = "historyBtn", me._buttons[user.TUTORIAL] = "tutorialBtn", me._balanceLabelType = self.BonusBalanceEventType.MIX, me._entity.getTextField("balanceText").setText(me.getBalanceLabel()), 
      me._entity.getTextField("betText").setText("IDS_BET_CAPTION"), me._entity.getTextField("winText").setText("IDS_WIN_CAPTION"), me._entity.getTextField("clock.clockText").setText(""), me._moneyFormatter = self.ResourceManager.getInstance().getMoneyFormatter(), me;
    }
    return make(init, fn), init.prototype.showPNGLogo = function(value) {
      this._entity.getDisplay("pngLogo").setVisible(value);
    }, init.prototype.showTutorialButton = function() {
      this.showButton(user.TUTORIAL, true);
      this.enableButton(user.TUTORIAL, true);
      this._entity.getTransform("balanceText").setX(340);
    }, init.prototype.initButton = function(buttonId, listener) {
      fn.prototype.initButton.call(this, buttonId, listener);
      var button = this._buttons[buttonId];
      if (button) {
        this.hideToolTip(button);
      }
    }, init.prototype.handleMysteryJackpot = function() {
    }, init.prototype.setBalance = function(data) {
      var myDoughnutChart = this._moneyFormatter.MoneyToString(data);
      this._entity.getTextField("balanceText").setArgs("> " + myDoughnutChart);
    }, init.prototype.setBet = function(b) {
      var t = this._moneyFormatter.MoneyToString(b);
      this._entity.getTextField("betValue").setText(t);
    }, init.prototype.setWin = function(target) {
      var node = this._moneyFormatter.MoneyToString(target);
      this._entity.getTextField("winValue").setText(node);
    }, init.prototype.setTime = function(t) {
      this._entity.getTextField("clock.clockText").setText(t);
    }, init.prototype.showClock = function(visible) {
      this._entity.getDisplay("clock").setVisible(visible);
    }, init.prototype.setLeftHandMode = function(addedRenderer) {
    }, init.prototype.onSplash = function(sigma) {
    }, init.prototype.addToolTipOnHover = function(buttonId) {
      var me = this;
      var button = this._buttons[buttonId];
      if (button) {
        this._entity.getButton(button).addEventListener(self.ButtonHoverEvent.HOVER, function(inAgent) {
          if (inAgent.state) {
            me.showToolTip(button);
          } else {
            me.hideToolTip(button);
          }
        });
      }
    }, init.prototype.showToolTip = function(duration) {
      this._entity.getAnimation(duration + ".toolTip").play("show");
    }, init.prototype.hideToolTip = function(e) {
      this._entity.getAnimation(e + ".toolTip").play("hide");
    }, init;
  }(Controller);
  var pointerDiff = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var A = function(target) {
    /**
     * @return {?}
     */
    function config() {
      return null !== target && target.apply(this, arguments) || this;
    }
    return pointerDiff(config, target), config.prototype.init = function(b) {
      target.prototype.init.call(this, b);
      var config = self.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
    }, config.prototype.show = function(str) {
    }, config.prototype.destroy = function() {
    }, config;
  }(div);
  var injectParameterAssert = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var HeadlessShader = function(util) {
    /**
     * @param {?} name
     * @param {!Array} args
     * @param {?} data
     * @param {?} uid
     * @return {?}
     */
    function init(name, args, data, uid) {
      var self = util.call(this, name, 0, data, uid) || this;
      self._texts = {};
      /** @type {number} */
      var i = 0;
      var arg_count = args.length;
      for (; i < arg_count; i++) {
        /** @type {string} */
        self._buttons[args[i]] = "setting" + (i + 1) + ".btn";
        /** @type {string} */
        self._texts[args[i]] = "setting" + (i + 1);
        self.enableButton(args[i], true);
      }
      i = args.length;
      for (; i < 10; i++) {
        /** @type {string} */
        var key = "setting" + (i + 1);
        /** @type {string} */
        self._buttons[key] = key;
        self.showButton(key, false);
      }
      return self.setText(self._texts[instance.SOUND], "IDS_M_SETTINGS_L1"), self.setText(self._texts[instance.VOICEOVER], "IDS_M_SETTINGS_L10"), self.setText(self._texts[instance.MUSIC], "IDS_M_SETTINGS_L18"), self.setText(self._texts[instance.AUTOCLEARWIN], "IDS_M_SETTINGS_L2"), self.setText(self._texts[instance.AUTOCLEARLOSE], "IDS_M_SETTINGS_L3"), self.setText(self._texts[instance.AUTOCLEARENDOFROUND], "IDS_M_SETTINGS_L17"), self.setText(self._texts[instance.AUTODEAL], "IDS_M_SETTINGS_L4"), self.setText(self._texts[instance.FASTPLAY], 
      "IDS_M_SETTINGS_L12"), self.setText(self._texts[instance.HISTORYSIMPLE], "IDS_M_SETTINGS_L15"), self.setText(self._texts[instance.HISTORYADVANCED], "IDS_M_SETTINGS_L16"), self.hideWin(), self;
    }
    return injectParameterAssert(init, util), init.prototype.showTextfield = function(key, value) {
      if (key) {
        var i = this._texts[key];
        if (i) {
          this._entity.getDisplay(i).setVisible(value);
        }
      } else {
        var text;
        for (text in this._texts) {
          if (this._texts.hasOwnProperty(text)) {
            this.showTextfield(text, value);
          }
        }
      }
    }, init;
  }(sampleUserGroupRoles);
  var recordTheStep = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var swt = function(super$0) {
    /**
     * @return {?}
     */
    function B() {
      return null !== super$0 && super$0.apply(this, arguments) || this;
    }
    return recordTheStep(B, super$0), B.prototype.createChipView = function() {
      return new Up(this._entity);
    }, B.prototype.createStatusBarView = function(propertyName) {
      return new ProximityAppsController(this._entity);
    }, B.prototype.createButtonView = function() {
      return new Wp(this._entity);
    }, B.prototype.createSettingsView = function() {
      var fragcode = this.filterButtons([instance.SOUND, instance.VOICEOVER, instance.AUTOCLEARWIN, instance.AUTOCLEARLOSE, instance.AUTODEAL, instance.FASTPLAY]);
      return new HeadlessShader("SettingsDlg_tablegames", fragcode, this._parent, this._disabler);
    }, B.prototype.createMenuView = function(textPromise, text, args, color) {
      return new tinycolor(color);
    }, B.prototype.createLimitsSign = function(dependencyChain) {
      var obj = self.ResourceManager.getInstance().getEntityManager();
      var XXXX_Extension = obj.getByName("main");
      return new AttrLoader(XXXX_Extension, dependencyChain);
    }, B.prototype.createLimitsPopup = function(config) {
      var obj = self.ResourceManager.getInstance().getEntityManager();
      var el = obj.getByName("main");
      return new Transition(el, config);
    }, B.prototype.createTableLimitsView = function(canCreateDiscussions) {
      return null;
    }, B.prototype.createGameRulesView = function(browserChannel, array) {
      return null;
    }, B.prototype.createGameHistoryView = function(eta, lmbda, n) {
      return null;
    }, B.prototype.createCashierView = function(rect, linesstrip) {
      return null;
    }, B.prototype.createPlayForRealMenuViewMobile = function(canCreateDiscussions) {
      return null;
    }, B.prototype.createInteractionFeedbackView = function(canCreateDiscussions) {
      return null;
    }, B.prototype.filterButtons = function(swimlanes) {
      var CloudCmd = this;
      return swimlanes.filter(function(canCreateDiscussions) {
        switch(canCreateDiscussions) {
          case instance.FASTPLAY:
            return !CloudCmd._config.hideFastPlay;
          case instance.SOUND:
          case instance.VOICEOVER:
          case instance.MUSIC:
            return !CloudCmd._config.hideSound;
          default:
            return true;
        }
      });
    }, B.prototype.createGameNameView = function() {
      var t = self.ResourceManager.getInstance().getEntityManager();
      var e = t.create("?");
      return t.add("game_name", e), new InvalidSourceError(e);
    }, B;
  }(A);
  var spyOn = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var doc_part = function(callback) {
    /**
     * @param {string} element
     * @return {?}
     */
    function Dialog(element) {
      var t = callback.call(this, element) || this;
      t.setupDivs(element);
      element.addEventListener("touchstart", function(event) {
        event.preventDefault();
      });
      element.addEventListener("touchend", function(event) {
        event.preventDefault();
      });
      var e = exports.SystemManager.getDeviceHandler();
      return e && e.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return t.HandleOrientationChange();
      }), t;
    }
    return spyOn(Dialog, callback), Dialog.prototype.setupDivs = function(t) {
      this.createButton(v.CLEARALL, "IDS_BTN_CLEARALL", t, "clearAllBtn", "clearAllBtnWrapper", void 0, "btnCaption", true);
      this.createButton(v.CLEARTABLE, "IDS_BTN_CLEARTABLE", t, "clearTableBtn", "clearTableBtnWrapper", void 0, "btnCaption", true);
      this.createButton(v.REBET, "IDS_BTN_REBET", t, "rebetBtn", "rebetBtnWrapper", void 0, "btnCaption", true);
      this.createButton(v.PLAY, "IDS_BTN_SPIN_RO", t, "spinBtn", "spinBtnWrapper", void 0, "btnCaption", true);
      this.createButton(v.CONTINUE, "IDS_BTN_STOP", t, "spinstopBtn", "spinBtnWrapper", void 0, "btnCaption", true);
    }, Dialog.prototype.createButton = function(id, name, type, options, opts, config, properties, mode) {
      if (void 0 === mode && (mode = false), this._buttons[id] = new constructor(name, type, options, opts, config, properties), mode) {
        var u = this._buttons[id].getDOMNode();
        var cmtcookie = RepositoryApi.getInstance().createAndAppendDiv(u, void 0, "pointerArea");
        this._buttons[id].setPointerTarget(cmtcookie);
      }
    }, Dialog.prototype.HandleOrientationChange = function() {
      this._buttons[v.CLEARALL].HandleOrientationChange(exports.DEVICE.orientation);
      this._buttons[v.CLEARTABLE].HandleOrientationChange(exports.DEVICE.orientation);
      this._buttons[v.PLAY].HandleOrientationChange(exports.DEVICE.orientation);
      this._buttons[v.REBET].HandleOrientationChange(exports.DEVICE.orientation);
      this._buttons[v.CONTINUE].HandleOrientationChange(exports.DEVICE.orientation);
    }, Dialog.prototype.addToolTipOnHover = function(canCreateDiscussions) {
    }, Dialog;
  }(selector);
  var eh = function() {
    /**
     * @return {undefined}
     */
    function Button() {
      /** @type {boolean} */
      this._show = true;
      /** @type {number} */
      this._numberOfActiveChips = 0;
      /** @type {boolean} */
      this._lastSelected = false;
      /** @type {number} */
      this._prevSliderAlpha = 0;
      this._DOMHelper = RepositoryApi.getInstance();
      this._root = this._DOMHelper.createDiv("chipSelector");
      this._background = this._DOMHelper.createDiv("chipBackground");
      this._slider = this._DOMHelper.createDiv("chipSlider");
      this._root.appendChild(this._slider);
      /** @type {!Array} */
      this._values = [];
      /** @type {number} */
      this._selected = 0;
      /** @type {string} */
      this._orientationStr = "";
      /** @type {boolean} */
      this._chipEnabled = false;
      /** @type {number} */
      this._offset = 0;
      /** @type {number} */
      this._numberOfChips = 0;
    }
    return Button.prototype.setParent = function(newParent) {
      newParent.appendChild(this._background);
      newParent.appendChild(this._root);
      /** @type {!Node} */
      this._parentDiv = newParent;
    }, Button.prototype.show = function(value) {
      /** @type {string} */
      this._show = value;
      this.updateVisibility();
    }, Button.prototype.updateVisibility = function() {
      if (this._parentDiv) {
        if (this._show || "pt" == exports.DEVICE.orientation) {
          /** @type {string} */
          this._parentDiv.style.display = "";
        } else {
          /** @type {string} */
          this._parentDiv.style.display = "none";
        }
      }
    }, Button.prototype.init = function(e, callback, type, i) {
      var self = this;
      if (void 0 === i) {
        /** @type {number} */
        i = 6;
      }
      /** @type {string} */
      this._callBack = e;
      /** @type {string} */
      this._swipeCallback = callback;
      /** @type {number} */
      this._numberOfChips = i;
      /** @type {boolean} */
      var hasTouch = "ontouchstart" in window;
      /** @type {string} */
      this._inputDownEvent = hasTouch ? "touchstart" : "mousedown";
      /** @type {string} */
      this._inputMoveEvent = hasTouch ? "touchmove" : "mousemove";
      /** @type {string} */
      this._inputUpEvent = hasTouch ? "touchend" : "mouseup";
      /**
       * @param {!Event} t
       * @return {?}
       */
      this._inputDownDelegate = function(t) {
        return self.onInputDown(t);
      };
      /**
       * @param {!Event} t
       * @return {?}
       */
      this._inputMoveDelegate = function(t) {
        return self.onInputMove(t);
      };
      /**
       * @param {!Event} webcal
       * @return {?}
       */
      this._inputUpDelegate = function(webcal) {
        return self.onInputUp(webcal);
      };
      /** @type {!Array} */
      this._pages = [];
      /** @type {boolean} */
      this._isSwipeMode = false;
      this._content = this._DOMHelper.createAndAppendDiv(this._root, "chipContent", void 0);
      var name = this._content.style.left;
      name = name.substring(0, name.length - 2);
      /** @type {number} */
      this._contentLeftPos = "" === name ? 0 : parseInt(name);
      this._content.addEventListener(this._inputDownEvent, this._inputDownDelegate, false);
      var scope = exports.SystemManager.getDeviceHandler();
      if (scope) {
        scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
          return self.handleOrientationChange();
        });
        scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
          return self.handleOrientationChange();
        });
        this.handleOrientationChange();
      }
    }, Button.prototype.createChips = function(template) {
      var allTraps = this;
      var self = this;
      /** @type {number} */
      var nameArgs = 0;
      for (; nameArgs < template; nameArgs++) {
        !function(t) {
          var range = self._DOMHelper.createAndAppendDiv(self._content, "page", void 0);
          range.addEventListener(self._inputUpEvent, function() {
            return allTraps.onClickChip(t);
          });
          self._pages.push(range);
          self._values.push(0);
        }(nameArgs);
      }
    }, Button.prototype.getStackLength = function() {
      return this._numberOfChips;
    }, Button.prototype.updateChipPositions = function(start) {
      /** @type {number} */
      var i = 0;
      for (; i < this._values.length; i++) {
        var page = this._pages[i];
        if (i >= this._offset && i < this._offset + this._numberOfChips) {
          page.classList.remove("chipPos" + (i - this._offset).toString());
        }
        if (i >= start && i < start + this._numberOfChips) {
          page.classList.add("chipPos" + (i - start).toString());
          /** @type {string} */
          page.style.display = "";
        }
      }
      /** @type {number} */
      this._offset = start;
    }, Button.prototype.onClickChip = function(c) {
      if (this._isSwipeMode) {
        return void(this._isSwipeMode = false);
      }
      if (true === this._chipEnabled) {
        this._callBack(this._values[c]);
      }
    }, Button.prototype.setChipValues = function(b) {
      /** @type {number} */
      var formWithOptions = b.length - this._pages.length;
      if (formWithOptions > 0) {
        this.createChips(formWithOptions);
      }
      /** @type {number} */
      var i = 0;
      var l = this._pages.length;
      for (; i < l; i++) {
        this._pages[i].removeAttribute("class");
        if (i < b.length) {
          this._pages[i].classList.add("chip" + b[i]);
          this._values[i] = b[i];
        } else {
          this._pages[i].classList.add("hidden");
        }
        if (i === this._selected) {
          this._pages[this._selected].classList.add("selected");
        }
      }
      this._numberOfActiveChips = b.length;
      this.updateChipPositions(this._offset);
      this.updateSliderScale();
    }, Button.prototype.updateSliderScale = function() {
      /** @type {number} */
      this._sliderScale = (this._numberOfChips - 0.5) / this._numberOfActiveChips;
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {string} */
        this._slider.style.width = "";
        this._containerSize = this._root.clientHeight;
        /** @type {string} */
        this._slider.style.height = this._sliderScale * +this._containerSize + "px";
      } else {
        /** @type {string} */
        this._slider.style.height = "";
        this._containerSize = this._root.clientWidth;
        /** @type {string} */
        this._slider.style.width = this._sliderScale * this._containerSize + "px";
      }
      this._containerSize *= 1 - this._sliderScale;
    }, Button.prototype.setChip = function(val) {
      var index = this._values.indexOf(val);
      this._pages[this._selected].classList.remove("selected");
      this._pages[index].classList.add("selected");
      this._selected = index;
    }, Button.prototype.enable = function(value) {
      /** @type {string} */
      this._chipEnabled = value;
      /** @type {number} */
      var i = 0;
      for (; i < this._pages.length; ++i) {
        if (value) {
          this._pages[i].classList.remove("disabled");
        } else {
          this._pages[i].classList.add("disabled");
        }
      }
      this.disable(!value);
    }, Button.prototype.disable = function(hidden) {
      /** @type {string} */
      var display = hidden ? "none" : "";
      /** @type {string} */
      this._background.style.display = display;
      /** @type {string} */
      this._root.style.display = display;
    }, Button.prototype.handleOrientationChange = function() {
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {string} */
        this._content.style.left = "";
        /** @type {string} */
        this._slider.style.left = "";
      } else {
        /** @type {string} */
        this._content.style.top = "";
        /** @type {string} */
        this._slider.style.top = "";
      }
      this.moveSlider(0);
      this.updateVisibility();
      this.moveChips(0);
      this.updateSliderScale();
    }, Button.prototype.updateInputPosition = function(e) {
      var MouseHelper = new self.Point(0, 0);
      if ("touchstart" === e.type || "touchmove" === e.type) {
        /** @type {!Object} */
        var event = e;
        if (event.touches && event.touches.length > 0) {
          MouseHelper.x = event.touches[0].clientX;
          MouseHelper.y = event.touches[0].clientY;
        }
      } else {
        if ("mousedown" === e.type || "mousemove" === e.type) {
          /** @type {!Object} */
          var event = e;
          MouseHelper.x = event.clientX;
          MouseHelper.y = event.clientY;
        }
      }
      return MouseHelper;
    }, Button.prototype.onInputDown = function(event) {
      if (this._chipEnabled) {
        this._content.addEventListener(this._inputMoveEvent, this._inputMoveDelegate, false);
        window.addEventListener(this._inputUpEvent, this._inputUpDelegate, false);
        this.calcChipSize();
        this._inputStartPos = this.updateInputPosition(event);
        this._prevPosition = "ls" === exports.DEVICE.orientation ? this._inputStartPos.y : this._inputStartPos.x;
        /** @type {number} */
        this._upperSwipeBound = 0;
        if (this._numberOfActiveChips >= this._numberOfChips) {
          /** @type {number} */
          this._upperSwipeBound = (this._numberOfActiveChips - (this._offset + this._numberOfChips)) * -this._chipSize;
        }
        this._upperSwipeBound -= 0.5 * this._chipSize;
        /** @type {number} */
        this._lowerSwipeBound = this._offset * this._chipSize + 0.5 * this._chipSize;
        /** @type {number} */
        this._swipeDistance = 0;
        event.preventDefault();
      }
    }, Button.prototype.onInputMove = function(data) {
      if (this.calcSwipeDistance(data)) {
        if (Math.abs(this._swipeDistance) > Button.MIN_SWIPE_LIMIT && !this._isSwipeMode) {
          /** @type {boolean} */
          this._isSwipeMode = true;
          this._swipeOffset = this._offset;
          /** @type {number} */
          this._swipeCount = 0;
          /** @type {number} */
          this._swipePosOffset = 0;
          this.updateChipVisibility();
          this._content.classList.remove("transition");
          this._slider.classList.remove("transition");
          if (this._lastSelected) {
            /** @type {boolean} */
            this._lastSelected = false;
            /** @type {boolean} */
            this._lastChipWasSelected = true;
            this._swipeDistance += this._chipSize / -2;
          }
        }
        if (this._isSwipeMode) {
          this.moveChips(this._swipeDistance);
          this.updateSwipeCount(this._swipeDistance);
          this.moveSlider(this._swipeDistance);
        }
        data.preventDefault();
      }
    }, Button.prototype.calcSwipeDistance = function(t) {
      var e;
      var tl = this.updateInputPosition(t);
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {number} */
        e = tl.y - this._prevPosition;
        this._prevPosition = tl.y;
      } else {
        /** @type {number} */
        e = tl.x - this._prevPosition;
        this._prevPosition = tl.x;
      }
      /** @type {boolean} */
      var hasSongChanged = this._swipeDistance > this._lowerSwipeBound && e > 0;
      /** @type {boolean} */
      var isReplayingSong = this._swipeDistance < this._upperSwipeBound && e < 0;
      return !hasSongChanged && !isReplayingSong && (this._swipeDistance += e, true);
    }, Button.prototype.moveChips = function(key) {
      /** @type {number} */
      var partitionCount = this._lastSelected ? this._chipSize / -2 : 0;
      var disX = key + this._swipePosOffset + partitionCount;
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {string} */
        this._content.style.top = disX + "px";
      } else {
        /** @type {string} */
        this._content.style.left = disX + "px";
      }
    }, Button.prototype.moveSlider = function(direction) {
      /** @type {number} */
      var tappable = this._lastSelected ? -0.5 * this._chipSize : 0;
      var timePercentage = this.calcSliderAlpha(-(direction + tappable)) + this._prevSliderAlpha;
      /** @type {number} */
      var position = timePercentage * this._containerSize;
      /** @type {number} */
      position = Math.max(0, Math.min(this._containerSize, position));
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {string} */
        this._slider.style.top = position + "px";
      } else {
        /** @type {string} */
        this._slider.style.left = position + "px";
      }
    }, Button.prototype.calcSliderAlpha = function(s) {
      if (this._numberOfActiveChips < this._numberOfChips) {
        return 0;
      }
      /** @type {number} */
      var m = this._chipSize * (this._numberOfActiveChips - this._numberOfChips) + 0.5 * this._chipSize;
      /** @type {number} */
      var alpha = s / m;
      return alpha = Math.max(-1, Math.min(1, alpha));
    }, Button.prototype.updateSwipeCount = function(t) {
      /** @type {number} */
      var maybeBinding = Math.round(t / this._chipSize);
      var isTopLevel = this._lastChipWasSelected && t > 0;
      if (maybeBinding != this._swipeCount || isTopLevel) {
        /** @type {number} */
        this._swipeCount = -maybeBinding;
        this.swipeChips(t);
      }
    }, Button.prototype.swipeChips = function(fragmentName) {
      var _end_pos_gene_list = this._swipeOffset + this._swipeCount;
      /** @type {boolean} */
      var orTmp = _end_pos_gene_list != this._offset;
      /** @type {boolean} */
      var andTmp = _end_pos_gene_list >= 0;
      /** @type {boolean} */
      var tmp = _end_pos_gene_list + this._numberOfChips <= this._numberOfActiveChips;
      if (orTmp && andTmp && tmp || this._lastChipWasSelected && tmp) {
        /** @type {number} */
        this._swipePosOffset = this._swipeCount * this._chipSize;
        this.updateChipPositions(_end_pos_gene_list);
        this.moveChips(fragmentName);
        this.removeBoundClasses();
        this.updateChipVisibility();
        this._swipeCallback(_end_pos_gene_list);
        /** @type {boolean} */
        this._lastChipWasSelected = false;
      }
      if (_end_pos_gene_list + this._numberOfChips == this._numberOfActiveChips + 1) {
        this._callBack(this._values[this._numberOfChips + _end_pos_gene_list - 2]);
      }
    }, Button.prototype.removeBoundClasses = function() {
      /** @type {number} */
      var i = 0;
      var arrayPages = this._pages;
      for (; i < arrayPages.length; i++) {
        var page = arrayPages[i];
        page.classList.remove("chipPos00");
        page.classList.remove("chipPos6");
      }
    }, Button.prototype.updateChipVisibility = function() {
      if (this._offset > 0) {
        this._pages[this._offset - 1].classList.add("chipPos00");
        /** @type {string} */
        this._pages[this._offset - 1].style.display = "";
      }
      if (this._offset + this._numberOfChips < this._numberOfActiveChips) {
        this._pages[this._offset + this._numberOfChips].classList.add("chipPos6");
        /** @type {string} */
        this._pages[this._offset + this._numberOfChips].style.display = "";
      }
    }, Button.prototype.calcChipSize = function() {
      var rect = this._pages[this._offset].getBoundingClientRect();
      var offsetObject = this._pages[this._offset + 1].getBoundingClientRect();
      if ("ls" === exports.DEVICE.orientation) {
        /** @type {number} */
        this._chipSize = Math.abs(rect.top - offsetObject.top);
      } else {
        /** @type {number} */
        this._chipSize = Math.abs(rect.left - offsetObject.left);
      }
    }, Button.prototype.onInputUp = function(event) {
      this._content.removeEventListener(this._inputMoveEvent, this._inputMoveDelegate, false);
      window.removeEventListener(this._inputUpEvent, this._inputUpDelegate, false);
      /** @type {boolean} */
      this._lastSelected = this._selected + 1 == this._offset + this._numberOfChips;
      this.resetChipPositions();
      event.preventDefault();
    }, Button.prototype.resetChipPositions = function() {
      /** @type {boolean} */
      this._isSwipeMode = false;
      /** @type {number} */
      this._swipePosOffset = 0;
      this.moveChips(0);
      this.updateChipPositions(this._offset);
      this._prevSliderAlpha = this.calcSliderAlpha(this._offset * this._chipSize);
      this.moveSlider(0);
      this._content.classList.add("transition");
      this._slider.classList.add("transition");
    }, Button.MIN_SWIPE_LIMIT = 5, Button;
  }();
  var visitKey = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var f = function(type) {
    /**
     * @param {?} e
     * @param {!Node} element
     * @return {?}
     */
    function init(e, element) {
      var me = type.call(this, e) || this;
      /** @type {boolean} */
      me._leftHandMode = false;
      /** @type {boolean} */
      me._showClock = true;
      me._moneyFormatter = self.ResourceManager.getInstance().getMoneyFormatter();
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return me.HandleOrientationChange();
      }), scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return me.HandleOrientationChange();
      })), me._buttonsWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._root, "buttonsWrapper", void 0), me._gamePanel = document.getElementById("gamepanel") || RepositoryApi.getInstance().createAndAppendDiv(me._root, "gamepanel", void 0), me._gamePanel.style.display = "", me._gamePanel.addEventListener("touchstart", function(event) {
        event.preventDefault();
      }), me._gamePanel.addEventListener("touchend", function(event) {
        event.preventDefault();
      }), me._backgroundImg = RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "backgroundImg", void 0), me._buttons[user.MOBILE_MENU] = new constructor("", me._gamePanel, "menuImg", "menuButtonWrapper", void 0), me._buttons[user.EXIT] = new constructor("", me._gamePanel, "lobbyImg", "lobbyButtonWrapper", void 0), me._buttons[user.MOBILE_SOUND] = new constructor("", me._gamePanel, "soundImg", "soundButtonWrapper"), me._infoBar = RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, 
      "informationBar", void 0), me._bottomPanelWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "bottomPanelWrapper", void 0), me._portraitPanelWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "portraitPanelWrapper", void 0), me._menuWrapper1 = RepositoryApi.getInstance().createAndAppendDiv(me._portraitPanelWrapper, "menuWrapper1", void 0), me._menuWrapper2 = RepositoryApi.getInstance().createAndAppendDiv(me._bottomPanelWrapper, "menuWrapper2", void 0), 
      me._menuWrapper3 = RepositoryApi.getInstance().createAndAppendDiv(me._portraitPanelWrapper, "menuWrapper3", void 0), me._chipSelectorWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._root, "chipSelectorWrapper", void 0), element.setParent(me._chipSelectorWrapper), me.createChildDivs(), me;
    }
    return visitKey(init, type), init.prototype.createChildDivs = function() {
      var t = RepositoryApi.getInstance();
      /** @type {boolean} */
      this._displayCoins = true;
      this._clockWrapper = RepositoryApi.getInstance().createDiv("clockWrapper", void 0);
      this._clockImage = RepositoryApi.getInstance().createAndAppendDiv(this._clockWrapper, "clockImg", void 0);
      RepositoryApi.getInstance().appendChild(this._clockWrapper, this._clockImage);
      this._localTime = RepositoryApi.getInstance().createTextfield(this._clockWrapper, "time", void 0, " ");
      this._moneyBalanceWrapper = RepositoryApi.getInstance().createDiv("moneyBalanceWrapper", void 0);
      this._balanceCaption = RepositoryApi.getInstance().createTextfield(this._moneyBalanceWrapper, "balanceText", void 0, "IDS_BALANCE_CAPTION", "IDS_BALANCE_CAPTION");
      this._moneyBalance = RepositoryApi.getInstance().createTextfield(this._moneyBalanceWrapper, "moneyBalance", void 0, " ");
      this._coinsBalanceWrapper = RepositoryApi.getInstance().createDiv("coinsBalanceWrapper", void 0);
      this._coinsBetWrapper = RepositoryApi.getInstance().createDiv("coinsBetWrapper", void 0);
      this._moneyWinWrapper = RepositoryApi.getInstance().createDiv("moneyWinWrapper", void 0);
      this._winCaption = RepositoryApi.getInstance().createTextfield(this._moneyWinWrapper, "winText", void 0, "IDS_WIN_CAPTION", "IDS_WIN_CAPTION");
      this._moneyWin = RepositoryApi.getInstance().createTextfield(this._moneyWinWrapper, "moneyWin", void 0, " ");
      this._moneyBetWrapper = RepositoryApi.getInstance().createDiv("moneyBetWrapper", void 0);
      this._moneyBetCaption = RepositoryApi.getInstance().createTextfield(this._moneyBetWrapper, "betMoneyText", void 0, "IDS_BET_CAPTION", "IDS_BET_CAPTION");
      this._moneyBet = RepositoryApi.getInstance().createTextfield(this._moneyBetWrapper, "moneyBet", void 0, " ");
      t.createScalableDiv(this._moneyBalanceWrapper, this._bottomPanelWrapper, 0.5, 10);
      t.createScalableDiv(this._coinsBalanceWrapper, this._bottomPanelWrapper, 0.5, 10);
      t.createScalableDiv(this._coinsBetWrapper, this._bottomPanelWrapper, 0.5, 10);
      t.createScalableDiv(this._moneyWinWrapper, this._bottomPanelWrapper, 0.45, 10);
      t.createScalableDiv(this._moneyBetWrapper, this._bottomPanelWrapper, 0.45, 10);
      /** @type {string} */
      this._moneyWin.style.visibility = "hidden";
      if (this._displayCoins) {
        RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._clockWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._moneyBalanceWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._coinsBalanceWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._coinsBetWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._moneyWinWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._moneyBetWrapper);
        if (!this._showClock) {
          this._menuWrapper1.classList.add("noclock");
        }
      } else {
        RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._moneyBalanceWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._moneyBetWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._moneyWinWrapper);
        RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._clockWrapper);
      }
      this.HandleOrientationChange();
      if (!this._showClock) {
        /** @type {string} */
        this._clockWrapper.style.display = "none";
      }
    }, init.prototype.showPNGLogo = function(addedRenderer) {
    }, init.prototype.handleMysteryJackpot = function() {
    }, init.prototype.setBalanceLabelType = function(canCreateDiscussions) {
      /** @type {!Function} */
      this._balanceLabelType = canCreateDiscussions;
      RepositoryApi.getInstance().setTextWidthProxy(this._balanceCaption, this.getBalanceLabel());
    }, init.prototype.getBalanceLabel = function() {
      return this._balanceLabelType === self.BonusBalanceEventType.BONUS ? "IDS_BONUS_CAPTION" : "IDS_BALANCE_CAPTION";
    }, init.prototype.HandleOrientationChange = function() {
      if ("ls" === exports.DEVICE.orientation) {
        this._gamePanel.classList.add("ls");
        this._buttonsWrapper.classList.add("ls");
        this._gamePanel.classList.remove("pt");
        this._buttonsWrapper.classList.remove("pt");
      } else {
        this._gamePanel.classList.add("pt");
        this._buttonsWrapper.classList.add("pt");
        this._gamePanel.classList.remove("ls");
        this._buttonsWrapper.classList.remove("ls");
      }
      if (this._displayCoins ? (this._gamePanel.classList.add("nocoin"), this._buttonsWrapper.classList.add("nocoin")) : (this._gamePanel.classList.remove("ls"), this._buttonsWrapper.classList.remove("ls")), "ls" === exports.DEVICE.orientation) {
        if (this._displayCoins) {
          RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._moneyBalanceWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._moneyBetWrapper);
          for (; this._portraitPanelWrapper.childNodes.length > 0;) {
            this._bottomPanelWrapper.appendChild(this._portraitPanelWrapper.childNodes[0]);
          }
          this._clockWrapper.classList.add("coin");
          this._moneyBet.classList.add("coin");
        } else {
          RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._moneyBetWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._moneyWinWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._clockWrapper);
        }
        this.setChipSelectorWrapperOnOrientationChange();
        RepositoryApi.getInstance().reorderChildrenInDiv(this._bottomPanelWrapper, ["menuWrapper1", "menuWrapper2", "menuWrapper3"]);
        RepositoryApi.getInstance().setStyle(this._portraitPanelWrapper, "nodisplay");
      } else {
        if (this._displayCoins) {
          RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._clockWrapper);
          RepositoryApi.getInstance().setStyle(this._moneyBetWrapper, "");
          RepositoryApi.getInstance().reorderChildrenInDiv(this._menuWrapper3, ["moneyBetWrapper", "moneyWinWrapper"]);
        } else {
          RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._moneyBetWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._moneyWinWrapper);
        }
        RepositoryApi.getInstance().appendChild(this._portraitPanelWrapper, this._menuWrapper1);
        RepositoryApi.getInstance().appendChild(this._portraitPanelWrapper, this._menuWrapper3);
        this.setChipSelectorWrapperOnOrientationChange();
        this._portraitPanelWrapper.removeAttribute("class");
        RepositoryApi.getInstance().reorderChildrenInDiv(this._bottomPanelWrapper, ["menuWrapper2", "portraitPanelWrapper"]);
      }
      this.handleLeftHandModeValues();
      RepositoryApi.getInstance().getScalableDiv(this._moneyBetWrapper).update();
      RepositoryApi.getInstance().getScalableDiv(this._moneyWinWrapper).update();
    }, init.prototype.setLeftHandMode = function(addedRenderer) {
      /** @type {boolean} */
      this._leftHandMode = addedRenderer;
      this.handleLeftHandModeValues();
    }, init.prototype.handleLeftHandModeValues = function() {
      if (this._leftHandMode) {
        this._gamePanel.classList.add("lhmode");
        this._buttonsWrapper.classList.add("lhmode");
        this._chipSelectorWrapper.classList.add("lhmode");
      } else {
        this._gamePanel.classList.remove("lhmode");
        this._buttonsWrapper.classList.remove("lhmode");
        this._chipSelectorWrapper.classList.remove("lhmode");
      }
    }, init.prototype.setBalance = function(data) {
      this._moneyBalance.innerHTML = this._moneyFormatter.MoneyToString(data);
    }, init.prototype.setBet = function(b) {
      this._moneyBet.innerHTML = this._moneyFormatter.MoneyToString(b);
      RepositoryApi.getInstance().getScalableDiv(this._moneyBetWrapper).update();
    }, init.prototype.setWin = function(date) {
      if (0 === date) {
        /** @type {string} */
        this._moneyWin.style.visibility = "hidden";
      } else {
        /** @type {string} */
        this._moneyWin.style.visibility = "visible";
        this._moneyWin.innerHTML = this._moneyFormatter.MoneyToString(date);
      }
      RepositoryApi.getInstance().getScalableDiv(this._moneyWinWrapper).update();
    }, init.prototype.setTime = function(val) {
      /** @type {string} */
      this._localTime.innerHTML = val;
    }, init.prototype.showClock = function(data) {
      if (true === data) {
        this._clockWrapper.classList.remove("hidden");
      } else {
        this._clockWrapper.classList.add("hidden");
      }
    }, init.prototype.showElement = function(b, i) {
      if (b === codes.CHIPTRAY) {
        /** @type {string} */
        this._chipSelectorWrapper.style.visibility = true === i ? "visible" : "hidden";
      }
    }, init.prototype.onSplash = function(sigma) {
    }, init.prototype.setChipSelectorWrapperOnOrientationChange = function() {
      if ("ls" === exports.DEVICE.orientation) {
        RepositoryApi.getInstance().appendChild(this._root, this._chipSelectorWrapper);
      } else {
        RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._chipSelectorWrapper);
      }
    }, init;
  }(selector);
  var oldContentFor = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var elem = function(t) {
    /**
     * @return {?}
     */
    function config() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return oldContentFor(config, t), config.prototype.init = function(b) {
      t.prototype.init.call(this, b);
    }, config.prototype.show = function(str) {
      if (str) {
        this._container.classList.remove("hidden");
      } else {
        this._container.classList.add("hidden");
      }
    }, config;
  }(root);
  var rewriteCookieDomain = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ah = function() {
    /**
     * @param {string} data
     * @param {?} latLon
     * @return {undefined}
     */
    function createInfoWindow(data, latLon) {
      /** @type {string} */
      this.text = data;
      this.styleID = latLon;
    }
    return createInfoWindow;
  }();
  var PathString = function(config) {
    /**
     * @param {?} y
     * @param {?} text
     * @param {!NodeList} data
     * @return {?}
     */
    function Tooltip(y, text, data) {
      var self = config.call(this, "IDS_BTN_SETTINGS", y) || this;
      self.initUIData();
      self._view = RepositoryApi.getInstance().createDiv("settingsview");
      var edit;
      /** @type {number} */
      var i = 0;
      var nbElts = data.length;
      for (; i < nbElts; i++) {
        if (void 0 !== (edit = self._uIData[data[i]])) {
          self._buttons[data[i]] = self.createCheckbox(data[i], edit.text, self._view, edit.styleID);
        }
      }
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return self.handleOrientationChange();
      }), scope.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return self.handleOrientationChange();
      })), self;
    }
    return rewriteCookieDomain(Tooltip, config), Tooltip.prototype.createCheckbox = function(id, name, labelText, checked) {
      var field = new ZmPrefAccount(name, checked);
      return field.getDOMNode().classList.add("settingsview_checkbox"), field.getDOMNode().style.position = "", labelText.appendChild(field.getDOMNode()), this._buttons[id] = field, field;
    }, Tooltip.prototype.show = function(str) {
    }, Tooltip.prototype.isVisible = function() {
      return false;
    }, Tooltip.prototype.handleOrientationChange = function() {
    }, Tooltip.prototype.showTextfield = function(pasted, content) {
    }, Tooltip.prototype.initUIData = function() {
      this._uIData = {};
      this._uIData[instance.SOUND] = new ah("IDS_M_SETTINGS_L1", "settingsIconSound");
      this._uIData[instance.AUTOCLEARWIN] = new ah("IDS_M_SETTINGS_L2", "settingsIconClearTableOnWin");
      this._uIData[instance.AUTOCLEARLOSE] = new ah("IDS_M_SETTINGS_L3", "settingsIconClearTableOnLose");
      this._uIData[instance.AUTOCLEARENDOFROUND] = new ah("IDS_M_SETTINGS_L17", "settingsIconClearTableOnWin");
      this._uIData[instance.AUTODEAL] = new ah("IDS_M_SETTINGS_L4", "settingsIconAutoDeal");
      this._uIData[instance.FASTPLAY] = new ah("IDS_M_SETTINGS_L12", "settingsIconFastPlay");
      this._uIData[instance.LEFTHANDMODE] = new ah("IDS_M_SETTINGS_L14", "settingsIconLeftHand");
      this._uIData[instance.VOICEOVER] = new ah("IDS_M_SETTINGS_L10", "settingsIconVoiceOver");
      this._uIData[instance.MUSIC] = new ah("IDS_M_SETTINGS_L18", "settingsIconSound");
    }, Tooltip;
  }(tokens);
  var ruleRefGrammar = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var WebdavWrapper = function(a) {
    /**
     * @param {?} expr
     * @param {!Object} context
     * @param {number} f
     * @param {number} ctx
     * @return {?}
     */
    function $(expr, context, f, ctx) {
      if (void 0 === f) {
        /** @type {number} */
        f = 4;
      }
      if (void 0 === ctx) {
        /** @type {string} */
        ctx = "IDS_MW_TEXT";
      }
      var that = a.call(this, "IDS_BTN_TABLELIMITS", expr) || this;
      return that._limitsText = ctx, that._dispatcher = context, that._textManager = self.ResourceManager.getInstance().getTextManager(), that._textManager.addRefreshListener(function() {
        return that.onTextRefresh();
      }), that.createView(), that.createLimitsPanel(), that.createLimitValues(f), that;
    }
    return ruleRefGrammar($, a), $.prototype.isVisible = function() {
      return false;
    }, $.prototype.setText = function(message, value) {
      /** @type {string} */
      this._limitValues[message].innerHTML = value;
    }, $.prototype.onFocusIn = function() {
      var _this = this;
      this._statsTimeOut = window.setTimeout(function() {
        _this._dispatcher.dispatch(new self.MegatonUIEvent(self.MegatonUIEvent.PAYTABLE));
      }, 3000);
    }, $.prototype.onFocusOut = function() {
      clearTimeout(this._statsTimeOut);
    }, $.prototype.show = function(str) {
    }, $.prototype.createView = function() {
      this._view = RepositoryApi.getInstance().createDiv("settingsview", "");
    }, $.prototype.createLimitsPanel = function() {
      this._limitsPanel = RepositoryApi.getInstance().createAndAppendDiv(this._view, "limitsTableMenu");
    }, $.prototype.onTextRefresh = function() {
      var componentsStr = this._textManager.getByName(this._limitsText).getText();
      var wpls__results = componentsStr.split("\n");
      /** @type {number} */
      var j = 0;
      /** @type {number} */
      var i = 0;
      var results = wpls__results;
      for (; i < results.length; i++) {
        var r = results[i];
        this._limitTexts[j].innerHTML = r;
        j++;
      }
    }, $.prototype.createLimitValues = function(rows) {
      var extra = RepositoryApi.getInstance();
      this._limitTexts = {};
      this._limitValues = {};
      /** @type {number} */
      var i = 0;
      for (; i < rows; i++) {
        /** @type {string} */
        var callback = "limitRow" + (i % 2 == 0 ? " highlightedRow" : "");
        var result = extra.createAndAppendDiv(this._limitsPanel, "", callback);
        this._limitTexts[i] = extra.createAndAppendDiv(result, "limitTextMenu");
        this._limitValues["limit" + (i + 1)] = extra.createAndAppendDiv(result, "limitValueMenu");
      }
    }, $;
  }(tokens);
  var interpolateQuartic = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var c_style = function(c) {
    /**
     * @return {?}
     */
    function b() {
      return null !== c && c.apply(this, arguments) || this;
    }
    return interpolateQuartic(b, c), b.prototype.createChipView = function() {
      return new eh;
    }, b.prototype.createStatusBarView = function(i) {
      return new f(this._container, i);
    }, b.prototype.createButtonView = function() {
      return new doc_part(document.getElementById("buttonsWrapper"));
    }, b.prototype.createSettingsView = function() {
      var context;
      return context = this.initSettingsButton(), new PathString(this._container, "SettingsDlg_tablegames", context);
    }, b.prototype.createTableLimitsView = function(sync) {
      return new WebdavWrapper(this._container, sync);
    }, b.prototype.createMenuView = function(signature, args, var_args) {
      return new Signature(signature, args, var_args);
    }, b.prototype.createLimitsSign = function(dependencyChain) {
      var obj = self.ResourceManager.getInstance().getEntityManager();
      var XXXX_Extension = obj.getByName("main");
      /** @type {!Element} */
      var i = document.createElement("div");
      return i.id = "limitsWrapper", document.body.appendChild(i), new AttrLoader(XXXX_Extension, dependencyChain);
    }, b.prototype.createGameRulesView = function(clickRepeater, e) {
      return new NavigationError(this._container, clickRepeater, e);
    }, b.prototype.createGameHistoryView = function(eta, lmbda, n) {
      return new StateChange(this._container, eta, lmbda, n);
    }, b.prototype.createCashierView = function(timeout, value) {
      return new Context(this._container, timeout, this._config.urlMode, value);
    }, b.prototype.createPlayForRealMenuViewMobile = function(matchingTag) {
      return new MatchedTags(this._container, matchingTag);
    }, b.prototype.createLimitsPopup = function(deltaType) {
      return null;
    }, b.prototype.createInteractionFeedbackView = function(canCreateDiscussions) {
      return null;
    }, b.prototype.initSettingsButton = function() {
      /** @type {!Array} */
      var t = [];
      return this._config.hideSound || (t.push(instance.SOUND), t.push(instance.VOICEOVER)), this.initAutoClearButtons(t), t.push(instance.AUTODEAL), this._config.hideFastPlay || t.push(instance.FASTPLAY), t.push(instance.LEFTHANDMODE), this.initAdditionalButtons(t), t;
    }, b.prototype.initAutoClearButtons = function(result) {
      result.push(instance.AUTOCLEARWIN);
      result.push(instance.AUTOCLEARLOSE);
    }, b.prototype.initAdditionalButtons = function(selector) {
    }, b.prototype.createGameNameView = function() {
      return new ShapeHandlerClass(this._container);
    }, b;
  }(elem);
  var resolve = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Text = function(helper) {
    /**
     * @param {!HTMLElement} g
     * @param {!Object} b
     * @param {?} type
     * @param {!Element} test
     * @param {?} a
     * @param {string} item
     * @return {?}
     */
    function init(g, b, type, test, a, item) {
      var d = helper.call(this, g, b, test, 0) || this;
      /** @type {!Element} */
      d._view = test;
      /** @type {string} */
      d._roundHandler = item;
      /** @type {boolean} */
      d._isValid = false;
      d._disableAutoplay = a.disableAutoPlay;
      /** @type {string} */
      d._currentSliderDown = "";
      /** @type {number} */
      d._startSliderValue = NaN;
      b.addListener(function() {
        return d.onSettingsChange();
      });
      g.addEventListener(node.AUTOPLAY, function() {
        return d.show();
      });
      g.addEventListener(tree.AutoplayEvent.AUTOPLAY_TRIGGER, function(it_case) {
        return d.onAutoplayTrigger(it_case);
      });
      g.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return d.onAutoplayStarted();
      });
      g.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return d.onAutoplayStopped();
      });
      g.addEventListener(self.DenominationsEvent.DENOMINATIONS, function(inlets) {
        return d.onDenominations(inlets);
      });
      g.addEventListener(self.CurrencyEvent.CURRENCY, function(body) {
        return d.onCurrency(body);
      });
      g.addEventListener(tree.MysteryJackpotCustomDataEvent.CUSTOMDATA, function() {
        return d.addJackpotCheckbox();
      });
      g.addEventListener(self.RealityCheckEvent.REALITYCHECKEVENT, function() {
        return d.onPopup();
      });
      g.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, function() {
        return d.onPopup();
      });
      item.addListener(function() {
        return d.onRoundStateChange();
      });
      test.initButton(args.STOP_ANY, b.toggleStopAtAnyWin.bind(b));
      test.initButton(args.STOP_BONUS, b.toggleStopAtBonusWin.bind(b));
      test.initButton(args.STOP_JACKPOT, b.toggleStopAtJackpotWin.bind(b));
      test.showButton(args.STOP_FS, false);
      test.enableButton(args.STOP_ANY, !d._disableAutoplay);
      test.enableButton(args.STOP_BONUS, !d._disableAutoplay);
      test.enableButton(args.STOP_JACKPOT, !d._disableAutoplay);
      var num = a.hasJackpots || a.hasGuaranteedJackpot;
      test.showCheckBox(args.STOP_JACKPOT, num);
      test.showText(args.SETTING3_LABEL, num);
      test.initButton(args.STOP_WIN, b.toggleStopAtWin.bind(b));
      test.initButton(args.STOP_BAL_INC, b.toggleStopAtBalanceInc.bind(b));
      test.initButton(args.STOP_BAL_DEC, b.toggleStopAtBalanceDec.bind(b));
      /** @type {!Array} */
      d._numberButtons = [];
      d._numberButtons.push(args.NUMBER1);
      d._numberButtons.push(args.NUMBER2);
      d._numberButtons.push(args.NUMBER3);
      d._numberButtons.push(args.NUMBER4);
      d._numberButtons.push(args.NUMBER5);
      d._autoSpins = a.autoSpins;
      var eejsConfig = this;
      /** @type {number} */
      var r = 0;
      /** @type {number} */
      var readersLength = d._numberButtons.length;
      for (; r < readersLength; r++) {
        !function(key, canCreateDiscussions) {
          var id = eejsConfig._numberButtons[key];
          test.setButtonText(id, String(eejsConfig._autoSpins[key]));
          test.initButton(id, function() {
            return d.onSpinsButton(d._autoSpins[key]);
          });
          test.enableButton(id, true);
        }(r);
      }
      if (test.initSlider(position.SLD_AUTOPLAY, function(t) {
        return d.onAutoplaySlider(t);
      }), test.addSliderPressHandlers(position.SLD_AUTOPLAY, function(element, clojIsReversed) {
        return d.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return d.onSliderUp(t, e);
      }), test.enableSlider(position.SLD_AUTOPLAY, !d._disableAutoplay), b.autoplayReset) {
        /** @type {!Array<?>} */
        var value = [0].concat(d._autoSpins);
        test.setSliderValueArray(position.SLD_AUTOPLAY, value);
      } else {
        test.setSliderValueArray(position.SLD_AUTOPLAY, d._autoSpins);
      }
      return b.plays = b.autoplayReset ? 0 : a.defaultAutoSpins, test.initSlider(args.SLIDER1, function(args) {
        return d.onStopAtWin(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), test.addSliderPressHandlers(args.SLIDER1, function(element, clojIsReversed) {
        return d.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return d.onSliderUp(t, e);
      }), test.initSlider(args.SLIDER2, function(args) {
        return d.onStopAtBalanceInc(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), test.addSliderPressHandlers(args.SLIDER2, function(element, clojIsReversed) {
        return d.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return d.onSliderUp(t, e);
      }), test.initSlider(args.SLIDER3, function(args) {
        return d.onStopAtBalanceDec(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), test.addSliderPressHandlers(args.SLIDER3, function(element, clojIsReversed) {
        return d.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return d.onSliderUp(t, e);
      }), test.initSlider(args.SLIDER4, function(args) {
        return d.onTotalLossReaches(args);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), test.addSliderPressHandlers(args.SLIDER4, function(element, clojIsReversed) {
        return d.onSliderDown(element, clojIsReversed);
      }, function(t, e) {
        return d.onSliderUp(t, e);
      }), test.enableSlider(args.SLIDER1, !d._disableAutoplay), test.enableSlider(args.SLIDER2, !d._disableAutoplay), test.enableSlider(args.SLIDER3, !d._disableAutoplay), test.enableSlider(args.SLIDER4, !d._disableAutoplay), test.showSlider(args.SLIDER4, b.autoplayLimits), test.showText(args.SLIDER4_CURRENCY, b.autoplayLimits), test.setSliderValueArray(args.SLIDER1, d.createSliderValueArray(0, 1000000, 100)), test.setSliderValueArray(args.SLIDER2, d.createSliderValueArray(0, 1000000, 100)), test.setSliderValueArray(args.SLIDER3, 
      d.createSliderValueArray(0, 1000000, 100)), b.autoplayReset && (d.resetLimitSettings(), b.autoplayLimits && test.setSliderMode(args.SLIDER1, true)), test.initButton(args.START, function() {
        return d.onAutoplayStart();
      }), test.enableButton(args.START, true), test.initButton(args.TOGGLE, function() {
        return d.onAutoplayToggle();
      }), test.enableButton(args.TOGGLE, !(b.autoplayReset || d._disableAutoplay)), d;
    }
    return resolve(init, helper), init.prototype.onSettingsChange = function() {
      var e = this._model;
      this._view.selectButton(args.STOP_ANY, e.stopAtAnyWin);
      this._view.selectButton(args.STOP_BONUS, e.stopAtBonusWin);
      this._view.selectButton(args.STOP_JACKPOT, e.stopAtJackpotWin);
      this._view.selectButton(args.STOP_WIN, e.stopAtWin);
      this._view.selectButton(args.STOP_BAL_INC, e.stopAtBalanceInc);
      this._view.selectButton(args.STOP_BAL_DEC, e.stopAtBalanceDec);
      /** @type {number} */
      var i = 0;
      var ncells = this._numberButtons.length;
      for (; i < ncells; i++) {
        this._view.selectButton(this._numberButtons[i], e.plays === this._autoSpins[i]);
      }
      this._view.setSliderValue(position.SLD_AUTOPLAY, e.plays);
      this._view.setAutoplayButtonValue(e.plays);
      this._view.setSliderValue(args.SLIDER1, e.stopAtWinValue);
      this._view.setSliderValue(args.SLIDER2, e.stopAtBalanceIncValue);
      this._view.setSliderValue(args.SLIDER3, e.stopAtBalanceDecValue);
      if (e.autoplayLimits) {
        this._view.setSliderValue(args.SLIDER4, e.stopAtTotalLossValue);
      }
    }, init.prototype.onSpinsButton = function(plays) {
      this._model.plays = plays;
      if (this._model.autoplayReset) {
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.onAutoplaySlider = function(params) {
      var a = this._model;
      a.plays = params.slValue;
      if (a.autoplayReset) {
        this._view.setSliderValid(position.SLD_AUTOPLAY, params.slValue > 0);
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.show = function() {
      helper.prototype.show.call(this);
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_STOP));
    }, init.prototype.onOk = function() {
      helper.prototype.onOk.call(this);
      this.onAutoplayStart();
    }, init.prototype.onAutoplayStart = function() {
      this._view.show(false);
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_START));
    }, init.prototype.onAutoplayToggle = function() {
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_TOGGLE));
      this._dispatcher.dispatch(new node(node.MOBILE_MENU));
    }, init.prototype.onAutoplayStarted = function() {
      this._view.setAutoplayButtonState(true);
    }, init.prototype.onAutoplayStopped = function() {
      var self = this._model;
      this._view.setAutoplayButtonState(false);
      this._view.setButtonText(args.TOGGLE, self.plays.toString());
      this.resetLimitSettings();
    }, init.prototype.onAutoplayTrigger = function(it_case) {
      this._view.setButtonText(args.TOGGLE, it_case.playsLeft.toString());
    }, init.prototype.onStopAtWin = function(jumpToNext) {
      this._model.stopAtWinValue = jumpToNext.slValue;
    }, init.prototype.onStopAtBalanceInc = function(jumpToNext) {
      this._model.stopAtBalanceIncValue = jumpToNext.slValue;
    }, init.prototype.onStopAtBalanceDec = function(jumpToNext) {
      this._model.stopAtBalanceDecValue = jumpToNext.slValue;
    }, init.prototype.onDenominations = function(inlets) {
      /** @type {number} */
      var uncert = 100 * inlets.multiplier;
      if (this._view.setSliderValueArray(args.SLIDER1, this.createSliderValueArray(0, 10000 * uncert, uncert)), this._view.setSliderValueArray(args.SLIDER2, this.createSliderValueArray(0, 10000 * uncert, uncert)), this._view.setSliderValueArray(args.SLIDER3, this.createSliderValueArray(0, 10000 * uncert, uncert)), this._model.autoplayLimits) {
        /** @type {!Array<?>} */
        var value = init.TOTAL_LOSS_VALUES.map(function(data) {
          return data * inlets.multiplier;
        });
        this._view.setSliderValueArray(args.SLIDER4, value);
        this.setSliderValid(args.SLIDER4, !this._model.autoplayReset);
        this.revalidateSliders();
      }
    }, init.prototype.onCurrency = function(a) {
      this._view.setCurrency(self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol());
    }, init.prototype.onTotalLossReaches = function(jumpToNext) {
      if (this._model.stopAtTotalLossValue = jumpToNext.slValue, this._model.autoplayReset) {
        /** @type {boolean} */
        var 0 = jumpToNext.slIndex > 0;
        /** @type {boolean} */
        0 = 0 && this._roundHandler.bet <= this._model.stopAtTotalLossValue;
        this.setSliderValid(args.SLIDER4, 0);
        this.revalidateSliders();
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.enableAutoplayButtonIfSettingsAreValid = function() {
      var currentASTRoot = this._model;
      /** @type {boolean} */
      var status = true;
      if (this._model.autoplayLimits) {
        status = status && this._isValid;
      }
      status = status && currentASTRoot.plays > 0;
      this._view.enableButton(args.TOGGLE, status && !this._disableAutoplay);
      this._view.enableButton(args.START, status);
      this._view.enableButton(self.ModalViewButton.OK, status);
    }, init.prototype.resetLimitSettings = function() {
      var currentASTRoot = this._model;
      if (currentASTRoot.autoplayReset) {
        /** @type {number} */
        currentASTRoot.plays = 0;
        this._view.setSliderValue(position.SLD_AUTOPLAY, 0);
        this._view.setSliderValid(position.SLD_AUTOPLAY, false);
        if (currentASTRoot.autoplayLimits) {
          /** @type {number} */
          currentASTRoot.stopAtTotalLossValue = 0;
          this._view.setSliderValue(args.SLIDER4, 0);
          this.setSliderValid(args.SLIDER4, false);
        }
        /** @type {number} */
        var index = 0;
        var ncells = this._numberButtons.length;
        for (; index < ncells; index++) {
          this._view.selectButton(this._numberButtons[index], false);
        }
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.revalidateSliders = function() {
      var currentASTRoot = this._model;
      if (currentASTRoot.autoplayReset) {
        if (currentASTRoot.autoplayLimits) {
          var records = this._model.stopAtTotalLossValue;
          /** @type {boolean} */
          var 0 = records > 0;
          /** @type {boolean} */
          0 = 0 && this._roundHandler.bet <= records;
          this.setSliderValid(args.SLIDER4, 0);
        }
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.createSliderValueArray = function(first, max, n) {
      if (void 0 === first) {
        /** @type {number} */
        first = 0;
      }
      if (void 0 === max) {
        /** @type {number} */
        max = 1000;
      }
      if (void 0 === n) {
        /** @type {number} */
        n = 1;
      }
      /** @type {!Array} */
      var eventPrototypes = [];
      /** @type {number} */
      var a = first;
      for (; a <= max; a = a + n) {
        eventPrototypes.push(a);
      }
      return eventPrototypes;
    }, init.prototype.onRoundStateChange = function() {
      if (this._model.autoplayReset) {
        this.revalidateSliders();
        this.enableAutoplayButtonIfSettingsAreValid();
      }
    }, init.prototype.setSliderValid = function(e, lastVerFailed) {
      /** @type {boolean} */
      this._isValid = lastVerFailed;
      this._view.setSliderValid(e, lastVerFailed);
    }, init.prototype.addJackpotCheckbox = function() {
      this._view.showCheckBox(args.STOP_JACKPOT, true);
    }, init.prototype.onSliderDown = function(suppressDisabledCheck, isSlidingUp) {
      this._currentSliderDown = suppressDisabledCheck;
      /** @type {!Array} */
      this._startSliderValue = isSlidingUp;
    }, init.prototype.onSliderUp = function(event, fn) {
      /** @type {string} */
      this._currentSliderDown = "";
      /** @type {number} */
      this._startSliderValue = NaN;
    }, init.prototype.onPopup = function() {
      if ("" !== this._currentSliderDown) {
        this._view.setSliderValue(this._currentSliderDown, this._startSliderValue);
      }
    }, init.TOTAL_LOSS_VALUES = [0, 100, 200, 500, 1000, 1500, 2000, 2500, 5000, 10000, 15000, 20000, 25000, 50000, 100000, 200000, 500000, 1000000], init;
  }(target);
  var callService$1 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var column = function(t) {
    /**
     * @return {?}
     */
    function e() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return callService$1(e, t), e.CARDS = "CARDS", e.CARDS_INC = "CARDS_INC", e.CARDS_DEC = "CARDS_DEC", e;
  }(element);
  var params = function(t) {
    /**
     * @return {?}
     */
    function e() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return callService$1(e, t), e.CARDS = "CARDS", e;
  }(sep);
  var try_call = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Float32Array = function(f) {
    /**
     * @param {!HTMLElement} _
     * @param {!Object} l
     * @param {!Object} m
     * @param {!Element} item
     * @return {?}
     */
    function init(_, l, m, item) {
      var that = f.call(this, _) || this;
      return that._roundHandler = l, that._betSettings = m, that._view = item, that._state = 0, that._isAutoplay = false, m.addListener(function(path) {
        return void 0 === path && (path = null), that.onDataChange(path);
      }, null), l.addListener(function(data) {
        return that.onRoundStateChange(data);
      }), _.addEventListener(Popup.SELECT_EVENT, function(data) {
        return that.onRoundStateChange(data);
      }), _.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return that.onShowButtons(m);
      }), _.addEventListener(self.CurrencyEvent.CURRENCY, function() {
        return that.onCurrency();
      }), _.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return that.onAutoplayStarted();
      }), _.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return that.onAutoplayStopped();
      }), item.initButton(column.BETMAX, that._betSettings.betMax.bind(that._betSettings)), item.initButton(column.CARDS, that._betSettings.incLines.bind(that._betSettings)), item.initButton(column.CARDS_INC, that._betSettings.incLines.bind(that._betSettings)), item.initButton(column.CARDS_DEC, that._betSettings.decLines.bind(that._betSettings)), item.initButton(column.COINS, that._betSettings.incCoins.bind(that._betSettings)), item.initButton(column.COINS_INC, that._betSettings.incCoins.bind(that._betSettings)), 
      item.initButton(column.COINS_DEC, that._betSettings.decCoins.bind(that._betSettings)), item.initButton(column.DENOM, that._betSettings.incDenom.bind(that._betSettings)), item.initSlider(params.CARDS, function(t) {
        return that.changeCards(t);
      }), item.initSlider(params.COINS, function(a) {
        return that.changeCoins(a);
      }), item.initSlider(params.DENOM, function(canCreateDiscussions) {
        return that.changeDenomination(canCreateDiscussions);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.FORCE_DECIMAL), item.setLabelText(column.COINBALANCE_LABEL, "IDS_COINS_CAPTION"), item.setLabelText(column.COINBET_LABEL, "IDS_BET_CAPTION"), that.onDataChange(), that.updateButtons(), that.initBetData(), that.onCurrency(), that;
    }
    return try_call(init, f), init.prototype.onDataChange = function(data) {
      if (void 0 === data) {
        /** @type {null} */
        data = null;
      }
      var assert = self.ResourceManager.getInstance().getMoneyFormatter();
      /** @type {boolean} */
      var reverseName = this._state === PseudoStateKind.GROUP_BET;
      /** @type {boolean} */
      var reverseIsSingle = reverseName && !this._isAutoplay;
      if (!(data && !data.isChanged(ctx.COINS))) {
        this._view.setButtonText(column.COINS, this._betSettings.coins.toString());
        this._view.setSliderValue(column.COINS, this._betSettings.coins);
        this._view.enableButton(column.COINS_INC, reverseIsSingle && this._betSettings.coins < this._betSettings.maxCoins);
        this._view.enableButton(column.COINS_DEC, reverseIsSingle && this._betSettings.coins > 1);
      }
      if (!(data && !data.isChanged(ctx.LINES))) {
        this._view.setButtonText(column.CARDS, this._betSettings.lines.toString());
        this._view.setSliderValue(params.CARDS, this._betSettings.lines);
        this._view.enableButton(column.CARDS_INC, reverseIsSingle && this._betSettings.lines < this._betSettings.maxLines);
        this._view.enableButton(column.CARDS_DEC, reverseIsSingle && this._betSettings.lines > 1);
      }
      if (!(data && !data.isChanged(ctx.DENOM))) {
        this._view.setButtonText(column.DENOM, assert.MoneyToString(this._betSettings.denomination, self.MoneyFormatterFlag.FORCE_DECIMAL));
        this._view.setSliderIndex(params.DENOM, this._betSettings.denom);
      }
      if (!(data && !data.isChanged(ctx.DENOMINATIONS))) {
        this.setDenomSlider();
      }
    }, init.prototype.onRoundStateChange = function(testObj) {
      var precision = this._roundHandler.balance;
      var cr_base_asset = self.ResourceManager.getInstance().getMoneyFormatter();
      var $container = self.ResourceManager.getInstance().getCreditFormatter();
      this._view.setLabelText(column.COINBALANCE_LABEL, $container.getCreditString("IDS_LBL_COINS", "IDS_MENU_BALANCE"), "> " + $container.getCreditString(String(Math.floor((precision > 0 ? precision : 0) / this._betSettings.denomination)), cr_base_asset.MoneyToString(precision, self.MoneyFormatterFlag.FORCE_DECIMAL)));
      this._view.setLabelText(column.COINBET_LABEL, "IDS_MENU_BET", "> " + $container.formatCoinValue(this._betSettings.betCoins, self.MoneyFormatterFlag.FORCE_DECIMAL));
      this._view.setLabelText(column.COINBET_LABEL_MOBILE, this._betSettings.betCoins.toString());
      this._view.setLabelText(column.CASHBET_LABEL, cr_base_asset.MoneyToString(this._roundHandler.bet, self.MoneyFormatterFlag.FORCE_DECIMAL));
      this._view.showElement(column.COINBET_LABEL, !this._betSettings.hideBet);
      if (testObj && testObj.type === self.RoundEvent.ROUNDEND) {
        /** @type {boolean} */
        this._betSettings.showExtraBallBet = false;
        /** @type {boolean} */
        this._betSettings.hideBet = false;
        /** @type {number} */
        this._betSettings.extraBallPrice = 0;
      }
      this._view.setLabelArgs(column.COINBET_LABEL, "> " + String(this._betSettings.showExtraBallBet ? this._betSettings.extraBallPrice : this._betSettings.betCoins));
    }, init.prototype.onShowButtons = function(data) {
      this._state = data.groupId;
      this.updateButtons();
    }, init.prototype.updateButtons = function() {
      /** @type {boolean} */
      var attached = this._state === PseudoStateKind.GROUP_BET;
      /** @type {boolean} */
      var value = attached && !this._isAutoplay;
      this._view.enableButton(column.CARDS, value);
      this._view.enableButton(column.CARDS_INC, value && this._betSettings.lines < this._betSettings.maxLines);
      this._view.enableButton(column.CARDS_DEC, value && this._betSettings.lines > 0);
      this._view.enableButton(column.COINS, value);
      this._view.enableButton(column.COINS_INC, value && this._betSettings.coins < this._betSettings.maxCoins);
      this._view.enableButton(column.COINS_DEC, value && this._betSettings.coins > 1);
      this._view.enableButton(column.DENOM, value);
      this._view.enableButton(column.BETMAX, value);
      this._view.enableSlider(params.CARDS, value);
      this._view.enableSlider(params.COINS, value);
      this._view.enableSlider(params.DENOM, value);
      this._view.showButton(column.COINS_INC, !this._betSettings.isLocked(presenter.LockType.COIN));
      this._view.showButton(column.COINS_DEC, !this._betSettings.isLocked(presenter.LockType.COIN));
    }, init.prototype.initBetData = function() {
      this._view.setSliderValueArray(params.CARDS, this.createSliderValueArray(false, this._betSettings.maxLines));
      this._view.setSliderValueArray(params.COINS, this.createSliderValueArray(this._betSettings.isLocked(presenter.LockType.COIN), this._betSettings.maxCoins));
      this._view.setSliderValue(params.CARDS, this._betSettings.lines);
      this._view.setSliderValue(params.COINS, this._betSettings.coins);
      this.setDenomSlider();
    }, init.prototype.createSliderValueArray = function(first, max) {
      /** @type {!Array} */
      var hash_settings = [];
      var i = first ? max : 1;
      for (; i <= max; ++i) {
        hash_settings.push(i);
      }
      return hash_settings;
    }, init.prototype.changeCards = function(t) {
      /** @type {number} */
      var e = 0;
      for (; e < Math.abs(t.slStep); ++e) {
        if (t.slStep > 0) {
          this._betSettings.incLines();
        } else {
          this._betSettings.decLines();
        }
      }
    }, init.prototype.changeCoins = function(coins) {
      this._betSettings.coins = coins.slValue;
    }, init.prototype.changeDenomination = function(canCreateDiscussions) {
      this._betSettings.setDenomIndex(canCreateDiscussions.slIndex);
    }, init.prototype.setDenomSlider = function() {
      this._view.setSliderValueArray(params.DENOM, this._betSettings.denominations);
      this._view.setSliderIndex(params.DENOM, this._betSettings.denom);
    }, init.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
    }, init.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
    }, init.prototype.onCurrency = function() {
      this._betSettings.notify();
      this._view.setCurrency(self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol());
    }, init;
  }(exports.EventProcessor);
  var e = function() {
    /**
     * @return {undefined}
     */
    function validateReducer() {
    }
    return validateReducer.SPIN = "SPIN", validateReducer.CONTINUE = "CONTINUE", validateReducer.COLLECT = "COLLECT", validateReducer.NEWCARD = "NEWCARD", validateReducer.EXTRABALL = "EXTRABALL", validateReducer.APCOUNTER = "APCOUNTER", validateReducer.AUTOPLAY = "AUTOPLAY", validateReducer.AUTOPLAY_STOP = "AUTOPLAY_STOP", validateReducer.PAYTABLE = "PAYTABLE", validateReducer.FASTPLAY = "FASTPLAY", validateReducer;
  }();
  var syncProject = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Entry = function(startFn) {
    /**
     * @param {!HTMLElement} event
     * @param {!Object} value
     * @param {!Object} settings
     * @param {!Element} input
     * @param {!Object} config
     * @return {?}
     */
    function load(event, value, settings, input, config) {
      var me = startFn.call(this, event) || this;
      return me._config = config, me._roundHandler = value, me._settings = settings, me._view = input, me._disableAutoPlay = config.disableAutoPlay, me._disableFastPlay = config.disableFastPlay, me._mjActive = false, me._disabledState = true, event.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), event.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function(it_case) {
        return me.onAutoplayStarted(it_case);
      }), event.addEventListener(tree.AutoplayEvent.AUTOPLAY_TRIGGER, function(it_case) {
        return me.onAutoplayTrigger(it_case);
      }), event.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      }), event.addEventListener(presenter.BonusEvent.BONUS_STARTED, function(value) {
        return me.onBonus(value);
      }), event.addEventListener(presenter.BonusEvent.BONUS_ENDED, function(value) {
        return me.onBonus(value);
      }), event.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function() {
        return me.onJackpotWin();
      }), event.addEventListener(presenter.JackpotEndEvent.JACKPOTEND, function() {
        return me.onJackpotEnd();
      }), event.addEventListener(presenter.VideoSlotUIEvent.SPIN_OR_CONTINUE, function() {
        return me.onSpin();
      }), event.addEventListener(self.GameStatusEvent.DISABLE, function() {
        return me.onDisable();
      }), event.addEventListener(self.GameStatusEvent.ENABLE, function() {
        return me.onEnable();
      }), event.addEventListener(self.ExitEvent.LOGOUT, function(dispatch) {
        return me.onLogout(dispatch);
      }), event.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return me.onEnable();
      }), event.addEventListener(win.BUY_EXTRABALL, function() {
        return me.onExtraBall();
      }), value.addListener(function() {
        return me.onRoundStateChange();
      }), settings.addListener(function(t) {
        return me.onSettingsChange(t);
      }), input.initButton(e.SPIN, function() {
        return me.onSpin();
      }), input.initButton(e.CONTINUE, function() {
        return me.onContinue();
      }), input.initButton(e.COLLECT, function() {
        return me.onCollect();
      }), input.initButton(e.NEWCARD, function() {
        return me.onNewCard();
      }), input.initButton(e.EXTRABALL, function() {
        return me.onExtraBall();
      }), input.initButton(e.AUTOPLAY, function() {
        return me.onAutoplay();
      }), input.initButton(e.APCOUNTER, function() {
        return me.onAutoplayStop();
      }), input.initButton(e.PAYTABLE, function() {
        return me.onPaytable();
      }), input.initButton(e.FASTPLAY, settings.toggleFastPlay.bind(settings)), me._view.showButton(e.CONTINUE, false), me._view.showButton(e.COLLECT, false), me._view.showButton(e.EXTRABALL, false), me._view.enableButton(e.AUTOPLAY, !me._disableAutoPlay), me._view.enableButton(e.PAYTABLE, true), me._view.enableButton(e.FASTPLAY, !me._disableFastPlay), me._buttonSnd = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.DESKTOP ? self.ResourceManager.getInstance().getSndManager().create("btnClick") : 
      null, me._state = PseudoStateKind.GROUP_NONE, me._autoplayState = false, me._bonusHideButtons = false, me.updateButtons(), me;
    }
    return syncProject(load, startFn), load.prototype.onBonus = function(reference) {
      if ("mobile" === this._config.channel) {
        switch(reference.type) {
          case presenter.BonusEvent.BONUS_STARTED:
            /** @type {boolean} */
            this._bonusHideButtons = true;
            this.updateButtons();
            break;
          case presenter.BonusEvent.BONUS_ENDED:
            /** @type {boolean} */
            this._bonusHideButtons = false;
            this.updateButtons();
        }
      }
    }, load.prototype.onShowButtons = function(data) {
      switch(this._state = data.groupId, this._state) {
        case PseudoStateKind.GROUP_BET:
        case PseudoStateKind.GROUP_COLLECT:
          this._lastState = this._state;
          break;
        case PseudoStateKind.GROUP_EXTRABALL:
          this._lastState = this._state;
          this._dispatcher.dispatch(new node(node.EXTRABALL_AVAILABLE));
      }
      this.updateButtons();
    }, load.prototype.onRoundStateChange = function() {
      this.updateButtons();
    }, load.prototype.updateButtons = function() {
      /** @type {boolean} */
      var attached = this._state === PseudoStateKind.GROUP_CONTINUE;
      /** @type {boolean} */
      var link = this._lastState === PseudoStateKind.GROUP_BET;
      /** @type {boolean} */
      var n = this._lastState === PseudoStateKind.GROUP_EXTRABALL;
      /** @type {boolean} */
      var readable = this._lastState === PseudoStateKind.GROUP_COLLECT;
      this._view.showButton(e.SPIN, !this._bonusHideButtons && !this._autoplayState && !attached && link);
      this._view.showButton(e.EXTRABALL, !this._bonusHideButtons && !this._autoplayState && !attached && (n || readable));
      this._view.showButton(e.CONTINUE, !this._bonusHideButtons && !this._autoplayState && attached);
      this._view.showButton(e.NEWCARD, !this._bonusHideButtons && !n && !readable);
      this._view.showButton(e.COLLECT, !this._bonusHideButtons && (n || readable));
      /** @type {boolean} */
      link = this._state === PseudoStateKind.GROUP_BET;
      /** @type {boolean} */
      n = this._state === PseudoStateKind.GROUP_EXTRABALL;
      this._view.enableButton(e.SPIN, link && !this._autoplayState && !this._mjActive);
      this._view.enableButton(e.NEWCARD, link && !this._autoplayState);
      this._view.enableButton(e.COLLECT, (n || readable) && !this._autoplayState);
      this._view.enableButton(e.EXTRABALL, n && !this._autoplayState);
      this._view.enableButton(e.CONTINUE, attached && !this._autoplayState && !this._mjActive);
      this._view.enableButton(e.FASTPLAY, !this._disableFastPlay && !this._mjActive);
      this._view.enableButton(e.AUTOPLAY, !this._disableAutoPlay && !this._mjActive);
      this._view.enableButton(e.PAYTABLE, !this._mjActive);
      this._view.showButton(e.APCOUNTER, this._autoplayState && !this._bonusHideButtons);
      this._view.enableButton(e.APCOUNTER, this._autoplayState);
      this._view.selectButton(e.AUTOPLAY, this._autoplayState);
    }, load.prototype.onSettingsChange = function(event) {
      if (this._disableFastPlay) {
        this._view.selectButton(e.FASTPLAY, false);
      } else {
        this._view.selectButton(e.FASTPLAY, this._settings.fastPlay);
      }
    }, load.prototype.onDisable = function() {
      /** @type {boolean} */
      this._disabledState = true;
    }, load.prototype.onEnable = function() {
      /** @type {boolean} */
      this._disabledState = false;
    }, load.prototype.onSpin = function() {
      switch(this._state) {
        case PseudoStateKind.GROUP_NONE:
          break;
        case PseudoStateKind.GROUP_COLLECT:
        case PseudoStateKind.GROUP_BET:
          if (!(this._autoplayState || this._disabledState)) {
            this.doSpin();
          }
          break;
        case PseudoStateKind.GROUP_EXTRABALL:
          this.onCollect();
          break;
        case PseudoStateKind.GROUP_CONTINUE:
          this.onContinue();
      }
    }, load.prototype.doSpin = function() {
      this._dispatcher.dispatch(new node(node.SPIN));
      this.onButton();
    }, load.prototype.onContinue = function() {
      this._dispatcher.dispatch(new node(node.CONTINUE));
      this.onButton();
    }, load.prototype.onCollect = function() {
      this._dispatcher.dispatch(new node(node.COLLECT));
      this.onButton();
    }, load.prototype.onNewCard = function() {
      this._dispatcher.dispatch(new node(node.NEWCARD));
      this.onButton();
    }, load.prototype.onPaytable = function() {
      this._dispatcher.dispatch(new node(node.PAYTABLE));
      this.onButton();
    }, load.prototype.onAutoplay = function() {
      if (this._autoplayState) {
        this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_STOP));
      } else {
        this._dispatcher.dispatch(new node(node.AUTOPLAY));
      }
      this.onButton();
    }, load.prototype.onExtraBall = function() {
      if (this._state === PseudoStateKind.GROUP_EXTRABALL) {
        this._dispatcher.dispatch(new node(node.EXTRABALL));
        this.onButton();
      }
    }, load.prototype.onAutoplayStop = function() {
      this._dispatcher.dispatch(new tree.AutoplayEvent(tree.AutoplayEvent.AUTOPLAY_STOP));
      this.onButton();
    }, load.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._autoplayState = false;
      this.updateButtons();
    }, load.prototype.onAutoplayStarted = function(it_case) {
      /** @type {boolean} */
      this._autoplayState = true;
      this._view.setButtonText(e.APCOUNTER, it_case.playsLeft.toString());
      this.updateButtons();
    }, load.prototype.onAutoplayTrigger = function(it_case) {
      this._view.setButtonText(e.APCOUNTER, it_case.playsLeft.toString());
    }, load.prototype.onButton = function() {
      if (this._buttonSnd) {
        this._buttonSnd.play();
      }
    }, load.prototype.onJackpotWin = function() {
      /** @type {boolean} */
      this._mjActive = true;
      this.updateButtons();
    }, load.prototype.onJackpotEnd = function() {
      /** @type {boolean} */
      this._mjActive = false;
      this.updateButtons();
    }, load.prototype.onLogout = function(callback) {
      /** @type {boolean} */
      this._disabledState = true;
      this.updateButtons();
    }, load;
  }(exports.EventProcessor);
  var o = function() {
    /**
     * @return {undefined}
     */
    function item() {
    }
    return item.SOUND = "SOUND", item.MOBILE_SOUND = "MOBILE_SOUND", item.FASTPLAY = "FASTPLAY", item.HELP = "HELP", item.MENU = "MENU", item.MOBILE_MENU = "MOBILE_MENU", item.EXIT = "EXIT", item.PLAYFORREAL = "PLAYFORREAL", item.HISTORY = "HISTORY", item.TUTORIAL = "TUTORIAL", item;
  }();
  var EventConsts = function() {
    /**
     * @return {undefined}
     */
    function PrimitiveType() {
    }
    return PrimitiveType.COINVALUE = "COINVALUE", PrimitiveType.COINVALUE_INC = "COINVALUE_INC", PrimitiveType.COINVALUE_DEC = "COINVALUE_DEC", PrimitiveType.COINS = "COINS", PrimitiveType.COINS_INC = "COINS_INC", PrimitiveType.COINS_DEC = "COINS_DEC", PrimitiveType.LINES = "LINES", PrimitiveType.LINES_INC = "LINES_INC", PrimitiveType.LINES_DEC = "LINES_DEC", PrimitiveType;
  }();
  var needActiveTab = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Filter = function($) {
    /**
     * @param {!HTMLElement} that
     * @param {!Object} value
     * @param {string} event
     * @param {?} ui
     * @param {!Object} config
     * @param {!Array} p
     * @return {?}
     */
    function init(that, value, event, ui, config, p) {
      if (void 0 === p) {
        /** @type {null} */
        p = null;
      }
      var me = $.call(this, that, ui, config) || this;
      /** @type {number} */
      me._totalWin = 0;
      /** @type {!Object} */
      me._roundHandler = value;
      /** @type {string} */
      me._gameSettings = event;
      /** @type {number} */
      me._prevMinutes = -1;
      /** @type {!Array} */
      me._betSettings = p;
      /** @type {boolean} */
      me._isAutoplay = false;
      /** @type {!Object} */
      me._config = config;
      value.addListener(function(t) {
        return me.onRoundStateChange(t);
      });
      event.addListener(function(t) {
        return me.onSettingsChange(t);
      });
      var isSelected = config.demoPlay && config.playForRealSigns;
      return me.initiateButton(o.SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(o.MOBILE_SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(o.FASTPLAY, config.hideFastPlay, config.disableFastPlay, function() {
        return me.onFastPlay();
      }), me.initiateButton(o.HELP, config.hideHelp, config.disableHelp, function() {
        return me.onHelp();
      }), me.initiateButton(o.EXIT, config.hideExit, false, function() {
        return me.onExit();
      }), me.initiateButton(o.MENU, false, false, function() {
        return me.onSettings();
      }), me.initiateButton(o.MOBILE_MENU, false, false, function() {
        return me.onMenu();
      }), me.initiateButton(o.HISTORY, config.hideHistory, config.disableHistory, function() {
        return me.onHistory();
      }), me.initiateButton(o.PLAYFORREAL, !isSelected, !isSelected, function() {
        return me.onPlayForReal();
      }), me.initiateButton(o.TUTORIAL, true, true, function() {
        return me.onTutorial();
      }), config.disableSound && (ui.selectButton(o.SOUND, false), ui.selectButton(o.MOBILE_SOUND, false)), ui.showClock(config.displayClock), ui.setWin(0), ui.setBet(0, false), ui.setBalance(0), config.disableExitInRound && that.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(link) {
        return me.onShowExitButton(link);
      }), that.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), that.addEventListener(node.MENUSHOW, function() {
        return me.onMenuShow(true);
      }), that.addEventListener(node.MENUHIDE, function() {
        return me.onMenuShow(false);
      }), that.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return me.onAutoplayStarted();
      }), that.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      }), that.addEventListener(self.SplashEvent.SPLASH_SHOW, function() {
        return me.onSplash(true);
      }), that.addEventListener(self.SplashEvent.SPLASH_HIDE, function() {
        return me.onSplash(false);
      }), that.addEventListener(Popup.SELECT_EVENT, function(t) {
        return me.onRoundStateChange(t);
      }), that.addEventListener(self.InfoEvent.INFO, function(t) {
        return me.onInfo(t);
      }), that.addEventListener(presenter.JackpotWinEvent.JACKPOTWIN, function(ast) {
        return me.onJackpotWin(ast);
      }), that.addEventListener(presenter.JackpotEndEvent.JACKPOTEND, function(t) {
        return me.onJackpotEnd(t);
      }), self.ResourceManager.getInstance().getTextManager().addRefreshListener(function(t) {
        return me.onRoundStateChange(t);
      }), me._buttonSnd = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.DESKTOP ? self.ResourceManager.getInstance().getSndManager().create("btnClick") : null, me;
    }
    return needActiveTab(init, $), init.prototype.onJackpotWin = function(val) {
      var Toolbar = this;
      this._statusBarView.setWin(val.amount);
      this._activeButtons.forEach(function(is_file_chosen) {
        Toolbar._statusBarView.enableButton(is_file_chosen, false);
      });
    }, init.prototype.onJackpotEnd = function(result) {
      var Toolbar = this;
      this._activeButtons.forEach(function(is_file_chosen) {
        Toolbar._statusBarView.enableButton(is_file_chosen, true);
      });
    }, init.prototype.onInfo = function(data) {
      switch(data.infoId) {
        case tree.WinInfoEvent.WIN:
          /** @type {!Object} */
          var p = data;
          this._totalWin += p.coins;
          this._statusBarView.setWin(this._totalWin * this._betSettings.denomination);
      }
    }, init.prototype.onSettingsChange = function(a) {
      this._statusBarView.selectButton(o.SOUND, !this._gameSettings.sound);
      this._statusBarView.selectButton(o.MOBILE_SOUND, !this._gameSettings.sound);
      this._statusBarView.setLeftHandMode(this._gameSettings.leftHandMode);
      this._statusBarView.selectButton(o.FASTPLAY, !this._gameSettings.fastPlay);
      if (a.isChanged(self.SettingsChange.FASTPLAY)) {
        if (this._gameSettings.fastPlay) {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.FASTPLAY_ON));
        } else {
          this._dispatcher.dispatch(new self.GameStatusEvent(self.GameStatusEvent.FASTPLAY_OFF));
        }
      }
    }, init.prototype.onRoundStateChange = function(t) {
      if (this._statusBarView.setBalance(this._roundHandler.balance), this._statusBarView.setBet(this._roundHandler.bet + this._roundHandler.additonalCost, false), this._betSettings && t) {
        switch(t.type) {
          case self.RoundEvent.ROUNDEND:
            /** @type {boolean} */
            this._betSettings.showExtraBallBet = false;
            /** @type {boolean} */
            this._betSettings.hideBet = false;
            /** @type {number} */
            this._betSettings.extraBallPrice = 0;
            break;
          case self.RoundEvent.ROUNDSTART:
            this._statusBarView.setWin(0);
            /** @type {number} */
            this._totalWin = 0;
            break;
          case self.RoundEvent.WIN:
            this._statusBarView.setWin(t.amount);
        }
        var e = this._betSettings.showExtraBallBet ? this._betSettings.extraBallPrice : this._betSettings.betCoins;
        this._statusBarView.setBetInCoins(e);
      }
    }, init.prototype.onHelp = function() {
      this.onButton();
      this._dispatcher.dispatch(new node(node.HELP));
    }, init.prototype.onExit = function() {
      this.onButton();
      this._dispatcher.dispatch(new node(node.EXIT));
    }, init.prototype.onSound = function() {
      this.onButton();
      this._gameSettings.toggleSound();
    }, init.prototype.onFastPlay = function() {
      this._dispatcher.dispatch(new node(node.TOGGLE_FAST_PLAY));
      this._gameSettings.toggleFastPlay();
    }, init.prototype.onSettings = function() {
      this.onButton();
      this._dispatcher.dispatch(new node(node.MENU));
    }, init.prototype.onMenu = function() {
      this.onButton();
      this._dispatcher.dispatch(new node(node.MOBILE_MENU));
    }, init.prototype.onHistory = function() {
      this.onButton();
      this._dispatcher.dispatch(new node(node.HISTORY, this._userId));
    }, init.prototype.onPlayForReal = function() {
      this.onButton();
      this._dispatcher.dispatch(new node(node.PLAYFORREAL));
    }, init.prototype.onTutorial = function() {
    }, init.prototype.onShowExitButton = function(tag) {
      this._statusBarView.enableButton(o.EXIT, 0 !== tag.groupId);
    }, init.prototype.onShowButtons = function(vertex) {
      this._statusBarView.enableButton(o.MENU, vertex.groupId === PseudoStateKind.GROUP_BET && !this._isAutoplay);
    }, init.prototype.onMenuShow = function(e) {
      this._statusBarView.selectButton(o.MENU, e && !this._isAutoplay);
      this._statusBarView.selectButton(o.MOBILE_MENU, e);
    }, init.prototype.onButton = function() {
      if (this._buttonSnd) {
        this._buttonSnd.play();
      }
    }, init.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
    }, init.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
    }, init.prototype.onSplash = function(b) {
      this._statusBarView.onSplash(b);
      this._statusBarView.showButton(o.MOBILE_SOUND, b && !this._config.hideSound);
      this._statusBarView.showButton(o.MOBILE_MENU, !b);
    }, init;
  }(Zepto);
  var iterateOverDateParams = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var WeightVector = function(fn) {
    /**
     * @param {!HTMLElement} e
     * @param {!Element} view
     * @return {?}
     */
    function set(e, view) {
      var that = fn.call(this, e) || this;
      /** @type {!Element} */
      that._view = view;
      /** @type {boolean} */
      that._enabled = false;
      e.addEventListener(self.LoaderEvent.LOADER, function(msg) {
        return that.onLoad(msg);
      });
      var _portletRow = exports.SystemManager.getDeviceHandler();
      return _portletRow && _portletRow.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return that.HandleOrientationChange();
      }), that;
    }
    return iterateOverDateParams(set, fn), set.prototype.onLoad = function(file) {
      if (file.id === self.LoaderEventType.COMPLETE) {
        /** @type {boolean} */
        this._enabled = true;
      }
      this.HandleOrientationChange();
    }, set.prototype.HandleOrientationChange = function() {
      if (this._view) {
        if (this._enabled && "pt" === exports.DEVICE.orientation) {
          this._view.show(true);
        } else {
          this._view.show(false);
        }
      }
    }, set;
  }(exports.EventProcessor);
  var trigger = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Receiver = function(fn) {
    /**
     * @param {!HTMLElement} win
     * @param {!Object} obj
     * @param {?} t
     * @return {?}
     */
    function init(win, obj, t) {
      var me = fn.call(this, win, obj, t, 0) || this;
      return me._state = 0, me._isAutoplay = false, me._betSettings = obj, win.addEventListener(self.RoundEvent.ROUNDSTART, function() {
        return me.onRoundStart();
      }), win.addEventListener(self.RoundEvent.ROUNDEND, function() {
        return me.onRoundEnd();
      }), obj.addListener(function(store) {
        return void 0 === store && (store = null), me.onDataChange(store);
      }, null), win.addEventListener(node.SETTINGS, function() {
        return me.show();
      }), win.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), win.addEventListener(tree.AutoplayEvent.AUTOPLAY_STARTED, function() {
        return me.onAutoplayStarted();
      }), win.addEventListener(tree.AutoplayEvent.AUTOPLAY_STOPPED, function() {
        return me.onAutoplayStopped();
      }), t.initButton(context.COINVALUE_INC, obj.incDenom.bind(obj)), t.initButton(context.COINVALUE_DEC, obj.decDenom.bind(obj)), t.initButton(context.COINS_INC, obj.incCoins.bind(obj)), t.initButton(context.COINS_DEC, obj.decCoins.bind(obj)), t.initButton(context.LINES_INC, obj.incLines.bind(obj)), t.initButton(context.LINES_DEC, obj.decLines.bind(obj)), t.enableButton(context.COINVALUE_INC, obj.denom < obj.denominations.length), t.enableButton(context.COINVALUE_DEC, obj.denom > 0), t.enableButton(context.COINS_INC, 
      obj.coins < obj.maxCoins), t.enableButton(context.COINS_DEC, obj.coins > 1), t.enableButton(context.LINES_INC, obj.lines < obj.maxLines), t.enableButton(context.LINES_DEC, obj.lines > 1), me;
    }
    return trigger(init, fn), init.prototype.onShowButtons = function(data) {
      this._state = data.groupId;
    }, init.prototype.onAutoplayStarted = function() {
      /** @type {boolean} */
      this._isAutoplay = true;
    }, init.prototype.onAutoplayStopped = function() {
      /** @type {boolean} */
      this._isAutoplay = false;
    }, init.prototype.onDataChange = function(data) {
      if (void 0 === data) {
        /** @type {null} */
        data = null;
      }
      var assert = self.ResourceManager.getInstance().getMoneyFormatter();
      var me = this._model;
      /** @type {boolean} */
      var reverseName = this._state === PseudoStateKind.GROUP_BET;
      /** @type {boolean} */
      var reverseIsSingle = reverseName && !this._isAutoplay;
      if (!data || data.isChanged(ctx.COINS) || data.isChanged(ctx.DENOM)) {
        this._view.setButtonText(context.COINVALUE, assert.MoneyToString(me.denomination));
        this._view.setButtonText(context.COINS, me.coins.toString());
        this._view.showButton(context.COINS_INC, !me.isLocked(presenter.LockType.COIN));
        this._view.showButton(context.COINS_DEC, !me.isLocked(presenter.LockType.COIN));
        this._view.enableButton(context.COINVALUE_INC, reverseIsSingle && me.denom < me.denominations.length - 1);
        this._view.enableButton(context.COINVALUE_DEC, reverseIsSingle && me.denom > 0);
        this._view.enableButton(context.COINS_INC, reverseIsSingle && me.coins < me.maxCoins);
        this._view.enableButton(context.COINS_DEC, reverseIsSingle && me.coins > 1);
      }
      if (!(data && !data.isChanged(ctx.LINES))) {
        this._view.setButtonText(context.LINES, me.lines.toString());
        this._view.enableButton(context.LINES_INC, reverseIsSingle && me.lines < me.maxLines);
        this._view.enableButton(context.LINES_DEC, reverseIsSingle && me.lines > 1);
      }
    }, init.prototype.onRoundStart = function() {
      this._betSettings.enable(false, false);
    }, init.prototype.onRoundEnd = function() {
      this._betSettings.enable(true, false);
    }, init;
  }(target);
  var spell_check = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var LineChart = function(session) {
    /**
     * @param {!HTMLElement} context
     * @param {boolean} params
     * @param {!Element} view
     * @return {?}
     */
    function Component(context, params, view) {
      var me = session.call(this, context) || this;
      return me._view = view, me._settingsController = params, context.addEventListener(node.MENU, function() {
        return me.onSettings();
      }), context.addEventListener(node.MOBILE_MENU, function() {
        return me.onShow();
      }), me._settingsController && context.addEventListener(node.SHOWLIMITS, function() {
        return me.onShowLimits();
      }), me;
    }
    return spell_check(Component, session), Component.prototype.onShow = function() {
      /** @type {boolean} */
      var value = !this._view.isVisible();
      if (!value && this._settingsController) {
        this._settingsController.save();
      }
      var item = value ? node.MENUSHOW : node.MENUHIDE;
      this._dispatcher.dispatch(new node(item));
      this._view.show(value);
    }, Component.prototype.onSettings = function() {
      this.onShow();
      this._dispatcher.dispatch(new node(node.SETTINGS));
    }, Component.prototype.onShowLimits = function() {
      if (!this._view.isVisible()) {
        this.onSettings();
        this._view.setPage(1);
      }
    }, Component;
  }(exports.EventProcessor);
  var outlineRange = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Redirect = function(n) {
    /**
     * @param {!HTMLElement} i
     * @param {?} t
     * @param {?} o
     * @param {number} p
     * @return {?}
     */
    function e(i, t, o, p) {
      if (void 0 === p) {
        p = void 0;
      }
      var allTraps = n.call(this, i, t, o, p) || this;
      return i.addEventListener(node.SPIN, function(t) {
        return allTraps.onSpin(t);
      }), i.addEventListener(node.COLLECT, function(t) {
        return allTraps.onSpin(t);
      }), i.addEventListener(node.EXTRABALL, function(t) {
        return allTraps.onSpin(t);
      }), allTraps;
    }
    return outlineRange(e, n), e;
  }(Route);
  var _flashCommand = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Property = function(item) {
    /**
     * @param {!HTMLElement} scope
     * @param {!Object} self
     * @param {?} document
     * @param {!Object} options
     * @param {?} anyContent
     * @return {?}
     */
    function init(scope, self, document, options, anyContent) {
      var $scope = item.call(this, scope, self, document, 0) || this;
      self.addListener(function() {
        return $scope.onSettingsChange();
      });
      scope.addEventListener(node.SETTINGS, function() {
        return $scope.show();
      });
      $scope._videoBingoBetSettings = anyContent;
      document.initButton(region.SOUND, self.toggleSound.bind(self));
      document.initButton(region.AUTOADJUSTBET, self.toggleAdjustBet.bind(self));
      document.initButton(region.LEFTHANDMODE, self.toggleLeftHandMode.bind(self));
      document.initButton(region.FASTPLAY, self.toggleFastPlay.bind(self));
      $scope._cookieStore = new exports.CookieSerializer("settings_" + options.gameId);
      $scope._cookieStore.load(self);
      $scope._betTempStore = new exports.DataSerializer([]);
      if (void 0 == self.adjustBet) {
        self.adjustBet = options.defaultAutoAdjustBet;
      }
      /** @type {boolean} */
      var highlightedColumn = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.MOBILE;
      return options.disableFastPlay ? (self.setFastPlay(false), document.enableButton(region.FASTPLAY, false)) : (void 0 == self.fastPlay || options.hideFastPlay && highlightedColumn) && self.setFastPlay(options.defaultFastPlay), options.disableSound ? ($scope.setInitialSound(false, self, options), document.enableButton(region.SOUND, false)) : (void 0 == self.sound || options.hideSound && highlightedColumn) && $scope.setInitialSound(options.defaultSound, self, options), $scope;
    }
    return _flashCommand(init, item), init.prototype.setInitialSound = function(key, msg, dstId) {
      msg.setSound(key);
    }, init.prototype.show = function() {
      item.prototype.show.call(this);
      this._betTempStore.save(this._videoBingoBetSettings);
    }, init.prototype.save = function() {
      this._cookieStore.save(this._model);
    }, init.prototype.onSettingsChange = function() {
      var e = this._model;
      this._view.selectButton(region.SOUND, e.sound);
      this._view.selectButton(region.FASTPLAY, e.fastPlay);
      this._view.selectButton(region.LEFTHANDMODE, e.leftHandMode);
      this._view.selectButton(region.AUTOADJUSTBET, e.adjustBet);
      this.save();
    }, init.prototype.onOk = function() {
      item.prototype.onOk.call(this);
      this._dispatcher.dispatch(new node(node.MENUHIDE));
    }, init.prototype.onCancel = function() {
      var that = this._model;
      var key = that.sound;
      var outgoingController = that.fastPlay;
      item.prototype.onCancel.call(this);
      that.setSound(key);
      that.setFastPlay(outgoingController);
      this._betTempStore.load(this._videoBingoBetSettings);
      this._videoBingoBetSettings.setActiveCards(this._videoBingoBetSettings.activeCards);
      self.ResourceManager.getInstance().getCreditFormatter().denomination = this._videoBingoBetSettings.denomination;
      this._dispatcher.dispatch(new node(node.MENUHIDE));
    }, init;
  }(target);
  var makeRequest = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var nodes = function(test) {
    /**
     * @param {string} value
     * @param {!Object} n
     * @param {string} name
     * @param {!Object} options
     * @param {string} type
     * @param {!Object} title
     * @param {?} msg
     * @param {?} obj
     * @param {?} args
     * @return {?}
     */
    function create(value, n, name, options, type, title, msg, obj, args) {
      var _this = test.call(this, value, options, obj) || this;
      /** @type {!Object} */
      _this._betSettings = n;
      var EI_multiply = obj.createInfoView();
      if (EI_multiply) {
        _this.createInfoController(value, msg.winCounter, options, EI_multiply);
      }
      var error = _this.createJackpotNotificationView(obj, options, value);
      _this.createJackpotNotificationController(value, error, options);
      var styles = obj.createStatusBarView(n, options);
      new Filter(value, type, name, styles, options, n);
      var len = obj.createButtonView();
      new Entry(value, type, name, len, options);
      var b = obj.createSettingsView();
      new Property(value, name, b, options, n);
      new Receiver(value, n, b);
      var row = obj.createBetPanelView();
      new Float32Array(value, type, n, row);
      var y = obj.createAutoplaySettingsView();
      new Text(value, title, n, y, options, type);
      var id = obj.createSplitView("IDS_MENU_BET_VSLOT", row, y);
      var picSize = obj.createJackpotPanelViewBase();
      _this.createJackpotPanelController(value, picSize, options);
      var wrapped = _this.createPaytable("IDS_BTN_PAYTABLE", obj, args);
      var intercept = obj.createOrientationPromptView();
      new WeightVector(value, intercept);
      /** @type {!Array} */
      var data = [id, b, wrapped];
      if (!(void 0 === options.helpUrl || options.disableHelp || options.hideHelp)) {
        data.push(obj.createGameRulesView(options.helpUrl, _this._dispatcher));
      }
      if (!(void 0 === options.historyUrl || options.disableHistory || options.hideHistory)) {
        data.push(obj.createGameHistoryView(options.historyUrl + "&custid=" + options.customerId, options.language, _this._dispatcher));
      }
      if (!(void 0 === options.cashierUrl || options.demoPlay)) {
        data.push(obj.createCashierView(options.cashierUrl, _this._dispatcher));
      }
      if (options.playForRealUrl && options.demoPlay && options.playForRealSigns) {
        data.push(obj.createPlayForRealMenuViewMobile(_this._dispatcher));
      }
      var div = obj.createMenuView(options.gameName, value, data, b);
      new LineChart(value, null, div);
      var $tooltip = obj.createGameNameView();
      return _this.createGameNameController(value, options, $tooltip), _this;
    }
    return makeRequest(create, test), create.prototype.createInfoController = function(obj, s, n, func) {
      new Uint8Array(obj, s, n, func);
    }, create.prototype.createPaytable = function(s, e, params) {
      var query = this.createPaytableView(s, e, params.numPages);
      return new Redirect(this._dispatcher, params, query), query;
    }, create.prototype.createPaytableView = function(value, param, index) {
      return param.createPaytableView(value, index, this._dispatcher);
    }, create.prototype.createJackpotPanelController = function(t, xgh2, xgh3) {
      return new RealTester(t, xgh2, xgh3);
    }, create.prototype.createJackpotNotificationView = function(obj, array, e) {
      return array.hasJackpots || array.hasGuaranteedJackpot ? obj.createJackpotNotificationView(e, tree.JackpotType.Mystery) : obj.createJackpotNotificationView(e, tree.JackpotType.InGame);
    }, create.prototype.createJackpotNotificationController = function(name, value, index) {
      new tree.JackpotNotificationController(name, value, index);
    }, create.prototype.createGameNameController = function(type, value, origin) {
      new KineticToken(type, value, origin);
    }, create;
  }(way);
  var compileVariableDeclaration = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Uh = function(util) {
    /**
     * @param {?} p
     * @param {?} n
     * @param {?} i
     * @return {?}
     */
    function init(p, n, i) {
      var that = util.call(this, i, 0, p, n) || this;
      return that.generatedLabels = {}, that._texts = {}, that._texts[args.SETTING1_LABEL] = "setting1.toggleMLTxt", that._texts[args.SETTING2_LABEL] = "setting2.toggleMLTxt", that._texts[args.SETTING3_LABEL] = "setting3.toggleMLTxt", that._texts[args.SETTING4_LABEL] = "setting4.toggleMLTxt", that.setText(that._texts[args.SETTING1_LABEL], "IDS_AP_ONANYWIN"), that.setText(that._texts[args.SETTING2_LABEL], "IDS_AP_ONBONUS"), that.setText(that._texts[args.SETTING3_LABEL], "IDS_AP_ONJACKPOT"), that.setText(that._texts[args.SETTING4_LABEL], 
      ""), that._buttons[args.STOP_ANY] = "setting1.btn", that._buttons[args.STOP_BONUS] = "setting2.btn", that._buttons[args.STOP_JACKPOT] = "setting3.btn", that._buttons[args.STOP_FS] = "setting4.btn", that._buttons[args.NUMBER1] = "numberBtn1", that._buttons[args.NUMBER2] = "numberBtn2", that._buttons[args.NUMBER3] = "numberBtn3", that._buttons[args.NUMBER4] = "numberBtn4", that._buttons[args.NUMBER5] = "numberBtn5", that._sliders[args.SLIDER1] = "slider1", that._sliders[args.SLIDER2] = "slider2", 
      that._sliders[args.SLIDER3] = "slider3", that._sliders[args.SLIDER4] = "slider4", that._texts[args.SLIDER1_CURRENCY] = "currency1.currency", that._texts[args.SLIDER2_CURRENCY] = "currency2.currency", that._texts[args.SLIDER3_CURRENCY] = "currency3.currency", that._texts[args.SLIDER4_CURRENCY] = "currency4.currency", that._texts[args.SLIDER1_LABEL] = "slider1.title", that._texts[args.SLIDER2_LABEL] = "slider2.title", that._texts[args.SLIDER3_LABEL] = "slider3.title", that._texts[args.SLIDER4_LABEL] = 
      "slider4.title", that.setText(that._texts[args.SLIDER1_LABEL], "IDS_AP_WINEXCEEDS"), that.setText(that._texts[args.SLIDER2_LABEL], "IDS_AP_BALANCEINC"), that.setText(that._texts[args.SLIDER3_LABEL], "IDS_AP_BALANCEDEC"), that.setText(that._texts[args.SLIDER4_LABEL], "IDS_AP_LOSSREACHES"), that._buttons[args.START] = "startBtn", that.hideWin(), that;
    }
    return compileVariableDeclaration(init, util), init.prototype.initSlider = function(index, e, el) {
      var options = this._sliders[index];
      if (options) {
        var dispatcher = this._entity.getSlider(options);
        dispatcher.addEventListener(self.SliderEvent.UPDATE, e);
        dispatcher.setValueFormat(el);
        this._entity.getAnimation(options + ".redArrow").play("normal");
      }
    }, init.prototype.addSliderPressHandlers = function(key, order, url) {
      var self = this;
      var slider = this._sliders[key];
      if (slider) {
        var windowLayer = this._entity.getSlider(slider);
        windowLayer.addEventListener(self.ButtonEvent.MOUSE_DOWN, function() {
          return self.pressHandler(key, order);
        });
        windowLayer.addEventListener(self.ButtonEvent.MOUSE_UP, function() {
          return self.pressHandler(key, url);
        });
      }
    }, init.prototype.setSliderValue = function(feature, value) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).updateSlider(value);
      }
    }, init.prototype.getSliderValue = function(name) {
      var x = this._sliders[name];
      return x ? this._entity.getSlider(x).getCurrentValue() : NaN;
    }, init.prototype.setSliderValueArray = function(feature, date) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).setValueArray(date);
      }
    }, init.prototype.setAutoplayButtonValue = function(canCreateDiscussions) {
    }, init.prototype.showButton = function(name, show) {
      var i = this._buttons[name];
      if (i) {
        this._entity.getDisplay(i).setVisible(show);
      }
    }, init.prototype.setCurrency = function(value) {
      this.setText(this._texts[args.SLIDER1_CURRENCY], value);
      this.setText(this._texts[args.SLIDER2_CURRENCY], value);
      this.setText(this._texts[args.SLIDER3_CURRENCY], value);
      this.setText(this._texts[args.SLIDER4_CURRENCY], value);
    }, init.prototype.setAutoplayButtonState = function(isIron) {
    }, init.prototype.showSlider = function(index, name) {
      var i = this._sliders[index];
      if (i) {
        this._entity.getDisplay(i).setVisible(name);
      }
    }, init.prototype.setSliderPercent = function(key, percent, color) {
      var slider = this._sliders[key];
      if (slider) {
        this._entity.getSlider(slider).setSlider(percent, color);
      }
    }, init.prototype.setSliderValid = function(feature, lastVerFailed) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).setValid(lastVerFailed);
      }
    }, init.prototype.showText = function(id, name) {
      var i = this._texts[id];
      if (i) {
        this._entity.getDisplay(i).setVisible(name);
      }
    }, init.prototype.setSliderMode = function(force_redraw, is_resize) {
    }, init.prototype.enableSlider = function(feature, id) {
      var versions = this._sliders[feature];
      if (versions) {
        this._entity.getSlider(versions).enable(id);
      }
    }, init.prototype.showCheckBox = function(listener, index) {
      this.showButton(listener, index);
    }, init.prototype.setTexts = function(t, index, value, _) {
      /** @type {!Array} */
      var ret = [];
      switch(t) {
        case ITEM.CHECKBOX:
          /** @type {!Array} */
          ret = ["setting", "toggleMLTxt"];
          break;
        case ITEM.SLIDER:
          /** @type {!Array} */
          ret = ["slider", "title"];
      }
      var key = args.setTextLabel(t, _);
      this.generatedLabels["" + index] = key;
      /** @type {string} */
      this._buttons[index] = "setting" + _ + ".btn";
      /** @type {string} */
      this._texts[key] = ret[0] + _ + "." + ret[1];
      this.setText(this._texts[key], value);
    }, init.prototype.getGeneratedLabel = function(ballNumber) {
      return this.generatedLabels[ballNumber];
    }, init.prototype.pressHandler = function(event, position) {
      position(event, this.getSliderValue(event));
    }, init;
  }(sampleUserGroupRoles);
  var _deleteMulti = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var kh = function(session) {
    /**
     * @param {?} actions
     * @return {?}
     */
    function self(actions) {
      var me = session.call(this, actions) || this;
      return me._buttons[column.BETMAX] = "betMaxBtn", me._buttons[column.LINES] = "linesBtn", me._buttons[column.LINES_INC] = "linesPlusBtn", me._buttons[column.LINES_DEC] = "linesMinusBtn", me._buttons[column.COINS] = "coinsBtn", me._buttons[column.COINS_INC] = "coinsPlusBtn", me._buttons[column.COINS_DEC] = "coinsMinusBtn", me._buttons[column.DENOM] = "denominationBtn", me._buttons[column.CARDS] = "cardsBtn", me._buttons[column.CARDS_INC] = "cardsPlusBtn", me._buttons[column.CARDS_DEC] = "cardsMinusBtn", 
      me._texts = {}, me._texts[column.COINBALANCE_LABEL] = "coinBalanceText", me._texts[column.COINBET_LABEL] = "coinBetText", me;
    }
    return _deleteMulti(self, session), self.prototype.setSliderValue = function(val, values) {
    }, self.prototype.setSliderValueArray = function(marktype, itemData) {
    }, self.prototype.setSliderIndex = function(formatters, customFormatters) {
    }, self.prototype.setCurrency = function(data) {
    }, self.prototype.isVisible = function() {
      return true;
    }, self.prototype.show = function(str) {
    }, self.prototype.setLabelText = function(key, value, text) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
      if (text) {
        this._entity.getTextField(id).setArgs(text);
      }
    }, self.prototype.setLabelArgs = function(key, args) {
      var cached = this._texts[key];
      this._entity.getTextField(cached).setArgs(args);
    }, self.prototype.enableSlider = function(noCallback, id) {
    }, self.prototype.showElement = function(el, id) {
      if (this._texts[el]) {
        this._entity.getDisplay(this._texts[el]).setVisible(id);
      }
    }, self;
  }(self.ViewBase);
  var import$ = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Gh = function(val) {
    /**
     * @param {?} event
     * @return {?}
     */
    function S(event) {
      var me = val.call(this, event) || this;
      return me._buttons[e.SPIN] = "playBtn", me._buttons[e.CONTINUE] = "stopBtn", me._buttons[e.COLLECT] = "collectBtn", me._buttons[e.NEWCARD] = "newCardBtn", me._buttons[e.EXTRABALL] = "extraBallBtn", me._buttons[e.APCOUNTER] = "aPCounterBtn", me._buttons[e.AUTOPLAY] = "autoPlayBtn", me._buttons[e.PAYTABLE] = "paytableBtn", me._buttons[e.FASTPLAY] = "fastPlayBtn", me;
    }
    return import$(S, val), S;
  }(self.ViewBase);
  var determineActiveMask = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var folderDocument = function(_super) {
    /**
     * @param {?} key
     * @return {?}
     */
    function init(key) {
      var node = _super.call(this, key) || this;
      return node._texts.BALANCE = "baseBottomLeft.balanceText", node._entity.getTextField(node._texts.BET).setText("IDS_MENU_TOTALBET_VSLOT_ALT"), node._entity.getTextField(node._texts.WIN).setText("IDS_MENU_TOTALWIN_ALT"), node._entity.getTextField(node._texts.BALANCE).setText(node.getBalanceLabel()), node;
    }
    return determineActiveMask(init, _super), init.prototype.showButton = function(buttonId, show) {
      _super.prototype.showButton.call(this, buttonId, show);
      if (buttonId === settings.PLAYFORREAL && show) {
        /** @type {string} */
        this._texts.BALANCE = "baseBottomLeft.balanceText";
      }
    }, init;
  }(Document);
  var chdirCore = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var B = function(t) {
    /**
     * @return {?}
     */
    function app() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return chdirCore(app, t), app.prototype.init = function(b) {
      t.prototype.init.call(this, b);
      var config = self.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
    }, app.prototype.createInfoView = function() {
      return new image_re(this._entity);
    }, app.prototype.createJackpotNotificationView = function(x, obj) {
      return obj === tree.JackpotType.InGame ? new tree.JackpotNotificationViewHTML : new tree.JackpotNotificationViewCanvas;
    }, app;
  }(div);
  var setHandlerFunction = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Rovr = function(util) {
    /**
     * @param {?} data
     * @param {?} uid
     * @param {?} appName
     * @param {!Array} args
     * @return {?}
     */
    function init(data, uid, appName, args) {
      var self = util.call(this, appName, 0, data, uid) || this;
      self._texts = {};
      /** @type {number} */
      var i = 0;
      var arg_count = args.length;
      for (; i < arg_count; i++) {
        /** @type {string} */
        self._buttons[args[i]] = "setting" + (i + 1) + ".btn";
        /** @type {string} */
        self._texts[args[i]] = "setting" + (i + 1) + ".toggleMLTxt";
        self.enableButton(args[i], true);
      }
      /** @type {string} */
      self._buttons[EventConsts.COINVALUE] = "coinValueCnt.valueBtn";
      /** @type {string} */
      self._buttons[EventConsts.COINVALUE_INC] = "coinValueCnt.plusBtn";
      /** @type {string} */
      self._buttons[EventConsts.COINVALUE_DEC] = "coinValueCnt.minusBtn";
      /** @type {string} */
      self._buttons[EventConsts.COINS] = "coinsCnt.valueBtn";
      /** @type {string} */
      self._buttons[EventConsts.COINS_INC] = "coinsCnt.plusBtn";
      /** @type {string} */
      self._buttons[EventConsts.COINS_DEC] = "coinsCnt.minusBtn";
      /** @type {string} */
      self._buttons[EventConsts.LINES] = "linesCnt.valueBtn";
      /** @type {string} */
      self._buttons[EventConsts.LINES_INC] = "linesCnt.plusBtn";
      /** @type {string} */
      self._buttons[EventConsts.LINES_DEC] = "linesCnt.minusBtn";
      i = args.length;
      for (; i < 7; i++) {
        /** @type {string} */
        var key = "setting" + (i + 1);
        /** @type {string} */
        self._buttons[key] = key;
        self.showButton(key, false);
      }
      return self.setText(self._texts[s.SOUND], "IDS_M_SETTINGS_L1"), self.setText(self._texts[s.FASTPLAY], "IDS_M_SETTINGS_L12"), self.setText(self._texts[s.AUTOADJUSTBET], "IDS_M_SETTINGS_L9"), self.setButtonLabel(EventConsts.COINVALUE, "IDS_COINVALUE"), self.setButtonLabel(EventConsts.COINS, "IDS_VP_COINS"), self.setButtonLabel(EventConsts.LINES, "IDS_LBL_CARDS"), self.hideWin(), self;
    }
    return setHandlerFunction(init, util), init.prototype.setButtonLabel = function(button_id, label) {
      var id = this._buttons[button_id] + ".label";
      this._entity.getTextField(id).setText(label);
    }, init;
  }(sampleUserGroupRoles);
  var c = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Model = function(exports) {
    /**
     * @return {?}
     */
    function list() {
      return null !== exports && exports.apply(this, arguments) || this;
    }
    return c(list, exports), list.createCommonStatusBar = function(name) {
      var me = self.ResourceManager.getInstance().getEntityManager();
      var options = me.create("?");
      return me.add("statusbar", options), new Document(options, name);
    }, list.prototype.createStatusBarView = function(propertyName) {
      return new folderDocument(this._entity);
    }, list.prototype.createButtonView = function() {
      return new Gh(this._entity);
    }, list.prototype.createBetPanelView = function() {
      return new kh(this._entity);
    }, list.prototype.createPaytableView = function(value, param, ctor) {
      return new OthersSetting(param, ctor);
    }, list.prototype.createSettingsView = function() {
      var siteMetadata = this.filterButtons([region.SOUND, region.FASTPLAY, region.AUTOADJUSTBET]);
      return new Rovr(this._parent, this._disabler, "SettingsDlg_videoslot", siteMetadata);
    }, list.prototype.createMenuView = function(textPromise, text, num, args) {
      return new Color(args);
    }, list.prototype.createAutoplaySettingsView = function() {
      return new Uh(this._parent, this._disabler, "AutoPlay");
    }, list.prototype.createSplitView = function(CSSSelector, parentElement, position) {
      return null;
    }, list.prototype.createOrientationPromptView = function() {
    }, list.prototype.createGameRulesView = function(browserChannel, array) {
      return null;
    }, list.prototype.createGameHistoryView = function(eta, lmbda, n) {
      return null;
    }, list.prototype.createCashierView = function(rect, linesstrip) {
      return null;
    }, list.prototype.createPlayForRealMenuViewMobile = function(canCreateDiscussions) {
      return null;
    }, list.prototype.createMasterView = function() {
      return new Fs;
    }, list.prototype.filterButtons = function(swimlanes) {
      var CloudCmd = this;
      return swimlanes.filter(function(canCreateDiscussions) {
        switch(canCreateDiscussions) {
          case region.FASTPLAY:
            return !CloudCmd._config.hideFastPlay;
          case region.AUTOADJUSTBET:
            return !CloudCmd._config.hideAutoAdjustBet;
          case region.SOUND:
            return !CloudCmd._config.hideSound;
          case region.SPACEBARSPIN:
            return !CloudCmd._config.hideSpaceBarToSpin;
          default:
            return true;
        }
      });
    }, list.prototype.createJackpotPanelViewBase = function() {
      return new Gu;
    }, list.prototype.createGameNameView = function() {
      var t = self.ResourceManager.getInstance().getEntityManager();
      var e = t.create("?");
      return t.add("game_name", e), new InvalidSourceError(e);
    }, list;
  }(B);
  var incrementAndSave = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var v_bottom = function(options) {
    /**
     * @param {?} data
     * @return {?}
     */
    function self(data) {
      var that = options.call(this, "IDS_MENU_BET_VSLOT", data) || this;
      that._checkboxTexts = {};
      that._sliderTexts = {};
      that.setupHtml();
      that.setupData();
      that.createAutoplay();
      that.createSliders();
      that.createCheckboxes();
      that._buttons[args.TOGGLE] = that._autoplayButton;
      var self = exports.SystemManager.getDeviceHandler();
      return self && (self.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return that.handleOrientationChange();
      }), self.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return that.handleOrientationChange();
      })), that;
    }
    return incrementAndSave(self, options), self.prototype.show = function(str) {
    }, self.prototype.createCheckbox = function(id, name, labelText, checked) {
      var field = new ZmPrefAccount(name, checked);
      return field.getDOMNode().classList.add("betview_checkbox"), field.getDOMNode().style.position = "", labelText.appendChild(field.getDOMNode()), this._buttons[id] = field, field;
    }, self.prototype.disableAutoPlay = function() {
      this._autoplayButton.enable(false);
      var i;
      for (i in this._sliders) {
        if (this._sliders.hasOwnProperty(i)) {
          this._sliders[i].enable(false);
        }
      }
      for (i in this._checkboxTexts) {
        if (this._checkboxTexts.hasOwnProperty(i)) {
          /** @type {string} */
          this._buttons[i].getDOMNode().style.display = "none";
        }
      }
    }, self.prototype.setSliderValueArray = function(index, e) {
      this._sliders[index].setValueArray(e);
    }, self.prototype.getSliderValue = function(name) {
      return this._sliders[name].getCurrentValue();
    }, self.prototype.setSliderValue = function(index, value) {
      this._sliders[index].setValue(value);
    }, self.prototype.setCurrency = function(data) {
      var i;
      for (i in this._sliderTexts) {
        if (this._sliderTexts.hasOwnProperty(i)) {
          var option = this._sliders[i];
          option.setCaption(this._sliderTexts[i], "> (" + data + ")");
        }
      }
    }, self.prototype.isVisible = function() {
      return false;
    }, self.prototype.showSlider = function(index, e) {
      this._sliders[index].show(e);
    }, self.prototype.showCheckBox = function(id, p) {
      this._buttons[id].show(p);
    }, self.prototype.setText = function(message, value) {
    }, self.prototype.setAutoplayButtonValue = function(actualHist) {
      this._autoplayButton.setSpins(actualHist);
    }, self.prototype.setAutoplayButtonState = function(test) {
      this._autoplayButton.setAutoPlaying(test);
    }, self.prototype.handleOrientationChange = function() {
      var src = exports.DEVICE.orientation;
      var attributeTemplate = self.ResourceManager.getInstance().getTextManager().getByName("IDS_AP_CAPTION2").getText();
      if ("ls" === src) {
        this._autoPlayCaption.innerHTML = attributeTemplate;
        var i;
        for (i in this._sliders) {
          if (this._sliders.hasOwnProperty(i)) {
            this._sliders[i].handleOrientationChange();
          }
        }
      } else {
        /** @type {string} */
        this._autoPlayCaption.innerHTML = "";
        for (i in this._sliders) {
          if (this._sliders.hasOwnProperty(i)) {
            this._sliders[i].handleOrientationChange();
          }
        }
      }
    }, self.prototype.setButtonText = function(buttonId, text) {
      if (this._buttons[buttonId]) {
        this._buttons[buttonId].setCaption(text);
      }
    }, self.prototype.setLabelText = function(text, value) {
    }, self.prototype.setSliderPercent = function(percent, wrapMin) {
    }, self.prototype.setSliderValid = function(key, lastVerFailed) {
      this._sliders[key].setValid(lastVerFailed);
    }, self.prototype.isSliderValid = function(key) {
      return this._sliders[key].isValid();
    }, self.prototype.enableSlider = function(index, id) {
      this._sliders[index].enable(id);
    }, self.prototype.showText = function(id, text) {
    }, self.prototype.setSliderMode = function(index, e) {
      this._sliders[index].setUnselectedMode(e);
    }, self.prototype.addSliderPressHandlers = function(authorId, userId, popUp) {
    }, self.prototype.createAutoplay = function() {
      this.createSlider(position.SLD_AUTOPLAY, "IDS_AP_CAPTION2", "", this._autoplayContainer, [0, 1]);
      this._autoplayButton = new Ba;
      this._autoplayContainer.appendChild(this._autoplayButton.getDOMNode());
    }, self.prototype.setupData = function() {
      /** @type {string} */
      this._checkboxTexts[args.STOP_ANY] = "IDS_AP_ONANYWIN";
      /** @type {string} */
      this._checkboxTexts[args.STOP_BONUS] = "IDS_AP_ONBONUS";
      /** @type {string} */
      this._checkboxTexts[args.STOP_JACKPOT] = "IDS_AP_ONJACKPOT";
      /** @type {string} */
      this._sliderTexts[args.SLIDER1] = "IDS_AP_WINEXCEEDS";
      /** @type {string} */
      this._sliderTexts[args.SLIDER2] = "IDS_AP_BALANCEINC";
      /** @type {string} */
      this._sliderTexts[args.SLIDER3] = "IDS_AP_BALANCEDEC";
      /** @type {string} */
      this._sliderTexts[args.SLIDER4] = "IDS_AP_LOSSREACHES";
    }, self.prototype.createSliders = function() {
      var pp;
      for (pp in this._sliderTexts) {
        if (this._sliderTexts.hasOwnProperty(pp)) {
          this.createSlider(pp, this._sliderTexts[pp], "", this._aPSettingsContainer, [0, 1]);
        }
      }
    }, self.prototype.createSlider = function(name, value, options, node, radius) {
      var s = new Circle(value, options, radius, true);
      return this._sliders[name] = s, node.appendChild(s.getDOMNode()), s;
    }, self.prototype.createCheckboxes = function() {
      var i;
      for (i in this._checkboxTexts) {
        if (this._checkboxTexts.hasOwnProperty(i)) {
          this._buttons[i] = this.createCheckbox(i, this._checkboxTexts[i], this._aPSettingsContainer, "none");
        }
      }
    }, self.prototype.setupHtml = function() {
      var p = RepositoryApi.getInstance();
      this._view = p.createDiv("betview", "");
      this._autoplayContainer = p.createAndAppendDiv(this._view, "autoplayContainer", "");
      this._aPSettingsContainer = p.createAndAppendDiv(this._view, "betsettingsview", "");
      this._stopAutoPlayCaption = p.createAndAppendDiv(this._aPSettingsContainer, "betview_autoplay", "stop_caption", "IDS_AP_STOPAUTOPLAY");
      this._view.appendChild(this._aPSettingsContainer);
    }, self.prototype.setSliderAppearance = function(index, result, n, title) {
      if (void 0 === title) {
        title = void 0;
      }
      var button = this._sliders[index];
      /** @type {number} */
      button.getDOMNode().style.marginTop = result;
      /** @type {number} */
      button.getDOMNode().style.width = n;
      if (void 0 !== title) {
        button.setCaption(title);
      }
    }, self.SLIDER_SHORT_WIDTH = "38vw", self.SETTINGS_SLIDER_WIDTH = "47vw", self.SLIDER_MARGIN_LS = "4vw", self.SLIDER_MARGIN_PT = "0vw", self;
  }(tokens);
  var getSubPByDeclr = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var nl = function(array) {
    /**
     * @param {string} element
     * @return {?}
     */
    function Dialog(element) {
      var t = array.call(this, element) || this;
      t.setupDivs(element);
      element.addEventListener("touchstart", function(event) {
        event.preventDefault();
      });
      element.addEventListener("touchend", function(event) {
        event.preventDefault();
      });
      var e = exports.SystemManager.getDeviceHandler();
      return e && (e.addEventListener(exports.DeviceEvent.ORIENTATION, function() {
        return t.HandleOrientationChange();
      }), e.addEventListener(exports.DeviceEvent.RESIZE, function() {
        return t.HandleOrientationChange();
      })), t;
    }
    return getSubPByDeclr(Dialog, array), Dialog.prototype.setupDivs = function(o) {
      this.createButton(e.APCOUNTER, "", o, "apStopBtn", "gameButton", "btnAPStop", "btnVideBingoCaption", true);
      this.createButton(e.SPIN, "IDS_BTN_PLAY", o, "vbSpinBtn", "gameButton", "btnPlay", "btnVideBingoCaption", true);
      this.createButton(e.CONTINUE, "IDS_BTN_CONTINUE", o, "vbContinueBtn", "hiddenBtn", "btnContinue", "btnVideBingoCaption", false);
      this.createButton(e.EXTRABALL, "IDS_BTN_EXTRABALL_ML", o, "vbBbtnExtraBall", "gameButton", "btnExtraball", "btnVideBingoCaption", true);
      this.createButton(e.COLLECT, "IDS_BTN_COLLECT", o, "vbBtnCollect", "gameButton", "btnCollect", "btnVideBingoCaption", true);
      this.createButton(e.NEWCARD, "IDS_BTN_NEWCARDS", o, "vbNewCardBtn", "gameButton", "btnNewcard", "btnVideBingoCaption", true);
      this._buttons[e.SPIN].innerCaptionAlignment();
      this._buttons[e.CONTINUE].innerCaptionAlignment();
      this._buttons[e.EXTRABALL].innerCaptionAlignment();
      this._buttons[e.COLLECT].innerCaptionAlignment();
      this._buttons[e.NEWCARD].innerCaptionAlignment();
      this._buttons[e.APCOUNTER].innerCaptionAlignment();
    }, Dialog.prototype.createButton = function(id, type, opts, handler, target, config, appName, options) {
      if (void 0 === options && (options = false), this._buttons[id] = new Template(type, opts, handler, target, config, appName), options) {
        var u = this._buttons[id].getDOMNode();
        var cmtcookie = RepositoryApi.getInstance().createAndAppendDiv(u, void 0, "pointerArea");
        this._buttons[id].setPointerTarget(cmtcookie);
      }
    }, Dialog.prototype.HandleOrientationChange = function() {
      var mark = exports.DEVICE.orientation;
      if ("pt" === mark) {
        /** @type {string} */
        mark = "pt";
        this._root.classList.add("pt");
        this._root.classList.remove("ls");
      } else {
        /** @type {string} */
        mark = "ls";
        this._root.classList.add("ls");
        this._root.classList.remove("pt");
      }
      this._buttons[e.SPIN].HandleOrientationChange(mark);
      this._buttons[e.CONTINUE].HandleOrientationChange(mark);
      this._buttons[e.EXTRABALL].HandleOrientationChange(mark);
      this._buttons[e.COLLECT].HandleOrientationChange(mark);
      this._buttons[e.NEWCARD].HandleOrientationChange(mark);
      this._buttons[e.APCOUNTER].HandleOrientationChange(mark);
    }, Dialog.prototype.setAutoplayButton = function(b) {
      /** @type {string} */
      this._buttons[e.AUTOPLAY] = b;
    }, Dialog.prototype.setButtonText = function(buttonId, text) {
      this._buttons[buttonId].setCaption(text);
    }, Dialog;
  }(selector);
  var complete = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var operationDayNode = function(ex) {
    /**
     * @return {?}
     */
    function NotFound() {
      return null !== ex && ex.apply(this, arguments) || this;
    }
    return complete(NotFound, ex), NotFound.prototype.setupData = function() {
      this._sliderData = {};
      /** @type {string} */
      this._sliderData[params.CARDS] = "IDS_CARDS_CAPTION";
      /** @type {string} */
      this._sliderData[element.COINS] = "IDS_COINS_CAPTION";
      /** @type {string} */
      this._sliderData[element.DENOM] = "IDS_COINVALUE_CAPTION";
    }, NotFound;
  }(pos);
  var publicFilter = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Error = function(url) {
    /**
     * @param {?} name
     * @param {?} command
     * @param {?} data
     * @return {?}
     */
    function module(name, command, data) {
      var that = url.call(this, name, data) || this;
      return that._betSettings = command, that._scales = module.VB_WRAPPER_SCALES, that.updateScalableDivs(exports.DEVICE.orientation), that;
    }
    return publicFilter(module, url), module.prototype.setBetInCoins = function(opt_e) {
      this._coinsBet.innerHTML = opt_e.toString();
      RepositoryApi.getInstance().getScalableDiv(this._coinsBetWrapper).update();
    }, module.prototype.setBalance = function(id) {
      this._moneyBalance.innerHTML = this._moneyFormatter.MoneyToString(id, self.MoneyFormatterFlag.FORCE_DECIMAL);
      /** @type {string} */
      this._coinsBalance.innerHTML = String(Math.floor((id > 0 ? id : 0) / this._betSettings.denomination));
      RepositoryApi.getInstance().getScalableDiv(this._moneyBalanceWrapper).update();
      RepositoryApi.getInstance().getScalableDiv(this._coinsBalanceWrapper).update();
    }, module.prototype.handleMysteryJackpot = function() {
    }, module.VB_WRAPPER_SCALES = {
      credits : {
        pt : {
          moneyBalance : 0.35,
          coinsBalance : 0.32,
          coinsBet : 0.34,
          freeGameBet : 0.45,
          moneyWin : 0.3,
          moneyBet : 0.3
        },
        ls : {
          moneyBalance : 0.3,
          coinsBalance : 0.15,
          coinsBet : 0.15,
          freeGameBet : 0.2,
          moneyWin : 0.25,
          moneyBet : 0.3
        }
      },
      normal : {
        pt : {
          moneyBalance : 0.4,
          coinsBalance : 0.3,
          coinsBet : 0.3,
          freeGameBet : 0.4,
          moneyWin : 0.4,
          moneyBet : 0.4
        },
        ls : {
          moneyBalance : 0.16,
          coinsBalance : 0.15,
          coinsBet : 0.15,
          freeGameBet : 0.2,
          moneyWin : 0.18,
          moneyBet : 0.18
        }
      }
    }, module;
  }(cdn_url);
  var addTypeHash = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var left = function(t) {
    /**
     * @return {?}
     */
    function DefClass() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return addTypeHash(DefClass, t), DefClass.prototype.init = function(b) {
      t.prototype.init.call(this, b);
      /** @type {(Element|null)} */
      var tilePane = document.getElementById(this._config.gameContainer);
      /** @type {!Element} */
      this._container = document.createElement("div");
      /** @type {string} */
      this._container.id = "uiWrapper";
      tilePane.appendChild(this._container);
    }, DefClass.prototype.createInfoView = function() {
      return null;
    }, DefClass.prototype.createJackpotNotificationView = function(x, obj) {
      return obj === tree.JackpotType.InGame ? new tree.JackpotNotificationViewHTML : new tree.JackpotNotificationViewCanvas;
    }, DefClass;
  }(root);
  var parameterPath = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var yAxisSpectrum = function(t) {
    /**
     * @return {?}
     */
    function DefClass() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return parameterPath(DefClass, t), DefClass.prototype.init = function(b) {
      t.prototype.init.call(this, b);
      /** @type {(Element|null)} */
      var tilePane = document.getElementById(this._config.gameContainer);
      /** @type {!Element} */
      this._container = document.createElement("div");
      /** @type {string} */
      this._container.id = "uiWrapper";
      tilePane.appendChild(this._container);
    }, DefClass.prototype.createStatusBarView = function(propertyName, options) {
      return new Error(this._container, propertyName, options);
    }, DefClass.prototype.createButtonView = function() {
      return new nl(document.getElementById("buttonsContainer"));
    }, DefClass.prototype.createBetPanelView = function() {
      return new operationDayNode(this._container);
    }, DefClass.prototype.createPaytableView = function(value, param, connector) {
      return new InjectResult("Paytable", this._container, connector);
    }, DefClass.prototype.createSettingsView = function() {
      /** @type {!Array} */
      var after = [];
      return this._config.hideSound || after.push(s.SOUND), this._config.hideAutoAdjustBet || after.push(s.AUTOADJUSTBET), after.push(s.LEFTHANDMODE), this._config.hideFastPlay || after.push(s.FASTPLAY), new AsyncFor(this._container, "SettingsDlg_tablegames", after);
    }, DefClass.prototype.createMenuView = function(signature, options, field, args) {
      return new Signature(signature, options, field);
    }, DefClass.prototype.createAutoplaySettingsView = function() {
      return new id(this._container);
    }, DefClass.prototype.createSplitView = function(CSSSelector, parentElement, position) {
      return new Resume("IDS_MENU_BET_VSLOT", this._container, parentElement, position);
    }, DefClass.prototype.createOrientationPromptView = function() {
      return new phylogram(this._container);
    }, DefClass.prototype.createGameRulesView = function(clickRepeater, e) {
      return new NavigationError(this._container, clickRepeater, e);
    }, DefClass.prototype.createGameHistoryView = function(token, property, newVal) {
      return new StateChange(this._container, token, property, newVal);
    }, DefClass.prototype.createCashierView = function(timeout, value) {
      return new Context(this._container, timeout, this._config.urlMode, value);
    }, DefClass.prototype.createPlayForRealMenuViewMobile = function(matchingTag) {
      return new MatchedTags(this._container, matchingTag);
    }, DefClass.prototype.createMasterView = function() {
      return new Ya;
    }, DefClass.prototype.createJackpotPanelViewBase = function() {
      return new Gu;
    }, DefClass.prototype.createGameNameView = function() {
      return new ShapeHandlerClass(this._container);
    }, DefClass;
  }(left);
  var w = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var _this = function(done) {
    /**
     * @return {?}
     */
    function ab() {
      return null !== done && done.apply(this, arguments) || this;
    }
    return w(ab, done), ab.COIN_VALUE_LABEL = "COIN_VALUE_LABEL", ab.BET_BTN_PANEL = "BET_BTN_PANEL", ab.COINS_PER_HAND_LABEL = "COINS_PER_HAND_LABEL", ab;
  }(element);
  var rowdim = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.MULTIHAND = "ANIMMH", t.SINGLEHAND = "ANIMSH", t;
  }();
  var res = function(t) {
    /**
     * @return {?}
     */
    function ab() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return w(ab, t), ab.LINES = "LINES", ab.BET = "BET", ab;
  }(sep);
  var qmodule = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Layer = function(buttonEvent) {
    /**
     * @param {!Object} e
     * @param {string} result
     * @param {?} title
     * @param {!Element} view
     * @param {!Object} config
     * @return {?}
     */
    function set(e, result, title, view, config) {
      var me = buttonEvent.call(this, e) || this;
      return me._dispatcher = e, me._roundHandler = result, me._betSettings = title, me._view = view, me._betOffset = 0, me._config = config, me._lastGamblePanelState = true, me._betSettings.getHandsCount() > 1 ? me._view.playPanelAnim(_this.BET_BTN_PANEL, rowdim.MULTIHAND) : me._view.playPanelAnim(_this.BET_BTN_PANEL, rowdim.SINGLEHAND), me._betSettings.addListener(me.onDataChange.bind(me), null), e.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, me.onShowButtons.bind(me)), e.addEventListener(self.CurrencyEvent.CURRENCY, 
      me.onCurrency.bind(me)), result.addListener(me.onRoundStateChange.bind(me)), e.addEventListener(self.ExternalMessageEvent.EXTERNALMESSAGE, me.onExternalMessage.bind(me)), e.addEventListener(req.BONUS_SHOW_GAME, me.onShowPanel.bind(me)), e.addEventListener(FLAG_WORKING_DIR.BET, function(t) {
        return me.onBet(t);
      }), e.addEventListener(self.SplashEvent.SPLASH_HIDE, me.updateBetButtons.bind(me, true)), e.addEventListener(self.SplashEvent.SPLASH_HIDE, me.initBetLabels.bind(me)), view.initSlider(res.LINES, me.changeLines.bind(me)), view.initSlider(res.COINS, function(index) {
        return me.changeCoins(index);
      }), view.initSlider(res.DENOM, function(canCreateDiscussions) {
        return me.changeDenomination(canCreateDiscussions);
      }, self.MoneyFormatterFlag.NO_CURRENCY | self.MoneyFormatterFlag.NO_DENOM_DECIMAL), view.initButton(_this.DENOM, me._betSettings.incDenom.bind(me._betSettings)), view.initButton(_this.DENOM_INC, me._betSettings.incDenom.bind(me._betSettings)), view.initButton(_this.DENOM_DEC, me._betSettings.decDenom.bind(me._betSettings)), view.initButton(_this.COINS, me._betSettings.incCoins.bind(me._betSettings)), view.initButton(_this.COINS_INC, me._betSettings.incCoins.bind(me._betSettings)), view.initButton(_this.COINS_DEC, 
      me._betSettings.decCoins.bind(me._betSettings)), view.initButton(_this.LINES, me._betSettings.incHands.bind(me._betSettings)), view.initButton(_this.LINES_INC, me._betSettings.incHands.bind(me._betSettings)), view.initButton(_this.LINES_DEC, me._betSettings.decHands.bind(me._betSettings)), me.initBetButtons(), me.initBetData(), view.enableButton(_this.DENOM, true), view.enableButton(_this.DENOM_INC, true), view.enableButton(_this.DENOM_DEC, true), view.enableButton(_this.COINS, true), view.enableButton(_this.COINS_INC, 
      true), view.enableButton(_this.COINS_DEC, true), view.enableButton(_this.LINES, true), view.enableButton(_this.LINES_INC, true), view.enableButton(_this.LINES_DEC, true), me;
    }
    return qmodule(set, buttonEvent), set.prototype.onExternalMessage = function(request) {
      this._view.resetItems();
    }, set.prototype.initBetLabels = function() {
      var PersonModel = self.ResourceManager.getInstance().getTextManager();
      var value = PersonModel.getByName("IDS_VP_COINS").getText() + " / " + PersonModel.getByName("IDS_TL_CSTUD_HAND").getText();
      this._view.setLabelText(_this.COINS_PER_HAND_LABEL, value);
    }, set.prototype.initBetButtons = function() {
      this._view.initButton(_this.LINES, this.onBetChange.bind(this));
      this._view.initButton(_this.LINES_INC, this.onBetChange.bind(this));
      this._view.initButton(_this.LINES_DEC, this.onBetChange.bind(this));
      this._view.initButton(_this.COINS, this.onBetChange.bind(this));
      this._view.initButton(_this.COINS_INC, this.onBetChange.bind(this));
      this._view.initButton(_this.COINS_DEC, this.onBetChange.bind(this));
      this._view.initButton(_this.DENOM, this.onBetChange.bind(this));
      this._view.initButton(_this.DENOM_INC, this.onBetChange.bind(this));
      this._view.initButton(_this.DENOM_DEC, this.onBetChange.bind(this));
    }, set.prototype.onBetChange = function() {
    }, set.prototype.initBetData = function() {
      this._view.setSliderValueArray(res.LINES, [1, 4, 10, 25, 50, 100]);
      this._view.setSliderValueArray(res.COINS, [1, 2, 3, 4, 5]);
    }, set.prototype.createSliderValueArray = function(first, max) {
      /** @type {!Array} */
      var hash_settings = [];
      var i = first ? max : 1;
      for (; i <= max; ++i) {
        hash_settings.push(i);
      }
      return hash_settings;
    }, set.prototype.setDenomSlider = function() {
      var value = this._betSettings.denominations;
      if (value) {
        this._view.setSliderValueArray(res.DENOM, value);
      }
    }, set.prototype.onBet = function(b) {
      if (this._betSettings.getHandsCount() > 1) {
        this._view.playPanelAnim(_this.BET_BTN_PANEL, rowdim.MULTIHAND);
      } else {
        this._view.playPanelAnim(_this.BET_BTN_PANEL, rowdim.SINGLEHAND);
      }
    }, set.prototype.setBetSlider = function() {
    }, set.prototype.onDataChange = function(data) {
      if (void 0 === data) {
        /** @type {null} */
        data = null;
      }
      /** @type {boolean} */
      var value = this._state === STATE.DEAL;
      /** @type {boolean} */
      var newValue = value && this._betSettings.getHandsCount() > 1;
      if ((data.isChanged(___err.COINS) || data.isChanged(___err.DENOM)) && this._state !== STATE.NONE && this._dispatcher.dispatch(new screenUtil(screenUtil.SND_CHANGE_PARAMS)), data && !data.isChanged(___err.COINS) || (this._view.setButtonText(_this.COINS, this._betSettings.coins.toString()), this._view.setSliderValue(_this.COINS, this._betSettings.coins), this._view.enableButton(_this.COINS, value), this._view.enableButton(_this.COINS_INC, value && this._betSettings.coins < this._betSettings.maxCoins), 
      this._view.enableButton(_this.COINS_DEC, value && this._betSettings.coins > 1)), !data || data.isChanged(___err.DENOM)) {
        var assert = self.ResourceManager.getInstance().getMoneyFormatter();
        this._view.setButtonText(_this.DENOM, assert.MoneyToString(this._betSettings.denomination, self.MoneyFormatterFlag.NO_CURRENCY));
        this.setDenomSlider();
        this._view.setSliderValue(res.DENOM, this._betSettings.denomination);
        this._view.enableButton(_this.DENOM, newValue);
        this._view.enableButton(_this.DENOM_INC, newValue && this._betSettings.denomIdx < this._betSettings.denominations.length - 1);
        this._view.enableButton(_this.DENOM_DEC, newValue && this._betSettings.denomIdx > 0);
        this.updateBetButtons();
      }
      if (!(data && !data.isChanged(___err.HANDS))) {
        this._view.setButtonText(_this.LINES, this._betSettings.hands.toString());
        this._view.setSliderValue(_this.LINES, this._betSettings.hands);
        this._view.enableButton(_this.LINES, newValue);
        this._view.enableButton(_this.LINES_INC, newValue && this._betSettings.handIdx < this._betSettings.getHandsCount() - 1);
        this._view.enableButton(_this.LINES_DEC, newValue && this._betSettings.handIdx > 0);
      }
    }, set.prototype.onRoundStateChange = function() {
      this._lastBalance = this._roundHandler.balance;
      var t = self.ResourceManager.getInstance().getCreditFormatter();
      self.ResourceManager.getInstance().getMoneyFormatter();
      this.setCoinBalanceLabelBalance(this._lastBalance);
      this._view.setLabelText(_this.COINBET_LABEL, t.formatCoinValue(this._betSettings.coins * this._betSettings.hands, self.MoneyFormatterFlag.NO_DENOM_DECIMAL));
    }, set.prototype.onShowButtons = function(data) {
      if (data.groupId != STATE.DEAL_DISABLE_MRT && data.groupId != STATE.DEAL_ENABLE_MRT) {
        this._state = data.groupId;
        this.updateButtons();
      }
    }, set.prototype.updateButtons = function() {
      /** @type {boolean} */
      var value = this._state === STATE.DEAL;
      /** @type {boolean} */
      var newValue = value && this._betSettings.getHandsCount() > 1;
      /** @type {boolean} */
      var scope = this._state === STATE.GAMBLE_WAIT;
      /** @type {boolean} */
      var n = this._state === STATE.COLLECT;
      /** @type {boolean} */
      var o = scope || n;
      if (this._lastGamblePanelState !== o) {
        /** @type {boolean} */
        this._lastGamblePanelState = o;
      }
      this._view.enableSlider(_this.DENOM, value);
      this._view.enableSlider(_this.COINS, value);
      this._view.enableSlider(_this.LINES, value);
      this._view.enableButton(_this.COINS, value);
      this._view.enableButton(_this.COINS_INC, value && this._betSettings.coins < this._betSettings.maxCoins);
      this._view.enableButton(_this.COINS_DEC, value && this._betSettings.coins > 1);
      this._view.enableButton(_this.LINES, newValue);
      this._view.enableButton(_this.LINES_INC, newValue && this._betSettings.handIdx < this._betSettings.getHandsCount() - 1);
      this._view.enableButton(_this.LINES_DEC, newValue && this._betSettings.handIdx > 0);
      this._view.enableButton(_this.DENOM, newValue);
      this._view.enableButton(_this.DENOM_INC, newValue && this._betSettings.denomIdx < this._betSettings.denominations.length - 1);
      this._view.enableButton(_this.DENOM_DEC, newValue && this._betSettings.denomIdx > 0);
    }, set.prototype.updateBetButtons = function(zoomAware) {
      if (void 0 === zoomAware) {
        /** @type {boolean} */
        zoomAware = false;
      }
    }, set.prototype.showBetButtonsInGamble = function() {
    }, set.prototype.setCoinBalanceLabelBalance = function(length) {
      var removedRelations = self.ResourceManager.getInstance().getMoneyFormatter();
      var content = self.ResourceManager.getInstance().getCreditFormatter();
      this._view.setLabelText(_this.COINBALANCE_LABEL, content.getCreditString(String(Math.floor((length > 0 ? length : 0) / this._betSettings.denomination)), removedRelations.MoneyToString(length, self.MoneyFormatterFlag.NO_DENOM_DECIMAL)));
    }, set.prototype.changeLines = function(t) {
      /** @type {number} */
      var e = 0;
      for (; e < Math.abs(t.slStep); ++e) {
        if (t.slStep > 0) {
          this._betSettings.incHands();
        } else {
          this._betSettings.decHands();
        }
      }
    }, set.prototype.changeCoins = function(coins) {
      this._betSettings.coins = coins.slValue;
    }, set.prototype.changeDenomination = function(canCreateDiscussions) {
      this._betSettings.denomination = canCreateDiscussions.slValue;
    }, set.prototype.onCurrency = function() {
      this._view.setCurrency(self.ResourceManager.getInstance().getMoneyFormatter().getCurrencySymbol());
      this.updateBetButtons();
    }, set.prototype.onShowPanel = function(panel) {
      this._state = panel.groupId;
      /** @type {boolean} */
      var attached = this._state === req.SHOW_PANELS;
      /** @type {boolean} */
      var isPending = this._state === req.HIDE_PANELS;
      if (attached) {
        this._view.setPanelVisible(_this.BET_BTN_PANEL, false);
      } else {
        if (isPending) {
          this._view.setPanelVisible(_this.BET_BTN_PANEL, true);
        }
      }
    }, set;
  }(exports.EventProcessor);
  var button = function() {
    /**
     * @return {undefined}
     */
    function validateReducer() {
    }
    return validateReducer.SPIN = "SPIN", validateReducer.CONTINUE = "CONTINUE", validateReducer.GAMBLE = "GAMBLE", validateReducer.COLLECT = "COLLECT", validateReducer.GAMBLEBTNPANEL = "GAMBLEBTNPANEL", validateReducer.COLLECT_WAIT = "COLLECT_WAIT", validateReducer.APCOUNTER = "APCOUNTER", validateReducer.PAYTABLE = "PAYTABLE", validateReducer.DEAL = "DEAL", validateReducer;
  }();
  var firstAtom = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return t.GAMBLE = "GAMBLE", t.COLLECT = "COLLECT", t;
  }();
  var git = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cell = function(url) {
    /**
     * @param {!HTMLElement} document
     * @param {?} width
     * @param {!Element} view
     * @param {?} list
     * @param {!Object} data
     * @return {?}
     */
    function init(document, width, view, list, data) {
      var that = url.call(this, document) || this;
      /** @type {boolean} */
      that._lastFreeGame = false;
      /** @type {boolean} */
      that._countQuickStop = false;
      /** @type {!Object} */
      that._settings = data;
      /** @type {!Element} */
      that._view = view;
      that._disableFastPlay = list.disableFastPlay;
      /** @type {boolean} */
      that._lastGamblePanelState = true;
      /** @type {boolean} */
      that._dealEnabled = true;
      /** @type {boolean} */
      that._waitForMRT = false;
      data.addListener(that.onSettingsChange.bind(that));
      document.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, that.onShowButtons.bind(that));
      document.addEventListener(req.BONUS_SHOW_GAME, that.onShowPanel.bind(that));
      view.initButton(button.SPIN, that.onSpin.bind(that));
      view.initButton(button.GAMBLE, that.onGamble.bind(that));
      view.initButton(button.COLLECT, that.onCollect.bind(that));
      view.playButtonAnim(button.GAMBLE, "hide");
      view.playButtonAnim(button.COLLECT, "hide");
      /** @type {!Array} */
      var container = [view.getButton(button.GAMBLE), view.getButton(button.COLLECT)];
      var filename = self.ResourceManager.getInstance().getKeyboardHandler();
      that._gambleKeyboardHandlerNode = new View(container);
      var parmPos = view.getButton(button.SPIN);
      return filename.addSpeedButton("space", parmPos), that._view.showPanel(button.GAMBLEBTNPANEL, true), that._view.setPanelVisible(button.GAMBLEBTNPANEL, false), that.updateButtons(), that;
    }
    return git(init, url), init.prototype.onSettingsChange = function() {
      this.onShowPanel(null);
    }, init.prototype.transitionInited = function() {
      /** @type {boolean} */
      this._hasTransition = true;
    }, init.prototype.transitionHidden = function() {
      /** @type {boolean} */
      this._disabledState = false;
    }, init.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._splashShowing = false;
      this.enableSpins();
    }, init.prototype.enableSpins = function() {
      if (!this._hasTransition) {
        /** @type {boolean} */
        this._disabledState = false;
      }
    }, init.prototype.enableQuickStopCounting = function() {
      /** @type {boolean} */
      this._countQuickStop = true;
    }, init.prototype.updateButtons = function() {
      /** @type {boolean} */
      var _ = this._state === STATE.GAMBLE_SPIN_WAIT;
      /** @type {boolean} */
      var value = this._state === STATE.GAMBLE_WAIT || _;
      /** @type {boolean} */
      var inputWin = this._state === STATE.DEAL;
      /** @type {boolean} */
      var winRef = this._state === STATE.DRAW;
      /** @type {boolean} */
      var attached = this._state === STATE.COLLECT;
      /** @type {boolean} */
      this._dealEnabled = inputWin || winRef || value;
      /** @type {boolean} */
      var resContentLength = value || attached || _;
      if (this._lastGamblePanelState !== resContentLength && (this._lastGamblePanelState = resContentLength), this._view.enableButton(button.COLLECT, value || attached), this._view.enableButton(button.GAMBLE, value), value) {
        self.ResourceManager.getInstance().getKeyboardHandler().initCurrentNode(this._gambleKeyboardHandlerNode);
      }
      this._view.enableButton(button.SPIN, this._dealEnabled && !this._waitForMRT);
    }, init.prototype.onShowButtons = function(data) {
      this._lastState = this._state;
      this._state = data.groupId;
      if (this._state === STATE.DEAL_ENABLE_MRT || this._state === STATE.DEAL_DISABLE_MRT) {
        /** @type {boolean} */
        this._waitForMRT = this._state === STATE.DEAL_DISABLE_MRT;
        this._state = this._lastState;
        this.enableDealButton();
      } else {
        this.updateButtons();
      }
    }, init.prototype.enableDealButton = function() {
      this._view.enableButton(button.SPIN, this._dealEnabled && !this._waitForMRT);
    }, init.prototype.onSpin = function() {
      switch(this._state) {
        case STATE.GAMBLE_SPIN_WAIT:
        case STATE.GAMBLE_WAIT:
        case STATE.DEAL:
          if (!this._disabledState) {
            this.doSpin();
          }
          break;
        case STATE.DRAW:
          this.doDraw();
      }
    }, init.prototype.doSpin = function() {
      this._view.enableButton(button.SPIN, false);
      this._dispatcher.dispatch(new constants(constants.DEAL));
    }, init.prototype.doDraw = function() {
      this._dispatcher.dispatch(new constants(constants.DRAW));
    }, init.prototype.onGamble = function() {
      this._dispatcher.dispatch(new constants(constants.BONUS));
    }, init.prototype.onCollect = function() {
      if (!(this._state !== STATE.GAMBLE_WAIT && this._state !== STATE.GAMBLE_SPIN_WAIT && this._state !== STATE.COLLECT)) {
        this._dispatcher.dispatch(new constants(constants.COLLECT));
      }
    }, init.prototype.onShowPanel = function(panel) {
      if (panel && (this._panelState = panel.groupId), this._settings.neverGamble) {
        return void this._view.setPanelVisible(button.GAMBLEBTNPANEL, false);
      }
      var e = self.ResourceManager.getInstance().getKeyboardHandler();
      switch(this._panelState) {
        case req.SHOW_PANELS:
          this._view.setPanelVisible(button.GAMBLEBTNPANEL, true);
          e.addCurrentNode(this._gambleKeyboardHandlerNode);
          break;
        case req.HIDE_PANELS:
          this._view.setPanelVisible(button.GAMBLEBTNPANEL, false);
          e.removeCurrentNode();
      }
    }, init;
  }(exports.EventProcessor);
  var ml = function() {
    /**
     * @return {undefined}
     */
    function IDBCursor() {
    }
    return IDBCursor.NEXT = "NEXT", IDBCursor.PREV = "PREV", IDBCursor.EXIT = "EXIT", IDBCursor.INDICATOR_PREFIX = "INDICATOR", IDBCursor;
  }();
  var rele = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var value = function(t) {
    /**
     * @return {?}
     */
    function Claim() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return rele(Claim, t), Claim.HISTORY = "HISTORY", Claim.KEYBOARD = "KEYBOARD", Claim.TUTORIAL = "TUTORIAL", Claim;
  }(data);
  var iVal = function() {
    /**
     * @return {undefined}
     */
    function PrimitiveType() {
    }
    return PrimitiveType.COIN_VALUE = "COIN_VALUE", PrimitiveType.COIN_VALUE_INC = "COIN_VALUE_INC", PrimitiveType.COIN_VALUE_DEC = "COIN_VALUE_DEC", PrimitiveType.COINS = "COINS", PrimitiveType.COINS_INC = "COINS_INC", PrimitiveType.COINS_DEC = "COINS_DEC", PrimitiveType.LINES = "LINES", PrimitiveType.LINES_INC = "LINES_INC", PrimitiveType.LINES_DEC = "LINES_DEC", PrimitiveType;
  }();
  var includedDoc = function() {
    /**
     * @return {undefined}
     */
    function VarsModel() {
    }
    return VarsModel.SOUND = "SOUND", VarsModel.MUSIC = "MUSIC", VarsModel.SPACEBAR_SPIN = "SPACEBAR_SPIN", VarsModel.LEFTHAND_MODE = "LEFTHAND_MODE", VarsModel.AUTO_ADJUST_BET = "AUTO_ADJUST_BET", VarsModel.FAST_CARDANIM = "FAST_CARDANIM", VarsModel.NEVER_GAMBLE = "NEVER_GAMBLE", VarsModel.AUTOHOLD_WINHANDS = "AUTOHOLD_WINHANDS", VarsModel.KEYBOARD_SHORTCUTS = "KEYBOARD_SHORTCUTS", VarsModel;
  }();
  var bind = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Proxy = function(module) {
    /**
     * @param {!HTMLElement} name
     * @param {boolean} params
     * @param {!Element} view
     * @return {?}
     */
    function Component(name, params, view) {
      var me = module.call(this, name) || this;
      return me._view = view, me._settingsController = params, name.addEventListener(constants.MENU, me.onSettings.bind(me)), name.addEventListener(constants.MOBILE_MENU, me.onShow.bind(me)), me._settingsController && name.addEventListener(constants.SHOWLIMITS, me.onShowLimits.bind(me)), me;
    }
    return bind(Component, module), Component.prototype.onShow = function() {
      /** @type {boolean} */
      var result = !this._view.isVisible();
      if (!result && this._settingsController) {
        this._settingsController.save();
      }
      var password;
      password = result ? constants.MENUSHOW : constants.MENUHIDE;
      exports.SystemManager.getScheduler().pause(!!result);
      this._dispatcher.dispatch(new constants(password));
      this._view.show(result);
    }, Component.prototype.onSettings = function() {
      this.onShow();
      this._dispatcher.dispatch(new constants(constants.SETTINGS));
    }, Component.prototype.onShowLimits = function() {
      if (!this._view.isVisible()) {
        this.onSettings();
        this._view.setPage(1);
      }
    }, Component;
  }(exports.EventProcessor);
  var filter = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Cursor = function($) {
    /**
     * @param {!HTMLElement} context
     * @param {!Object} renderer
     * @param {!Object} e
     * @param {!Date} ui
     * @param {!Object} config
     * @return {?}
     */
    function Editor(context, renderer, e, ui, config) {
      var me = $.call(this, context, ui, config) || this;
      /** @type {!Date} */
      me._statusBarView = ui;
      /** @type {!Object} */
      me._roundHandler = renderer;
      /** @type {!Object} */
      me._gameSettings = e;
      /** @type {number} */
      me._prevMinutes = -1;
      /** @type {boolean} */
      me._freeGameMode = false;
      /** @type {boolean} */
      me._isAutoplay = false;
      /** @type {boolean} */
      me._needExitCheckOnAutoplayEnd = true;
      renderer.addListener(function() {
        return me.onRoundStateChange();
      });
      e.addListener(function(t) {
        return me.onSettingsChange(t);
      });
      var isSelected = config.demoPlay && config.playForRealSigns;
      var filterContentFilterByGeometry = config.hideHistory || config.demoPlay;
      return me.initiateButton(value.SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(value.MOBILE_SOUND, config.hideSound, config.disableSound, function() {
        return me.onSound();
      }), me.initiateButton(value.FASTPLAY, config.hideFastPlay, config.disableFastPlay, function() {
        return me.onFastPlay();
      }), me.initiateButton(value.HELP, config.hideHelp, config.disableHelp, function() {
        return me.onHelp();
      }), me.initiateButton(value.EXIT, config.hideExit, false, function() {
        return me.onExit();
      }), me.initiateButton(value.MENU, false, false, function() {
        return me.onSettings();
      }), me.initiateButton(value.MOBILE_MENU, false, false, function() {
        return me.onMenu();
      }), me.initiateButton(value.HISTORY, filterContentFilterByGeometry, config.disableHistory, function() {
        return me.onHistory();
      }), me.initiateButton(value.KEYBOARD, false, false, function() {
        return me.onKeyboard();
      }), me.initiateButton(value.PLAYFORREAL, !isSelected, !isSelected, function() {
        return me.onPlayForReal();
      }), me.initiateButton(value.TUTORIAL, false, false, function() {
        return me.onTutorial();
      }), ui.showClock(config.displayClock), config.disableSound && (ui.selectButton(value.SOUND, false), ui.selectButton(value.MOBILE_SOUND, false)), config.disableExitInRound && !config.hideExit ? context.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, me.onShowExitButton.bind(me)) : me._needExitCheckOnAutoplayEnd = false, context.addEventListener(self.ShowButtonsEvent.SHOWBUTTONS, me.onShowButtons.bind(me)), context.addEventListener(constants.MENUSHOW, me.onMenuShow.bind(me, true)), context.addEventListener(constants.MENUHIDE, 
      me.onMenuShow.bind(me, false)), context.addEventListener(self.SplashEvent.SPLASH_SHOW, me.onSplash.bind(me, true)), context.addEventListener(self.SplashEvent.SPLASH_HIDE, me.onSplash.bind(me, false)), context.addEventListener(tree.MysteryJackpotCustomDataEvent.CUSTOMDATA, me.onMysteryJackpotCustomData.bind(me)), me._config = config, ui.showPNGLogo(config.showPoweredBy), me.onSplash(void 0), me;
    }
    return filter(Editor, $), Editor.prototype.onSettingsChange = function(a) {
      if (this._statusBarView.selectButton(value.SOUND, !this._gameSettings.sound), this._statusBarView.selectButton(value.MOBILE_SOUND, !this._gameSettings.sound), this._statusBarView.setLeftHandMode(this._gameSettings.leftHandMode), this._statusBarView.selectButton(value.FASTPLAY, !this._gameSettings.fastPlay), this._statusBarView.selectButton(value.KEYBOARD, !this._gameSettings.keyboardShortcuts), a.isChanged(self.SettingsChange.SOUND)) {
        var item = this._gameSettings.sound ? self.GameStatusEvent.SOUND_ON : self.GameStatusEvent.SOUND_OFF;
        this._dispatcher.dispatch(new self.GameStatusEvent(item));
      }
      if (a.isChanged(self.SettingsChange.FASTPLAY)) {
        item = this._gameSettings.sound ? self.GameStatusEvent.FASTPLAY_ON : self.GameStatusEvent.FASTPLAY_OFF;
        this._dispatcher.dispatch(new self.GameStatusEvent(item));
      }
      if (a.isChanged(self.SettingsChange.LEFTHANDMODE)) {
        item = this._gameSettings.sound ? self.GameStatusEvent.LEFTHANDMODE_ON : self.GameStatusEvent.LEFTHANDMODE_OFF;
        this._dispatcher.dispatch(new self.GameStatusEvent(item));
      }
    }, Editor.prototype.onRoundStateChange = function() {
      if (!this._freeGameMode) {
        this._statusBarView.setBalance(this._roundHandler.balance);
      }
      this._statusBarView.setBet(this._roundHandler.bet, this._freeGameMode);
      this._statusBarView.setWin(this._roundHandler.win);
    }, Editor.prototype.onHelp = function() {
      this._dispatcher.dispatch(new constants(constants.HELP));
    }, Editor.prototype.onExit = function() {
      exports.SystemManager.getScheduler().pause(false);
      this._dispatcher.dispatch(new constants(constants.EXIT));
    }, Editor.prototype.onSound = function() {
      this._dispatcher.dispatch(new constants(constants.TOGGLE_SOUND));
      this._gameSettings.toggleSound();
    }, Editor.prototype.onFastPlay = function() {
      this._dispatcher.dispatch(new constants(constants.TOGGLE_FAST_PLAY));
      this._gameSettings.toggleFastPlay();
    }, Editor.prototype.onSettings = function() {
      this._dispatcher.dispatch(new constants(constants.MENU));
    }, Editor.prototype.onMenu = function() {
      this._dispatcher.dispatch(new constants(constants.MOBILE_MENU));
    }, Editor.prototype.onHistory = function() {
      this._dispatcher.dispatch(new constants(constants.HISTORY, this._userId));
    }, Editor.prototype.onKeyboard = function() {
      this._dispatcher.dispatch(new constants(constants.TOGGLE_KEYBOARD));
      this._gameSettings.toggleKeyboardShortcuts();
    }, Editor.prototype.onTutorial = function() {
      this._dispatcher.dispatch(new constants(constants.TOGGLE_TUTORIAL));
    }, Editor.prototype.onPlayForReal = function() {
      this._dispatcher.dispatch(new constants(constants.PLAYFORREAL));
    }, Editor.prototype.onShowExitButton = function(self) {
      this._statusBarView.enableButton(value.EXIT, self.groupId === STATE.DEAL && !this._isAutoplay);
    }, Editor.prototype.onShowButtons = function(self) {
      this._statusBarView.enableButton(value.MENU, self.groupId === STATE.DEAL && !this._isAutoplay);
    }, Editor.prototype.onMenuShow = function(e) {
      this._statusBarView.selectButton(value.MENU, e && !this._isAutoplay);
      this._statusBarView.selectButton(value.MOBILE_MENU, e);
    }, Editor.prototype.onSplash = function(b) {
      this._statusBarView.onSplash(b);
      this._statusBarView.showButton(value.MOBILE_SOUND, b && !this._config.hideSound);
      this._statusBarView.showButton(value.MOBILE_MENU, !b);
    }, Editor.prototype.onMysteryJackpotCustomData = function(result) {
      this._statusBarView.handleMysteryJackpot();
    }, Editor;
  }(Zepto);
  var _contains = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RGBLed = function(item) {
    /**
     * @param {!HTMLElement} path
     * @param {!Object} result
     * @param {?} elems
     * @param {!Object} options
     * @param {?} socket
     * @return {?}
     */
    function set(path, result, elems, options, socket) {
      var self = item.call(this, path, result, elems, 0) || this;
      result.addListener(self.onSettingsChange.bind(self));
      /** @type {!Object} */
      self._videoPokerSettings = result;
      path.addEventListener(constants.SETTINGS, self.show.bind(self));
      path.addEventListener(req.BONUS_SHOW_GAME, self.onShowPanel.bind(self));
      self._videoSlotBetSettings = socket;
      elems.initButton(includedDoc.SOUND, self.onSounds.bind(self));
      elems.initButton(includedDoc.SPACEBAR_SPIN, self.onSpaceBarSpin.bind(self));
      elems.initButton(includedDoc.AUTO_ADJUST_BET, self.onAutoAdjustBet.bind(self));
      elems.initButton(includedDoc.LEFTHAND_MODE, self.onLeftHandMode.bind(self));
      elems.initButton(includedDoc.FAST_CARDANIM, self.onFastCardAnim.bind(self));
      elems.initButton(includedDoc.NEVER_GAMBLE, self.onNeverGamble.bind(self));
      elems.initButton(includedDoc.AUTOHOLD_WINHANDS, self.onAutoHoldWinHands.bind(self));
      elems.initButton(includedDoc.KEYBOARD_SHORTCUTS, self.onKeyboardShortcuts.bind(self));
      var media = self._dispatcher.dispatch.bind(self._dispatcher, new constants(constants.UPDATE_SETTINGS));
      elems.initButton(iVal.COIN_VALUE_INC, media);
      elems.initButton(iVal.COIN_VALUE_DEC, media);
      elems.initButton(iVal.COINS_INC, media);
      elems.initButton(iVal.COINS_DEC, media);
      elems.initButton(iVal.LINES_INC, media);
      elems.initButton(iVal.LINES_DEC, media);
      self._cookieStore = new exports.CookieSerializer("settings_" + options.gameId);
      self._cookieStore.load(result);
      self._betTempStore = new exports.DataSerializer([]);
      /** @type {boolean} */
      self._inGambleMode = false;
      /** @type {boolean} */
      var highlightedColumn = exports.SystemManager.getDeviceHandler().platform === exports.DeviceHandler.MOBILE;
      return options.disableFastPlay ? (result.setFastPlay(false), elems.enableButton(includedDoc.FAST_CARDANIM, false)) : (void 0 === result.fastPlay || options.hideFastPlay && highlightedColumn) && result.setFastPlay(options.defaultFastPlay), options.disableSound ? (self.setInitialSound(false, result, options), elems.enableButton(includedDoc.SOUND, false)) : (void 0 === result.sound || options.hideSound && highlightedColumn) && self.setInitialSound(options.defaultSound, result, options), options.neverGamble && 
      (result.neverGamble = true, elems.showButton(includedDoc.NEVER_GAMBLE, false), elems.showTextfield(includedDoc.NEVER_GAMBLE, false)), options.hideFastPlay && (elems.showButton(includedDoc.FAST_CARDANIM, false), elems.showTextfield(includedDoc.FAST_CARDANIM, false)), void 0 === result.keyboardShortcuts && result.setkeyboardShortcuts(false), void 0 === result.adjustBet && (result.adjustBet = options.defaultAutoAdjustBet), self;
    }
    return _contains(set, item), set.prototype.setInitialSound = function(key, msg, dstId) {
      msg.setSound(key);
    }, set.prototype.onShowPanel = function(panel) {
      switch(panel.groupId) {
        case req.SHOW_BONUS:
          this._view.enableButton(includedDoc.NEVER_GAMBLE, false);
          break;
        case req.HIDE_BONUS:
          this._view.enableButton(includedDoc.NEVER_GAMBLE, true);
      }
    }, set.prototype.onSounds = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleSound();
    }, set.prototype.onSpaceBarSpin = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
    }, set.prototype.onAutoAdjustBet = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleAdjustBet();
    }, set.prototype.onLeftHandMode = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleLeftHandMode();
    }, set.prototype.onFastCardAnim = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleFastPlay();
    }, set.prototype.onNeverGamble = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleNeverGamble();
    }, set.prototype.onAutoHoldWinHands = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleAutoHoldWinHands();
    }, set.prototype.onKeyboardShortcuts = function() {
      this._dispatcher.dispatch(new constants(constants.UPDATE_SETTINGS));
      this._videoPokerSettings.toggleKeyboardShortcuts();
    }, set.prototype.save = function() {
      this._cookieStore.save(this._model);
    }, set.prototype.onSettingsChange = function() {
      var e = this._model;
      this._view.selectButton(includedDoc.SOUND, e.sound);
      this._view.selectButton(includedDoc.LEFTHAND_MODE, e.leftHandMode);
      this._view.selectButton(includedDoc.AUTO_ADJUST_BET, e.adjustBet);
      this._view.selectButton(includedDoc.FAST_CARDANIM, e.fastPlay);
      this._view.selectButton(includedDoc.NEVER_GAMBLE, e.neverGamble);
      this._view.selectButton(includedDoc.AUTOHOLD_WINHANDS, e.autoHoldWinHands);
      this._view.selectButton(includedDoc.KEYBOARD_SHORTCUTS, e.keyboardShortcuts);
      this.save();
    }, set.prototype.show = function() {
      item.prototype.show.call(this);
      this._betTempStore.save(this._videoSlotBetSettings);
    }, set.prototype.onOk = function() {
      item.prototype.onOk.call(this);
      this._dispatcher.dispatch(new constants(constants.MENUHIDE));
    }, set.prototype.onCancel = function() {
      var that = this._model;
      var key = that.sound;
      var outgoingController = that.fastPlay;
      item.prototype.onCancel.call(this);
      that.setSound(key);
      that.setFastPlay(outgoingController);
      this._betTempStore.load(this._videoSlotBetSettings);
      self.ResourceManager.getInstance().getCreditFormatter().denomination = this._videoSlotBetSettings.denomination;
      this._dispatcher.dispatch(new constants(constants.MENUHIDE));
    }, set;
  }(target);
  var setElementTransformProperty = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var relations = function(t) {
    /**
     * @param {?} i
     * @param {?} msg
     * @param {?} n
     * @return {?}
     */
    function e(i, msg, n) {
      return t.call(this, i, msg, n) || this;
    }
    return setElementTransformProperty(e, t), e.prototype.show = function(result) {
      this._viewFactory.show(result);
    }, e.prototype.destroy = function() {
      t.prototype.destroy.call(this);
      this._viewFactory.destroy();
    }, e;
  }(way);
  var isModelSelectedWithAnyCollectionLabel = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var childRelations = function(collection) {
    /**
     * @param {?} b
     * @param {boolean} value
     * @param {!Object} options
     * @param {boolean} name
     * @param {?} data
     * @param {?} obj
     * @return {?}
     */
    function model(b, value, options, name, data, obj) {
      var util = collection.call(this, b, options, obj) || this;
      var NINETY_EIGHT_HOURS = obj.createStatusBarView(data.betSettings);
      util.createStatusBarController(b, name, value, NINETY_EIGHT_HOURS, options);
      var c = obj.createButtonView();
      util.createButtonController(b, name, c, options, value);
      var projectId = obj.createSettingsView();
      util.createSettingsController(b, value, projectId, options, data.betSettings);
      var orig = obj.createBetPanelView();
      util.createBetPanelController(b, name, data.betSettings, orig, options);
      /** @type {!Array} */
      var t = [orig, projectId];
      if (!(void 0 === options.helpUrl || options.disableHelp || options.hideHelp)) {
        t.push(obj.createGameRulesView(options.helpUrl, b));
      }
      if (!(void 0 === options.historyUrl || options.disableHistory || options.hideHistory)) {
        t.push(obj.createGameHistoryView(options.historyUrl + "&custid=" + options.customerId, options.language, b));
      }
      if (!(void 0 === options.cashierUrl || options.demoPlay)) {
        t.push(obj.createCashierView(options.cashierUrl, b));
      }
      if (void 0 !== options.playForRealUrl && options.demoPlay && options.playForRealSigns) {
        t.push(obj.createPlayForRealViewMobile(b));
      }
      var result = obj.createMenuView(options.gameName, b, t, projectId);
      return new Proxy(b, null, result), util;
    }
    return isModelSelectedWithAnyCollectionLabel(model, collection), model.prototype.createButtonController = function(value, cell, n, i, color) {
      new Cell(value, cell, n, i, color);
    }, model.prototype.createStatusBarController = function(text, index, path, value, options) {
      return new Cursor(text, index, path, value, options);
    }, model.prototype.createBetPanelController = function(name, id, options, text, canvas) {
      return new Layer(name, id, options, text, canvas);
    }, model.prototype.createSettingsController = function(pins, state, color, i, forceOptional) {
      return new RGBLed(pins, state, color, i, forceOptional);
    }, model;
  }(relations);
  var ie9elem = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Vl = function(html) {
    /**
     * @param {?} fields
     * @return {?}
     */
    function me(fields) {
      var self = html.call(this, fields) || this;
      return self._buttons[_this.DENOM] = "betLevelDisplay", self._buttons[_this.DENOM_INC] = "betPlus", self._buttons[_this.DENOM_DEC] = "betMinus", self._buttons[_this.LINES] = "handsDisplay", self._buttons[_this.LINES_INC] = "handPlus", self._buttons[_this.LINES_DEC] = "handMinus", self._buttons[_this.COINS] = "coinsDisplay", self._buttons[_this.COINS_INC] = "coinPlus", self._buttons[_this.COINS_DEC] = "coinMinus", self._texts = {}, self._texts[_this.COINBALANCE_LABEL] = "menuCoinValue", self._texts[_this.COINBET_LABEL] = 
      "menuBetValue", self._texts[_this.COIN_VALUE_LABEL] = "IDS_COINVALUE", self._texts[_this.COINS_PER_HAND_LABEL] = "coinsDisplay.label", self._panels[_this.BET_BTN_PANEL] = "betSettings", self._anims = {}, self._anims[rowdim.MULTIHAND] = "MH", self._anims[rowdim.SINGLEHAND] = "SH", self;
    }
    return ie9elem(me, html), me.prototype.setSliderValue = function(val, values) {
    }, me.prototype.setSliderValueArray = function(marktype, itemData) {
    }, me.prototype.setSliderIndex = function(formatters, customFormatters) {
    }, me.prototype.setCurrency = function(data) {
      this.setLabelArgs(_this.COIN_VALUE_LABEL, "> (" + data + ")");
    }, me.prototype.showSlider = function(token, message) {
    }, me.prototype.isVisible = function() {
      return true;
    }, me.prototype.show = function(str) {
    }, me.prototype.setLabelText = function(key, value, text) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
      if (text) {
        this._entity.getTextField(id).setArgs(text);
      }
    }, me.prototype.setLabelArgs = function(key, args) {
      var cached = this._texts[key];
      this._entity.getTextField(cached).setArgs(args);
    }, me.prototype.enableSlider = function(noCallback, id) {
    }, me.prototype.playPanelAnim = function(i, name) {
      var animation = this._panels[i];
      if (animation) {
        this._entity.getAnimation(animation).play(this._anims[name]);
      }
    }, me.prototype.setPanelVisible = function(name, show) {
      var i = this._panels[name];
      if (i) {
        this._entity.getDisplay(i).setVisible(show);
      }
    }, me;
  }(self.ViewBase);
  var _fadeCss = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Wl = function(t) {
    /**
     * @param {?} config
     * @return {?}
     */
    function Buttons(config) {
      var me = t.call(this, config) || this;
      return me._buttons[button.SPIN] = "dealBtn", me._buttons[button.CONTINUE] = "stopBtn", me._buttons[button.GAMBLE] = "gambleBtn", me._buttons[button.COLLECT_WAIT] = "collectBtn", me._buttons[button.COLLECT] = "collectBtn", me._buttons[button.PAYTABLE] = "paytableBtn", me._panels[button.GAMBLEBTNPANEL] = "gambleGroup", me._texts = {}, me._texts.gambleTypeText = "gambleTypeText", me._anims = {}, me._anims[firstAtom.COLLECT] = "collectBtn.btnStroke", me._anims[firstAtom.GAMBLE] = "gambleBtn.btnStroke", 
      me;
    }
    return _fadeCss(Buttons, t), Buttons.prototype.setLabelText = function(key, value) {
      var id = this._texts[key];
      this._entity.getTextField(id).setText(value);
    }, Buttons.prototype.setLabelArgs = function(key, args) {
      var cached = this._texts[key];
      this._entity.getTextField(cached).setArgs(args);
    }, Buttons.prototype.enableSpecialButton = function(eta, lmbda, n) {
    }, Buttons.prototype.setPanelVisible = function(name, show) {
      var i = this._panels[name];
      if (i) {
        this._entity.getDisplay(i).setVisible(show);
      }
    }, Buttons.prototype.playButtonAnim = function(id, type) {
      var animation = this._anims[id];
      if (animation) {
        this._entity.getAnimation(animation).play(type);
      }
    }, Buttons;
  }(self.ViewBase);
  var PointLight = function() {
    /**
     * @param {?} res
     * @return {undefined}
     */
    function me(res) {
    }
    return me.prototype.show = function(str) {
    }, me.prototype.isVisible = function() {
      return false;
    }, me.prototype.setPage = function(store) {
    }, me.prototype.setGameTitle = function(t) {
    }, me;
  }();
  var raiseImageEvent = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var DeviceNameController = function(Controller) {
    /**
     * @param {?} view
     * @param {?} n
     * @return {?}
     */
    function load(view, n) {
      var data = Controller.call(this, view) || this;
      return data._buttons[value.SOUND] = "soundsBtn", data._buttons[value.FASTPLAY] = "fastPlayBtn", data._buttons[value.HELP] = "infosBtn", data._buttons[value.MENU] = "settingsBtn", data._buttons[value.EXIT] = "exitBtn", data._buttons[value.PLAYFORREAL] = "playForRealBtn", data._buttons[value.HISTORY] = "historyBtn", data._buttons[value.KEYBOARD] = "keyboardBtn", data._buttons[value.TUTORIAL] = "tutorialBtn", data._entity.getTextField("balanceText").setText("IDS_BALANCE_CAPTION"), data._entity.getTextField("betText").setText("IDS_BET_CAPTION"), 
      data._entity.getTextField("winText").setText("IDS_WIN_CAPTION"), data._entity.getTextField("clock.clockText").setText(""), data._moneyFormatter = self.ResourceManager.getInstance().getMoneyFormatter(), data._texts = {}, data._texts.FG_FREEGAMES = "statusBarFreeGame.freeGamesText", data._texts.FG_TOTALWIN = "statusBarFreeGame.totalWinText", data._texts.FG_FREEBET = "freeBetText", data._texts.FG_WIN = "freeGameWinText", data._texts.BALANCE = "statusBarDefault.balanceText", data._texts.BET = "statusBarDefault.betText", 
      data._texts.WIN = "statusBarDefault.winText", data._moneyFormatter = self.ResourceManager.getInstance().getMoneyFormatter(), data.setFreeGameMode(), data;
    }
    return raiseImageEvent(load, Controller), load.prototype.showButton = function(type, show) {
      if (type === value.PLAYFORREAL) {
        if (show) {
          this._entity.getDisplay("statusBarDefault").setVisible(false);
          /** @type {string} */
          this._texts.BALANCE = "statusBarPFR.balanceText";
          /** @type {string} */
          this._texts.BET = "statusBarPFR.betText";
          /** @type {string} */
          this._texts.WIN = "statusBarPFR.winText";
          this._entity.getTextField(this._texts.BALANCE).setText("IDS_BALANCE_CAPTION");
          this._entity.getTextField(this._texts.BET).setText("IDS_BET_CAPTION");
          this._entity.getTextField(this._texts.WIN).setText("IDS_WIN_CAPTION");
        } else {
          this._entity.getDisplay("statusBarPFR").setVisible(false);
        }
      }
      Controller.prototype.showButton.call(this, type, show);
    }, load.prototype.setBalance = function(data) {
      var myDoughnutChart = this._moneyFormatter.MoneyToString(data, self.MoneyFormatterFlag.FORCE_DECIMAL);
      this._entity.getTextField("balanceText").setArgs("> " + myDoughnutChart);
    }, load.prototype.showPNGLogo = function(value) {
      this._entity.getDisplay("pngLogo").setVisible(value);
    }, load.prototype.handleMysteryJackpot = function() {
    }, load.prototype.setBet = function(t, start) {
      var rendered = this._moneyFormatter.MoneyToString(t, self.MoneyFormatterFlag.FORCE_DECIMAL);
      this._entity.getTextField("betValue").setText(rendered);
    }, load.prototype.setWin = function(num) {
      var e = num > 0 ? this._moneyFormatter.MoneyToString(num, self.MoneyFormatterFlag.FORCE_DECIMAL) : "";
      this._entity.getTextField("winValue").setText(e);
    }, load.prototype.setFreeGames = function(canCreateDiscussions) {
    }, load.prototype.setTotalWin = function(canCreateDiscussions) {
    }, load.prototype.setFreeGameMode = function() {
    }, load.prototype.setNormalMode = function() {
    }, load.prototype.removeNormalMode = function() {
    }, load.prototype.setTime = function(t) {
      this._entity.getTextField("clock.clockText").setText(t);
    }, load.prototype.showClock = function(visible) {
      this._entity.getDisplay("clock").setVisible(visible);
    }, load.prototype.setLeftHandMode = function(addedRenderer) {
    }, load.prototype.setBetInCoins = function(a22) {
    }, load.prototype.onSplash = function(sigma) {
    }, load;
  }(Controller);
  var prepareInit = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PerfTimingObj = function(util) {
    /**
     * @param {?} name
     * @param {!Array} args
     * @param {?} data
     * @param {?} uid
     * @return {?}
     */
    function init(name, args, data, uid) {
      var self = util.call(this, name, 0, data, uid) || this;
      self._texts = {};
      /** @type {number} */
      var i = 0;
      var arg_count = args.length;
      for (; i < arg_count; i++) {
        /** @type {string} */
        self._buttons[args[i]] = "setting" + (i + 1) + ".btn";
        /** @type {string} */
        self._texts[args[i]] = "setting" + (i + 1);
        self.enableButton(args[i], true);
      }
      i = args.length;
      for (; i < 10; i++) {
        /** @type {string} */
        var key = "setting" + (i + 1);
        /** @type {string} */
        self._buttons[key] = key;
        self.showButton(key, false);
      }
      return self.setText(self._texts[includedDoc.SOUND], "IDS_M_SETTINGS_L1"), self.setText(self._texts[includedDoc.AUTO_ADJUST_BET], "IDS_M_SETTINGS_L9"), self.setText(self._texts[includedDoc.FAST_CARDANIM], "IDS_M_SETTINGS_L12"), self.setText(self._texts[includedDoc.NEVER_GAMBLE], "IDS_M_SETTINGS_L7"), self.setText(self._texts[includedDoc.AUTOHOLD_WINHANDS], "IDS_M_SETTINGS_L8"), self.setText(self._texts[includedDoc.KEYBOARD_SHORTCUTS], "IDS_M_SETTINGS_L19"), self.hideWin(), self;
    }
    return prepareInit(init, util), init.prototype.showTextfield = function(key, value) {
      if (key) {
        var i = this._texts[key];
        if (i) {
          this._entity.getDisplay(i).setVisible(value);
        }
      } else {
        var text;
        for (text in this._texts) {
          if (this._texts.hasOwnProperty(text)) {
            this.showTextfield(text, value);
          }
        }
      }
    }, init;
  }(sampleUserGroupRoles);
  var dropRequireCache = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var location = function(target) {
    /**
     * @return {?}
     */
    function config() {
      return null !== target && target.apply(this, arguments) || this;
    }
    return dropRequireCache(config, target), config.prototype.init = function(c) {
      target.prototype.init.call(this, c);
      /** @type {!Object} */
      this._config = c;
      var config = self.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
    }, config.prototype.createInfoView = function() {
      return new windowReference(this._entity);
    }, config.prototype.createExpandingWinCounterView = function() {
      return new base16(this.createWinCounterScales());
    }, config.prototype.createWinCounterScales = function() {
      return [0.5, 0.6, 0.7, 0.85, 1];
    }, config.prototype.createInteractionFeedbackView = function(selector) {
      return new JarallaxAnimation(selector);
    }, config.prototype.show = function(str) {
    }, config.prototype.destroy = function() {
    }, config;
  }(div);
  var fn_generate_task = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var full = function(t) {
    /**
     * @return {?}
     */
    function DefClass() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return fn_generate_task(DefClass, t), DefClass.prototype.init = function(c) {
      t.prototype.init.call(this, c);
      /** @type {!Object} */
      this._config = c;
      var config = self.ResourceManager.getInstance().getEntityManager();
      this._entity = config.create("?");
      config.add("menu", this._entity);
      self.ResourceManager.getInstance().getKeyboardHandler().initKeyBoardHandler(io.KeyUpValues, io.KeyDownValues);
    }, DefClass.prototype.createStatusBarView = function() {
      return new DeviceNameController(this._entity, this._config);
    }, DefClass.prototype.createButtonView = function() {
      return new Wl(this._entity);
    }, DefClass.prototype.createBetPanelView = function() {
      return new Vl(this._entity);
    }, DefClass.prototype.createSettingsView = function() {
      var t = this.filterButtons([includedDoc.SOUND, includedDoc.KEYBOARD_SHORTCUTS, includedDoc.AUTO_ADJUST_BET, includedDoc.NEVER_GAMBLE, includedDoc.AUTOHOLD_WINHANDS, includedDoc.FAST_CARDANIM]);
      return new PerfTimingObj("SettingsDlg_tablegames", t, this._parent, this._disabler);
    }, DefClass.prototype.createMenuView = function(uppercase, object, args, color) {
      return new PointLight(color);
    }, DefClass.prototype.createSplitView = function(CSSSelector, parentElement, position) {
      return null;
    }, DefClass.prototype.createGameRulesView = function(browserChannel, array) {
      return null;
    }, DefClass.prototype.createGameHistoryView = function(eta, lmbda, n) {
      return null;
    }, DefClass.prototype.createCashierView = function(rect, linesstrip) {
      return null;
    }, DefClass.prototype.createPlayForRealViewMobile = function(end_time) {
      return null;
    }, DefClass.prototype.createFreeGameMessageView = function(trackingPeriod, value, nodeId, userId, dataRequestCompleted) {
      return void 0 === userId && (userId = "PlayConfirm"), void 0 === dataRequestCompleted && (dataRequestCompleted = false), null;
    }, DefClass.prototype.createMasterView = function() {
      return new Fs;
    }, DefClass.prototype.filterButtons = function(swimlanes) {
      var CloudCmd = this;
      return swimlanes.filter(function(canCreateDiscussions) {
        switch(canCreateDiscussions) {
          case includedDoc.FAST_CARDANIM:
            return !CloudCmd._config.hideFastPlay;
          case instance.SOUND:
            return !CloudCmd._config.hideSound;
          default:
            return true;
        }
      });
    }, DefClass;
  }(location);
  var diffObject = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var selectorSpecificity = function(fn) {
    /**
     * @param {?} event
     * @return {?}
     */
    function add(event) {
      var me = fn.call(this, event) || this;
      var _this = self.ResourceManager.getInstance();
      /** @type {boolean} */
      me._leftHandMode = false;
      /** @type {boolean} */
      me._showClock = true;
      me._moneyFormatter = _this.getMoneyFormatter();
      _this.getLayoutManager().setVariable("handMode", "right");
      var $item = exports.SystemManager.getDeviceHandler();
      return $item && ($item.addEventListener(exports.DeviceEvent.ORIENTATION, me.HandleOrientationChange.bind(me)), $item.addEventListener(exports.DeviceEvent.RESIZE, me.HandleOrientationChange.bind(me))), me._buttonsWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._root, "buttonsWrapper", void 0), me._gamePanel = document.getElementById("gamepanel") || RepositoryApi.getInstance().createAndAppendDiv(me._root, "gamepanel", void 0), me._gamePanel.style.display = "", me._gamePanel.addEventListener("touchstart", 
      function(event) {
        event.preventDefault();
      }), me._gamePanel.addEventListener("touchend", function(event) {
        event.preventDefault();
      }), RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "backgroundImg", void 0), me._buttons[value.MOBILE_MENU] = new constructor("", me._gamePanel, "menuImg", "menuButtonWrapper", void 0), me._buttons[value.EXIT] = new constructor("", me._gamePanel, "lobbyImg", "lobbyButtonWrapper", void 0), me._buttons[value.MOBILE_SOUND] = new constructor("", me._gamePanel, "soundImg", "soundButtonWrapper"), RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "informationBar", void 0), 
      me._bottomPanelWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "bottomPanelWrapper", void 0), me._portraitPanelWrapper = RepositoryApi.getInstance().createAndAppendDiv(me._gamePanel, "portraitPanelWrapper", void 0), me._menuWrapper1 = RepositoryApi.getInstance().createAndAppendDiv(me._portraitPanelWrapper, "menuWrapper1", void 0), me._menuWrapper2 = RepositoryApi.getInstance().createAndAppendDiv(me._bottomPanelWrapper, "menuWrapper2", void 0), me._menuWrapper3 = RepositoryApi.getInstance().createAndAppendDiv(me._portraitPanelWrapper, 
      "menuWrapper3", void 0), me.createChildDivs(), me;
    }
    return diffObject(add, fn), add.prototype.createChildDivs = function() {
      var exports = RepositoryApi.getInstance();
      /** @type {boolean} */
      this._displayCoins = true;
      this._clockWrapper = exports.createDiv("clockWrapper", void 0);
      this._clockImage = exports.createAndAppendDiv(this._clockWrapper, "clockImg", void 0);
      exports.appendChild(this._clockWrapper, this._clockImage);
      this._localTime = exports.createTextfield(this._clockWrapper, "time", void 0, " ");
      this._moneyBalanceWrapper = exports.createDiv("moneyBalanceWrapper", void 0);
      this._balanceCaption = exports.createTextfield(this._moneyBalanceWrapper, "balanceText", void 0, "IDS_BALANCE_CAPTION", "IDS_BALANCE_CAPTION");
      this._moneyBalance = exports.createTextfield(this._moneyBalanceWrapper, "moneyBalance", void 0, " ");
      this._coinsBalanceWrapper = exports.createDiv("coinsBalanceWrapper", void 0);
      this._coinsBetWrapper = exports.createDiv("coinsBetWrapper", void 0);
      this._moneyWinWrapper = exports.createDiv("moneyWinWrapper", void 0);
      exports.createTextfield(this._moneyWinWrapper, "winText", void 0, "IDS_WIN_CAPTION", "IDS_WIN_CAPTION");
      this._moneyWin = exports.createTextfield(this._moneyWinWrapper, "moneyWin", void 0, " ");
      this._moneyBetWrapper = exports.createDiv("moneyBetWrapper", void 0);
      exports.createTextfield(this._moneyBetWrapper, "betMoneyText", void 0, "IDS_BET_CAPTION", "IDS_BET_CAPTION");
      this._moneyBet = exports.createTextfield(this._moneyBetWrapper, "moneyBet", void 0, " ");
      exports.createScalableDiv(this._moneyBalanceWrapper, this._bottomPanelWrapper, 0.5, 10);
      exports.createScalableDiv(this._coinsBalanceWrapper, this._bottomPanelWrapper, 0.5, 10);
      exports.createScalableDiv(this._coinsBetWrapper, this._bottomPanelWrapper, 0.5, 10);
      exports.createScalableDiv(this._moneyWinWrapper, this._bottomPanelWrapper, 0.45, 10);
      exports.createScalableDiv(this._moneyBetWrapper, this._bottomPanelWrapper, 0.45, 10);
      /** @type {string} */
      this._moneyWin.style.visibility = "hidden";
      if (this._displayCoins) {
        exports.appendChild(this._menuWrapper1, this._clockWrapper);
        exports.appendChild(this._menuWrapper1, this._moneyBalanceWrapper);
        exports.appendChild(this._menuWrapper2, this._coinsBalanceWrapper);
        exports.appendChild(this._menuWrapper2, this._coinsBetWrapper);
        exports.appendChild(this._menuWrapper3, this._moneyWinWrapper);
        exports.appendChild(this._menuWrapper3, this._moneyBetWrapper);
        if (!this._showClock) {
          this._menuWrapper1.classList.add("noclock");
        }
      } else {
        exports.appendChild(this._menuWrapper1, this._moneyBalanceWrapper);
        exports.appendChild(this._menuWrapper2, this._moneyBetWrapper);
        exports.appendChild(this._menuWrapper2, this._moneyWinWrapper);
        exports.appendChild(this._menuWrapper3, this._clockWrapper);
      }
      this.HandleOrientationChange();
      if (!this._showClock) {
        /** @type {string} */
        this._clockWrapper.style.display = "none";
      }
    }, add.prototype.showPNGLogo = function(addedRenderer) {
    }, add.prototype.handleMysteryJackpot = function() {
    }, add.prototype.setBalanceLabelType = function(canCreateDiscussions) {
      /** @type {!Function} */
      this._balanceLabelType = canCreateDiscussions;
      RepositoryApi.getInstance().setTextWidthProxy(this._balanceCaption, this.getBalanceLabel());
    }, add.prototype.getBalanceLabel = function() {
      return this._balanceLabelType === self.BonusBalanceEventType.BONUS ? "IDS_BONUS_CAPTION" : "IDS_BALANCE_CAPTION";
    }, add.prototype.HandleOrientationChange = function() {
      var t = exports.DEVICE.orientation;
      /** @type {string} */
      var oldHeros = "ls" === t ? "pt" : "ls";
      if (this._gamePanel.classList.add(t), this._buttonsWrapper.classList.add(t), this._gamePanel.classList.remove(oldHeros), this._buttonsWrapper.classList.remove(oldHeros), this._displayCoins ? (this._gamePanel.classList.add("nocoin"), this._buttonsWrapper.classList.add("nocoin")) : (this._gamePanel.classList.remove("ls"), this._buttonsWrapper.classList.remove("ls")), "ls" === exports.DEVICE.orientation) {
        if (this._displayCoins) {
          RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._moneyBalanceWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._moneyBetWrapper);
          for (; this._portraitPanelWrapper.childNodes.length > 0;) {
            this._bottomPanelWrapper.appendChild(this._portraitPanelWrapper.childNodes[0]);
          }
          this._clockWrapper.classList.add("coin");
          this._moneyBet.classList.add("coin");
        } else {
          RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._moneyBetWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._moneyWinWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper3, this._clockWrapper);
        }
        RepositoryApi.getInstance().reorderChildrenInDiv(this._bottomPanelWrapper, ["menuWrapper1", "menuWrapper2", "menuWrapper3"]);
        RepositoryApi.getInstance().setStyle(this._portraitPanelWrapper, "nodisplay");
      } else {
        if (this._displayCoins) {
          RepositoryApi.getInstance().appendChild(this._menuWrapper1, this._clockWrapper);
          RepositoryApi.getInstance().setStyle(this._moneyBetWrapper, "");
          RepositoryApi.getInstance().reorderChildrenInDiv(this._menuWrapper3, ["moneyBetWrapper", "moneyWinWrapper"]);
        } else {
          RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._moneyBetWrapper);
          RepositoryApi.getInstance().appendChild(this._menuWrapper2, this._moneyWinWrapper);
        }
        RepositoryApi.getInstance().appendChild(this._portraitPanelWrapper, this._menuWrapper1);
        RepositoryApi.getInstance().appendChild(this._portraitPanelWrapper, this._menuWrapper3);
        this._portraitPanelWrapper.removeAttribute("class");
        RepositoryApi.getInstance().reorderChildrenInDiv(this._bottomPanelWrapper, ["menuWrapper2", "portraitPanelWrapper"]);
      }
      this.handleLeftHandModeValues();
      RepositoryApi.getInstance().getScalableDiv(this._moneyBetWrapper).update();
      RepositoryApi.getInstance().getScalableDiv(this._moneyWinWrapper).update();
    }, add.prototype.setLeftHandMode = function(addedRenderer) {
      /** @type {boolean} */
      this._leftHandMode = addedRenderer;
      this.handleLeftHandModeValues();
    }, add.prototype.handleLeftHandModeValues = function() {
      if (this._leftHandMode) {
        this._gamePanel.classList.add("lhmode");
        this._buttonsWrapper.classList.add("lhmode");
        self.ResourceManager.getInstance().getLayoutManager().setVariable("handMode", "left");
      } else {
        this._gamePanel.classList.remove("lhmode");
        this._buttonsWrapper.classList.remove("lhmode");
        self.ResourceManager.getInstance().getLayoutManager().setVariable("handMode", "right");
      }
    }, add.prototype.setBalance = function(data) {
      this._moneyBalance.innerText = this._moneyFormatter.MoneyToString(data);
    }, add.prototype.setBet = function(n) {
      this._moneyBet.innerText = this._moneyFormatter.MoneyToString(n);
      RepositoryApi.getInstance().getScalableDiv(this._moneyBetWrapper).update();
    }, add.prototype.setWin = function(result) {
      if (0 === result) {
        /** @type {string} */
        this._moneyWin.style.visibility = "hidden";
      } else {
        /** @type {string} */
        this._moneyWin.style.visibility = "visible";
        this._moneyWin.innerText = this._moneyFormatter.MoneyToString(result);
      }
      RepositoryApi.getInstance().getScalableDiv(this._moneyWinWrapper).update();
    }, add.prototype.setTime = function(text) {
      /** @type {string} */
      this._localTime.innerText = text;
    }, add.prototype.showClock = function(data) {
      if (true === data) {
        this._clockWrapper.classList.remove("hidden");
      } else {
        this._clockWrapper.classList.add("hidden");
      }
    }, add.prototype.showElement = function(b, el) {
    }, add.prototype.onSplash = function(sigma) {
    }, add.prototype.setFreeGames = function(canCreateDiscussions) {
    }, add.prototype.setTotalWin = function(canCreateDiscussions) {
    }, add.prototype.setNormalMode = function() {
    }, add;
  }(selector);
  var assertIsPlainArray = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var selectorWatch = function(array) {
    /**
     * @param {string} id
     * @return {?}
     */
    function Game(id) {
      var n = array.call(this, id) || this;
      n.setupDivs(id);
      id.addEventListener("touchstart", function(event) {
        event.preventDefault();
      });
      id.addEventListener("touchend", function(event) {
        event.preventDefault();
      });
      var elem = exports.SystemManager.getDeviceHandler();
      return elem && elem.addEventListener(exports.DeviceEvent.ORIENTATION, n.HandleOrientationChange.bind(n)), n;
    }
    return assertIsPlainArray(Game, array), Game.prototype.setupDivs = function(element) {
      this._panels = {};
      this._buttons[button.SPIN] = new constructor("", element, "dealBtn", "dealBtnWrapper", void 0, "btnCaption");
      var el = this._buttons[button.SPIN].getDOMNode();
      var childCompute = RepositoryApi.getInstance().createAndAppendDiv(el, void 0, "pointerArea");
      this._buttons[button.SPIN].setPointerTarget(childCompute);
      var widget = RepositoryApi.getInstance().createAndAppendDiv(this._root, "gamblePanel");
      this._buttons[button.GAMBLE] = new constructor("", widget, "vsBtnGamble", "gambleButton", "btnGamble", "btnVideBingoCaption");
      this._buttons[button.COLLECT] = new constructor("", widget, "vbBtnCollect", "collectButton", "btnCollect", "btnVideBingoCaption");
      this._panels[button.GAMBLEBTNPANEL] = widget;
    }, Game.prototype.createButton = function(id, type, opts, handler, target, config, appName, options) {
      if (void 0 === options && (options = false), this._buttons[id] = new Template(type, opts, handler, target, config, appName), options) {
        var u = this._buttons[id].getDOMNode();
        var cmtcookie = RepositoryApi.getInstance().createAndAppendDiv(u, void 0, "pointerArea");
        this._buttons[id].setPointerTarget(cmtcookie);
      }
    }, Game.prototype.HandleOrientationChange = function() {
      exports.DEVICE.orientation;
    }, Game.prototype.addToolTipOnHover = function(canCreateDiscussions) {
    }, Game.prototype.showPanel = function(index, on) {
      /** @type {string} */
      this._panels[index].style.display = on ? "" : "none";
    }, Game.prototype.setLabelText = function(text, value) {
    }, Game.prototype.setLabelArgs = function(formatters, customFormatters) {
    }, Game.prototype.enableSpecialButton = function(id, programStatusId, store) {
      this.enableButton(id, programStatusId);
      var button = this._buttons[id];
      if (button) {
        if (store) {
          button.getDOMNode().classList.remove("specialHide");
        } else {
          button.getDOMNode().classList.add("specialHide");
        }
      }
    }, Game.prototype.setPanelVisible = function(index, show) {
      /** @type {string} */
      this._panels[index].style.display = show ? "" : "none";
    }, Game.prototype.playButtonAnim = function() {
    }, Game;
  }(selector);
  var _prepareFontFace = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var t_ = function() {
    /**
     * @param {string} data
     * @param {?} latLon
     * @return {undefined}
     */
    function createInfoWindow(data, latLon) {
      /** @type {string} */
      this.text = data;
      this.styleID = latLon;
    }
    return createInfoWindow;
  }();
  var DomEventEmitterProxy = function(src) {
    /**
     * @param {?} callback
     * @param {?} name
     * @param {!NodeList} data
     * @return {?}
     */
    function Panel(callback, name, data) {
      var self = src.call(this, "IDS_BTN_SETTINGS", callback) || this;
      self.initUIData();
      self._view = RepositoryApi.getInstance().createDiv("settingsview");
      var edit;
      /** @type {number} */
      var i = 0;
      var tldCount = data.length;
      for (; i < tldCount; i++) {
        if (void 0 !== (edit = self._uIData[data[i]])) {
          self._buttons[data[i]] = self.createCheckbox(data[i], edit.text, self._view, edit.styleID);
        }
      }
      var scope = exports.SystemManager.getDeviceHandler();
      return scope && (scope.addEventListener(exports.DeviceEvent.ORIENTATION, self.handleOrientationChange.bind(self)), scope.addEventListener(exports.DeviceEvent.RESIZE, self.handleOrientationChange.bind(self))), self;
    }
    return _prepareFontFace(Panel, src), Panel.prototype.createCheckbox = function(id, name, labelText, checked) {
      var field = new ZmPrefAccount(name, checked);
      return field.getDOMNode().classList.add("settingsview_checkbox"), field.getDOMNode().style.position = "", labelText.appendChild(field.getDOMNode()), this._buttons[id] = field, field;
    }, Panel.prototype.show = function(str) {
    }, Panel.prototype.isVisible = function() {
      return false;
    }, Panel.prototype.handleOrientationChange = function() {
    }, Panel.prototype.initUIData = function() {
      this._uIData = {};
      this._uIData[includedDoc.SOUND] = new t_("IDS_M_SETTINGS_L1", "settingsIconSound");
      this._uIData[includedDoc.AUTO_ADJUST_BET] = new t_("IDS_M_SETTINGS_L9", "settingsIconAutoAdjustBet");
      this._uIData[includedDoc.NEVER_GAMBLE] = new t_("IDS_M_SETTINGS_L7", "settingsIconNeverGamble");
      this._uIData[includedDoc.AUTOHOLD_WINHANDS] = new t_("IDS_M_SETTINGS_L8", "settingsIconAutoHold");
      this._uIData[includedDoc.FAST_CARDANIM] = new t_("IDS_M_SETTINGS_L12", "settingsIconFastPlay");
      this._uIData[includedDoc.LEFTHAND_MODE] = new t_("IDS_M_SETTINGS_L14", "settingsIconLeftHand");
    }, Panel.prototype.showTextfield = function(pasted, content) {
    }, Panel;
  }(tokens);
  var fetchEvents = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var newly_sorted_els = function(end) {
    /**
     * @param {?} data
     * @return {?}
     */
    function refresh(data) {
      var self = end.call(this, data) || this;
      return self._panels[element.BALANCE_CONTAINER].style.visibility = "hidden", self;
    }
    return fetchEvents(refresh, end), refresh.prototype.setCurrency = function(data) {
      var slider = this._sliders[res.DENOM];
      if (slider) {
        slider.setCaption(this._sliderData[res.DENOM], "> (" + data + ")");
      }
    }, refresh.prototype.setupData = function() {
      end.prototype.setupData.call(this);
      /** @type {string} */
      this._sliderData[res.LINES] = "IDS_HANDS";
    }, refresh.prototype.playPanelAnim = function(formatters, customFormatters) {
    }, refresh.prototype.setPanelVisible = function(show, animate) {
    }, refresh;
  }(pos);
  var iterateeAry = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var extendedData = function(n) {
    /**
     * @return {?}
     */
    function result() {
      return null !== n && n.apply(this, arguments) || this;
    }
    return iterateeAry(result, n), result.prototype.show = function(str) {
    }, result;
  }(root);
  var addUnderscoreMethods = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var simpleDatas = function(obj) {
    /**
     * @return {?}
     */
    function Base() {
      return null !== obj && obj.apply(this, arguments) || this;
    }
    return addUnderscoreMethods(Base, obj), Base.prototype.createStatusBarView = function() {
      return new selectorSpecificity(this._container);
    }, Base.prototype.createButtonView = function() {
      return new selectorWatch(document.getElementById("buttonsWrapper"));
    }, Base.prototype.createSettingsView = function() {
      var proxyBlackList_ = this.initSettingsButton();
      return new DomEventEmitterProxy(this._container, "SettingsDlg_tablegames", proxyBlackList_);
    }, Base.prototype.initSettingsButton = function() {
      /** @type {!Array} */
      var elems = [];
      return this._config.hideSound || elems.push(includedDoc.SOUND), elems.push(includedDoc.AUTO_ADJUST_BET), elems.push(includedDoc.NEVER_GAMBLE), elems.push(includedDoc.AUTOHOLD_WINHANDS), elems.push(includedDoc.FAST_CARDANIM), elems.push(includedDoc.LEFTHAND_MODE), this.initAdditionalButtons(elems), elems;
    }, Base.prototype.initAdditionalButtons = function(selector) {
    }, Base.prototype.createBetPanelView = function() {
      return new newly_sorted_els(this._container);
    }, Base.prototype.createGameRulesView = function(clickRepeater, e) {
      return new NavigationError(this._container, clickRepeater, e);
    }, Base.prototype.createGameHistoryView = function(token, property, newVal) {
      return new StateChange(this._container, token, property, newVal);
    }, Base.prototype.createCashierView = function(timeout, value) {
      return new Context(this._container, timeout, this._config.urlMode, value);
    }, Base.prototype.createMenuView = function(signature, args, var_args) {
      return new Signature(signature, args, var_args);
    }, Base.prototype.createSplitView = function(CSSSelector, parentElement, position) {
      return null;
    }, Base.prototype.createMasterView = function() {
      return new Fs;
    }, Base.prototype.createInfoView = function() {
      return null;
    }, Base.prototype.show = function(str) {
      if (str) {
        this._container.classList.remove("hidden");
      } else {
        this._container.classList.add("hidden");
      }
    }, Base.prototype.createPlayForRealViewMobile = function(end_time) {
      return null;
    }, Base;
  }(extendedData);
}, function(canCreateDiscussions, e, floor) {
  var Module = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var startYNew = floor(0);
  var startXNew = floor(5);
  var newOrg = function(_) {
    /**
     * @return {?}
     */
    function $() {
      return null !== _ && _.apply(this, arguments) || this;
    }
    return Module($, _), $.prototype.createFader = function() {
      return new startXNew.Fader(this, 16777215, 8947848);
    }, Object.defineProperty($.prototype, "reelId", {
      get : function() {
        return this._reelId;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "rowId", {
      get : function() {
        return this._rowId;
      },
      enumerable : true,
      configurable : true
    }), $.prototype.expandingGlow = function() {
      this.changeLayer(1);
      this._animation.play("expanding_glow");
    }, $.prototype.expandingWin = function() {
      this.changeLayer(0);
      this._animation.play("expanding_win");
    }, Object.defineProperty($.prototype, "isExpanding", {
      get : function() {
        return this._isExpanding;
      },
      set : function(mymuted) {
        this._isExpanding = mymuted;
      },
      enumerable : true,
      configurable : true
    }), $.prototype.win = function(obj, key) {
      if (this._symbolId === this._manager.expandingSymbolId && this._manager.state == startYNew.SymbolState.FREESPIN) {
        this.expandingWin();
        /** @type {boolean} */
        this._winState = true;
      } else {
        _.prototype.win.call(this, obj, key);
      }
    }, $.prototype.stop = function() {
      _.prototype.stop.call(this);
      if (this._symbolId === this._manager.expandingSymbolId && this._manager.symbolStateController.firstFreespinDone) {
        this._animation.play("expanding_stop", null, null, null);
      }
    }, $.prototype.wait = function() {
      this._animation.play("loop_start");
    }, $.prototype.fade = function(opacity) {
      _.prototype.fade.call(this, opacity);
    }, $.prototype.showSymbol = function(name) {
      this.display.setVisible(name);
    }, $.prototype.setSymbol = function(value, elem, s) {
      if (void 0 === elem) {
        elem = this._reelId;
      }
      if (void 0 === s) {
        s = this._rowId;
      }
      _.prototype.setSymbol.call(this, value, elem, s);
      if (!this.display.isVisible()) {
        this.showSymbol(true);
      }
    }, $.SYMBOL_LP1 = 0, $.SYMBOL_LP2 = 1, $.SYMBOL_LP3 = 2, $.SYMBOL_LP4 = 3, $.SYMBOL_LP5 = 4, $.SYMBOL_HP1 = 5, $.SYMBOL_HP2 = 6, $.SYMBOL_HP3 = 7, $.SYMBOL_WILD = 8, $.SYMBOL_SCATTER = 9, $;
  }(f.FadingSymbol);
  e.BoDSymbol = newOrg;
}, function(canCreateDiscussions, a, test) {
  Object.defineProperty(a, "__esModule", {
    value : true
  });
  test.d(a, "Logo", function() {
    return expect;
  });
  test.d(a, "EaseInOutTransformAnimator", function() {
    return lLine;
  });
  test.d(a, "TransformAlphaAnimator", function() {
    return f;
  });
  test.d(a, "TransformAnimator", function() {
    return l;
  });
  test.d(a, "EasingFunctions", function() {
    return head;
  });
  test.d(a, "Tweener", function() {
    return g;
  });
  test.d(a, "AutoplayHandler", function() {
    return submitCommentWithToken;
  });
  test.d(a, "AutoplaySettings", function() {
    return T;
  });
  test.d(a, "AutoplayEvent", function() {
    return Event;
  });
  test.d(a, "Order", function() {
    return root;
  });
  test.d(a, "List", function() {
    return O;
  });
  test.d(a, "CommonExternalInterface", function() {
    return N;
  });
  test.d(a, "ExternalTutorialEvent", function() {
    return L;
  });
  test.d(a, "CommonEIEvent", function() {
    return MGE;
  });
  test.d(a, "IdleController", function() {
    return P;
  });
  test.d(a, "RealityCheckManager", function() {
    return M;
  });
  test.d(a, "BigWinCoinShowerEmitter", function() {
    return leftExp;
  });
  test.d(a, "BigWinCoinShowerParticle", function() {
    return callableYAxisFormatter;
  });
  test.d(a, "BigWinEffectEmitter", function() {
    return groupLeft;
  });
  test.d(a, "CoinShowerEmitter", function() {
    return divToScroll;
  });
  test.d(a, "CoinShowerParticle", function() {
    return $sortedTable;
  });
  test.d(a, "Emitter", function() {
    return left;
  });
  test.d(a, "MJCoinShowerEmitter", function() {
    return leftWebview;
  });
  test.d(a, "MJFireworkAnimEmitter", function() {
    return yAxisSpectrum;
  });
  test.d(a, "MJFireworkEmitter", function() {
    return lLeft;
  });
  test.d(a, "Particle", function() {
    return table;
  });
  test.d(a, "PoolBase", function() {
    return patMoment;
  });
  test.d(a, "MJFireworkEvent", function() {
    return ParticleSystem;
  });
  test.d(a, "BackgroundWebGLComponent", function() {
    return Et;
  });
  test.d(a, "BackgroundWebGLRenderer", function() {
    return Renderer;
  });
  test.d(a, "backgroundVertexSource", function() {
    return name;
  });
  test.d(a, "backgroundFragmentSource", function() {
    return newValue;
  });
  test.d(a, "BatchingWebGLRenderer", function() {
    return instance;
  });
  test.d(a, "ParticlePoolWebGLComponent", function() {
    return SignatureParseError;
  });
  test.d(a, "ParticlePoolWebGLRenderer", function() {
    return clazz;
  });
  test.d(a, "particleVertexSource", function() {
    return D;
  });
  test.d(a, "particleFragmentSource", function() {
    return R;
  });
  test.d(a, "SoundControllerBase", function() {
    return vt;
  });
  test.d(a, "CommonSplashManager", function() {
    return mt;
  });
  test.d(a, "CarouselController", function() {
    return Compiler;
  });
  test.d(a, "CarouselManager", function() {
    return Pt;
  });
  test.d(a, "CarouselNavEvent", function() {
    return TimerEvent;
  });
  test.d(a, "CarouselSwipeEvent", function() {
    return PinEvent;
  });
  test.d(a, "CarouselUIEvent", function() {
    return Dt;
  });
  test.d(a, "CarouselUISwipeEvent", function() {
    return xt;
  });
  test.d(a, "CarouselModel", function() {
    return Model;
  });
  test.d(a, "CarouselItemView", function() {
    return MenuItem;
  });
  test.d(a, "CarouselUIView", function() {
    return DataArray;
  });
  test.d(a, "CarouselView", function() {
    return Component;
  });
  test.d(a, "ClockUpdateEvent", function() {
    return Ht;
  });
  test.d(a, "CommonUIEvent", function() {
    return ComponentEvent;
  });
  test.d(a, "GameHistoryEvent", function() {
    return Ut;
  });
  test.d(a, "InfoViewMode", function() {
    return A;
  });
  test.d(a, "ArrayUtil", function() {
    return Ft;
  });
  test.d(a, "Fader", function() {
    return magnifier;
  });
  test.d(a, "AlphaFader", function() {
    return $magnifier;
  });
  test.d(a, "HorizontalLineup", function() {
    return Jt;
  });
  test.d(a, "Vector2D", function() {
    return Kt;
  });
  test.d(a, "ZIndexHelper", function() {
    return zt;
  });
  test.d(a, "WinManager", function() {
    return ne;
  });
  test.d(a, "WinCounter", function() {
    return ee;
  });
  test.d(a, "WinCounterEvent", function() {
    return RFIDEvent;
  });
  test.d(a, "WinCounterControlEvent", function() {
    return Zt;
  });
  test.d(a, "WinCounterControlDataEvent", function() {
    return $t;
  });
  test.d(a, "WinInfoEvent", function() {
    return that;
  });
  test.d(a, "BonusBalanceHandler", function() {
    return Login;
  });
  test.d(a, "BonusBalanceManager", function() {
    return re;
  });
  test.d(a, "GuaranteedJackpotManager", function() {
    return me;
  });
  test.d(a, "JackpotController", function() {
    return Klass;
  });
  test.d(a, "JackpotManager", function() {
    return Be;
  });
  test.d(a, "JackpotNotificationController", function() {
    return Ne;
  });
  test.d(a, "JackpotCommandConverter", function() {
    return Me;
  });
  test.d(a, "GuaranteedJackpotModel", function() {
    return MapView;
  });
  test.d(a, "JackpotBaseModel", function() {
    return Media;
  });
  test.d(a, "JackpotType", function() {
    return kt;
  });
  test.d(a, "JackpotMessage", function() {
    return De;
  });
  test.d(a, "JackpotNotificationEvent", function() {
    return Date;
  });
  test.d(a, "JackpotProjectionEvent", function() {
    return SelectionEvent;
  });
  test.d(a, "JackpotStatusEvent", function() {
    return ChangeEvent;
  });
  test.d(a, "JackpotServerMessageEvent", function() {
    return $;
  });
  test.d(a, "MysteryJackpotCustomData", function() {
    return Buffer;
  });
  test.d(a, "MysteryJackpotCustomDataEvent", function() {
    return Events;
  });
  test.d(a, "JackpotDisplayViewBase", function() {
    return className;
  });
  test.d(a, "JackpotNotificationView", function() {
    return mid_t;
  });
  test.d(a, "JackpotNotificationViewHTML", function() {
    return pt_mid;
  });
  test.d(a, "JackpotNotificationViewCanvas", function() {
    return objectsThere;
  });
  test.d(a, "JackpotPosition", function() {
    return cloud9WatcherPlugin;
  });
  test.d(a, "MysteryJackpotType", function() {
    return e;
  });
  test.d(a, "MJDisplayView", function() {
    return constructor;
  });
  var head;
  var exports = test(2);
  var svg = test(1);
  var options = test(15);
  var extend = (test.n(options), function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }());
  var that = function(util) {
    /**
     * @param {number} y
     * @param {?} n
     * @param {?} i
     * @param {number} x
     * @return {?}
     */
    function m(y, n, i, x) {
      if (void 0 === x) {
        /** @type {number} */
        x = 0;
      }
      var orginData = util.call(this, "", i, "", n) || this;
      return orginData._coins = y, orginData._coinsExt = x, orginData;
    }
    return extend(m, util), Object.defineProperty(m.prototype, "coins", {
      get : function() {
        return this._coins;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(m.prototype, "coinsExt", {
      get : function() {
        return this._coinsExt;
      },
      enumerable : true,
      configurable : true
    }), m.WIN = "WIN", m.WIN_NO_COUNT = "WIN_NO_COUNT", m.IDLE = "IDLE", m;
  }(svg.InfoEvent);
  var googleImageSize = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ComponentEvent = function(size) {
    /**
     * @return {?}
     */
    function input() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return googleImageSize(input, size), input.AUTOPLAY = "UIAUTOPLAY", input.GAME_NAME_SHOW = "GAME_NAME_SHOW", input.GAME_NAME_HIDE = "GAME_NAME_HIDE", input;
  }(svg.MegatonUIEvent);
  var expect = function() {
    /**
     * @param {!Object} value
     * @param {(Image|string)} e
     * @return {undefined}
     */
    function init(value, e) {
      var thalassaServicesSet = this;
      /** @type {!Object} */
      this._dispatcher = value;
      this._logoAnim = this.getAnim(e);
      this._logoInnerAnim = this.getInnerAnim(e);
      /** @type {boolean} */
      this._visible = true;
      /** @type {boolean} */
      this._isInIdle = false;
      /** @type {number} */
      this._prevTime = 0;
      this._idleTask = new exports.Task;
      this._idleTask.startHandler(function(remove) {
        return thalassaServicesSet.idleHandler(remove);
      });
      this.attachEventListeners(value);
    }
    return init.prototype.attachEventListeners = function(request) {
      var newNode = this;
      request.addEventListener(that.INFO, function() {
        return newNode.onWin();
      });
    }, init.prototype.getAnim = function(child) {
      return child.getAnimation("logo");
    }, init.prototype.getInnerAnim = function(res) {
      return res.getAnimation("logo.inner");
    }, init.prototype.show = function() {
      if (!this._visible) {
        /** @type {boolean} */
        this._visible = true;
        this._dispatcher.dispatch(new ComponentEvent(ComponentEvent.GAME_NAME_HIDE));
        this._logoAnim.play("show");
      }
    }, init.prototype.hide = function() {
      if (this._visible) {
        /** @type {boolean} */
        this._visible = false;
        this._dispatcher.dispatch(new ComponentEvent(ComponentEvent.GAME_NAME_SHOW));
        this._logoAnim.play("hide");
      }
    }, init.prototype.onWin = function() {
      /** @type {boolean} */
      this._isInIdle = false;
      var currTime = exports.SystemManager.getScheduler().getTime();
      if (currTime - this._prevTime > 5000) {
        this._logoInnerAnim.play("win");
        this._prevTime = currTime;
      }
    }, init.prototype.idleHandler = function(event) {
      event.startDelayMs(Math.round(100 + 100 * Math.random()) * (1000 / 24));
      if (event.state % 2 != 0) {
        this.onIdle();
      }
    }, init.prototype.onIdle = function() {
      if (this._isInIdle) {
        this._logoInnerAnim.play("idle");
      }
    }, init;
  }();
  var l = function() {
    /**
     * @return {undefined}
     */
    function Component() {
      var script = this;
      /**
       * @param {!Event} d
       * @return {?}
       */
      this._tween = function(d) {
        return script.tweenHandler(d);
      };
      /**
       * @return {?}
       */
      this._onUpdate = function() {
        return script.onUpdate();
      };
      exports.SystemManager.getDeviceHandler().addEventListener(exports.DeviceEvent.RESIZE, function() {
        return script.calcBezierConsts();
      });
    }
    return Component.prototype.setupEase = function(e, t) {
      if (void 0 === e) {
        e = new svg.Point(0, 0);
      }
      if (void 0 === t) {
        t = new svg.Point(0, 0);
      }
      if (!(null != e && void 0 != e)) {
        e = new svg.Point(0, 0);
      }
      if (!(null != t && void 0 != t)) {
        t = new svg.Point(0, 0);
      }
      /** @type {number} */
      this._easeConst3 = 1 - 3 * (t.y - e.y);
      /** @type {number} */
      this._easeConst2 = 3 * (t.y - 2 * e.y);
      /** @type {number} */
      this._easeConst1 = 3 * e.y;
    }, Component.prototype.move = function(v, val, obj, data, value, name, current, position) {
      return void 0 === name && (name = null), void 0 === current && (current = 0), void 0 === position && (position = 1), this._transform = val, this._parent = name, this._from = obj, this._to = data, this._t0 = current, this._t1 = position, this._bezier = false, null != this._easeConst3 && void 0 != this._easeConst3 || this.setupEase(), 0 === value ? (this.setValues(this._t1), v.startDelay(0)) : (this.setValues(this._t0), this._duration = value, v.startHandler(this._tween));
    }, Component.prototype.bezierMove = function(self, callback, name, data, duration, value, ratio, p, q, u) {
      if (void 0 === ratio) {
        /** @type {number} */
        ratio = 0;
      }
      if (void 0 === p) {
        /** @type {number} */
        p = 0;
      }
      if (void 0 === q) {
        q = new svg.Point(0, 0);
      }
      if (void 0 === u) {
        u = new svg.Point(0, 0);
      }
      /** @type {!Object} */
      this._transform = callback;
      /** @type {!Object} */
      this._parent = value;
      /** @type {!Object} */
      this._from = name;
      /** @type {!Object} */
      this._to = data;
      /** @type {number} */
      this._t0 = 0;
      /** @type {number} */
      this._t1 = 1;
      /** @type {boolean} */
      this._bezier = true;
      /** @type {number} */
      this._bezier2 = q;
      /** @type {number} */
      this._bezier3 = u;
      /** @type {number} */
      this._bezierRat2 = ratio;
      /** @type {number} */
      this._bezierRat3 = p;
      if (!(null != this._easeConst3 && void 0 != this._easeConst3)) {
        this.setupEase();
      }
      var prop = new svg.Point(0, 0);
      var Infinity = this._transform.parentToGlobal(prop);
      var from = this._from ? this._from.localToGlobal(prop) : Infinity;
      var to = this._to ? this._to.localToGlobal(prop) : Infinity;
      var checkPoint = from;
      if (!(null != q && void 0 != q)) {
        this._bezier2 = new svg.Point(0, 0);
      }
      if (!(null != u && void 0 != u)) {
        this._bezier3 = new svg.Point(0, 0);
      }
      var centerPoint = new svg.Point((to.x - from.x) * ratio + from.x + this._bezier2.x, (to.y - from.y) * ratio + from.y + this._bezier2.y);
      var point = new svg.Point((to.x - from.x) * p + from.x + this._bezier3.x, (to.y - from.y) * p + from.y + this._bezier3.y);
      var dist = to;
      return this._constX3 = dist.x - 3 * (point.x - centerPoint.x) - checkPoint.x, this._constX2 = 3 * (point.x - 2 * centerPoint.x + checkPoint.x), this._constX1 = 3 * (centerPoint.x - checkPoint.x), this._constY3 = dist.y - 3 * (point.y - centerPoint.y) - checkPoint.y, this._constY2 = 3 * (point.y - 2 * centerPoint.y + checkPoint.y), this._constY1 = 3 * (centerPoint.y - checkPoint.y), 0 === duration ? (this.setValues(this._t1), self.startDelay(0)) : (this.setValues(this._t0), this._duration = 
      duration, self.startHandler(this._tween));
    }, Component.prototype.tweenHandler = function(variable) {
      this._startTime = exports.SystemManager.getScheduler().getTime();
      /** @type {!Object} */
      this._task = variable;
      exports.SystemManager.getScheduler().addUpdateListener(this._onUpdate, variable.ctx);
    }, Component.prototype.onUpdate = function() {
      var item = this._t0 + (this._t1 - this._t0) * (exports.SystemManager.getScheduler().getTime() - this._startTime) / this._duration;
      if (item >= this._t1) {
        this.setValues(this._t1);
        if (this._task) {
          this._task.complete();
          this._task = void 0;
        }
      } else {
        this.setValues(item);
      }
    }, Component.prototype.setValues = function(a) {
      var x;
      var prop = new svg.Point(0, 0);
      var Infinity = this._transform.parentToGlobal(prop);
      var from = this._from ? this._from.localToGlobal(prop) : Infinity;
      var to = this._to ? this._to.localToGlobal(prop) : Infinity;
      x = this._bezier ? new svg.Point(this.beaseX(this.easeCalc(a), from.x, to.x), this.beaseY(this.easeCalc(a), from.y, to.y)) : new svg.Point(this.easeX(this.easeCalc(a), from.x, to.x), this.easeY(this.easeCalc(a), from.y, to.y));
      var default_ = this._parent ? this._parent.globalToLocal(x) : this._transform.globalToParent(x);
      this._transform.setX(default_.x);
      this._transform.setY(default_.y);
    }, Component.prototype.easeX = function(a, b, r) {
      return (r - b) * a + b;
    }, Component.prototype.easeY = function(a, b, r) {
      return (r - b) * a + b;
    }, Component.prototype.beaseX = function(t, xgh2, xgh3) {
      return this._constX3 * t * t * t + this._constX2 * t * t + this._constX1 * t + xgh2;
    }, Component.prototype.beaseY = function(t, xgh2, xgh3) {
      return this._constY3 * t * t * t + this._constY2 * t * t + this._constY1 * t + xgh2;
    }, Component.prototype.easeCalc = function(scale) {
      return this._easeConst3 * scale * scale * scale + this._easeConst2 * scale * scale + this._easeConst1 * scale;
    }, Component.prototype.calcBezierConsts = function() {
      if (null != this._transform && this._bezier) {
        var prop = new svg.Point(0, 0);
        var Infinity = this._transform.parentToGlobal(prop);
        var from = this._from ? this._from.localToGlobal(prop) : Infinity;
        var to = this._to ? this._to.localToGlobal(prop) : Infinity;
        var c = from;
        var b = new svg.Point((to.x - from.x) * this._bezierRat2 + from.x + this._bezier2.x, (to.y - from.y) * this._bezierRat2 + from.y + this._bezier2.y);
        var a = new svg.Point((to.x - from.x) * this._bezierRat3 + from.x + this._bezier3.x, (to.y - from.y) * this._bezierRat3 + from.y + this._bezier3.y);
        var dist = to;
        /** @type {number} */
        this._constX3 = dist.x - 3 * (a.x - b.x) - c.x;
        /** @type {number} */
        this._constX2 = 3 * (a.x - 2 * b.x + c.x);
        /** @type {number} */
        this._constX1 = 3 * (b.x - c.x);
        /** @type {number} */
        this._constY3 = dist.y - 3 * (a.y - b.y) - c.y;
        /** @type {number} */
        this._constY2 = 3 * (a.y - 2 * b.y + c.y);
        /** @type {number} */
        this._constY1 = 3 * (b.y - c.y);
      }
    }, Component;
  }();
  var cont = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var lLine = function(block) {
    /**
     * @return {?}
     */
    function list() {
      return null !== block && block.apply(this, arguments) || this;
    }
    return cont(list, block), list.prototype.easeX = function(t, a, b) {
      /** @type {boolean} */
      var s = a;
      /** @type {number} */
      var c = b - a;
      return (t = t * 2) < 1 ? c / 2 * t * t * t * t + s : (t = t - 2, -c / 2 * (t * t * t * t - 2) + s);
    }, list.prototype.easeY = function(t, a, b) {
      /** @type {boolean} */
      var s = a;
      /** @type {number} */
      var c = b - a;
      return (t = t * 2) < 1 ? c / 2 * t * t * t * t + s : (t = t - 2, -c / 2 * (t * t * t * t - 2) + s);
    }, list;
  }(l);
  var f = function() {
    /**
     * @return {undefined}
     */
    function self() {
      var script = this;
      /**
       * @param {!Event} d
       * @return {?}
       */
      this._tween = function(d) {
        return script.tweenHandler(d);
      };
      /**
       * @return {?}
       */
      this._onUpdate = function() {
        return script.onUpdate();
      };
    }
    return Object.defineProperty(self.prototype, "isRunning", {
      get : function() {
        return void 0 != this._task;
      },
      enumerable : true,
      configurable : true
    }), self.prototype.move = function(args, val, table, direction, context, name, animate, time, value) {
      if (void 0 === value) {
        /** @type {boolean} */
        value = false;
      }
      /** @type {!Object} */
      this._transform = val;
      /** @type {boolean} */
      this._fromPos = table;
      /** @type {boolean} */
      this._toPos = direction;
      /** @type {!Object} */
      this._display = context;
      this._posTransition = name || self.linearPosTransition;
      /** @type {!Function} */
      this._alphaTransition = animate;
      /** @type {boolean} */
      this._invert = value;
      if (0 === time) {
        this.setValues(1);
        args.startDelayMs(0);
      } else {
        /** @type {number} */
        this._duration = time;
        this.setValues(0);
        args.startHandler(this._tween);
      }
    }, self.prototype.tweenHandler = function(variable) {
      this._startTime = exports.SystemManager.getScheduler().getTime();
      /** @type {!Object} */
      this._task = variable;
      exports.SystemManager.getScheduler().addUpdateListener(this._onUpdate, variable.ctx);
    }, self.prototype.onUpdate = function() {
      /** @type {number} */
      var item = (exports.SystemManager.getScheduler().getTime() - this._startTime) / this._duration;
      if (item >= 1) {
        this.setValues(1);
        if (this._task) {
          this._task.complete();
          this._task = void 0;
        }
      } else {
        this.setValues(item);
      }
    }, self.prototype.setValues = function(a) {
      var x = new svg.Point(0, 0);
      var progress = this._invert ? 1 - a : a;
      var memoryx = this._transform.parentToGlobal(x);
      var xhair = this._fromPos ? this._fromPos.localToGlobal(x) : memoryx;
      var deltaCoordinate = this._toPos ? this._toPos.localToGlobal(x) : memoryx;
      var modelPoint = new svg.Point(this._posTransition(xhair.x, deltaCoordinate.x, progress), this._posTransition(xhair.y, deltaCoordinate.y, progress));
      var default_ = this._transform.globalToParent(modelPoint);
      this._transform.setX(default_.x);
      this._transform.setY(default_.y);
      this._display.setAlpha(this._alphaTransition(progress));
    }, self.linearPosTransition = function(b, a, a2) {
      return b * (1 - a2) + a * a2;
    }, self;
  }();
  !function(exports) {
    /**
     * @param {number} data
     * @return {?}
     */
    function linear(data) {
      return data;
    }
    /**
     * @param {?} n
     * @return {?}
     */
    function n(n) {
      return n * n;
    }
    /**
     * @param {number} t
     * @return {?}
     */
    function _(t) {
      return t * (2 - t);
    }
    /**
     * @param {number} x
     * @return {?}
     */
    function getBoundPosition(x) {
      return x < 0.5 ? 2 * x * x : (4 - 2 * x) * x - 1;
    }
    /**
     * @param {number} u
     * @return {?}
     */
    function r(u) {
      return u * u * u;
    }
    /**
     * @param {number} t
     * @return {?}
     */
    function isLikeRGB(t) {
      return --t * t * t + 1;
    }
    /**
     * @param {number} p
     * @return {?}
     */
    function a(p) {
      return p < 0.5 ? 4 * p * p * p : (p - 1) * (2 * p - 2) * (2 * p - 2) + 1;
    }
    /**
     * @param {number} t
     * @return {?}
     */
    function isLikeRGBA(t) {
      return t * t * t * t;
    }
    /**
     * @param {number} t
     * @return {?}
     */
    function c(t) {
      return 1 - --t * t * t * t;
    }
    /**
     * @param {number} p
     * @return {?}
     */
    function p(p) {
      return p < 0.5 ? 8 * p * p * p * p : 1 - 8 * --p * p * p * p;
    }
    /**
     * @param {number} a
     * @return {?}
     */
    function h(a) {
      return a * a * a * a * a;
    }
    /**
     * @param {number} t
     * @return {?}
     */
    function ReactMeteorData(t) {
      return 1 + --t * t * t * t * t;
    }
    /**
     * @param {number} t
     * @return {?}
     */
    function isLikeHSLA(t) {
      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
    /** @type {function(number): ?} */
    exports.linear = linear;
    /** @type {function(?): ?} */
    exports.inQuad = n;
    /** @type {function(number): ?} */
    exports.outQuad = _;
    /** @type {function(number): ?} */
    exports.inOutQuad = getBoundPosition;
    /** @type {function(number): ?} */
    exports.inCubic = r;
    /** @type {function(number): ?} */
    exports.outCubic = isLikeRGB;
    /** @type {function(number): ?} */
    exports.inOutCubic = a;
    /** @type {function(number): ?} */
    exports.inQuart = isLikeRGBA;
    /** @type {function(number): ?} */
    exports.outQuart = c;
    /** @type {function(number): ?} */
    exports.inOutQuart = p;
    /** @type {function(number): ?} */
    exports.inQuint = h;
    /** @type {function(number): ?} */
    exports.outQuint = ReactMeteorData;
    /** @type {function(number): ?} */
    exports.inOutQuint = isLikeHSLA;
  }(head || (head = {}));
  var root;
  var g = function() {
    /**
     * @param {(Object|string)} data
     * @return {undefined}
     */
    function Task(data) {
      var allTraps = this;
      /** @type {(Object|string)} */
      this._data = data;
      /**
       * @param {!Event} t
       * @return {?}
       */
      this._boundTweenHandler = function(t) {
        return allTraps.tweenHandler(t);
      };
      /** @type {null} */
      this._task = null;
      this._scheduler = exports.SystemManager.getScheduler();
    }
    return Object.defineProperty(Task.prototype, "running", {
      get : function() {
        return null !== this._task;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Task.prototype, "delay", {
      get : function() {
        return this._data.delay;
      },
      set : function(value) {
        /** @type {number} */
        this._data.delay = value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Task.prototype, "duration", {
      get : function() {
        return this._data.duration;
      },
      set : function(value) {
        /** @type {!Object} */
        this._data.duration = value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Task.prototype, "onUpdate", {
      get : function() {
        return this._data.onUpdate;
      },
      set : function(value) {
        /** @type {boolean} */
        this._data.onUpdate = value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Task.prototype, "onComplete", {
      get : function() {
        return this._data.onComplete;
      },
      set : function(value) {
        /** @type {!Object} */
        this._data.onComplete = value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Task.prototype, "easing", {
      get : function() {
        return this._data.easing;
      },
      set : function(value) {
        /** @type {!Function} */
        this._data.easing = value;
      },
      enumerable : true,
      configurable : true
    }), Task.prototype.checkProperties = function() {
      if (!this._data.onUpdate) {
        throw new Error("onUpdate function is  missing");
      }
      if (!this._data.duration) {
        throw new Error("duration parameter is missing.");
      }
      this._data.easing = this._data.easing ? this._data.easing : head.linear;
      this._data.delay = this._data.delay ? this._data.delay : 0;
    }, Task.prototype.createTask = function(data) {
      return null !== this._task && this.stop(), data && (this._data = data), this.checkProperties(), this._task = exports.Task.createHandler(this._boundTweenHandler), this._task;
    }, Task.prototype.start = function(args) {
      return this.createTask(), args ? args.startHandler(this._task) : this._task.start(), this._task;
    }, Task.prototype.stop = function(options) {
      if (void 0 === options) {
        /** @type {boolean} */
        options = true;
      }
      if (null !== this._task) {
        if (options) {
          this._task.complete();
        } else {
          this._task.kill();
        }
        /** @type {null} */
        this._task = null;
        if (options && this._data.onComplete) {
          this._data.onComplete();
        }
      }
    }, Task.prototype.tweenHandler = function(_) {
      var prevPageButtonSprite = this;
      switch(_.state) {
        case 0:
          if (this._data.delay > 0) {
            _.startDelayMs(this._data.delay);
            break;
          }
        case 1:
          if (this._task) {
            this._startTime = this._scheduler.getTime();
            this._scheduler.addUpdateListener(function() {
              return prevPageButtonSprite.update();
            }, this._task.ctx);
          }
      }
    }, Task.prototype.forceStop = function(callback) {
      if (void 0 === callback) {
        /** @type {boolean} */
        callback = true;
      }
      if (null !== this._task && callback) {
        this._data.onUpdate(1);
      }
      this.stop();
    }, Task.prototype.update = function() {
      if (null !== this._task) {
        var curr = this._scheduler.getTime();
        /** @type {number} */
        var data = 0 === this._data.duration ? 1 : Math.min(1, (curr - this._startTime) / this._data.duration);
        this._data.onUpdate(this._data.easing(data));
        if (data >= 1) {
          this.stop();
        }
      }
    }, Task;
  }();
  var imgItAuto = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Event = function(b) {
    /**
     * @param {?} e
     * @param {number} type
     * @return {?}
     */
    function a(e, type) {
      if (void 0 === type) {
        /** @type {number} */
        type = 0;
      }
      var array = b.call(this, e) || this;
      return array.playsLeft = type, array;
    }
    return imgItAuto(a, b), a.AUTOPLAY_START = "AUTOPLAY_START", a.AUTOPLAY_STARTED = "AUTOPLAY_STARTED", a.AUTOPLAY_STOP = "AUTOPLAY_STOP", a.AUTOPLAY_STOPPED = "AUTOPLAY_STOPPED", a.AUTOPLAY_TOGGLE = "AUTOPLAY_TOGGLE", a.AUTOPLAY_TRIGGER = "AUTOPLAY_TRIGGER", a.AUTOPLAY_ENDED = "AUTOPLAY_ENDED", a;
  }(exports.MegatonEvent);
  var _fileReplace = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var submitCommentWithToken = function(item) {
    /**
     * @param {!HTMLElement} input
     * @param {boolean} key
     * @param {?} index
     * @return {?}
     */
    function s(input, key, index) {
      var me = item.call(this, input) || this;
      return me._autoplaySettings = key, me._roundHandler = index, me._bet = 0, me._totalLossPool = 0, me._playDelay = 10, me._isPaused = false, me._splashShowing = true, me._autoplaySettings.disabled = true, input.addEventListener(svg.ShowButtonsEvent.SHOWBUTTONS, function(m) {
        return me.onShowButtons(m);
      }), input.addEventListener(Event.AUTOPLAY_START, function(t) {
        return me.start(t);
      }), input.addEventListener(Event.AUTOPLAY_STOP, function() {
        return me.stop();
      }), input.addEventListener(Event.AUTOPLAY_TOGGLE, function(t) {
        return me.toggleAutoplay(t);
      }), input.addEventListener(svg.RoundEvent.ROUNDEND, function(t) {
        return me.onRoundEnd(t);
      }), input.addEventListener(svg.RoundEvent.BALANCE, function(newConfigs) {
        return me.onBalance(newConfigs);
      }), input.addEventListener(svg.RoundEvent.ROUNDSTART, function(key) {
        return me.onRoundStart(key);
      }), input.addEventListener(svg.SPFundsErrorEvent.SPFUNDSERROR, function() {
        return me.onFundsError();
      }), input.addEventListener(svg.ExternalMessageEvent.EXTERNALMESSAGE, function() {
        return me.onExternalMessage();
      }), input.addEventListener(svg.ExitEvent.LOGOUT, function() {
        return me.onLogOut();
      }), input.addEventListener(svg.SplashEvent.SPLASH_HIDE, function() {
        return me.onSplashHide();
      }), input.addEventListener(svg.ModalShowingUIEvent.SHOWING, function() {
        return me.onDisable();
      }), input.addEventListener(svg.ModalShowingUIEvent.HIDING, function() {
        return me.onEnable();
      }), me;
    }
    return _fileReplace(s, item), Object.defineProperty(s.prototype, "running", {
      get : function() {
        return this._running;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(s.prototype, "playsLeft", {
      get : function() {
        return this._playsLeft;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(s.prototype, "playDelay", {
      set : function(mymuted) {
        /** @type {!Array} */
        this._playDelay = mymuted;
      },
      enumerable : true,
      configurable : true
    }), s.prototype.start = function(t) {
      if (!(this._autoplaySettings.disabled || this._running)) {
        this._playsLeft = t.playsLeft > 0 ? t.playsLeft : this._autoplaySettings.plays;
        /** @type {boolean} */
        this._running = this._playsLeft > 0;
        this._totalLossPool = this._autoplaySettings.stopAtTotalLossValue;
        this._startBalance = this._roundHandler.balance;
        this._dispatcher.dispatch(new Event(Event.AUTOPLAY_STARTED, this._playsLeft));
        this.onTrigger();
      }
    }, s.prototype.stop = function() {
      if (this._running) {
        this._dispatcher.dispatch(new Event(Event.AUTOPLAY_ENDED));
      }
      /** @type {boolean} */
      this._running = false;
      /** @type {boolean} */
      this._isPaused = false;
      /** @type {number} */
      this._playsLeft = 0;
      this._dispatcher.dispatch(new Event(Event.AUTOPLAY_STOPPED));
    }, s.prototype.pause = function() {
      if (this._running) {
        /** @type {boolean} */
        this._running = false;
        /** @type {boolean} */
        this._isPaused = true;
      }
    }, s.prototype.resume = function() {
      if (this._isPaused) {
        /** @type {boolean} */
        this._isPaused = false;
        /** @type {boolean} */
        this._running = true;
        this._dispatcher.dispatch(new Event(Event.AUTOPLAY_STARTED, this._playsLeft));
        this.onTrigger();
      }
    }, s.prototype.toggleAutoplay = function(callback) {
      if (this._running) {
        this.stop();
      } else {
        this.start(new Event(Event.AUTOPLAY_START));
      }
    }, s.prototype.onRoundEnd = function(t) {
      var g = t.amount;
      if (this._autoplaySettings.stopAtTotalLoss && this._autoplaySettings.stopAtTotalLossValue > 0) {
        this._totalLossPool += g;
        if (this._totalLossPool < this._bet) {
          this.stop();
        }
      }
    }, s.prototype.onJackpotWin = function() {
      if (this._autoplaySettings.stopAtJackpotWin && this._autoplaySettings.jackpotEnabled) {
        this.stop();
      }
    }, s.prototype.onBalance = function(settings) {
      var g = settings.amount;
      if (this._running) {
        if (this._autoplaySettings.stopAtBalanceInc && g >= this._startBalance + this._autoplaySettings.stopAtBalanceIncValue) {
          this.stop();
        } else {
          if (this._autoplaySettings.stopAtBalanceDec && g <= this._startBalance - this._autoplaySettings.stopAtBalanceDecValue) {
            this.stop();
          }
        }
      } else {
        this._startBalance = g;
      }
    }, s.prototype.onFundsError = function() {
      if (this._running) {
        this.stop();
      }
    }, s.prototype.onRoundStart = function(uri) {
      if (true === this._running) {
        this._bet = uri.amount;
        this._totalLossPool -= this._bet;
        if (this._playsLeft > 0) {
          this._playsLeft--;
          this._dispatcher.dispatch(new Event(Event.AUTOPLAY_TRIGGER, this._playsLeft));
          if (0 === this._playsLeft) {
            this.stop();
          }
        }
      }
    }, s.prototype.onShowButtons = function(match) {
      /** @type {boolean} */
      var uboard = 1 === match.groupId;
      this.enableTrigger(s.STATE_PLAY, uboard, this._playDelay);
    }, s.prototype.enableTrigger = function(clickRepeater, e, time) {
      var plugin = this;
      this._triggerState &= ~clickRepeater;
      if (e) {
        this._triggerState |= clickRepeater;
      }
      if (!(0 === this._triggerState || this._context)) {
        this._context = exports.Context.newContext(null, null, null);
        exports.SystemManager.getScheduler().wait(time, this, function() {
          return plugin.onTrigger();
        }, this._context);
      }
      if (0 === this._triggerState && this._context) {
        exports.Context.complete(this._context);
        this.clear();
      }
    }, s.prototype.onTrigger = function() {
      if (this._triggerState & s.STATE_PLAY && this._running) {
        this.triggerPlay();
      }
      this.clear();
    }, s.prototype.triggerPlay = function() {
    }, s.prototype.clear = function() {
      /** @type {null} */
      this._context = null;
    }, s.prototype.onExternalMessage = function() {
      this.stop();
    }, s.prototype.onLogOut = function() {
      this.stop();
    }, s.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._splashShowing = false;
      this.onEnable();
    }, s.prototype.onDisable = function() {
      /** @type {boolean} */
      this._autoplaySettings.disabled = true;
    }, s.prototype.onEnable = function() {
      if (!this._splashShowing) {
        /** @type {boolean} */
        this._autoplaySettings.disabled = false;
      }
    }, s.STATE_PLAY = 1, s;
  }(exports.EventProcessor);
  var c = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var T = function(fn) {
    /**
     * @param {number} response
     * @param {number} schema
     * @param {number} req
     * @param {number} res
     * @return {?}
     */
    function foo(response, schema, req, res) {
      if (void 0 === response) {
        /** @type {boolean} */
        response = false;
      }
      if (void 0 === schema) {
        /** @type {boolean} */
        schema = false;
      }
      if (void 0 === req) {
        /** @type {boolean} */
        req = false;
      }
      if (void 0 === res) {
        /** @type {boolean} */
        res = false;
      }
      var self = fn.call(this) || this;
      return self._jackpotEnabled = false, self._stopAtAnyWin = false, self._stopAtJackpotWin = true, self._stopAtWin = false, self._stopAtBalanceInc = false, self._stopAtBalanceDec = false, self._stopAtWinValue = 0, self._stopAtBalanceIncValue = 0, self._stopAtBalanceDecValue = 0, self._jackpotEnabled = response, self._autoplayLimits = req, self._autoplayReset = schema, self._stopAtTotalLoss = self._autoplayLimits, self._stopAtTotalLossValue = 0, self._autoPlayResume = res, self;
    }
    return c(foo, fn), Object.defineProperty(foo.prototype, "stopAtAnyWin", {
      get : function() {
        return this._stopAtAnyWin;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._stopAtAnyWin = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtJackpotWin", {
      get : function() {
        return this._stopAtJackpotWin;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._stopAtJackpotWin = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtWin", {
      get : function() {
        return this._stopAtWin;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtBalanceInc", {
      get : function() {
        return this._stopAtBalanceInc;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtBalanceDec", {
      get : function() {
        return this._stopAtBalanceDec;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtWinValue", {
      get : function() {
        return this._stopAtWinValue;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._stopAtWinValue = mymuted;
        /** @type {boolean} */
        this._stopAtWin = !!mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtBalanceIncValue", {
      get : function() {
        return this._stopAtBalanceIncValue;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._stopAtBalanceIncValue = mymuted;
        /** @type {boolean} */
        this._stopAtBalanceInc = !!mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtBalanceDecValue", {
      get : function() {
        return this._stopAtBalanceDecValue;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._stopAtBalanceDecValue = mymuted;
        /** @type {boolean} */
        this._stopAtBalanceDec = !!mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtTotalLoss", {
      get : function() {
        return this._stopAtTotalLoss;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "stopAtTotalLossValue", {
      get : function() {
        return this._stopAtTotalLossValue;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._stopAtTotalLossValue = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "jackpotEnabled", {
      get : function() {
        return this._jackpotEnabled;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._jackpotEnabled = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "plays", {
      get : function() {
        return this._plays;
      },
      set : function(mymuted) {
        /** @type {number} */
        this._plays = mymuted;
        this.notify();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "playsLeft", {
      get : function() {
        return this._playsLeft;
      },
      set : function(mymuted) {
        this._playsLeft = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "autoplayReset", {
      get : function() {
        return this._autoplayReset;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "autoplayLimits", {
      get : function() {
        return this._autoplayLimits;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(foo.prototype, "autoPlayResume", {
      get : function() {
        return this._autoPlayResume;
      },
      enumerable : true,
      configurable : true
    }), foo.prototype.toggleStopAtAnyWin = function() {
      /** @type {boolean} */
      this._stopAtAnyWin = !this._stopAtAnyWin;
      this.notify();
    }, foo.prototype.toggleStopAtJackpotWin = function() {
      /** @type {boolean} */
      this._stopAtJackpotWin = !this._stopAtJackpotWin;
      this.notify();
    }, foo.prototype.toggleStopAtWin = function() {
      /** @type {boolean} */
      this._stopAtWin = !this._stopAtWin;
      this.notify();
    }, foo.prototype.toggleStopAtBalanceInc = function() {
      /** @type {boolean} */
      this._stopAtBalanceInc = !this._stopAtBalanceInc;
      this.notify();
    }, foo.prototype.toggleStopAtBalanceDec = function(canCreateDiscussions) {
      /** @type {boolean} */
      this._stopAtBalanceDec = !this._stopAtBalanceDec;
      this.notify();
    }, Object.defineProperty(foo.prototype, "disabled", {
      get : function() {
        return this._disabled;
      },
      set : function(disabled) {
        /** @type {boolean} */
        this._disabled = disabled;
      },
      enumerable : true,
      configurable : true
    }), foo.prototype.serialize = function(request) {
      fn.prototype.serialize.call(this, request);
      request.serializeObject("_stopAtAnyWin", this);
      request.serializeObject("_stopAtJackpotWin", this);
      request.serializeObject("_stopAtWin", this);
      request.serializeObject("_stopAtBalanceInc", this);
      request.serializeObject("_stopAtBalanceDec", this);
      request.serializeObject("_stopAtWinValue", this);
      request.serializeObject("_stopAtBalanceIncValue", this);
      request.serializeObject("_stopAtBalanceDecValue", this);
      request.serializeObject("_stopAtTotalLoss", this);
      request.serializeObject("_stopAtTotalLossValue", this);
      request.serializeObject("_plays", this);
      request.serializeObject("_autoplayLimits", this);
      request.serializeObject("_autoplayReset", this);
      request.serializeObject("_jackpotEnabled", this);
      request.serializeObject("_autoPlayResume", this);
    }, foo.prototype.resetPlays = function() {
      /** @type {number} */
      this._plays = 0;
    }, foo;
  }(exports.Settings);
  !function(root) {
    /** @type {string} */
    root[root.Ordered = 0] = "Ordered";
    /** @type {string} */
    root[root.Reverse = 1] = "Reverse";
    /** @type {string} */
    root[root.Random = 2] = "Random";
    /** @type {string} */
    root[root.RandomUnique = 3] = "RandomUnique";
  }(root || (root = {}));
  var A;
  var O = function() {
    /**
     * @param {!Object} coordinate
     * @param {boolean} value
     * @return {undefined}
     */
    function Node(coordinate, value) {
      if (void 0 === value) {
        value = root.Ordered;
      }
      /** @type {!Object} */
      this._values = coordinate;
      /** @type {boolean} */
      this._order = value;
      this.reset();
    }
    return Object.defineProperty(Node.prototype, "next", {
      get : function() {
        return this.nextIndex(), this._values[this._currentIndex];
      },
      enumerable : true,
      configurable : true
    }), Node.prototype.reset = function() {
      /** @type {number} */
      var index = this._order === root.Reverse ? this._values.length - 1 : 0;
      /** @type {number} */
      this._nextIndex = index;
      /** @type {number} */
      this._currentIndex = index;
    }, Node.prototype.nextIndex = function() {
      switch(this._currentIndex = this._nextIndex, this._order) {
        case root.Ordered:
          /** @type {number} */
          this._nextIndex = ++this._nextIndex % this._values.length;
          break;
        case root.Reverse:
          /** @type {number} */
          this._nextIndex = --this._nextIndex;
          if (this._nextIndex < 0) {
            /** @type {number} */
            this._nextIndex = this._values.length - 1;
          }
          break;
        case root.Random:
          /** @type {number} */
          this._nextIndex = Math.random() * this._values.length | 0;
          break;
        case root.RandomUnique:
          var index = void 0;
          do {
            /** @type {number} */
            index = Math.random() * this._values.length | 0;
          } while (index === this._nextIndex);
          /** @type {number} */
          this._nextIndex = index;
      }
    }, Node;
  }();
  var coveredByRange = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MGE = function(end) {
    /**
     * @return {?}
     */
    function start() {
      return null !== end && end.apply(this, arguments) || this;
    }
    return coveredByRange(start, end), start.AUTOPLAYS_LEFT = "AUTOPLAYS_LEFT", start;
  }(svg.ExternalInterfaceEvent);
  var defineUserCommand = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var L = function(cmd) {
    /**
     * @param {?} key
     * @param {number} index
     * @return {?}
     */
    function link(key, index) {
      if (void 0 === index) {
        /** @type {number} */
        index = -1;
      }
      var REGEX = cmd.call(this, key) || this;
      return REGEX._step = index, REGEX;
    }
    return defineUserCommand(link, cmd), Object.defineProperty(link.prototype, "step", {
      get : function() {
        return this._step;
      },
      enumerable : true,
      configurable : true
    }), link.EXTERNAL_TUTORIAL_AUTOINIT = "EXTERNAL_TUTORIAL_AUTOINIT", link.EXTERNAL_TUTORIAL_INIT = "EXTERNAL_TUTORIAL_INIT", link.EXTERNAL_TUTORIAL_STARTED = "EXTERNAL_TUTORIAL_STARTED", link.EXTERNAL_TUTORIAL_NEXT = "EXTERNAL_TUTORIAL_NEXT", link.EXTERNAL_TUTORIAL_RECONNECT = "EXTERNAL_TUTORIAL_RECONNECT", link.EXTERNAL_TUTORIAL_SKIP = "EXTERNAL_TUTORIAL_SKIP", link.EXTERNAL_TUTORIAL_BACK = "EXTERNAL_TUTORIAL_BACK", link.EXTERNAL_TUTORIAL_EXIT = "EXTERNAL_TUTORIAL_EXIT", link.EXTERNAL_TUTORIAL_FINISH = 
    "EXTERNAL_TUTORIAL_FINISH", link;
  }(exports.MegatonEvent);
  var argsProvider = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var N = function(fn) {
    /**
     * @param {?} data
     * @param {?} elem
     * @param {?} cb
     * @param {boolean} method
     * @param {?} params
     * @return {?}
     */
    function request(data, elem, cb, method, params) {
      var req = fn.call(this, data, elem, cb, params) || this;
      return req._autoplaySettings = method, req.addCallback(request.CALLBACK_STOP_AUTOPLAY, function() {
        return req.onStopAutoPlay();
      }), req.addCallback(request.CALLBACK_START_AUTOPLAY, req.onStartAutoplay.bind(req)), req.addCallback(request.CALLBACK_GET_AP_LEFT, function() {
        return req.onGetAutoplayLeft();
      }), req._availableEvents = req._availableEvents.concat([MGE.AUTOPLAYS_LEFT, L.EXTERNAL_TUTORIAL_AUTOINIT, L.EXTERNAL_TUTORIAL_INIT, L.EXTERNAL_TUTORIAL_STARTED, L.EXTERNAL_TUTORIAL_NEXT, L.EXTERNAL_TUTORIAL_RECONNECT, L.EXTERNAL_TUTORIAL_SKIP, L.EXTERNAL_TUTORIAL_BACK, L.EXTERNAL_TUTORIAL_EXIT, L.EXTERNAL_TUTORIAL_FINISH]), req;
    }
    return argsProvider(request, fn), request.prototype.onStopAutoPlay = function() {
      this._dispatcher.dispatch(new Event(Event.AUTOPLAY_STOP));
    }, request.prototype.onStartAutoplay = function(plays, cover_photo_to_crop, coords, chart, container, enumType, s, wlhash) {
      /** @type {string} */
      this._autoplaySettings.plays = plays;
      /** @type {string} */
      this._autoplaySettings.stopAtAnyWin = cover_photo_to_crop;
      this._autoplaySettings.stopAtJackpotWin = container;
      /** @type {string} */
      this._autoplaySettings.stopAtWinValue = enumType;
      this._autoplaySettings.stopAtBalanceIncValue = s;
      this._autoplaySettings.stopAtBalanceDecValue = wlhash;
      if (plays > 0) {
        this._dispatcher.dispatch(new Event(Event.AUTOPLAY_START, plays));
      } else {
        this._dispatcher.dispatch(new ComponentEvent(ComponentEvent.AUTOPLAY));
      }
    }, request.prototype.onGetAutoplayLeft = function() {
      this._dispatcher.dispatch(new MGE(MGE.AUTOPLAYS_LEFT, this._autoplaySettings.playsLeft));
    }, request.CALLBACK_STOP_AUTOPLAY = "STOP_AUTOPLAY", request.CALLBACK_START_AUTOPLAY = "START_AUTOPLAY", request.CALLBACK_GET_AP_LEFT = "GET_AP_LEFT", request;
  }(svg.CasinoExternalInterface);
  var P = function() {
    /**
     * @return {undefined}
     */
    function HTMLSectionBuilder() {
      var touchSystem = this;
      /**
       * @param {!Event} e
       * @return {?}
       */
      this._boundIdleHandler = function(e) {
        return touchSystem.idleHandler(e);
      };
    }
    return HTMLSectionBuilder.prototype.showIdle = function(isIron) {
      if (isIron && !this._idleTask) {
        this._idleTask = exports.Task.createHandler(null);
        this._idleTask.execHandler(this._boundIdleHandler);
      } else {
        if (!isIron && this._idleTask) {
          this._idleTask.kill();
          this._idleTask = void 0;
        }
      }
    }, HTMLSectionBuilder.prototype.idleHandler = function(call) {
      call.complete();
    }, HTMLSectionBuilder;
  }();
  var M = function() {
    /**
     * @param {!HTMLElement} tab
     * @param {!Object} data
     * @return {undefined}
     */
    function load(tab, data) {
      var suite = this;
      /** @type {!Object} */
      this._config = data;
      this._realityCheckController = this.createRealityCheckController(tab);
      tab.addEventListener(svg.LoaderEvent.LOADER, function(name) {
        return suite.onLoad(name);
      });
    }
    return load.prototype.createRealityCheckController = function(name) {
      return new svg.RealityCheckController(name);
    }, load.prototype.onLoad = function(file) {
      if (file.id === svg.LoaderEventType.COMPLETE) {
        this._realityCheckController.setCheckTimeout(this._config.realityCheckMinutes);
      }
    }, load;
  }();
  /** @type {string} */
  var D = "precision lowp float;\nattribute vec4 position;\nattribute vec4 color;\nvarying vec2 texcoord;\nvarying vec4 tint;\nuniform mat3 transform;\nvoid main() {\ntexcoord = position.zw;\ntint = vec4(color.rgb * color.a, color.a);\ngl_Position = vec4(transform * vec3(position.xy, 1.0), 1.0);\n}";
  /** @type {string} */
  var R = "precision lowp float;\nvarying vec2 texcoord;\nvarying vec4 tint;\nuniform sampler2D uSampler;\nvoid main() {\ngl_FragColor = texture2D(uSampler, texcoord) * tint;\n}";
  var evaluate = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var instance = function(roots) {
    /**
     * @param {?} data
     * @param {?} size
     * @return {?}
     */
    function self(data, size) {
      var self = roots.call(this) || this;
      return self.vCount = 0, self.eCount = 0, self.vertices = new Float32Array(data), self.elements = new Uint16Array(size), self;
    }
    return evaluate(self, roots), self.prototype.initialize = function(ctx) {
      this._vbo = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, this._vbo);
      ctx.bufferData(ctx.ARRAY_BUFFER, this.vertices, ctx.STREAM_DRAW);
      this._ebo = ctx.createBuffer();
      ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, this._ebo);
      ctx.bufferData(ctx.ELEMENT_ARRAY_BUFFER, this.elements, ctx.STREAM_DRAW);
    }, self.prototype.setup = function(gl) {
      gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._ebo);
    }, self.prototype.reset = function(ctx) {
      this.flush(ctx);
    }, self.prototype.flush = function(ctx) {
      if (this.eCount) {
        ctx.bufferData(ctx.ARRAY_BUFFER, this.vertices.subarray(0, this.vCount), ctx.STREAM_DRAW);
        ctx.bufferData(ctx.ELEMENT_ARRAY_BUFFER, this.elements.subarray(0, this.eCount), ctx.STREAM_DRAW);
        this._material.apply(ctx);
        ctx.drawElements(ctx.TRIANGLES, this.eCount, ctx.UNSIGNED_SHORT, 0);
        /** @type {number} */
        this.vCount = 0;
        /** @type {number} */
        this.eCount = 0;
      }
    }, self.prototype.setMaterial = function(name, material) {
      if (this._material !== material) {
        this.reset(name);
        /** @type {number} */
        this._material = material;
      }
    }, self;
  }(svg.CustomWebGLRenderer);
  var H = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var clazz = function(context) {
    /**
     * @param {number} i
     * @return {?}
     */
    function b(i) {
      var r = context.call(this, 32 * i, 6 * i) || this;
      /** @type {number} */
      var n = 0;
      for (; n < i; ++n) {
        /** @type {number} */
        var i = 6 * n;
        /** @type {number} */
        var n2 = 4 * n;
        /** @type {number} */
        r.elements[i + 0] = n2 + 0;
        /** @type {number} */
        r.elements[i + 1] = n2 + 1;
        /** @type {number} */
        r.elements[i + 2] = n2 + 2;
        /** @type {number} */
        r.elements[i + 3] = n2 + 2;
        /** @type {number} */
        r.elements[i + 4] = n2 + 1;
        /** @type {number} */
        r.elements[i + 5] = n2 + 3;
      }
      return r;
    }
    return H(b, context), b.prototype.initialize = function(gl) {
      this._vbo = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);
      gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STREAM_DRAW);
      this._ebo = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._ebo);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.elements, gl.STATIC_DRAW);
      gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);
    }, b.prototype.flush = function(ctx) {
      if (this.eCount) {
        ctx.bufferData(ctx.ARRAY_BUFFER, this.vertices.subarray(0, 32 * this.eCount), ctx.STREAM_DRAW);
        this._material.apply(ctx);
        ctx.drawElements(ctx.TRIANGLES, this.eCount, ctx.UNSIGNED_SHORT, 0);
        /** @type {number} */
        this.vCount = 0;
        /** @type {number} */
        this.eCount = 0;
      }
    }, b;
  }(instance);
  var table = function() {
    /**
     * @return {undefined}
     */
    function initialize() {
      /** @type {number} */
      this.positionX = 0;
      /** @type {number} */
      this.positionY = 0;
      /** @type {number} */
      this.red = 1;
      /** @type {number} */
      this.green = 1;
      /** @type {number} */
      this.blue = 1;
      /** @type {number} */
      this.alpha = 1;
      /** @type {number} */
      this.size = 1;
      /** @type {number} */
      this.rotation = 0;
      /** @type {number} */
      this.texture = 0;
      /** @type {null} */
      this.next = null;
    }
    return initialize.prototype.init = function(options, value) {
      this.positionX = options.x;
      this.positionY = options.y;
      /** @type {number} */
      this.rotation = 0;
      /** @type {number} */
      this.size = 1;
    }, initialize.prototype.unlinkNext = function() {
      if (this.next) {
        var node = this.next;
        return this.next = node.next, node.next = null, node;
      }
      return null;
    }, initialize.prototype.linkAfter = function(a) {
      var x = this.next;
      /** @type {!Object} */
      this.next = a;
      a.next = x;
    }, initialize.prototype.iterateTick = function(linkTarget) {
      var comp = this;
      var item = this.next;
      for (; item;) {
        var i = item.tick();
        var t = item.next;
        if (i) {
          comp = item;
        } else {
          linkTarget.linkAfter(item);
          comp.next = t;
        }
        item = t;
      }
    }, initialize.prototype.iterateAdvance = function(diff) {
      var next = this.next;
      for (; next;) {
        next.advance(diff);
        next = next.next;
      }
    }, initialize.prototype.tick = function() {
      return false;
    }, initialize.prototype.advance = function(i) {
    }, initialize;
  }();
  var patMoment = function() {
    /**
     * @param {number} dist
     * @return {undefined}
     */
    function scope(dist) {
      if (void 0 === dist) {
        /** @type {number} */
        dist = 24;
      }
      /** @type {number} */
      this._tickTime = 1000 / dist;
      /** @type {!Array} */
      this._particles = [];
      this._active = new table;
      this._free = new table;
      /** @type {null} */
      this._context = null;
    }
    return scope.prototype.getType = function() {
      return svg.ComponentType.CUSTOM;
    }, scope.prototype.bindNode = function(optional, freshLabels) {
    }, scope.prototype.dispose = function() {
    }, Object.defineProperty(scope.prototype, "head", {
      get : function() {
        return this._active.next;
      },
      enumerable : true,
      configurable : true
    }), scope.prototype.init = function(b, num) {
      /** @type {!Array} */
      this._particles = Array(num);
      /** @type {null} */
      var lastRange = null;
      /** @type {number} */
      var i = 0;
      for (; i < num; i++) {
        var range = b();
        if (lastRange) {
          lastRange.linkAfter(range);
        } else {
          this._free.linkAfter(range);
        }
        this._particles[i] = range;
        lastRange = range;
      }
    }, scope.prototype.emit = function(t, data) {
      var player = this._free.unlinkNext();
      return player && (player.init(t, data), null == this._active.next && this.start(), this._active.linkAfter(player)), player;
    }, scope.prototype.start = function() {
      var colTween = this;
      if (null == this._context) {
        this._context = exports.Context.newContext(null, null, null);
        this._prevTime = exports.SystemManager.getScheduler().getTime();
        exports.SystemManager.getScheduler().addUpdateListener(function() {
          return colTween.onUpdate();
        }, this._context);
      }
    }, scope.prototype.onUpdate = function() {
      var currTime = exports.SystemManager.getScheduler().getTime();
      /** @type {number} */
      var e = this._prevTime % this._tickTime;
      if (e > 0) {
        var prevTime = this._prevTime - e + this._tickTime;
        if (prevTime > currTime) {
          prevTime = currTime;
        }
        /** @type {number} */
        var dtFrame = prevTime - this._prevTime;
        this._active.iterateAdvance(dtFrame / this._tickTime);
        this._prevTime += dtFrame;
      }
      for (; this._prevTime < currTime;) {
        this._active.iterateTick(this._free);
        /** @type {number} */
        dtFrame = currTime - this._prevTime;
        if (dtFrame > this._tickTime) {
          dtFrame = this._tickTime;
        }
        this._active.iterateAdvance(dtFrame / this._tickTime);
        this._prevTime += dtFrame;
      }
    }, scope;
  }();
  var eqPartial = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SignatureParseError = function(Widget) {
    /**
     * @param {undefined} t
     * @param {string} template
     * @param {undefined} url
     * @param {!Object} u
     * @return {?}
     */
    function render(t, template, url, u) {
      if (void 0 === u) {
        u = render.getMaterial();
      }
      var self = Widget.call(this, render.getRenderer()) || this;
      self._pool = new patMoment;
      self._pool.init(t, url);
      /** @type {string} */
      self._template = template;
      /** @type {!Object} */
      self._material = u;
      var s = u.getUniform("transform");
      return s && s.type === svg.UniformType.MAT3 && (self._matrix = s.value), svg.ResourceManager.getInstance().getSceneManager().addListener(function() {
        return self.onSceneLoaded();
      }), self;
    }
    return eqPartial(render, Widget), render.initializeShader = function(refX, refY) {
      if (void 0 === refX) {
        /** @type {string} */
        refX = D;
      }
      if (void 0 === refY) {
        /** @type {string} */
        refY = R;
      }
      this._shader = new svg.CustomWebGLShader(refX, refY, [new svg.AttributeItem("position", svg.AttributeType.VEC4), new svg.AttributeItem("color", svg.AttributeType.VEC4)]);
      svg.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        render._material.compile(FeedbackTemplate);
      });
    }, render.initializeMaterial = function() {
      this._material = new svg.CustomWebGLMaterial(this._shader, [new svg.UniformValue("transform", svg.UniformType.MAT3, [1, 0, 0, 0, 1, 0, 0, 0, 1])]);
    }, render.initializeRenderer = function(data) {
      this._renderer = new clazz(data);
      svg.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        render._renderer.compile(FeedbackTemplate);
      });
    }, render.getMaterial = function() {
      return this._shader || this.initializeShader(), this._material || this.initializeMaterial(), this._material;
    }, render.getRenderer = function() {
      return this._renderer || this.initializeRenderer(8192), this._renderer;
    }, render.prototype.onSceneLoaded = function() {
      if (!this._textures) {
        this._textures = svg.ResourceManager.getInstance().getSceneManager().getCustomWebGLTexturesForTemplate(this._template);
      }
    }, render.prototype.onRender = function(c, n, err, state, position, data, index, f, d, i, delta, callback) {
      if (this._textures) {
        Widget.prototype.onRender.call(this, c, n, err, state, position, data, index, f, d, i, delta, callback);
        /** @type {number} */
        var value = 0;
        var schema = this._textures;
        for (; value < schema.length; value++) {
          var options = schema[value];
          options.checkForUpdate();
        }
        var obj = this._customWebGLRenderer;
        if (this._matrix && svg.CustomWebGLBase.compareMatrix(this._matrix, n, err, state, position, data, index)) {
          obj.flush(c);
          this._matrix[0] = n;
          this._matrix[1] = err;
          this._matrix[3] = state;
          this._matrix[4] = position;
          this._matrix[6] = data;
          this._matrix[7] = index;
        }
        if (callback !== this._material.blending) {
          obj.flush(c);
          /** @type {boolean} */
          this._material.blending = callback;
        }
        obj.setMaterial(c, this._material);
        var textures = this._textures;
        var v = obj.vertices;
        var self = (obj.elements, this._pool.head);
        for (; self; self = self.next) {
          options = textures[self.texture];
          if (obj.eCount + 6 > obj.elements.length || svg.CustomWebGLBase.compareTexture(c, options, this._material.texture)) {
            obj.flush(c);
          }
          this._material.texture = options;
          var x = self.positionX;
          var y = self.positionY;
          var r = self.rotation;
          var size = self.size;
          /** @type {number} */
          var scale = 1 / Math.sqrt(options.width * options.width + options.height * options.height);
          /** @type {number} */
          var s = (options.cropMinX - 0.5) * options.width * scale;
          /** @type {number} */
          var dy = (options.cropMinY - 0.5) * options.height * scale;
          /** @type {number} */
          var t = (options.cropMaxX - 0.5) * options.width * scale;
          /** @type {number} */
          var h = (options.cropMaxY - 0.5) * options.height * scale;
          var raw = options.minU + (options.maxU - options.minU) * options.cropMinX;
          var scope = options.minV + (options.maxV - options.minV) * options.cropMinY;
          var Unknown = options.minU + (options.maxU - options.minU) * options.cropMaxX;
          var cubeSize = options.minV + (options.maxV - options.minV) * options.cropMaxY;
          var col = obj.vCount;
          if (r) {
            /** @type {number} */
            var i = Math.cos(r) * size;
            /** @type {number} */
            var width = Math.sin(r) * size;
            /** @type {number} */
            v[col + 0] = x + s * i - dy * width;
            v[col + 1] = y + s * width + dy * i;
            /** @type {number} */
            v[col + 8] = x + s * i - h * width;
            v[col + 9] = y + s * width + h * i;
            /** @type {number} */
            v[col + 16] = x + t * i - dy * width;
            v[col + 17] = y + t * width + dy * i;
            /** @type {number} */
            v[col + 24] = x + t * i - h * width;
            v[col + 25] = y + t * width + h * i;
          } else {
            v[col + 0] = x + s * size;
            v[col + 1] = y + dy * size;
            v[col + 8] = x + s * size;
            v[col + 9] = y + h * size;
            v[col + 16] = x + t * size;
            v[col + 17] = y + dy * size;
            v[col + 24] = x + t * size;
            v[col + 25] = y + h * size;
          }
          v[col + 2] = raw;
          v[col + 3] = scope;
          v[col + 10] = raw;
          v[col + 11] = cubeSize;
          v[col + 18] = Unknown;
          v[col + 19] = scope;
          v[col + 26] = Unknown;
          v[col + 27] = cubeSize;
          /** @type {number} */
          v[col + 4] = v[col + 12] = v[col + 20] = v[col + 28] = self.red * f;
          /** @type {number} */
          v[col + 5] = v[col + 13] = v[col + 21] = v[col + 29] = self.green * d;
          /** @type {number} */
          v[col + 6] = v[col + 14] = v[col + 22] = v[col + 30] = self.blue * i;
          /** @type {number} */
          v[col + 7] = v[col + 15] = v[col + 23] = v[col + 31] = self.alpha * delta;
          obj.vCount += 32;
          obj.eCount += 6;
        }
      }
    }, render.prototype.getCustomInterface = function(canCreateDiscussions) {
      return canCreateDiscussions === render.POOL ? this._pool : null;
    }, render.POOL = "Pool", render;
  }(svg.CustomWebGLBase);
  var left = function() {
    /**
     * @return {undefined}
     */
    function Timer() {
      /** @type {null} */
      this._context = null;
    }
    return Timer.prototype.start = function() {
      var label = this;
      if (null == this._context) {
        this._context = exports.Context.newContext(null, null, null);
        exports.SystemManager.getScheduler().addTickListener(function() {
          return label.onTick();
        }, this._context);
      }
    }, Timer.prototype.stop = function() {
      if (this._context) {
        exports.Context.complete(this._context);
        /** @type {null} */
        this._context = null;
      }
    }, Timer.prototype.tick = function() {
      return false;
    }, Timer.prototype.onTick = function() {
      if (!this.tick()) {
        this.stop();
      }
    }, Timer;
  }();
  var callService$1 = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var leftExp = function(t) {
    /**
     * @param {!Object} n
     * @return {?}
     */
    function e(n) {
      var agent = t.call(this) || this;
      return agent._pools = n, agent._density = 1, agent;
    }
    return callService$1(e, t), e.createPool = function(spec, options) {
      var allTraps = this;
      /** @type {!Array} */
      var newPool = [];
      var logger = spec.getHierarchy(options);
      var MyNgOfflineModel = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {number} */
      var i = 0;
      var existingChoices = this.PARTICLE_NAMES;
      for (; i < existingChoices.length; i++) {
        var c = existingChoices[i];
        !function(t) {
          /** @type {string} */
          var key = "BW_" + t;
          MyNgOfflineModel.registerCustomComponent(key, function() {
            return allTraps._createPoolImpl(t, 25);
          });
          var r = MyNgOfflineModel.create(key);
          logger.add(key, r);
          newPool.push(r.getCustomInterface(SignatureParseError.POOL));
        }(c);
      }
      return newPool;
    }, e._createPoolImpl = function(type, e) {
      return new SignatureParseError(callableYAxisFormatter.create, type, e);
    }, e.prototype.start = function() {
      t.prototype.start.call(this);
      /** @type {number} */
      this._cnt = 0;
      /** @type {number} */
      this._poolIdx = 0;
    }, e.prototype.setDensity = function(density) {
      /** @type {number} */
      this._density = density;
    }, e.prototype.tick = function() {
      var t = new svg.Point(0, 0);
      /** @type {number} */
      var duedate = Math.floor(this._cnt);
      this._cnt += this._density;
      /** @type {number} */
      var timeSubmittedDiff = Math.floor(this._cnt) - duedate;
      for (; timeSubmittedDiff-- > 0;) {
        this._pools[this._poolIdx].emit(t, null);
        /** @type {number} */
        this._poolIdx = (this._poolIdx + 1) % this._pools.length;
      }
      return true;
    }, e.PARTICLE_NAMES = ["bluesapphire01", "bluesapphire02", "bluesapphire03", "coin01", "coin02", "coin03", "coin04", "coin05", "diamond01", "diamond02", "diamond03", "emerald01", "emerald02", "emerald03", "ruby01", "ruby02", "ruby03", "yellowsapphire01", "yellowsapphire02", "yellowsapphire03"], e;
  }(left);
  var callableYAxisFormatter = function(t) {
    /**
     * @param {number} name
     * @return {?}
     */
    function State(name) {
      var obj = t.call(this) || this;
      return obj._numTextures = name, obj;
    }
    return callService$1(State, t), State.create = function() {
      return new State(19);
    }, State.prototype.init = function(b, num) {
      t.prototype.init.call(this, b, num);
      /** @type {number} */
      this._cnt = 50;
      /** @type {number} */
      this.texture = Math.floor(Math.random() * this._numTextures);
      /** @type {number} */
      this._vx = 25 * (Math.random() - 0.5);
      /** @type {number} */
      this._vy = 9 * (Math.random() - 5);
      /** @type {number} */
      this.size = 100;
      /** @type {number} */
      this.alpha = 1;
    }, State.prototype.advance = function(i) {
      this.positionX += i * this._vx * 1.5;
      this.positionY += i * this._vy * 1.5;
    }, State.prototype.tick = function() {
      return this._vy += 2, this.texture = (this.texture + 1) % this._numTextures, this._cnt-- > 0;
    }, State;
  }(table);
  var _inherits = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var groupLeft = function(t) {
    /**
     * @param {string} pool
     * @return {?}
     */
    function Tree(pool) {
      var connection = t.call(this) || this;
      return connection._pool = pool, connection._density = 1, connection;
    }
    return _inherits(Tree, t), Tree.createPool = function(options, opts) {
      var streaks = this;
      var q = options.getHierarchy(opts);
      var geometrize__$ArraySet_ArraySet_$Impl_$ = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var array = "BWE_streak";
      geometrize__$ArraySet_ArraySet_$Impl_$.registerCustomComponent(array, function() {
        return streaks._createPoolImpl("streak", 1000);
      });
      var table = geometrize__$ArraySet_ArraySet_$Impl_$.create(array);
      return q.add(array, table), table.getCustomInterface(SignatureParseError.POOL);
    }, Tree.createDotPool = function(c, h) {
      var seriesEle = this;
      var bigint = c.getHierarchy(h);
      var directory_epub = svg.ResourceManager.getInstance().getEntityManager();
      directory_epub.registerCustomComponent("BWE_dot", function() {
        return seriesEle._createPoolImpl("dot", 1000);
      });
      var reserve_state = directory_epub.create("BWE_dot");
      return bigint.add("BWE_dot", reserve_state), reserve_state.getCustomInterface(SignatureParseError.POOL);
    }, Tree._createPoolImpl = function(type, e) {
      return new SignatureParseError(discountService.create, type, e);
    }, Tree.prototype.setDotPool = function(sEmitter) {
      /** @type {!Object} */
      this._dotPool = sEmitter;
    }, Tree.prototype.start = function() {
      t.prototype.start.call(this);
      /** @type {number} */
      this._cnt = 0;
    }, Tree.prototype.setDensity = function(density) {
      /** @type {number} */
      this._density = density;
    }, Tree.prototype.tick = function() {
      var id = new svg.Point(0, 0);
      /** @type {number} */
      var duedate = Math.floor(this._cnt);
      this._cnt += this._density;
      /** @type {number} */
      var timeSubmittedDiff = Math.floor(this._cnt) - duedate;
      /** @type {boolean} */
      var i = true;
      for (; timeSubmittedDiff-- > 0;) {
        this._pool.emit(id, null);
        if (i) {
          this._dotPool.emit(id, null);
          /** @type {boolean} */
          i = false;
        }
      }
      return true;
    }, Tree;
  }(left);
  var discountService = (function(t) {
    /**
     * @return {?}
     */
    function Model() {
      return null !== t && t.apply(this, arguments) || this;
    }
    _inherits(Model, t);
    /**
     * @return {?}
     */
    Model.create = function() {
      return new Model;
    };
    /**
     * @param {string} b
     * @param {string} num
     * @return {undefined}
     */
    Model.prototype.init = function(b, num) {
      t.prototype.init.call(this, b, num);
      /** @type {number} */
      var bearingRad = 2 * Math.random() * Math.PI;
      /** @type {number} */
      var o = 3 + 4 * Math.random();
      /** @type {number} */
      this._vy = -Math.sin(bearingRad) * o;
      /** @type {number} */
      this._vx = -Math.cos(bearingRad) * o;
      /** @type {number} */
      this._cnt = 60;
      /** @type {number} */
      this._fsize = 30 + 50 * Math.random();
      /** @type {number} */
      this.alpha = 0;
      /** @type {number} */
      this.size = this._fsize;
      /** @type {number} */
      this.red = Math.random();
      /** @type {number} */
      this.green = Math.random();
      /** @type {number} */
      this.blue = Math.random();
    };
    /**
     * @param {number} i
     * @return {undefined}
     */
    Model.prototype.advance = function(i) {
      this.positionX += this._vx * i;
      this.positionY += this._vy * i;
    };
    /**
     * @return {?}
     */
    Model.prototype.tick = function() {
      return 30 > this._cnt && (this._fsize += 1), this._cnt < 20 ? this.alpha = 0.04 * this._cnt : this.alpha += 0.01, this.size = this._fsize, --this._cnt > 0;
    };
  }(table), function(t) {
    /**
     * @return {?}
     */
    function Model() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return _inherits(Model, t), Model.create = function() {
      return new Model;
    }, Model.prototype.init = function(b, num) {
      t.prototype.init.call(this, b, num);
      /** @type {number} */
      var skewY = 2 * Math.random() * Math.PI;
      /** @type {number} */
      var o = 15 + 5 * Math.random();
      /** @type {number} */
      this._vy = -Math.sin(skewY) * o;
      /** @type {number} */
      this._vx = -Math.cos(skewY) * o;
      /** @type {number} */
      this._cnt = 60;
      /** @type {number} */
      this._fsize = 5 * Math.random() * 10;
      /** @type {number} */
      this.alpha = 0.3;
      /** @type {number} */
      this.size = this._fsize;
      /** @type {number} */
      this.rotation = skewY;
    }, Model.prototype.advance = function(i) {
      this.positionX += this._vx * i;
      this.positionY += this._vy * i;
    }, Model.prototype.tick = function() {
      return 50 < this._cnt && (this._fsize += 1), this._cnt < 17 && (this.alpha = 0.05 * this._cnt), this.size = this._fsize, --this._cnt > 0;
    }, Model;
  }(table));
  var w = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var divToScroll = function(t) {
    /**
     * @param {!Object} callback
     * @return {?}
     */
    function x(callback) {
      var self = t.call(this) || this;
      return self._pools = callback, self._density = 1, self._props = {
        yForce : 4
      }, self;
    }
    return w(x, t), x.createPool = function(spec, options) {
      var buf = this;
      /** @type {!Array} */
      var newPool = [];
      var s = spec.getHierarchy(options);
      var a = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {number} */
      var i = 0;
      /** @type {!Array} */
      var args = x.PARTICLE_NAMES;
      for (; i < args.length; i++) {
        var expected = args[i];
        !function(amt) {
          /** @type {string} */
          var b = "CS_" + amt;
          a.registerCustomComponent(b, function() {
            return buf.createPoolImpl(amt, 25);
          });
          var n = a.create(b);
          s.add(b, n);
          newPool.push(n.getCustomInterface(SignatureParseError.POOL));
        }(expected);
      }
      return newPool;
    }, x.createPoolImpl = function(width, e) {
      return new SignatureParseError($sortedTable.create, width, e);
    }, x.prototype.start = function() {
      t.prototype.start.call(this);
      /** @type {number} */
      this._cnt = 0;
      /** @type {number} */
      this._poolIdx = 0;
    }, x.prototype.setDensity = function(density) {
      /** @type {number} */
      this._density = density;
    }, x.prototype.burst = function(startIndex) {
      this._props.yForce = 4 + this._density;
      /** @type {number} */
      var candidateNextLexCursor = 0;
      for (; candidateNextLexCursor < startIndex; candidateNextLexCursor++) {
        this.tick();
      }
      /** @type {number} */
      this._props.yForce = 4;
    }, x.prototype.tick = function() {
      var t = new svg.Point(0, 0);
      /** @type {number} */
      var duedate = Math.floor(this._cnt);
      this._cnt += this._density;
      /** @type {number} */
      var timeSubmittedDiff = Math.floor(this._cnt) - duedate;
      for (; timeSubmittedDiff-- > 0;) {
        this._pools[this._poolIdx].emit(t, this._props);
        /** @type {number} */
        this._poolIdx = (this._poolIdx + 1) % this._pools.length;
      }
      return true;
    }, x.PARTICLE_NAMES = ["coin01", "coin02", "coin03", "coin04", "coin04", "coin05"], x;
  }(left);
  var $sortedTable = function(result) {
    /**
     * @return {?}
     */
    function t() {
      return null !== result && result.apply(this, arguments) || this;
    }
    return w(t, result), t.create = function() {
      return new t;
    }, t.prototype.init = function(b, type) {
      result.prototype.init.call(this, b, type);
      /** @type {string} */
      var graphTypeBaseName = type;
      /** @type {number} */
      this._cnt = 30;
      /** @type {number} */
      this.texture = Math.floor(Math.random() * t.NUM_TEXTURES);
      /** @type {number} */
      var sliceHeight = (Math.random() - 6) * graphTypeBaseName.yForce;
      /** @type {number} */
      var rads = Math.random() - 0.5;
      /** @type {number} */
      this._vx = Math.sin(rads) * sliceHeight;
      /** @type {number} */
      this._vy = Math.cos(rads) * sliceHeight;
      /** @type {number} */
      this.size = 40;
      /** @type {number} */
      this.alpha = 0;
    }, t.prototype.advance = function(i) {
      this.positionX += i * this._vx;
      this.positionY += i * this._vy;
    }, t.prototype.tick = function() {
      return this._vy += 2, this.alpha < 1 && (this.alpha += 0.2), this.size += 0.5, this.texture = (this.texture + 1) % t.NUM_TEXTURES, this._cnt-- > 0;
    }, t.NUM_TEXTURES = 19, t;
  }(table);
  var is = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var leftWebview = function(c) {
    /**
     * @param {!Object} n
     * @return {?}
     */
    function e(n) {
      var agent = c.call(this) || this;
      return agent._pools = n, agent._density = 1, agent;
    }
    return is(e, c), e.createPool = function(spec, options) {
      var allTraps = this;
      /** @type {!Array} */
      var newPool = [];
      var s = spec.getHierarchy(options);
      var MyNgOfflineModel = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {number} */
      var i = 0;
      /** @type {!Array} */
      var cat = e.PARTICLE_NAMES;
      for (; i < cat.length; i++) {
        var e = cat[i];
        !function(t) {
          /** @type {string} */
          var key = "MJCS_" + t;
          MyNgOfflineModel.registerCustomComponent(key, function() {
            return allTraps._createPoolImpl(t, 25);
          });
          var n = MyNgOfflineModel.create(key);
          s.add(key, n);
          newPool.push(n.getCustomInterface(SignatureParseError.POOL));
        }(e);
      }
      return newPool;
    }, e._createPoolImpl = function(type, e) {
      return new SignatureParseError(directory_epub.create, type, e);
    }, e.prototype.start = function() {
      c.prototype.start.call(this);
      /** @type {number} */
      this._cnt = 0;
      /** @type {number} */
      this._poolIdx = 0;
    }, e.prototype.setDensity = function(density) {
      /** @type {number} */
      this._density = density;
    }, e.prototype.tick = function() {
      var t = new svg.Point(0, 0);
      /** @type {number} */
      var duedate = Math.floor(this._cnt);
      this._cnt += this._density;
      /** @type {number} */
      var timeSubmittedDiff = Math.floor(this._cnt) - duedate;
      for (; timeSubmittedDiff-- > 0;) {
        this._pools[this._poolIdx].emit(t, null);
        /** @type {number} */
        this._poolIdx = (this._poolIdx + 1) % this._pools.length;
      }
      return true;
    }, e.PARTICLE_NAMES = ["coin1", "coin2", "coin3", "coin4", "coin4", "coin5", "coin6"], e;
  }(left);
  var directory_epub = function(c) {
    /**
     * @return {?}
     */
    function Model() {
      return null !== c && c.apply(this, arguments) || this;
    }
    return is(Model, c), Model.create = function() {
      return new Model;
    }, Model.prototype.init = function(b, num) {
      c.prototype.init.call(this, b, num);
      /** @type {number} */
      var rads = 0.5 * (Math.random() - 0.5);
      /** @type {number} */
      var sliceHeight = 30 + 4 * Math.random();
      /** @type {number} */
      this._vx = Math.sin(rads) * sliceHeight;
      /** @type {number} */
      this._vy = -Math.cos(rads) * sliceHeight;
      /** @type {number} */
      this._cnt = 50;
      /** @type {number} */
      this.size = 30;
      /** @type {number} */
      this.texture = Math.floor(Math.random() * Model.NUMTEXTURES);
      /** @type {number} */
      this.alpha = 0;
    }, Model.prototype.advance = function(i) {
      this.positionX += i * this._vx;
      this.positionY += i * this._vy;
    }, Model.prototype.tick = function() {
      return this._vy += 2, this.alpha < 1 && (this.alpha += 0.2), this.size += 0.5, this.texture = (this.texture + 1) % Model.NUMTEXTURES, this._cnt-- > 0;
    }, Model.NUMTEXTURES = 16, Model;
  }(table);
  var encodeVInt = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ParticleSystem = function(size) {
    /**
     * @param {?} i
     * @return {?}
     */
    function value(i) {
      return size.call(this, i) || this;
    }
    return encodeVInt(value, size), value.FLY = "FIREWORK_FLY", value.EXPLODE = "FIREWORK_EXPLODE", value;
  }(exports.MegatonEvent);
  var extractCssFromDocument = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var yAxisSpectrum = function(options) {
    /**
     * @param {string} f
     * @param {!Object} o
     * @return {?}
     */
    function $(f, o) {
      var self = options.call(this) || this;
      return self._dispatcher = o, self._pool = f, self._cnt = 0, self._idx = 0, self._freq = 1, self;
    }
    return extractCssFromDocument($, options), $.createPool = function(spec, options) {
      var tooltip = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {!Array} */
      var promise = [];
      /** @type {!Array} */
      var tipArguments = ["fw_blue", "fw_green", "fw_red"];
      var logger = spec.getHierarchy(options);
      /** @type {number} */
      var channelName = 0;
      for (; channelName < 150; channelName++) {
        var p = tooltip.create(tipArguments[channelName % 3]);
        logger.add("fw" + channelName, p);
        p.getAnimation("").play("stop");
        promise.push(p);
      }
      return promise;
    }, $.prototype.tick = function() {
      if (this._cnt++ > this._freq) {
        /** @type {number} */
        this._cnt = 0;
        /** @type {number} */
        var x = (Math.random() < 0.5 ? 1 : -1) * (150 + 400 * Math.random());
        /** @type {number} */
        var y = (Math.random() < 0.5 ? 1 : -1) * (100 + 200 * Math.random());
        var point = new svg.Point(x, y);
        var me = this._pool[this._idx];
        me.getTransform("").setX(point.x);
        me.getTransform("").setY(point.y);
        me.getAnimation("").play("start");
        this._dispatcher.dispatch(new ParticleSystem(ParticleSystem.EXPLODE));
        /** @type {number} */
        this._idx = (this._idx + 1) % this._pool.length;
      }
      return true;
    }, $.prototype.showLess = function() {
      /** @type {number} */
      this._freq = 10;
    }, $.prototype.showMore = function() {
      /** @type {number} */
      this._freq = 1;
    }, $;
  }(left);
  var make_forecast = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var lLeft = function(t) {
    /**
     * @param {!Object} val
     * @return {?}
     */
    function self(val) {
      var self = t.call(this) || this;
      return self._pools = val, self._density = 0.05, self;
    }
    return make_forecast(self, t), self.createRocketPool = function(registerWithJS, c, h, name, o) {
      var thalassaServicesSet = this;
      var col = c.getHierarchy(h);
      var thisTransport = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var obj = "MJFW_rocket";
      /**
       * @return {?}
       */
      var remove = function() {
        return self.create(name, o);
      };
      thisTransport.registerCustomComponent(obj, function() {
        return thalassaServicesSet._createPoolImpl(remove, "Glint3", registerWithJS);
      });
      var spy = thisTransport.create(obj);
      return col.add(obj, spy), spy.getCustomInterface(SignatureParseError.POOL);
    }, self.createParticlePool = function(uri, c, h, key) {
      var p = c.getHierarchy(h);
      var directory_epub = svg.ResourceManager.getInstance().getEntityManager();
      /** @type {string} */
      var w = "MJFW_particle";
      /**
       * @return {?}
       */
      var THREAD_STARTED = function() {
        return MyNgOfflineModel.create(key);
      };
      directory_epub.registerCustomComponent(w, function() {
        return self._createPoolImpl(THREAD_STARTED, "Glint2", uri);
      });
      var s = directory_epub.create(w);
      return p.add(w, s), s.getCustomInterface(SignatureParseError.POOL);
    }, self.createDustPool = function(uri, c, h) {
      var bigint = c.getHierarchy(h);
      var directory_epub = svg.ResourceManager.getInstance().getEntityManager();
      directory_epub.registerCustomComponent("MJFW_dust", function() {
        return self._createPoolImpl(callablePoint.create, "Glint1", uri);
      });
      var reserve_state = directory_epub.create("MJFW_dust");
      return bigint.add("MJFW_dust", reserve_state), reserve_state.getCustomInterface(SignatureParseError.POOL);
    }, self._createPoolImpl = function(type, format, value) {
      return new SignatureParseError(type, format, value);
    }, self.prototype.start = function() {
      t.prototype.start.call(this);
      /** @type {number} */
      this._cnt = 0;
      /** @type {number} */
      this._poolIdx = 0;
    }, self.prototype.setDensity = function(density) {
      /** @type {number} */
      this._density = density;
    }, self.prototype.tick = function() {
      var t = new svg.Point(0, 0);
      /** @type {number} */
      var duedate = Math.floor(this._cnt);
      this._cnt += this._density;
      /** @type {number} */
      var timeSubmittedDiff = Math.floor(this._cnt) - duedate;
      for (; timeSubmittedDiff-- > 0;) {
        this._pools[this._poolIdx].emit(t, null);
        /** @type {number} */
        this._poolIdx = (this._poolIdx + 1) % this._pools.length;
      }
      return true;
    }, self;
  }(left);
  var Intersection = function() {
    /**
     * @param {number} arg2
     * @param {number} arg3
     * @param {?} arg4
     * @return {undefined}
     */
    function Line(arg2, arg3, arg4) {
      /** @type {number} */
      this._vx = arg2;
      /** @type {number} */
      this._vy = arg3;
      this._colorIndex = arg4;
    }
    return Line;
  }();
  var self = function(t) {
    /**
     * @param {!Object} key
     * @param {!Object} index
     * @return {?}
     */
    function self(key, index) {
      var _this = t.call(this) || this;
      return _this._particlePool = key, _this._dispatcher = index, _this;
    }
    return make_forecast(self, t), self.create = function(obj, options) {
      return new self(obj, options);
    }, self.prototype.init = function(b, num) {
      t.prototype.init.call(this, b, num);
      /** @type {number} */
      this._cnt = 20;
      /** @type {number} */
      this._vx = 20 * (Math.random() - 0.5);
      /** @type {number} */
      this._vy = 3 * (Math.random() - 14);
      /** @type {number} */
      this.size = 40;
      this._dispatcher.dispatch(new ParticleSystem(ParticleSystem.FLY));
    }, self.prototype.advance = function(i) {
      this.positionX += i * this._vx;
      this.positionY += i * this._vy;
    }, self.prototype.tick = function() {
      return this.rotation = Math.atan2(this._vx, -this._vy), this._vy += 0.4, this._vx *= 0.95, this._vy *= 0.95, 0 === this._cnt && this.explode(), this._cnt-- > 0;
    }, self.prototype.explode = function() {
      this._dispatcher.dispatch(new ParticleSystem(ParticleSystem.EXPLODE));
      /** @type {number} */
      var clipVertex = Math.floor(Math.random() * self._colors.length);
      /** @type {number} */
      var n = 20;
      for (; --n > 0;) {
        var i = new Intersection(this._vx, this._vy, clipVertex);
        var emitMsgName = new svg.Point(this.positionX, this.positionY);
        this._particlePool.emit(emitMsgName, i);
      }
    }, self._colors = [[28 / 255, 254 / 255, 92 / 255], [1, 244 / 255, 36 / 255], [1, 108 / 255, 41 / 255], [28 / 255, 209 / 255, 1], [1, 22 / 255, 159 / 255], [1, 1, 1]], self;
  }(table);
  var MyNgOfflineModel = function(t) {
    /**
     * @param {!Object} fn
     * @return {?}
     */
    function model(fn) {
      var $ = t.call(this) || this;
      return $._particleDustPool = fn, $;
    }
    return make_forecast(model, t), model.create = function(obj) {
      return new model(obj);
    }, model.prototype.init = function(e, b) {
      t.prototype.init.call(this, e, b);
      /** @type {number} */
      var pressure = 3 * Math.random();
      /** @type {number} */
      var w = 2 * Math.random() * Math.PI;
      /** @type {number} */
      var scale = Math.random() + 3 + pressure;
      this._vx = b._vx + Math.sin(w) * scale;
      this._vy = b._vy + Math.cos(w) * scale;
      this.positionX = e.x + this._vx;
      this.positionY = e.y + this._vy;
      /** @type {number} */
      this._cnt = 25 + Math.floor(20 * Math.random());
      /** @type {number} */
      this._dustDelay = 6;
      /** @type {number} */
      this.size = 40;
      /** @type {number} */
      this.alpha = 1;
      /** @type {number} */
      this._actRed = 1;
      /** @type {number} */
      this._actGreen = 1;
      /** @type {number} */
      this._actBlue = 1;
      this._colorIndex = b._colorIndex;
      this.red = self._colors[b._colorIndex][0];
      this.green = self._colors[b._colorIndex][1];
      this.blue = self._colors[b._colorIndex][2];
    }, model.prototype.advance = function(i) {
      this.positionX += i * this._vx;
      this.positionY += i * this._vy;
    }, model.prototype.tick = function() {
      return this.rotation = Math.atan2(this._vx, -this._vy), this._vy += 0.4, this._vx *= 0.98, this._vy *= 0.98, this.size = 4 * Math.sqrt(this._vx * this._vx + this._vy * this._vy), this._cnt < 10 && (this.alpha = 0.1 * this._cnt), this._actRed += 0.03 * (self._colors[this._colorIndex][0] - this._actRed), this._actGreen += 0.03 * (self._colors[this._colorIndex][1] - this._actGreen), this._actBlue += 0.03 * (self._colors[this._colorIndex][2] - this._actBlue), this.red = this._actRed, this.green = 
      this._actGreen, this.blue = this._actBlue, --this._dustDelay < 0 && 0 == (6 & this._cnt) && this.emitDust(), this._cnt-- > 0;
    }, model.prototype.emitDust = function() {
      var t = new svg.Point(this.positionX, this.positionY);
      var result = new Intersection(this._vx, this._vy, this._colorIndex);
      this._particleDustPool.emit(t, result);
    }, model;
  }(table);
  var callablePoint = function(t) {
    /**
     * @return {?}
     */
    function Model() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return make_forecast(Model, t), Model.create = function() {
      return new Model;
    }, Model.prototype.init = function(options, e) {
      t.prototype.init.call(this, options, e);
      /** @type {number} */
      this._cnt = 30;
      this.positionX = options.x;
      this.positionY = options.y;
      this._vx = e._vx;
      this._vy = e._vy;
      this.red = self._colors[e._colorIndex][0];
      this.green = self._colors[e._colorIndex][1];
      this.blue = self._colors[e._colorIndex][2];
      /** @type {number} */
      this.size = 10;
      /** @type {number} */
      this.alpha = 1;
    }, Model.prototype.advance = function(i) {
      this.positionX += i * this._vx;
      this.positionY += i * this._vy;
    }, Model.prototype.tick = function() {
      return this._vy += 0.4, this._vx *= 0.8, this._vy *= 0.8, this.size *= 0.98, this._cnt < 8 && (this.alpha -= 0.125), this._cnt-- > 0;
    }, Model;
  }(table);
  /** @type {string} */
  var name = "precision lowp float;\nattribute vec2 position;\nvarying vec2 uvCoord;\nvoid main() {\nuvCoord.x = 0.5 + position.x * 0.5;\nuvCoord.y = 0.5 + position.y * 0.5;\ngl_Position = vec4(position, 0, 1);\n}\n";
  /** @type {string} */
  var newValue = "precision lowp float;\nvarying vec2 uvCoord;\nuniform sampler2D uSampler;\nvoid main() {\ngl_FragColor = texture2D(uSampler, uvCoord);\n}\n";
  var incrementAndSave = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Renderer = function(options) {
    /**
     * @param {number} size
     * @return {?}
     */
    function self(size) {
      if (void 0 === size) {
        /** @type {number} */
        size = 768;
      }
      var that = options.call(this) || this;
      /** @type {null} */
      that._texture = null;
      /** @type {null} */
      that._target = null;
      /** @type {number} */
      that._maxSize = size;
      var id = new svg.CustomWebGLShader(name, newValue, [new svg.AttributeItem("position", svg.AttributeType.VEC2)]);
      return that._material = new svg.CustomWebGLMaterial(id), that;
    }
    return incrementAndSave(self, options), self.prototype.initialize = function(ctx) {
      this._vbo = ctx.createBuffer();
      ctx.bindBuffer(ctx.ARRAY_BUFFER, this._vbo);
      ctx.bufferData(ctx.ARRAY_BUFFER, self._vertices, ctx.STATIC_DRAW);
      /** @type {number} */
      this._targetWidh = 0;
      /** @type {number} */
      this._targetHeight = 0;
      this.updateRenderTexture(ctx);
    }, self.prototype.updateRenderTexture = function(gl) {
      var w = gl.canvas.width;
      var h = gl.canvas.height;
      if (w > this._maxSize || h > this._maxSize) {
        var mult = void 0;
        /** @type {number} */
        mult = w > h ? this._maxSize / w : this._maxSize / h;
        /** @type {number} */
        w = w * mult;
        /** @type {number} */
        h = h * mult;
        if (!(w === this._targetWidh && h === this._targetHeight)) {
          this._targetWidh = w;
          this._targetHeight = h;
          gl.deleteTexture(this._texture);
          gl.deleteFramebuffer(this._target);
          this._texture = gl.createTexture();
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, this._texture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          this._target = gl.createFramebuffer();
          gl.bindFramebuffer(gl.FRAMEBUFFER, this._target);
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._texture, 0);
        }
      } else {
        /** @type {number} */
        this._targetWidh = 0;
        /** @type {number} */
        this._targetHeight = 0;
      }
    }, self.prototype.setup = function(gl) {
      gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);
      this.updateRenderTexture(gl);
    }, self.prototype.reset = function(opt_key) {
    }, self.prototype.render = function(ctx, thing) {
      thing.apply(ctx);
      if (this._targetWidh) {
        ctx.bindFramebuffer(ctx.FRAMEBUFFER, this._target);
        ctx.viewport(0, 0, this._targetWidh, this._targetHeight);
        ctx.drawArrays(ctx.TRIANGLES, 0, 6);
        this._material.apply(ctx);
        ctx.activeTexture(ctx.TEXTURE0);
        ctx.bindTexture(ctx.TEXTURE_2D, this._texture);
        ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);
        ctx.viewport(0, 0, ctx.canvas.width, ctx.canvas.height);
      }
      ctx.drawArrays(ctx.TRIANGLES, 0, 6);
    }, self._vertices = new Float32Array([-1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1]), self;
  }(svg.CustomWebGLRenderer);
  var linkSourceIsNode = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Et = function(g) {
    /**
     * @param {!Object} name
     * @return {?}
     */
    function self(name) {
      var obj = g.call(this, self.getRenderer()) || this;
      return obj._material = name, obj;
    }
    return linkSourceIsNode(self, g), self.initializeRenderer = function(config) {
      this._renderer = new Renderer(config);
      svg.SceneManager.addCustomWebGLInitializer(function(FeedbackTemplate) {
        self._renderer.compile(FeedbackTemplate);
      });
    }, self.getRenderer = function() {
      return this._renderer || this.initializeRenderer(768), this._renderer;
    }, self.prototype.onRender = function(err, state, position, container, data, callback, view, options, index, cmp, helper, item) {
      g.prototype.onRender.call(this, err, state, position, container, data, callback, view, options, index, cmp, helper, item);
      /** @type {boolean} */
      this._material.blending = item;
      this._customWebGLRenderer.render(err, this._material);
    }, self;
  }(svg.CustomWebGLBase);
  var vt = function() {
    /**
     * @param {?} element
     * @return {undefined}
     */
    function init(element) {
      var clojIsReversed = svg.ResourceManager.getInstance().getSndManager();
      this.createSounds(clojIsReversed);
      this.setupListeners(element);
      /** @type {number} */
      this._volumeScale = 1;
    }
    return Object.defineProperty(init.prototype, "volumeScale", {
      set : function(mymuted) {
        /** @type {number} */
        this._volumeScale = mymuted;
      },
      enumerable : true,
      configurable : true
    }), init.prototype.createSounds = function(isSlidingUp) {
    }, init.prototype.setupListeners = function(source) {
    }, init.prototype.playOnce = function(s, i, callback, delay, time) {
      if (void 0 === i) {
        /** @type {number} */
        i = 1;
      }
      if (void 0 === callback) {
        /** @type {number} */
        callback = 0;
      }
      if (void 0 === delay) {
        /** @type {boolean} */
        delay = false;
      }
      if (void 0 === time) {
        /** @type {number} */
        time = 0;
      }
      s.play(i * this._volumeScale, callback, delay, time);
    }, init.prototype.playLooped = function(utils, parameters, async, id) {
      if (void 0 === parameters) {
        /** @type {number} */
        parameters = 1;
      }
      utils.playForever(parameters * this._volumeScale, async, id);
    }, init;
  }();
  var initFromTraversalState = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var mt = function(t) {
    /**
     * @param {?} n
     * @param {?} val
     * @param {number} count
     * @return {?}
     */
    function self(n, val, count) {
      if (void 0 === count) {
        /** @type {number} */
        count = 1;
      }
      var self = t.call(this, n, val) || this;
      if (self._nextPageDelay = 100, self._pageIdx = 0, self._pages = [], self._pageBtns = [], count >= 1) {
        var instance = this;
        /** @type {number} */
        var i = 1;
        for (; i <= count; i++) {
          var id = function(i) {
            if (null == instance._entity) {
              return "break";
            }
            var e = instance.getPageAnim(i);
            e.play("hidden");
            instance._pages.push(e);
            var btn = instance.getPageButton(i);
            btn.select(1 === i);
            btn.enable(true);
            btn.addEventListener(svg.ButtonEvent.CLICK, function() {
              return self.onIndicatorClick(i - 1);
            });
            instance._pageBtns.push(btn);
          }(i);
          if ("break" === id) {
            break;
          }
        }
      }
      return self._pageIdx = -1, self;
    }
    return initFromTraversalState(self, t), Object.defineProperty(self.prototype, "nextPageDelay", {
      set : function(time) {
        if (time >= 0) {
          this._nextPageDelay = exports.SystemManager.getScheduler().timeToTick(time);
        }
      },
      enumerable : true,
      configurable : true
    }), self.prototype.start = function() {
      var id = t.prototype.start.call(this);
      return this.setPage(0), this.nextPage(id), id;
    }, self.prototype.enable = function(id) {
      t.prototype.enable.call(this, id);
      if (!id) {
        this.nextPage(id);
      }
    }, self.prototype.getPageAnim = function(aRoundNumber) {
      return this._entity.getAnimation("content.page" + aRoundNumber);
    }, self.prototype.getPageButton = function(page) {
      return this._entity.getButton("content.indicator" + page);
    }, self.prototype.nextPage = function(position) {
      var lastName1 = this;
      if (this._ctx) {
        exports.Context.complete(this._ctx);
      }
      if (position) {
        this._ctx = exports.Context.newContext(null, null, null);
        exports.SystemManager.getScheduler().wait(this._nextPageDelay, null, function() {
          return lastName1.onNext();
        }, this._ctx);
      }
    }, self.prototype.setPage = function(store) {
      if (this._pageIdx !== store) {
        if (this._pageIdx >= 0) {
          this._pages[this._pageIdx].play("hide");
          this._pageBtns[this._pageIdx].select(false);
        }
        /** @type {number} */
        this._pageIdx = store;
        this._pages[this._pageIdx].play("show");
        this._pageBtns[this._pageIdx].select(true);
      }
    }, self.prototype.onNext = function() {
      var item = this._pageIdx + 1;
      if (item >= this._pages.length) {
        /** @type {number} */
        item = 0;
      }
      this.setPage(item);
      this.nextPage(true);
    }, self.prototype.onIndicatorClick = function(name) {
      this.setPage(name);
      this.nextPage(true);
    }, self;
  }(svg.SplashManager);
  var cb = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var PinEvent = function(size) {
    /**
     * @return {?}
     */
    function connector() {
      return null !== size && size.apply(this, arguments) || this;
    }
    return cb(connector, size), connector.SWIPE_START = "carousel_swip_start", connector.SWIPE = "carousel_swip", connector.SWIPE_CANCEL = "carousel_swipe_cancel", connector;
  }(exports.MegatonEvent);
  var render = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var TimerEvent = function(replaceWith) {
    /**
     * @return {?}
     */
    function inner() {
      return null !== replaceWith && replaceWith.apply(this, arguments) || this;
    }
    return render(inner, replaceWith), inner.NAV = "carousel_nav", inner;
  }(exports.MegatonEvent);
  var Compiler = function() {
    /**
     * @param {!Element} parent
     * @param {!Object} method
     * @param {!Object} model
     * @return {undefined}
     */
    function Controller(parent, method, model) {
      var me = this;
      /** @type {!Object} */
      this._model = model;
      this._model.addEventListener(TimerEvent.NAV, function(t) {
        return me.onNavigate(t);
      });
      this._model.addEventListener(PinEvent.SWIPE, function(t) {
        return me.onSwiping(t);
      });
      this._model.addEventListener(PinEvent.SWIPE_CANCEL, function(t) {
        return me.onSwipeCancel(t);
      });
      /** @type {!Element} */
      this._view = parent;
      /** @type {!Object} */
      this._uiView = method;
      this._uiView.hitfieldBtn.addEventListener(svg.ButtonEvent.MOUSE_DOWN, function(e) {
        return me.onMouseDown(e);
      });
      this._uiView.hitfieldBtn.addEventListener(svg.ButtonMoveEvent.MOUSE_MOVE, function(e) {
        return me.onMouseMove(e);
      });
      this._uiView.hitfieldBtn.addEventListener(svg.ButtonEvent.MOUSE_UP, function(e) {
        return me.onMouseUp(e);
      });
      this._uiView.nextBtn.addEventListener(svg.ButtonEvent.CLICK, function(t) {
        return me.onNextClick(t);
      });
      this._uiView.prevBtn.addEventListener(svg.ButtonEvent.CLICK, function(t) {
        return me.onPrevClick(t);
      });
      var move_elements = this._uiView.navBtns;
      /** @type {number} */
      var i = 0;
      for (; i < move_elements.length; i++) {
        !function(i) {
          move_elements[i].addEventListener(svg.ButtonEvent.CLICK, function(e) {
            return me.onNavClick(i, e);
          });
        }(i);
      }
    }
    return Controller.prototype.activate = function() {
      this._model.activate();
      this._uiView.init(this._model.activePageIdx);
      this._view.init(this._model.activePageIdx);
    }, Controller.prototype.deactivate = function() {
      this._model.deactivate();
    }, Controller.prototype.onNavigate = function(type) {
      this._view.navigate(this._model.prevPageIdx, this._model.activePageIdx, this._model.enablerTask);
      this._uiView.setPageIdx(this._model.activePageIdx);
    }, Controller.prototype.onSwiping = function(result) {
      this._view.onSwiping(this._model.adjacentSwipePageIdx, this._model.activePageIdx, this._model.swipeOffsetX);
    }, Controller.prototype.onSwipeCancel = function(result) {
      this._view.onSwipeCancel(this._model.adjacentSwipePageIdx, this._model.activePageIdx, this._model.enablerTask);
    }, Controller.prototype.onMouseDown = function(event) {
      this._model.onSwipeStart();
    }, Controller.prototype.onMouseMove = function(t) {
      var result = this._uiView.getMouseLocalPointOf(t.x, t.y);
      this._model.onSwiping(result);
    }, Controller.prototype.onMouseUp = function(event) {
      this._model.onSwipeRelease();
    }, Controller.prototype.onNavClick = function(id, e) {
      this._view.setDirForward(this._model.activePageIdx > id);
      this._model.onNavClick(id);
    }, Controller.prototype.onNextClick = function(e) {
      this._view.setDirForward(true);
      this._model.onNext();
    }, Controller.prototype.onPrevClick = function(e) {
      this._view.setDirForward(false);
      this._model.onPrev();
    }, Controller;
  }();
  var DataArray = function() {
    /**
     * @param {?} me
     * @param {number} value
     * @param {boolean} id
     * @return {undefined}
     */
    function init(me, value, id) {
      this._point = new svg.Point(0, 0);
      this._hitfieldBtn = me.getButton("hitfield");
      this._hitfieldBtn.enable(true);
      this._hitfieldTr = me.getTransform("hitfield");
      /** @type {!Array} */
      this._navBtns = [];
      /** @type {number} */
      var status = 1;
      for (; status <= value; status++) {
        var o = me.getButton("indicator" + status);
        o.enable(id);
        this._navBtns.push(o);
      }
      this._nextBtn = me.getButton("pager_right");
      this._nextBtn.enable(true);
      this._prevBtn = me.getButton("pager_left");
      this._prevBtn.enable(true);
    }
    return Object.defineProperty(init.prototype, "hitfieldBtn", {
      get : function() {
        return this._hitfieldBtn;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(init.prototype, "navBtns", {
      get : function() {
        return this._navBtns;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(init.prototype, "nextBtn", {
      get : function() {
        return this._nextBtn;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(init.prototype, "prevBtn", {
      get : function() {
        return this._prevBtn;
      },
      enumerable : true,
      configurable : true
    }), init.prototype.init = function(target) {
      this.setPageIdx(target);
    }, init.prototype.getMouseLocalPointOf = function(key, value) {
      return this._point.x = key, this._point.y = value, this._hitfieldTr.globalToLocal(this._point);
    }, init.prototype.setPageIdx = function(stat) {
      /** @type {number} */
      var i = 0;
      for (; i < this._navBtns.length; i++) {
        this._navBtns[i].select(i === stat);
      }
    }, init;
  }();
  var __extends = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Model = function(_super) {
    /**
     * @param {!Array} key
     * @param {number} index
     * @param {number} time
     * @return {?}
     */
    function View(key, index, time) {
      if (void 0 === index) {
        /** @type {number} */
        index = 800;
      }
      if (void 0 === time) {
        /** @type {number} */
        time = 6000;
      }
      var result = _super.call(this) || this;
      return result._pageCnt = key, result._width = index, result._activePageIdx = 0, result._prevPageIdx = 0, result._isSwiping = false, result._enablerTask = null, result._autoScrollDelay = exports.SystemManager.getScheduler().timeToTick(time), result._enablerParentTask = new exports.Task, result;
    }
    return __extends(View, _super), Object.defineProperty(View.prototype, "activePageIdx", {
      get : function() {
        return this._activePageIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(View.prototype, "prevPageIdx", {
      get : function() {
        return this._prevPageIdx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(View.prototype, "enablerTask", {
      get : function() {
        return this._enablerTask;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(View.prototype, "adjacentSwipePageIdx", {
      get : function() {
        return this._swipeOffsetX < 0 ? this._activePageIdx === this._pageCnt - 1 ? 0 : this._activePageIdx + 1 : 0 === this._activePageIdx ? this._pageCnt - 1 : this._activePageIdx - 1;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(View.prototype, "swipeOffsetX", {
      get : function() {
        return this._swipeOffsetX;
      },
      enumerable : true,
      configurable : true
    }), View.prototype.activate = function() {
      this.startAutoScrollDelay();
    }, View.prototype.onNext = function() {
      this._prevPageIdx = this._activePageIdx;
      this._activePageIdx = this._activePageIdx === this._pageCnt - 1 ? 0 : this._activePageIdx + 1;
      /** @type {number} */
      this._swipeOffsetX = 0;
      this.navigate();
    }, View.prototype.onPrev = function() {
      this._prevPageIdx = this._activePageIdx;
      /** @type {number} */
      this._activePageIdx = 0 === this._activePageIdx ? this._pageCnt - 1 : this._activePageIdx - 1;
      /** @type {number} */
      this._swipeOffsetX = 0;
      this.navigate();
    }, View.prototype.onNav = function(data) {
      this._prevPageIdx = this._activePageIdx;
      /** @type {number} */
      this._activePageIdx = data;
    }, View.prototype.onSwipeStart = function() {
      /** @type {number} */
      this._swipeOffsetX = 0;
      /** @type {null} */
      this._prevLocalPoint = null;
      /** @type {boolean} */
      this._isSwiping = true;
    }, View.prototype.onSwiping = function(target) {
      if (this._isSwiping) {
        if (!this._prevLocalPoint) {
          this._prevLocalPoint = new svg.Point(target.x, target.y);
        }
        /** @type {number} */
        var order = this._prevLocalPoint.x - target.x;
        /** @type {number} */
        var a = Math.abs(this._swipeOffsetX);
        this._swipeOffsetX -= a < 0.33 * this._width ? order : order * Math.pow(0.33 * this._width / a, 3);
        if (this._swipeOffsetX > this._width) {
          this._swipeOffsetX = this._width;
        } else {
          if (this._swipeOffsetX < -this._width) {
            /** @type {number} */
            this._swipeOffsetX = -this._width;
          }
        }
        this._prevLocalPoint.x = target.x;
        this._prevLocalPoint.y = target.y;
        this.dispatch(new PinEvent(PinEvent.SWIPE));
      }
    }, View.prototype.onSwipeRelease = function() {
      var scrollview = this;
      if (this._isSwiping) {
        if (this._swipeOffsetX < 0.33 * -this._width) {
          this.onNext();
        } else {
          if (this._swipeOffsetX > 0.33 * this._width) {
            this.onPrev();
          } else {
            if (0 !== this._swipeOffsetX) {
              this._enablerTask = this._enablerParentTask.startHandler(function(view) {
                return scrollview.enableHandler(view);
              });
              this.dispatch(new PinEvent(PinEvent.SWIPE_CANCEL));
            }
          }
        }
        /** @type {boolean} */
        this._isSwiping = false;
        /** @type {number} */
        this._swipeOffsetX = 0;
      }
    }, View.prototype.onNavClick = function(id) {
      if (id !== this._activePageIdx) {
        this._prevPageIdx = this._activePageIdx;
        /** @type {number} */
        this._activePageIdx = id;
        this.navigate();
      }
    }, View.prototype.deactivate = function() {
      if (this._autoScrollCtx) {
        exports.Context.complete(this._autoScrollCtx);
      }
    }, View.prototype.autoScrollHandler = function() {
      if (!this._isSwiping) {
        this.onNext();
      }
      this.startAutoScrollDelay();
    }, View.prototype.startAutoScrollDelay = function() {
      var t = this;
      if (this._autoScrollCtx) {
        exports.Context.complete(this._autoScrollCtx);
      }
      this._autoScrollCtx = exports.Context.newContext(null, null, null);
      exports.SystemManager.getScheduler().wait(this._autoScrollDelay, null, function() {
        return t.autoScrollHandler();
      }, this._autoScrollCtx);
    }, View.prototype.navigate = function() {
      var scrollview = this;
      this.clearEnablerTask();
      this._enablerTask = this._enablerParentTask.startHandler(function(view) {
        return scrollview.enableHandler(view);
      });
      this.dispatch(new TimerEvent(TimerEvent.NAV));
      this.startAutoScrollDelay();
    }, View.prototype.enableHandler = function(req) {
      if (req.state > 0) {
        this.clearEnablerTask();
      }
    }, View.prototype.clearEnablerTask = function() {
      if (this._enablerTask) {
        this._enablerTask.complete();
        /** @type {null} */
        this._enablerTask = null;
      }
    }, View;
  }(exports.EventDispatcher);
  var MenuItem = function() {
    /**
     * @param {!Object} callback
     * @param {!Object} options
     * @return {undefined}
     */
    function Camera(callback, options) {
      /** @type {!Object} */
      this._transform = callback;
      /** @type {!Object} */
      this._display = options;
      this._transform.setX(0);
    }
    return Object.defineProperty(Camera.prototype, "transform", {
      get : function() {
        return this._transform;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Camera.prototype, "display", {
      get : function() {
        return this._display;
      },
      enumerable : true,
      configurable : true
    }), Camera;
  }();
  var Component = function() {
    /**
     * @param {undefined} o
     * @param {number} e
     * @param {number} width
     * @return {undefined}
     */
    function Node(o, e, width) {
      /** @type {!Array} */
      this._itemViews = [];
      /** @type {number} */
      var x = 0;
      for (; x < e; x++) {
        this._itemViews.push(this.createItem(o, x));
      }
      /** @type {number} */
      this._width = width;
      /** @type {number} */
      this._dirX = 0;
      /** @type {number} */
      this._transitionFactor = 0.1;
    }
    return Node.prototype.onSwiping = function(t, line, width) {
      this.setDirForward(width > 0);
      /** @type {number} */
      var z = 0;
      var labelChildNodes = this._itemViews;
      for (; z < labelChildNodes.length; z++) {
        var self = labelChildNodes[z];
        var s = this._itemViews.indexOf(self);
        if (s === line) {
          self.transform.setX(width);
          self.display.setAlpha(1 - Math.abs(width / this._width));
        } else {
          if (s === t) {
            self.transform.setX(-this._dirX * this._width + width);
            self.display.setAlpha(0 + Math.abs(width / this._width));
          } else {
            self.display.setAlpha(0);
          }
        }
      }
      this.clearEnablerTask();
    }, Node.prototype.onSwipeCancel = function(n, r, args) {
      var subDiagonal = this;
      /** @type {number} */
      this._dirX = -this._dirX;
      this.onAnimStart(n, r);
      this._enablerTask = args.startHandler();
      exports.SystemManager.getScheduler().addUpdateListener(function() {
        return subDiagonal.onAnimUpdate(n, r);
      }, this._enablerTask.ctx);
    }, Node.prototype.createItem = function(p, item) {
      var id = item + 1;
      return new MenuItem(p.getTransform("page" + id), p.getDisplay("page" + id));
    }, Node.prototype.init = function(b) {
      /** @type {number} */
      var i = 0;
      for (; i < this._itemViews.length; i++) {
        this._itemViews[i].display.setAlpha(i === b ? 1 : 0);
        this._itemViews[i].transform.setX(0);
      }
    }, Node.prototype.navigate = function(target, item, args) {
      var RPGUI = this;
      if (target === item) {
        this.onAnimComplete(item);
      } else {
        this.onAnimStart(target, item);
        this._enablerTask = args.startHandler(null);
        exports.SystemManager.getScheduler().addUpdateListener(function() {
          return RPGUI.onAnimUpdate(target, item);
        }, this._enablerTask.ctx);
      }
    }, Node.prototype.setDirForward = function(isIron) {
      /** @type {number} */
      this._dirX = isIron ? 1 : -1;
    }, Node.prototype.onAnimUpdate = function(y, x) {
      if (this._enablerTask) {
        var width;
        var val;
        /** @type {number} */
        var offset = this._dirX * this._width;
        /** @type {number} */
        var z = 0;
        var labelChildNodes = this._itemViews;
        for (; z < labelChildNodes.length; z++) {
          var self = labelChildNodes[z];
          var val = this._itemViews.indexOf(self);
          if (val === y) {
            width = self.transform.getX();
            width = width + (offset - width) * this._transitionFactor;
            self.transform.setX(width);
            val = self.display.getAlpha();
            val = val + (0 - val) * this._transitionFactor;
            self.display.setAlpha(val);
          } else {
            if (val === x) {
              width = self.transform.getX();
              width = width + (0 - width) * this._transitionFactor;
              self.transform.setX(width);
              val = self.display.getAlpha();
              val = val + (1 - val) * this._transitionFactor;
              self.display.setAlpha(val);
            } else {
              self.display.setAlpha(0);
            }
          }
        }
        if (Math.abs(width) < 1) {
          this.onAnimComplete(x);
        }
      }
    }, Node.prototype.onAnimStart = function(i, time) {
      if (0 === this._dirX) {
        this.setDirForward(i >= time);
      }
      var lineLength = this._itemViews[i].transform.getX();
      this._itemViews[time].transform.setX(-this._dirX * this._width + lineLength);
    }, Node.prototype.onAnimComplete = function(t) {
      /** @type {number} */
      var i = 0;
      for (; i < this._itemViews.length; i++) {
        this._itemViews[i].transform.setX(i === t ? 0 : -this._width);
        this._itemViews[i].display.setAlpha(i === t ? 1 : 0);
      }
      /** @type {number} */
      this._dirX = 0;
      this.clearEnablerTask();
    }, Node.prototype.clearEnablerTask = function() {
      if (this._enablerTask) {
        this._enablerTask.complete();
        /** @type {null} */
        this._enablerTask = null;
      }
    }, Node;
  }();
  var Pt = function() {
    /**
     * @param {undefined} name
     * @param {undefined} args
     * @param {undefined} opts
     * @return {undefined}
     */
    function constructor(name, args, opts) {
      var route = this.createView(name, args, opts);
      var options = this.createUiView(name, args);
      var result = this.createModel(args, opts);
      this._controller = this.createController(route, options, result);
    }
    return Object.defineProperty(constructor.prototype, "controller", {
      get : function() {
        return this._controller;
      },
      enumerable : true,
      configurable : true
    }), constructor.prototype.createModel = function(args, name) {
      return new Model(args, name);
    }, constructor.prototype.createView = function(object, name, props) {
      return new Component(object, name, props);
    }, constructor.prototype.createUiView = function(config, params) {
      return new DataArray(config, params, true);
    }, constructor.prototype.createController = function(name, options, config) {
      return new Compiler(name, options, config);
    }, constructor;
  }();
  var combiFunc = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Dt = function(t) {
    /**
     * @return {?}
     */
    function Selector() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return combiFunc(Selector, t), Selector.NEXT = "carousel_next", Selector.PREV = "carousel_prev", Selector;
  }(exports.MegatonEvent);
  var playReversibleAnimation = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var xt = function(t) {
    /**
     * @param {?} cb
     * @param {number} n
     * @return {?}
     */
    function a(cb, n) {
      if (void 0 === n) {
        /** @type {number} */
        n = 0;
      }
      var ct = t.call(this, cb) || this;
      return ct._dX = n, ct;
    }
    return playReversibleAnimation(a, t), Object.defineProperty(a.prototype, "dX", {
      get : function() {
        return this._dX;
      },
      enumerable : true,
      configurable : true
    }), a.SWIPE_START = "carousel_start", a.SWIPING = "carousel_swiping", a.SWIPE_RELEASE = "carousel_release", a;
  }(exports.MegatonEvent);
  var makeUnique = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ht = function(s) {
    /**
     * @param {number} now
     * @return {?}
     */
    function set(now) {
      var data = s.call(this, set.UPDATETIME) || this;
      /** @type {number} */
      data._time = now;
      var nr = now.getMinutes();
      var border_width = now.getHours();
      /** @type {string} */
      var filename = String(100 + nr).substr(1);
      /** @type {string} */
      var tmp_flow_path = String(100 + border_width).substr(1);
      return data._formattedTime = tmp_flow_path + ":" + filename, data;
    }
    return makeUnique(set, s), Object.defineProperty(set.prototype, "time", {
      get : function() {
        return this._time;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "formattedTime", {
      get : function() {
        return this._formattedTime;
      },
      enumerable : true,
      configurable : true
    }), set.UPDATETIME = "UPDATETIME", set;
  }(exports.MegatonEvent);
  var getTile = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Ut = function(cb) {
    /**
     * @return {?}
     */
    function url() {
      return null !== cb && cb.apply(this, arguments) || this;
    }
    return getTile(url, cb), url.CREATE_DETAILS_WINDOW = "GAME_HISTORY_CREATE_DETAILS_WINDOW", url.CLOSE_DETAILS_WINDOW = "GAME_HISTORY_CLOSE_DETAILS_WINDOW", url;
  }(exports.MegatonEvent);
  !function(data) {
    /** @type {string} */
    data[data.MESSAGE = 0] = "MESSAGE";
    /** @type {string} */
    data[data.WIN = 1] = "WIN";
    /** @type {string} */
    data[data.WIN_NO_COUNT = 2] = "WIN_NO_COUNT";
    /** @type {string} */
    data[data.SUMMARY = 3] = "SUMMARY";
    /** @type {string} */
    data[data.BIG_SUMMARY = 18] = "BIG_SUMMARY";
  }(A || (A = {}));
  var Ft;
  !function(exports) {
    /**
     * @param {string} t
     * @param {number} set
     * @param {?} index
     * @return {undefined}
     */
    function renderWaveLane(t, set, index) {
      if (t && set && 0 !== set.length) {
        if (index) {
          /** @type {number} */
          set.length = Math.min(set.length, index);
        }
        /** @type {number} */
        var i = 0;
        for (; i < set.length; i++) {
          if (set[i]) {
            t(i);
          }
        }
      }
    }
    /**
     * @param {string} n
     * @param {string} d
     * @return {undefined}
     */
    function n(n, d) {
      if (n && d && 0 !== d.length) {
        /** @type {number} */
        var layer_i = 0;
        /** @type {string} */
        var crossfilterable_layers = d;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          var number_of_updates = crossfilterable_layers[layer_i];
          n(number_of_updates);
        }
      }
    }
    /**
     * @param {?} value
     * @param {!Array} ranges
     * @param {!Array} indent
     * @return {?}
     */
    function render(value, ranges, indent) {
      if (void 0 === indent) {
        /** @type {boolean} */
        indent = false;
      }
      if (indent) {
        ranges.sort();
      }
      /** @type {number} */
      var i = 0;
      if (ranges) {
        for (; i < ranges.length && value >= ranges[i];) {
          i++;
        }
      }
      return i;
    }
    /**
     * @param {!NodeList} f
     * @return {?}
     */
    function o(f) {
      /** @type {!Array} */
      var o = [];
      /** @type {number} */
      var i = -1;
      for (; ++i < f.length;) {
        if ("number" == typeof f[i]) {
          o.push(f[i]);
        }
      }
      return o;
    }
    /**
     * @param {number} i
     * @param {?} array
     * @return {?}
     */
    function rotate(i, array) {
      return void 0 === array && (array = false), array ? function(b, a) {
        return b[i] < a[i] ? -1 : b[i] > a[i] ? 1 : 0;
      } : function(b, a) {
        return b[i] > a[i] ? -1 : b[i] < a[i] ? 1 : 0;
      };
    }
    /**
     * @param {(boolean|number|string)} _callbacks
     * @param {(boolean|number|string)} data_defaults
     * @return {?}
     */
    function edit_device(_callbacks, data_defaults) {
      return _callbacks - data_defaults;
    }
    /**
     * @param {(boolean|number|string)} s
     * @param {(boolean|number|string)} t
     * @return {?}
     */
    function MIXIN$0(s, t) {
      return t - s;
    }
    /**
     * @param {string} items
     * @param {number} count
     * @return {?}
     */
    function shuffle(items, count) {
      if (void 0 === count) {
        /** @type {boolean} */
        count = true;
      }
      var arr = count ? items : items.concat();
      /** @type {number} */
      var i = arr.length - 1;
      for (; i > 0; i--) {
        /** @type {number} */
        var rnd = Math.floor(Math.random() * (i + 1));
        var tmp = arr[i];
        arr[i] = arr[rnd];
        arr[rnd] = tmp;
      }
      return arr;
    }
    /**
     * @param {string} text
     * @param {number} n
     * @return {?}
     */
    function r(text, n) {
      /** @type {number} */
      n = n * -1;
      for (; n < 0;) {
        n = n + text.length;
      }
      for (; n > text.length;) {
        /** @type {number} */
        n = n - text.length;
      }
      return text.slice(n, this.length).concat(text.slice(0, n));
    }
    /**
     * @param {!Array} swimlanes
     * @return {?}
     */
    function getAffectsFilters(swimlanes) {
      return swimlanes.filter(function(sceneUid, canCreateDiscussions, scenes) {
        return scenes.indexOf(sceneUid) === canCreateDiscussions;
      });
    }
    /**
     * @param {!Array} e
     * @param {!Array} s
     * @return {?}
     */
    function h(e, s) {
      return e.filter(function(t) {
        return -1 === s.indexOf(t);
      })[0];
    }
    /** @type {function(string, number, ?): undefined} */
    exports.doOnEachIfTrue = renderWaveLane;
    /** @type {function(string, string): undefined} */
    exports.doOnEach = n;
    /** @type {function(?, !Array, !Array): ?} */
    exports.getUpperBoundIdx = render;
    /** @type {function(!NodeList): ?} */
    exports.getOnlyNums = o;
    /** @type {function(number, ?): ?} */
    exports.sortByKey = rotate;
    /** @type {function((boolean|number|string), (boolean|number|string)): ?} */
    exports.sortNumAscend = edit_device;
    /** @type {function((boolean|number|string), (boolean|number|string)): ?} */
    exports.sortNumDescend = MIXIN$0;
    /** @type {function(string, number): ?} */
    exports.shuffle = shuffle;
    /** @type {function(string, number): ?} */
    exports.rotate = r;
    /** @type {function(!Array): ?} */
    exports.getUnique = getAffectsFilters;
    /** @type {function(!Array, !Array): ?} */
    exports.getFirstAllowed = h;
  }(Ft || (Ft = {}));
  var kt;
  var equal = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var magnifier = function() {
    /**
     * @param {boolean} e
     * @param {number} context
     * @param {number} q
     * @return {undefined}
     */
    function $(e, context, q) {
      if (void 0 === context) {
        /** @type {number} */
        context = 16777215;
      }
      if (void 0 === q) {
        /** @type {number} */
        q = 13421772;
      }
      /** @type {boolean} */
      this._fadable = e;
      /** @type {number} */
      this._defaultVal = context;
      /** @type {number} */
      this._fadedVal = q;
      /** @type {boolean} */
      this._faded = false;
      this._boundInterpolationHandler = this.interpolationHandler.bind(this);
    }
    return Object.defineProperty($.prototype, "faded", {
      get : function() {
        return this._faded;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "value", {
      get : function() {
        if (this._fadable.display) {
          var v = this._fadable.display.getColor();
          if ("number" == typeof v) {
            return v;
          }
        }
        return this._faded ? this._fadedVal : this._defaultVal;
      },
      set : function(newValue) {
        if (this._fadable.display) {
          this._fadable.display.setColor(newValue);
        }
      },
      enumerable : true,
      configurable : true
    }), $.prototype.fade = function(endOpacity) {
      if (this._task) {
        this._task.kill();
        this._task = void 0;
      }
      /** @type {boolean} */
      this._faded = endOpacity;
      this._targetVal = this._faded ? this._fadedVal : this._defaultVal;
      this._fromVal = this.value;
      /** @type {number} */
      this._progress = 0;
      var model = exports.SystemManager.getScheduler();
      return this._task = exports.Task.createHandler(null), model.addUpdateListener(this._boundInterpolationHandler, this._task.ctx), this._task;
    }, $.prototype.setFaded = function(canCreateDiscussions) {
      if (this._task) {
        this._task.kill();
        this._task = void 0;
      }
      this._targetVal = canCreateDiscussions ? this._fadedVal : this._defaultVal;
      this.value = this._targetVal;
    }, $.prototype.interpolationHandler = function(name, elem) {
      this._progress += 0.3 * (1 - this._progress);
      this.value = this.interpolateColor(this._fromVal, this._targetVal, this._progress);
      if (this._progress > 0.95) {
        this.value = this._targetVal;
        if (this._task) {
          this._task.complete();
          this._task = void 0;
        }
      }
    }, $.prototype.interpolateColor = function(pointB, f, j) {
      /** @type {number} */
      var i = 1 - j;
      return (pointB >> 16 & 255) * i + (f >> 16 & 255) * j << 16 | (pointB >> 8 & 255) * i + (f >> 8 & 255) * j << 8 | (255 & pointB) * i + (255 & f) * j;
    }, $;
  }();
  var $magnifier = function(Constructor) {
    /**
     * @param {!Array} options
     * @param {number} opt_ctx
     * @param {number} var_args
     * @return {?}
     */
    function map(options, opt_ctx, var_args) {
      return void 0 === options && (options = null), void 0 === opt_ctx && (opt_ctx = 1), void 0 === var_args && (var_args = 0), Constructor.call(this, options, opt_ctx, var_args) || this;
    }
    return equal(map, Constructor), Object.defineProperty(map.prototype, "value", {
      get : function() {
        return this._fadable.display.getAlpha();
      },
      set : function(val) {
        this._fadable.display.setAlpha(val);
      },
      enumerable : true,
      configurable : true
    }), map.prototype.interpolationHandler = function(name, elem) {
      this._progress += 0.3 * (1 - this._progress);
      this.value = this._fromVal + (this._targetVal - this._fromVal) * this._progress;
      if (this._progress > 0.95) {
        this.value = this._targetVal;
        if (this._task) {
          this._task.complete();
          this._task = void 0;
        }
      }
    }, map;
  }(magnifier);
  var walk = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Jt = function(f) {
    /**
     * @param {?} self
     * @param {string} key
     * @param {!Object} type
     * @param {number} name
     * @param {number} value
     * @return {?}
     */
    function init(self, key, type, name, value) {
      if (void 0 === name) {
        /** @type {number} */
        name = 0;
      }
      if (void 0 === value) {
        /** @type {string} */
        value = "";
      }
      var _this = f.call(this) || this;
      _this._centerGeometry = value ? self.getGeometry(key + "." + value) : null;
      _this._containerTransform = self.getTransform(key);
      /** @type {!Array} */
      _this._elements = [];
      /** @type {number} */
      _this._gap = name;
      /** @type {number} */
      var v = 0;
      /** @type {!Object} */
      var t = type;
      for (; v < t.length; v++) {
        var k = t[v];
        var field = k.split(".")[0];
        _this._elements.push({
          name : k,
          transform : self.getTransform(key + "." + field),
          childGeometry : self.getGeometry(key + "." + k),
          display : self.getDisplay(key + "." + field),
          enabled : true,
          width : 0
        });
      }
      return _this;
    }
    return walk(init, f), init.prototype.update = function() {
      this.onUpdate();
    }, init.prototype.enableElement = function(el, e) {
      /** @type {number} */
      var i = 0;
      var elements = this._elements;
      for (; i < elements.length; i++) {
        var item = elements[i];
        if (item.name === el) {
          /** @type {number} */
          item.enabled = e;
          item.display.setVisible(e);
          break;
        }
      }
    }, init.prototype.onUpdate = function() {
      var x = new svg.Point(0, 0);
      var max = this._containerTransform.localToGlobal(x).x;
      x.x = this._gap;
      /** @type {number} */
      var n = this._containerTransform.localToGlobal(x).x - max;
      if (this._centerGeometry) {
        var targetShapeBounds = this._centerGeometry.getBoundingBox(null);
        max = targetShapeBounds.left + targetShapeBounds.width / 2;
      }
      /** @type {number} */
      var h = 0;
      /** @type {number} */
      var z = 0;
      var labelChildNodes = this._elements;
      for (; z < labelChildNodes.length; z++) {
        var self = labelChildNodes[z];
        if (self.enabled) {
          var info = self.childGeometry.getBoundingBox(null);
          var i = info && info.width ? info.width : 0;
          self.width = i;
          h = h + (i + n);
        }
      }
      /** @type {number} */
      h = h - n;
      /** @type {number} */
      var resource = -h / 2;
      /** @type {number} */
      var i = 0;
      var parts = this._elements;
      for (; i < parts.length; i++) {
        self = parts[i];
        if (self.enabled) {
          x.x = max + resource + 0.5 * self.width;
          x = this._containerTransform.globalToLocal(x);
          self.transform.setX(x.x);
          resource = resource + (self.width + n);
        }
      }
    }, init;
  }(exports.BaseAnimator);
  var Kt = function() {
    /**
     * @param {number} x
     * @param {number} y
     * @return {undefined}
     */
    function Vector2d(x, y) {
      /** @type {string} */
      this._type = "Vector2D";
      this.X = x || 0;
      this.Y = y || 0;
    }
    return Vector2d.prototype.Angle = function() {
      return Math.atan2(this.Y, this.X);
    }, Vector2d.prototype.Rotate = function(a) {
      /** @type {number} */
      var scalar = Math.cos(a);
      /** @type {number} */
      var val = Math.sin(a);
      return new Vector2d(this.X * scalar - this.Y * val, this.X * val + this.Y * scalar);
    }, Vector2d.prototype.Reflect = function(normal) {
      var normalUnit = normal.Clone().Normalize();
      /** @type {number} */
      var num = 2 * this.Dot(normalUnit);
      return new Vector2d(this.X - num * normalUnit.X, this.Y - num * normalUnit.Y);
    }, Vector2d.prototype.ProjectOnto = function(vector) {
      return vector.ScalarMultiply(this.Dot(vector) / vector.Dot(vector));
    }, Vector2d.prototype.Apply = function(action) {
      this.X = action(this.X);
      this.Y = action(this.Y);
    }, Vector2d.prototype.Normalize = function() {
      var len = this.Length();
      return this.X /= len, this.Y /= len, this;
    }, Vector2d.prototype.LengthSQ = function() {
      return this.X * this.X + this.Y * this.Y;
    }, Vector2d.prototype.Length = function() {
      return Math.sqrt(this.X * this.X + this.Y * this.Y);
    }, Vector2d.prototype.Dot = function(vector) {
      return vector.X * this.X + vector.Y * this.Y;
    }, Vector2d.prototype.Distance = function(vector) {
      return Math.sqrt((vector.X - this.X) * (vector.X - this.X) + (vector.Y - this.Y) * (vector.Y - this.Y));
    }, Vector2d.prototype.SQDistance = function(fireball) {
      return (fireball.X - this.X) * (fireball.X - this.X) + (fireball.Y - this.Y) * (fireball.Y - this.Y);
    }, Vector2d.prototype.Add = function(other) {
      return this.X += other.X, this.Y += other.Y, this;
    }, Vector2d.prototype.Multiply = function(value) {
      return this.X *= value.X, this.Y *= value.Y, this;
    }, Vector2d.prototype.ScalarMultiply = function(scalar) {
      return this.X *= scalar, this.Y *= scalar, this;
    }, Vector2d.prototype.Subtract = function(other) {
      return this.X -= other.X, this.Y -= other.Y, this;
    }, Vector2d.prototype.Divide = function(value) {
      return this.X /= value.X, this.Y /= value.Y, this;
    }, Vector2d.prototype.Negate = function() {
      return this.X *= -1, this.Y *= -1, this;
    }, Vector2d.prototype.Equivalent = function(vector) {
      return this.X === vector.X && this.Y === vector.Y;
    }, Vector2d.prototype.Clone = function() {
      return new Vector2d(this.X, this.Y);
    }, Vector2d.prototype.toString = function() {
      return "(" + this.X + ", " + this.Y + ")";
    }, Vector2d.prototype.truncate = function(n) {
      var len = this.Length();
      return len > n && (this.X = this.X / len * n, this.Y = this.Y / len * n), this;
    }, Vector2d;
  }();
  var zt = function() {
    /**
     * @param {number} val
     * @param {?} inverse
     * @param {?} type
     * @return {undefined}
     */
    function block(val, inverse, type) {
      /** @type {number} */
      this._layer = val;
      this._linkageName = inverse;
      this._instanceName = type;
      var directory_epub = svg.ResourceManager.getInstance().getEntityManager();
      this._instance = directory_epub.create(this._linkageName);
      this._layer.add(this._instanceName, this._instance);
      this.getComponents();
    }
    return block.prototype.setHierarchy = function(hierarchy) {
      this._layer.remove(this._instanceName);
      /** @type {number} */
      this._layer = hierarchy;
      this._layer.add(this._instanceName, this._instance);
    }, block.prototype.addToTop = function() {
      this._layer.remove(this._instanceName);
      this._layer.add(this._instanceName, this._instance);
    }, block.prototype.setVisible = function(value) {
      this._display.setVisible(value);
    }, block.prototype.setPosition = function(data, elem) {
      this._transform.setX(data);
      this._transform.setY(elem);
    }, block.prototype.setScale = function(scaleX, scaleY) {
      this._transform.setScaleX(scaleX);
      this._transform.setScaleY(scaleY);
    }, block.prototype.getComponents = function() {
      this._transform = this._instance.getTransform(".");
      this._display = this._instance.getDisplay(".");
    }, block;
  }();
  var getData = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var RFIDEvent = function(callback) {
    /**
     * @return {?}
     */
    function Type() {
      return null !== callback && callback.apply(this, arguments) || this;
    }
    return getData(Type, callback), Type.START = "WCE_START", Type.STOP = "WCE_STOP", Type.TICK = "WCE_TICK", Type;
  }(exports.MegatonEvent);
  var Zt = function(callback) {
    /**
     * @return {?}
     */
    function Event() {
      return null !== callback && callback.apply(this, arguments) || this;
    }
    return getData(Event, callback), Event.SHOW = "WCE_SHOW", Event.HIDE = "WCE_HIDE", Event.RESET = "WCE_RESET", Event.RESET_SCALES = "WCE_RESET_SCALES", Event;
  }(exports.MegatonEvent);
  var $t = function(callback) {
    /**
     * @param {?} rect
     * @param {string} data
     * @return {?}
     */
    function result(rect, data) {
      var imageData = callback.call(this, rect) || this;
      return imageData._scales = data, imageData;
    }
    return getData(result, callback), Object.defineProperty(result.prototype, "scales", {
      get : function() {
        return this._scales;
      },
      enumerable : true,
      configurable : true
    }), result.SET_SCALES = "WCE_SET_SCALES", result;
  }(exports.MegatonEvent);
  var strToElem = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ee = function(str) {
    /**
     * @return {?}
     */
    function $() {
      var self = str.call(this) || this;
      return self._ctx = null, self._value = 0, self._extValue = 0, self._maxValue = 0, self;
    }
    return strToElem($, str), Object.defineProperty($.prototype, "value", {
      get : function() {
        return (this._maxValue > 0 && this._value > this._maxValue ? this._maxValue : this._value) + this._extValue;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty($.prototype, "isCapped", {
      get : function() {
        return this._maxValue > 0 && this._value >= this._maxValue;
      },
      enumerable : true,
      configurable : true
    }), $.prototype.setMaxValue = function(max) {
      this._maxValue = max;
    }, $.prototype.cap = function(name) {
      return this._maxValue > 0 && name + this._value > this._maxValue ? Math.max(this._maxValue - this._value, 0) : name;
    }, $.prototype.reset = function() {
      this.setValue(0, 0, false, 0);
    }, $.prototype.setValue = function(o, value, x, add) {
      if (void 0 === x) {
        /** @type {boolean} */
        x = true;
      }
      if (void 0 === add) {
        /** @type {number} */
        add = 0;
      }
      if (value > 0) {
        this.start();
      }
      this._startTime = exports.SystemManager.getScheduler().getTime();
      this._stopTime = this._startTime + value;
      this._startValue = this._value;
      this._startExtValue = this._extValue;
      /** @type {number} */
      this._stopValue = o;
      /** @type {number} */
      this._stopExtValue = add;
      this.update(x);
    }, $.prototype.addValue = function(index, value, key) {
      if (void 0 === key) {
        /** @type {number} */
        key = 0;
      }
      this.setValue(index + this._stopValue, value, true, key + this._stopExtValue);
    }, $.prototype.stop = function() {
      if (this.isRunning()) {
        if (this._value !== this._stopValue || this._extValue !== this._stopExtValue) {
          return this._stopTime = exports.SystemManager.getScheduler().getTime(), void this.update();
        }
        exports.Context.complete(this._ctx);
        /** @type {null} */
        this._ctx = null;
        this.dispatch(new RFIDEvent(RFIDEvent.STOP));
      }
    }, $.prototype.update = function(tx) {
      if (void 0 === tx) {
        /** @type {boolean} */
        tx = true;
      }
      /** @type {number} */
      var duration = this._stopTime - this._startTime;
      /** @type {number} */
      var n = duration > 0 ? (exports.SystemManager.getScheduler().getTime() - this._startTime) / duration : 1;
      if (n > 1) {
        /** @type {number} */
        n = 1;
      }
      /** @type {number} */
      this._value = this._startValue * (1 - n) + this._stopValue * n;
      /** @type {number} */
      this._extValue = this._startExtValue * (1 - n) + this._stopExtValue * n;
      this.updateValue(this.value);
      if (tx) {
        this.notify();
      }
      if (1 === n) {
        this.stop();
      }
    }, $.prototype.updateValue = function(oldValue) {
      return oldValue;
    }, $.prototype.start = function() {
      var Responsive = this;
      if (!this.isRunning()) {
        this._ctx = exports.Context.newContext(null, null, null);
        exports.SystemManager.getScheduler().addUpdateListener(function() {
          return Responsive.onTimer();
        }, this._ctx);
        this.dispatch(new RFIDEvent(RFIDEvent.START));
      }
    }, $.prototype.isRunning = function() {
      return null != this._ctx;
    }, $.prototype.onTimer = function() {
      this.update();
      this.dispatch(new RFIDEvent(RFIDEvent.TICK));
    }, $;
  }(exports.Model);
  var ne = function() {
    /**
     * @return {undefined}
     */
    function WorkerDomAdapter() {
      this._winCounter = this.createWinCounter();
    }
    return Object.defineProperty(WorkerDomAdapter.prototype, "winCounter", {
      get : function() {
        return this._winCounter;
      },
      enumerable : true,
      configurable : true
    }), WorkerDomAdapter.prototype.createWinCounter = function() {
      return new ee;
    }, WorkerDomAdapter;
  }();
  var AddChar = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Login = function(output) {
    /**
     * @param {!HTMLElement} t
     * @param {?} agent
     * @return {?}
     */
    function step(t, agent) {
      var self = output.call(this, t) || this;
      return self._started = false, self._roundHandler = agent, t.addEventListener(svg.RoundEvent.BALANCETYPECHANGE, function(person) {
        return self.balanceTypeChange(person);
      }), t.addEventListener(svg.BonusBalanceMessageResponseEvent.OK, function(elements) {
        return self.modalResponseHandler(elements);
      }), self;
    }
    return AddChar(step, output), step.prototype.balanceTypeChange = function(type) {
      /** @type {string} */
      var e = type.nextBalanceMoneyType === svg.BonusBalanceEventType.BONUS ? "IDS_M_BALANCEMONEYTYPE_BONUS_TEXT" : "IDS_M_BALANCEMONEYTYPE_REAL_TEXT";
      this._dispatcher.dispatch(new svg.BonusBalanceMessageEvent(svg.BonusBalanceMessageEvent.BONUSBALANCEMESSAGE, svg.MessageEventFlag.OK | svg.MessageEventFlag.NOCANCEL, type.nextBalanceMoneyType, "IDS_CMN_INFORMATION", e));
    }, step.prototype.modalResponseHandler = function(a) {
      this._roundHandler.updateBalanceMode();
    }, step;
  }(exports.EventProcessor);
  var re = function() {
    /**
     * @param {?} $rootScope
     * @param {?} $state
     * @return {undefined}
     */
    function CurrentLobbyController($rootScope, $state) {
      this.createBonusBalanceHandler($rootScope, $state);
    }
    return CurrentLobbyController.prototype.createBonusBalanceHandler = function($rootScope, $state) {
      return new Login($rootScope, $state);
    }, CurrentLobbyController;
  }();
  var load = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Media = function(module) {
    /**
     * @param {number} e
     * @param {string} g
     * @param {string} value
     * @return {?}
     */
    function Color(e, g, value) {
      var self = module.call(this) || this;
      return self._id = e, self._name = g, self._position = value, self._ctx = null, self._currentAmount = 0, self._recvTime = 0, self;
    }
    return load(Color, module), Object.defineProperty(Color.prototype, "id", {
      get : function() {
        return this._id;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Color.prototype, "name", {
      get : function() {
        return this._name;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Color.prototype, "currentAmount", {
      get : function() {
        return this._jpWinAmount > 0 ? this._jpWinAmount : this._currentAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Color.prototype, "jackpotWinAmount", {
      get : function() {
        return this._jpWinAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Color.prototype, "position", {
      get : function() {
        return this._position;
      },
      enumerable : true,
      configurable : true
    }), Color.prototype.setJackpotWin = function(canCreateDiscussions) {
      this._jpWinAmount = canCreateDiscussions;
    }, Color.prototype.resetJackpotWin = function() {
      /** @type {number} */
      this._jpWinAmount = 0;
    }, Color.prototype.enable = function(value) {
      var prevPageButtonSprite = this;
      if (null != this._ctx !== value) {
        if (value) {
          this._ctx = exports.Context.newContext(null, null, null);
          exports.SystemManager.getScheduler().addUpdateListener(function() {
            return prevPageButtonSprite.update();
          }, this._ctx);
        } else {
          exports.Context.complete(this._ctx);
          /** @type {null} */
          this._ctx = null;
        }
      }
    }, Color.prototype.setValues = function(data, index, type, url, d, a, b) {
      if ([data, index, type, url, d, a, b].filter(function(value) {
        return !Number.isFinite(value);
      }).length) {
        return false;
      }
      if (this._baseAmount = data, this._baseTime = index, this._shortAmount = type, this._shortTime = url, this._projectionAmount = d, this._projectionTime = a, this._elapsedTime = b, this._recvTime = exports.SystemManager.getScheduler().getTime() / 1000, 0 === this._currentAmount || this._currentAmount > this._shortAmount || this._currentAmount > this._projectionAmount) {
        /** @type {number} */
        this._baseAmount = data;
      } else {
        /** @type {number} */
        var u = (this._shortAmount - this._currentAmount) / (this._shortTime - this._elapsedTime);
        /** @type {number} */
        this._baseAmount = this._currentAmount - u * this._elapsedTime;
      }
      return true;
    }, Color.prototype.update = function() {
      if (Number.isFinite(this._baseAmount)) {
        var min = void 0;
        /** @type {number} */
        var e = exports.SystemManager.getScheduler().getTime() / 1000;
        var trigger = this._elapsedTime + (e - this._recvTime);
        /** @type {number} */
        var delta = trigger / this._shortTime;
        /** @type {number} */
        delta = Math.max(0, Math.floor(1000 * delta) / 1000);
        if (delta > 1) {
          /** @type {number} */
          trigger = this._elapsedTime + (e - this._recvTime) - this._shortTime;
          /** @type {number} */
          delta = trigger / (this._projectionTime - this._shortTime);
          /** @type {number} */
          delta = Math.floor(1000 * delta) / 1000;
          if (delta < 0) {
            /** @type {number} */
            delta = 0;
          } else {
            if (delta > 1) {
              /** @type {number} */
              delta = 1;
            }
          }
          /** @type {number} */
          min = Math.round(this.lerp(this._shortAmount, this._projectionAmount, delta));
        } else {
          /** @type {number} */
          min = Math.round(this.lerp(this._baseAmount, this._shortAmount, delta));
        }
        min = this._jpWinAmount > 0 && min > this._jpWinAmount ? this._jpWinAmount : min;
        if (this._currentAmount !== min) {
          this._currentAmount = min;
          this.notify();
        }
      }
    }, Color.prototype.lockJackpotWin = function(suppressDisabledCheck) {
      /** @type {number} */
      this._jpWinAmount = suppressDisabledCheck;
      this.notify();
    }, Color.prototype.unlock = function() {
      /** @type {number} */
      this._jpWinAmount = 0;
      /** @type {boolean} */
      this.isJackpotWon = false;
      this._currentAmount = this._baseAmount;
      this.notify();
    }, Color.prototype.lerp = function(minIn, maxIn, minOut) {
      var i = minIn + (maxIn - minIn) * minOut;
      return Math.round(1000 * i / 1000);
    }, Color;
  }(exports.Model);
  !function($sClass) {
    /** @type {string} */
    $sClass[$sClass.Mystery = 0] = "Mystery";
    /** @type {string} */
    $sClass[$sClass.InGame = 1] = "InGame";
  }(kt || (kt = {}));
  var e;
  var sgf_write_variantion = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var SelectionEvent = function(output) {
    /**
     * @param {?} f
     * @param {number} d
     * @param {?} color
     * @param {?} comment
     * @param {?} context
     * @param {?} input
     * @param {?} val
     * @param {number} type
     * @param {boolean} name
     * @param {?} data
     * @param {!Array} _
     * @return {?}
     */
    function c(f, d, color, comment, context, input, val, type, name, data, _) {
      var self = output.call(this, c.JACKPOTPROJECTION) || this;
      return self._jackpotId = f, self._baseAmount = d, self._baseTime = color, self._shortAmount = comment, self._shortTime = context, self._projectionAmount = input, self._projectionTime = val, self._elapsedTime = type, self._enabled = name, self._jackpotType = data, self._targetTime = _, self;
    }
    return sgf_write_variantion(c, output), Object.defineProperty(c.prototype, "jackpotId", {
      get : function() {
        return this._jackpotId;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "baseAmount", {
      get : function() {
        return this._baseAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "shortAmount", {
      get : function() {
        return this._shortAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "projectioAmount", {
      get : function() {
        return this._projectionAmount;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "baseTime", {
      get : function() {
        return this._baseTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "shortTime", {
      get : function() {
        return this._shortTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "projectionTime", {
      get : function() {
        return this._projectionTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "elapsedTime", {
      get : function() {
        return this._elapsedTime;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "enabled", {
      get : function() {
        return this._enabled;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "jackpotType", {
      get : function() {
        return this._jackpotType;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(c.prototype, "targetTime", {
      get : function() {
        return this._targetTime;
      },
      enumerable : true,
      configurable : true
    }), c.JACKPOTPROJECTION = "JACKPOTPROJECTION", c;
  }(exports.MegatonEvent);
  var compileAdditionOperator = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var $ = function(right) {
    /**
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function left(context, data) {
      var imageData = right.call(this, context) || this;
      return imageData._jackpotId = data, imageData;
    }
    return compileAdditionOperator(left, right), Object.defineProperty(left.prototype, "jackpotId", {
      get : function() {
        return this._jackpotId;
      },
      enumerable : true,
      configurable : true
    }), left.JACKPOT_WON = "JACKPOT_WON", left;
  }(exports.MegatonEvent);
  var clearSetEntry = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var MapView = function(entry) {
    /**
     * @param {!Object} o
     * @param {string} f
     * @param {!Object} e
     * @return {?}
     */
    function set(o, f, e) {
      var self = entry.call(this) || this;
      return self._config = o, self._dispatcher = f, self._params = e, self._enabled = false, self._hasReceivedProjection = false, self._targetTime = -1, self._remainingSeconds = -1, self._serverDeltaSeconds = 0, self._currentState = null, self._currentState = {
        title : self._params.title,
        prize : null,
        type : set.jackpotTypeToString(self._params.type)
      }, self._jackpotModel = new Media(e.id, self.params.title, null), self._jackpotModel.addListener(function(elements) {
        return self.onJackpotModel(elements);
      }), self._jackpotModel.enable(true), self._dispatcher.addEventListener(SelectionEvent.JACKPOTPROJECTION, function(t) {
        return self.onJackpotProjection(t);
      }), self._dispatcher.addEventListener($.JACKPOT_WON, function(newModelData) {
        return self.onJackpotWon(newModelData);
      }), self._params.type === svg.GuaranteedJackpotType.GuaranteedTime && (self._updateContext = exports.Context.newContext(null, null, null), exports.SystemManager.getScheduler().addUpdateListener(function() {
        return self.updateRemainingTime();
      }, self._updateContext)), self;
    }
    return clearSetEntry(set, entry), Object.defineProperty(set.prototype, "id", {
      get : function() {
        return this._params.id;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "params", {
      get : function() {
        return this._params;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "baseModel", {
      get : function() {
        return this._jackpotModel;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "isDemoPlay", {
      get : function() {
        /** @type {boolean} */
        var t = !!this._params.demoText;
        return this._config.demoPlay && t;
      },
      enumerable : true,
      configurable : true
    }), set.prototype.stopCountdown = function() {
      if (this._updateContext) {
        exports.Context.complete(this._updateContext);
        /** @type {null} */
        this._updateContext = null;
      }
    }, set.prototype.onJackpotProjection = function(options) {
      if (options.jackpotId === this._params.id && this._jackpotModel.setValues(options.baseAmount, options.baseTime, options.shortAmount, options.shortTime, options.projectioAmount, options.projectionTime, options.elapsedTime) && (this._hasReceivedProjection = true, this._enabled = options.enabled, this._params.type === svg.GuaranteedJackpotType.GuaranteedTime)) {
        try {
          /** @type {number} */
          this._targetTime = (new Date(options.targetTime)).getTime() / 1000;
          this.updateRemainingTime();
        } catch (t) {
          /** @type {boolean} */
          this._hasReceivedProjection = false;
        }
      }
    }, set.prototype.onJackpotWon = function(model) {
      if (this._jackpotModel.id === model.jackpotId) {
        /** @type {boolean} */
        this._jackpotModel.isJackpotWon = true;
        this.notify();
      }
    }, set.prototype.onJackpotModel = function(a) {
      if (this._jackpotModel.isJackpotWon && this._jackpotModel.jackpotWinAmount > 0) {
        this._currentState.prize = set.formatMonetaryAmount(this._jackpotModel.jackpotWinAmount);
      }
      this.notify();
    }, set.prototype.updateRemainingTime = function() {
      var _lastleft = Math.round(Date.now() / 1000) + this._serverDeltaSeconds;
      /** @type {number} */
      var e = Math.round(this._targetTime - _lastleft);
      if (!(e < 0 && this._remainingSeconds < 0)) {
        if (e !== this._remainingSeconds) {
          /** @type {number} */
          this._remainingSeconds = e;
          this.notify();
        }
      }
    }, set.prototype.updateServerTimeDelta = function(canCreateDiscussions) {
      if (canCreateDiscussions !== this._serverDeltaSeconds) {
        /** @type {number} */
        this._serverDeltaSeconds = canCreateDiscussions;
        if (this._params.type === svg.GuaranteedJackpotType.GuaranteedTime) {
          this.updateRemainingTime();
        }
      }
    }, set.formatMonetaryAmount = function(mmCoreSplitViewBlock) {
      return svg.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(mmCoreSplitViewBlock, svg.MoneyFormatterFlag.THOUSAND_SEPARATED | svg.MoneyFormatterFlag.FORCE_DECIMAL);
    }, Object.defineProperty(set.prototype, "viewState", {
      get : function() {
        return this._jackpotModel.isJackpotWon || this._jackpotModel.jackpotWinAmount > 0 || (this._currentState = this.isDemoPlay ? this.demoPlayViewState : this.realPlayViewState), this._currentState;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "demoPlayViewState", {
      get : function() {
        switch(this._params.type) {
          case svg.GuaranteedJackpotType.GuaranteedProgressive:
          case svg.GuaranteedJackpotType.GuaranteedTime:
            return {
              title : this._params.title,
              prize : this._params.demoText,
              type : set.jackpotTypeToString(this._params.type)
            };
          default:
            return null;
        }
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(set.prototype, "realPlayViewState", {
      get : function() {
        var t = svg.ResourceManager.getInstance().getMoneyFormatter();
        var TP_ICON_DISABLED = t.MoneyToString(0).replace(/[\d\.]+/, "--.--");
        var En = set.formatMonetaryAmount(this._jackpotModel.currentAmount);
        var enabled = this._enabled && Number.isFinite(this._jackpotModel.currentAmount);
        switch(this._params.type) {
          case svg.GuaranteedJackpotType.GuaranteedProgressive:
            return {
              title : this._params.title,
              prize : enabled ? En : TP_ICON_DISABLED,
              type : set.jackpotTypeToString(this._params.type)
            };
          case svg.GuaranteedJackpotType.GuaranteedTime:
            return this._hasReceivedProjection ? {
              title : this._params.title,
              prize : enabled ? En : null,
              type : set.jackpotTypeToString(this._params.type),
              label : this._enabled ? this._params.activeText : this._params.inactiveText,
              limit : this._remainingSeconds > -1 ? set.totalSecondsToHMS(this._remainingSeconds) : "--:--:--"
            } : {
              title : this._params.title,
              prize : TP_ICON_DISABLED,
              type : set.jackpotTypeToString(this._params.type)
            };
          default:
            return null;
        }
      },
      enumerable : true,
      configurable : true
    }), set.jackpotTypeToString = function(canCreateDiscussions) {
      switch(canCreateDiscussions) {
        case svg.GuaranteedJackpotType.GuaranteedProgressive:
          return "mystery";
        case svg.GuaranteedJackpotType.GuaranteedTime:
          return "daily";
        default:
          return "";
      }
    }, set.totalSecondsToHMS = function(length) {
      /**
       * @param {number} n
       * @return {?}
       */
      function e(n) {
        var expRecords = n.toString();
        return expRecords.length > 1 ? expRecords : "0" + expRecords;
      }
      /** @type {number} */
      var elName = Math.floor(length / 3600);
      /** @type {number} */
      var i = length % 3600;
      /** @type {number} */
      var B = Math.floor(i / 60);
      /** @type {number} */
      var n = i % 60;
      return e(elName) + ":" + e(B) + ":" + e(n);
    }, set;
  }(exports.Model);
  var findAnswerInLoadedAIMLFilesWrapper = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Date = function(cb) {
    /**
     * @param {?} image
     * @param {number} key
     * @param {string} value
     * @param {string} model
     * @param {?} display
     * @param {?} x
     * @param {?} a
     * @param {?} idx
     * @return {?}
     */
    function Event(image, key, value, model, display, x, a, idx) {
      var self = cb.call(this, image) || this;
      return self._idx = key, self._value = value, self._currency = model, self._gameName = display, self._jpName = a, self._jpType = x, self._prizeName = idx, self;
    }
    return findAnswerInLoadedAIMLFilesWrapper(Event, cb), Object.defineProperty(Event.prototype, "idx", {
      get : function() {
        return this._idx;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Event.prototype, "value", {
      get : function() {
        return this._value;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Event.prototype, "currency", {
      get : function() {
        return this._currency;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Event.prototype, "gameName", {
      get : function() {
        return this._gameName;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Event.prototype, "jpType", {
      get : function() {
        return this._jpType;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Event.prototype, "jpName", {
      get : function() {
        return this._jpName;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Event.prototype, "prizeName", {
      get : function() {
        return this._prizeName;
      },
      enumerable : true,
      configurable : true
    }), Event.NOTIFICATION = "JACKPOT_NOTIFICATION", Event.SHOW = "NOTIFICATION_SHOW", Event;
  }(exports.MegatonEvent);
  var className = function() {
    /**
     * @param {string} id
     * @param {string} name
     * @param {!Object} theWork
     * @return {undefined}
     */
    function Command(id, name, theWork) {
      var Array = this;
      /** @type {string} */
      this._id = id;
      /** @type {string} */
      this._name = name;
      /** @type {!Object} */
      this._entity = theWork;
      /** @type {boolean} */
      this._enabled = true;
      /** @type {boolean} */
      this._pastEnabled = this._enabled;
      this._display = this._entity.getDisplay("");
      this._amountText = this._entity.getTextField("jp_amount");
      this._amountDisplay = this._entity.getDisplay("jp_amount");
      this._hideAnim = this._entity.getAnimation(".");
      /** @type {number} */
      this._tweenDuration = 0;
      this._display.setAlpha(0);
      /** @type {number} */
      this._targetAlpha = 1;
      this._alphaTweener = new exports.GeneralTweener(this._tweenDuration, function(optExtraQueries) {
        return Array.onAlphaUpdate(optExtraQueries);
      });
    }
    return Command.prototype.onAlphaUpdate = function(optExtraQueries) {
      var e = this._targetAlpha ? optExtraQueries : this._display.getAlpha() - optExtraQueries;
      this._display.setAlpha(e < 0 ? 0 : e);
      if (optExtraQueries >= 1 && 0 === this._targetAlpha) {
        this._display.setVisible(false);
      }
    }, Command.prototype.setTweenDuration = function(canCreateDiscussions) {
      /** @type {string} */
      this._tweenDuration = canCreateDiscussions;
    }, Command.prototype.getEntity = function() {
      return this._entity;
    }, Command.prototype.getJackpotId = function() {
      return this._id;
    }, Command.prototype.getEnabled = function() {
      return this._enabled;
    }, Command.prototype.show = function(str) {
      if (!this._enabled && this._pastEnabled) {
        this._pastEnabled = this._enabled;
        this._hideAnim.play("highlight");
      } else {
        if (str) {
          this._display.setVisible(this._enabled);
        }
      }
      this._alphaTweener.setDuration(this._tweenDuration);
      /** @type {number} */
      this._targetAlpha = str ? 1 : 0;
      this._alphaTweener.start(null);
    }, Command.prototype.showWin = function(json) {
    }, Command.prototype.setValue = function(d) {
      this._amountText.setText(svg.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(d));
    }, Command.prototype.setEnabled = function(enabled) {
      this._pastEnabled = this._enabled;
      /** @type {boolean} */
      this._enabled = enabled;
    }, Command;
  }();
  var on = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  !function(canCreateDiscussions) {
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.MONETARY = 0] = "MONETARY";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.NON_MONETARY = 1] = "NON_MONETARY";
    /** @type {string} */
    canCreateDiscussions[canCreateDiscussions.DEMO = 2] = "DEMO";
  }(e || (e = {}));
  var constructor = function(test) {
    /**
     * @param {string} n
     * @param {?} v
     * @param {!Image} p
     * @param {number} win
     * @param {?} options
     * @param {string} key
     * @return {?}
     */
    function init(n, v, p, win, options, key) {
      var self = test.call(this, n, v, p) || this;
      return self._entity.getTextField("jp_name").setText(self._name), self._entity.getAnimation("jp_name_graphics").play("name" + n), self._entity.getAnimation("highlightBg").play("name" + n), self._prizeType = win, self._prizeName = options, self._blinkAnim = p.getAnimation("."), self._blinkAnim.play("stop"), self.setDemoText(key), self.setValue(0), self;
    }
    return on(init, test), init.prototype.showWin = function(a) {
      /** @type {boolean} */
      this._showWin = a;
      if (a) {
        this.show(a);
        this._blinkAnim.play("start");
      }
    }, init.prototype.setValue = function(d) {
      switch(this._prizeType) {
        case e.MONETARY:
          this._amountText.setText(svg.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(d, svg.MoneyFormatterFlag.FORCE_DECIMAL));
          break;
        case e.NON_MONETARY:
          this._amountText.setText(this._prizeName);
          break;
        case e.DEMO:
          this._amountText.setText(this._demoText);
      }
    }, init.prototype.getPrizeType = function() {
      return this._prizeType;
    }, init.prototype.getPrizeName = function() {
      return this._prizeName;
    }, init.prototype.setDemoText = function(to) {
      this._demoText = "" === to ? svg.ResourceManager.getInstance().getTextManager().getByName("IDS_MSG_DEMO").getText() : to;
    }, init;
  }(className);
  /** @type {function(!Object, ...(Object|null)): !Object} */
  var insertOrAppend = Object.assign || function(obj) {
    var source;
    /** @type {number} */
    var i__7286__auto___11343 = 1;
    /** @type {number} */
    var len__7285__auto___11342 = arguments.length;
    for (; i__7286__auto___11343 < len__7285__auto___11342; i__7286__auto___11343++) {
      source = arguments[i__7286__auto___11343];
      var prop;
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };
  var me = function() {
    /**
     * @param {!Object} data
     * @param {!Object} force
     * @return {undefined}
     */
    function me(data, force) {
      /** @type {!Object} */
      this._config = data;
      /** @type {!Object} */
      this._dispatcher = force;
      /** @type {boolean} */
      this._loaderComplete = false;
      /** @type {!Array} */
      this._jackpotModels = [];
      this._viewState = new options.AppState;
    }
    return me.updateClasses = function(el, name, target) {
      var classList = el.classList;
      name.map(function(t) {
        return classList.add(t);
      });
      target.map(function(t) {
        return classList.remove(t);
      });
    }, Object.defineProperty(me, "hasNotch", {
      get : function() {
        /** @type {!Element} */
        var node = document.createElement("div");
        if (node.classList.add("notch-detector"), CSS.supports("padding-bottom: env(safe-area-inset-bottom)") || CSS.supports("padding-bottom: env(safe-area-inset-top)") || CSS.supports("padding-bottom: env(safe-area-inset-left)") || CSS.supports("padding-bottom: env(safe-area-inset-right)")) {
          /** @type {string} */
          node.style.paddingBottom = "env(safe-area-inset-bottom)";
          /** @type {string} */
          node.style.paddingTop = "env(safe-area-inset-top)";
          /** @type {string} */
          node.style.paddingLeft = "env(safe-area-inset-left)";
          /** @type {string} */
          node.style.paddingRight = "env(safe-area-inset-right)";
        } else {
          if (!CSS.supports("padding-bottom: constant(safe-area-inset-bottom)")) {
            return false;
          }
          /** @type {string} */
          node.style.paddingBottom = "constant(safe-area-inset-bottom)";
        }
        document.body.appendChild(node);
        /** @type {!Array} */
        var eCfgEl = [parseInt(window.getComputedStyle(node).paddingBottom), parseInt(window.getComputedStyle(node).paddingTop), parseInt(window.getComputedStyle(node).paddingLeft), parseInt(window.getComputedStyle(node).paddingRight)];
        return document.body.removeChild(node), eCfgEl.filter(function(canCreateDiscussions) {
          return 0 !== canCreateDiscussions;
        }).length > 0;
      },
      enumerable : true,
      configurable : true
    }), me.updateViewportMetaTag = function() {
      /** @type {(Element|null)} */
      var _session$dataValues = document.querySelector('meta[name="viewport"]');
      if (_session$dataValues) {
        _session$dataValues.content += ", viewport-fit=cover";
      }
    }, me.injectCss = function(c) {
      /** @type {!Element} */
      var b = document.createElement("style");
      /** @type {string} */
      b.innerHTML = c;
      document.head.appendChild(b);
    }, me.create = function(value, name) {
      return me._instance || (me._instance = new me(value, name)), me._instance;
    }, Object.defineProperty(me, "instance", {
      get : function() {
        return me._instance;
      },
      enumerable : true,
      configurable : true
    }), me.prototype.init = function() {
      var CloudCmd = this;
      if (this._config.hasGuaranteedJackpot && this._config.jackpots.length) {
        /** @type {string} */
        var styles = "\n                #guaranteed_jackpots { position: fixed; }\n                #guaranteed_jackpots.hidden { display: none; }\n\n                .desktop.gj.landscape#" + this._config.gameContainer + " { position: fixed !important; top: 0 !important; bottom: 0 !important; left: 25vw !important; right: initial !important; height: initial !important; width: 75vw !important; }\n                .desktop.gj.landscape#guaranteed_jackpots { top: 0; bottom: 0; left: 0; right: 75vw; }\n\n                .mobile.gj.portrait#" + 
        this._config.gameContainer + " { position: fixed !important; top: 9vh !important; bottom: 0 !important; left: 0 !important; right: initial !important; height: initial !important; width: 100vw !important; }\n                .mobile.gj.portrait#guaranteed_jackpots { top: 0; height: 9vh; left: 0; right: 0; }\n\n                .mobile.gj.landscape#" + this._config.gameContainer + " { position: fixed !important; top: 0 !important; bottom: 0 !important; left: 18vw !important; right: auto !important; height: initial !important; width: 82vw !important; }\n                .mobile.gj.landscape#guaranteed_jackpots { top: 0; bottom: 0; left: 0; width: 18vw; }\n\n                .mobile.gj.landscape.notch#" + 
        this._config.gameContainer + " { position: fixed !important; top: 0 !important; bottom: 0 !important; left: calc(18vw/100*90 + 5vw) !important; right: auto !important; height: initial !important; width: calc(82vw/100*90) !important; }\n                .mobile.gj.landscape.notch#guaranteed_jackpots { top: 0; bottom: 0; left: 5vw; width: calc(18vw/100*90); }\n                \n                .notch-detector { position: fixed; left: 0; top: 0; width: 0; height: 0; display: none; }";
        me.injectCss(styles);
        /** @type {(Element|null)} */
        this._gameWrapper = document.getElementById(this._config.gameContainer);
        /** @type {(Element|null)} */
        var repeatingDiv = this._gameWrapper.parentElement;
        /** @type {!Element} */
        this._guaranteedJackpotElement = document.createElement("div");
        /** @type {string} */
        this._guaranteedJackpotElement.id = "guaranteed_jackpots";
        this._guaranteedJackpotElement.addEventListener("touchstart", function(event) {
          return event.preventDefault();
        });
        repeatingDiv.insertBefore(this._guaranteedJackpotElement, this._gameWrapper);
        me.updateViewportMetaTag();
        Object(options.initJackpot)(this._guaranteedJackpotElement);
        me.updateClasses(this._gameWrapper, [this._config.channel, "gj"], []);
        me.updateClasses(this._guaranteedJackpotElement, [this._config.channel, "gj", "hidden"], []);
        exports.SystemManager.getDeviceHandler().addEventListener(exports.DeviceEvent.ORIENTATION, function() {
          return CloudCmd.updateElementClasses();
        });
        exports.SystemManager.getDeviceHandler().addEventListener(exports.DeviceEvent.RESIZE, function() {
          return CloudCmd.updateElementClasses();
        });
        this._dispatcher.addEventListener(svg.SessionEvent.ILLEGALSESSION, function() {
          return CloudCmd.onIllegalSession();
        });
        this._dispatcher.addEventListener(svg.LoaderEvent.LOADER, function(primitive) {
          if (primitive.id === svg.LoaderEventType.COMPLETE) {
            /** @type {boolean} */
            CloudCmd._loaderComplete = true;
            CloudCmd.updateElementClasses();
          }
        });
        if (this._config.jackpotNotifications) {
          this._dispatcher.addEventListener(Date.NOTIFICATION, function(data) {
            return CloudCmd.onJackpotNotification(data);
          });
        }
        /** @type {number} */
        var layer_i = 0;
        var crossfilterable_layers = this._config.jackpots;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          var layer = crossfilterable_layers[layer_i];
          var mapView = new MapView(this._config, this._dispatcher, layer);
          mapView.addListener(function() {
            return CloudCmd.onUpdateView();
          });
          this._jackpotModels.push(mapView);
        }
        this._jackpotModels.map(function(canCreateDiscussions) {
          return canCreateDiscussions.updateServerTimeDelta(CloudCmd._config.serverTimeDelta / 1000);
        });
        this._viewState.channel = this._config.channel;
        this.onUpdateView();
      }
    }, me.prototype.onIllegalSession = function() {
      this._jackpotModels.map(function(canCreateDiscussions) {
        return canCreateDiscussions.stopCountdown();
      });
    }, me.prototype.onJackpotNotification = function(options) {
      var model = this.getModel(options.idx);
      if (model) {
        this._dispatcher.dispatch(new Date(Date.SHOW, options.idx, options.value, options.currency, options.gameName, e.MONETARY, model.params.title));
      }
    }, me.prototype.updateElementClasses = function() {
      if (this._loaderComplete) {
        /** @type {!Array} */
        var rendered = [];
        /** @type {!Array} */
        var props = ["hidden"];
        switch(this._config.channel) {
          case "desktop":
            rendered.push("landscape");
            break;
          case "mobile":
            rendered.push("pt" === exports.DEVICE.orientation ? "portrait" : "landscape");
            props.push("pt" === exports.DEVICE.orientation ? "landscape" : "portrait");
            if (me.hasNotch && "ls" === exports.DEVICE.orientation) {
              rendered.push("notch");
            } else {
              props.push("notch");
            }
        }
        me.updateClasses(this._gameWrapper, rendered, props);
        me.updateClasses(this._guaranteedJackpotElement, rendered, props);
        this.onUpdateView();
        Object(options.notifyUiChanged)();
      }
    }, me.prototype.onUpdateView = function() {
      var t = this._jackpotModels.map(function(options) {
        return options.viewState;
      });
      Object(options.setJackpotState)(insertOrAppend({}, this._viewState, {
        jackpots : t
      }));
    }, me.prototype.getModel = function(type) {
      return this._jackpotModels.find(function(EParameterType) {
        return type === EParameterType.id;
      });
    }, me;
  }();
  var o = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var ChangeEvent = function(t) {
    /**
     * @param {?} filters
     * @return {?}
     */
    function Selector(filters) {
      return t.call(this, filters) || this;
    }
    return o(Selector, t), Selector.TOGGLE = "JACKPOTTOGGLE", Selector;
  }(exports.MegatonEvent);
  var onUserActivity = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Klass = function(_super) {
    /**
     * @param {!HTMLElement} grid
     * @param {boolean} models
     * @param {?} options
     * @return {?}
     */
    function remove(grid, models, options) {
      var self = _super.call(this, grid) || this;
      grid.addEventListener(SelectionEvent.JACKPOTPROJECTION, function(t) {
        return self.onJackpotProjection(t);
      });
      grid.addEventListener($.JACKPOT_WON, function(newModelData) {
        return self.onJackpotWon(newModelData);
      });
      /** @type {boolean} */
      self._models = models;
      self._displayViews = options;
      var database = this;
      var global;
      for (global in self._models) {
        !function(name) {
          if (!database._models.hasOwnProperty(name)) {
            return "continue";
          }
          database._models[name].enable(true);
          database._models[name].addListener(function() {
            return self.setProjectionValue(null, name);
          });
        }(global);
      }
      return self;
    }
    return onUserActivity(remove, _super), remove.prototype.onJackpotProjection = function(data) {
      var self = this._models[data.jackpotId];
      var cmd = this._displayViews[data.jackpotId];
      if (self) {
        self.setValues(data.baseAmount, data.baseTime, data.shortAmount, data.shortTime, data.projectioAmount, data.projectionTime, data.elapsedTime);
      }
      if (cmd) {
        cmd.setEnabled(data.enabled);
        if (!data.enabled) {
          this._dispatcher.dispatch(new ChangeEvent(ChangeEvent.TOGGLE));
        }
      }
    }, remove.prototype.setProjectionValue = function(diagonalPath, i) {
      if (!this._models[i].isJackpotWon || this._models[i].jackpotWinAmount > 0) {
        this._displayViews[i].setValue(this._models[i].currentAmount);
      }
    }, remove.prototype.onJackpotWon = function(model) {
      /** @type {boolean} */
      this._models[model.jackpotId].isJackpotWon = true;
    }, remove;
  }(exports.EventProcessor);
  var h = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Buffer = function() {
    /**
     * @param {number} id
     * @param {string} url
     * @param {?} name
     * @param {string} value
     * @param {number} tasks
     * @return {undefined}
     */
    function Frame(id, url, name, value, tasks) {
      /** @type {number} */
      this._id = id;
      /** @type {string} */
      this._name = url;
      this._totalBet = name;
      this._position = value && "" !== value ? value : Frame.DEFAULT_POSITIONS[id - 1];
      /** @type {number} */
      this._prizeType = tasks;
    }
    return Object.defineProperty(Frame.prototype, "id", {
      get : function() {
        return this._id;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Frame.prototype, "name", {
      get : function() {
        return this._name;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Frame.prototype, "totalBet", {
      get : function() {
        return this._totalBet;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Frame.prototype, "position", {
      get : function() {
        return this._position;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Frame.prototype, "prizetype", {
      get : function() {
        return this._prizeType;
      },
      enumerable : true,
      configurable : true
    }), Frame.DEFAULT_POSITIONS = ["bottomright", "bottomleft", "topright", "topleft"], Frame;
  }();
  var Events = function(t) {
    /**
     * @param {(Object|string)} id
     * @return {?}
     */
    function Parent(id) {
      var o = t.call(this, Parent.CUSTOMDATA) || this;
      return o._data = id, o;
    }
    return h(Parent, t), Object.defineProperty(Parent.prototype, "data", {
      get : function() {
        return this._data;
      },
      enumerable : true,
      configurable : true
    }), Parent.CUSTOMDATA = "MJ_CUSTOMDATA", Parent;
  }(exports.MegatonEvent);
  var cloud9WatcherPlugin = function() {
    /**
     * @param {?} wastedActions
     * @return {undefined}
     */
    function State(wastedActions) {
      var TrenchPlayer = this;
      this._hierarchy = wastedActions;
      /** @type {!Array} */
      this._views = [];
      /** @type {number} */
      this._displayDuration = 4000;
      /** @type {number} */
      this._currentJackpotIndex = 0;
      /** @type {number} */
      this._displayTimer = 0;
      /** @type {number} */
      this._state = State.STATE_IDLE;
      exports.SystemManager.getScheduler().addUpdateListener(function() {
        return TrenchPlayer.tick();
      }, null);
    }
    return State.prototype.isStacked = function() {
      return this._views.length > 1;
    }, State.prototype.showNextJackpot = function() {
      if (0 !== this._views.length) {
        this.hideJackpotIndex(this._currentJackpotIndex);
        this._currentJackpotIndex++;
        if (this._currentJackpotIndex >= this._views.length) {
          /** @type {number} */
          this._currentJackpotIndex = 0;
        }
        if (!this._views[this._currentJackpotIndex].getEnabled()) {
          this.removeJackpot(this._views[this._currentJackpotIndex]);
        }
        this.showJackpotIndex(this._currentJackpotIndex);
      }
    }, State.prototype.showJackpotIndex = function(i) {
      if (i < this._views.length) {
        this._views[i].show(true);
      }
    }, State.prototype.hideJackpotIndex = function(i) {
      if (i < this._views.length) {
        this._views[i].show(false);
      }
    }, State.prototype.showJackpot = function(newView) {
      this.hideJackpotIndex(this._currentJackpotIndex);
      this._currentJackpotIndex = this._views.indexOf(newView);
      if (-1 === this._currentJackpotIndex) {
        /** @type {number} */
        this._currentJackpotIndex = 0;
      }
      this.showJackpotIndex(this._currentJackpotIndex);
    }, State.prototype.addJackpotView = function(store) {
      this._views.splice(0, 0, store);
      this._hierarchy.add("jp" + store.getJackpotId(), store.getEntity());
    }, State.prototype.removeJackpot = function(component) {
      var index = this._views.indexOf(component);
      if (index > -1) {
        this._views.splice(index, 1);
      }
    }, State.prototype.isRevolving = function() {
      return this._state === State.STATE_REVOLING;
    }, State.prototype.startRevolving = function() {
      if (this._views.length > 1) {
        /** @type {number} */
        var i = 0;
        for (; i < this._views.length; i++) {
          if (this._views[i].getEnabled()) {
            this._views[i].show(true);
            /** @type {number} */
            var index = 0;
            for (; index < this._views.length; index++) {
              if (index !== i) {
                this._views[index].show(false);
              }
            }
            break;
          }
        }
        /** @type {number} */
        this._currentJackpotIndex = 0;
        /** @type {number} */
        this._state = State.STATE_REVOLING;
        this._displayTimer = exports.SystemManager.getScheduler().getTime() + this._displayDuration;
      }
    }, State.prototype.stopRevolving = function() {
      /** @type {number} */
      this._state = State.STATE_IDLE;
    }, State.prototype.showDisplay = function(content) {
      /** @type {number} */
      var i = 0;
      for (; i < this._views.length; i++) {
        this._views[i].show(content);
      }
    }, State.prototype.tick = function() {
      switch(this._state) {
        case State.STATE_REVOLING:
          var e = exports.SystemManager.getScheduler().getTime();
          if (e > this._displayTimer) {
            this._displayTimer = this._displayDuration + e;
            this.showNextJackpot();
          }
      }
    }, State.STATE_IDLE = 0, State.STATE_REVOLING = 1, State;
  }();
  var Be = function() {
    /**
     * @param {!Object} req
     * @param {!Object} config
     * @return {undefined}
     */
    function app(req, config) {
      var allTraps = this;
      /** @type {!Object} */
      this._dispatcher = req;
      /** @type {!Object} */
      this._config = config;
      this._models = {};
      this._views = {};
      this._positions = {};
      var actionHelper = svg.ResourceManager.getInstance().getEntityManager();
      this._entity = actionHelper.create("?");
      actionHelper.add("jackpot", this._entity);
      req.addEventListener(Events.CUSTOMDATA, function(t) {
        return allTraps.onMysteryJackpotCustomData(t);
      });
      if (this._config.jackpotNotifications) {
        req.addEventListener(Date.NOTIFICATION, function(t) {
          return allTraps.onJackpotNotification(t);
        });
      }
    }
    return app.prototype.getModel = function(index) {
      return this._models ? this._models[index] : null;
    }, app.prototype.getView = function(viewId) {
      return this._views ? this._views[viewId] : null;
    }, app.prototype.getViewIds = function() {
      return this._views ? Object.keys(this._views) : [];
    }, app.prototype.lock = function(name, element) {
      var result = this._models[name];
      if (result) {
        result.lockJackpotWin(element);
        var courseSections = result.position;
        if (courseSections) {
          courseSections.stopRevolving();
          var view = this._views[name];
          if (view) {
            courseSections.showJackpot(view);
          }
        }
      }
    }, app.prototype.unlock = function(name) {
      if (void 0 === name) {
        /** @type {string} */
        name = "";
      }
      var sync = this._models[name];
      if (sync) {
        sync.unlock();
        sync.position.startRevolving();
      }
    }, app.prototype.createController = function(opts, scope) {
      new Klass(this._dispatcher, opts, scope);
    }, app.prototype.showDisplays = function(allowOffline) {
      var pos;
      for (pos in this._positions) {
        if (this._positions.hasOwnProperty(pos)) {
          if (allowOffline) {
            if (!this._positions[pos].isRevolving() && this._positions[pos].isStacked()) {
              this._positions[pos].startRevolving();
            } else {
              if (!this._positions[pos].isStacked()) {
                this._positions[pos].showDisplay(true);
              }
            }
          } else {
            if (this._positions[pos].isRevolving() && this._positions[pos].isStacked()) {
              this._positions[pos].stopRevolving();
            }
            this._positions[pos].showDisplay(false);
          }
        }
      }
    }, app.prototype.createDisplayView = function(eta, lmbda, n) {
      return new className(eta, lmbda, n);
    }, app.prototype.createModel = function(props, name, force) {
      return new Media(props, name, force);
    }, app.prototype.getDisplayNames = function() {
      return ["JackpotTopMini", "JackpotTopMinor", "JackpotTopMajor", "JackpotTopGrand"];
    }, app.prototype.setupPositions = function() {
      /** @type {!Array} */
      var closedFrames = ["miniJP", "minorJP", "majorJP", "grandJP"];
      /** @type {number} */
      var key = 0;
      for (; key < Buffer.DEFAULT_POSITIONS.length; key++) {
        var i = Buffer.DEFAULT_POSITIONS[key];
        var ide = this._entity.getHierarchy("jackpotTop." + closedFrames[key]);
        var w = new cloud9WatcherPlugin(ide);
        this._positions[i] = w;
      }
    }, app.prototype.onMysteryJackpotCustomData = function(target) {
      this.setupPositions();
      var item = this.getDisplayNames();
      var warning = this._config.mjNames.split(",");
      var NODE_TYPES = this._config.mjPrizes.split(",");
      /** @type {number} */
      var type = 0;
      for (; type < target.data.length; type++) {
        var r = target.data[type];
        var i = this.getPositionName(r);
        var name = r.id;
        var projectableNodes = this._config.demoPlay ? e.DEMO : r.prizetype;
        var element = warning[type] ? warning[type] : "Jackpot " + name;
        var properties = NODE_TYPES[type];
        var model = this.createModel(name, element, this._positions[i]);
        this._models[name] = model;
        var property = Buffer.DEFAULT_POSITIONS.indexOf(i);
        var self = svg.ResourceManager.getInstance().getEntityManager();
        var length = self.create(item[property]);
        var view = new constructor(name, element, length, projectableNodes, properties, this._config.mjDemoText);
        view.show(true);
        this._views[name] = view;
        this._positions[i].addJackpotView(view);
      }
      this.createController(this._models, this._views);
      this.unlock();
      var pos;
      for (pos in this._positions) {
        if (this._positions.hasOwnProperty(pos)) {
          this._positions[pos].showDisplay(false);
        }
      }
    }, app.prototype.onJackpotNotification = function(options) {
      var view = this._views[options.idx];
      if (view) {
        var lastHoverItem = view.getPrizeType();
        /** @type {string} */
        var timezone = "";
        if (lastHoverItem === e.NON_MONETARY) {
          timezone = view.getPrizeName();
        }
        var value = this._models[options.idx].name;
        this._dispatcher.dispatch(new Date(Date.SHOW, options.idx, options.value, options.currency, options.gameName, lastHoverItem, value, timezone));
      }
    }, app.prototype.getPositionName = function(position) {
      return position.position;
    }, app;
  }();
  var Ne = function() {
    /**
     * @param {!Object} value
     * @param {!Element} view
     * @param {!Object} data
     * @return {undefined}
     */
    function set(value, view, data) {
      var bus = this;
      /** @type {!Element} */
      this._view = view;
      /** @type {!Object} */
      this._dispatcher = value;
      /** @type {!Array} */
      this._queue = [];
      /** @type {boolean} */
      this._splashShowing = true;
      /** @type {!Object} */
      this._config = data;
      this._dispatcher.addEventListener(Date.SHOW, function(initial_value) {
        return bus.onNotification(initial_value);
      });
      this._dispatcher.addEventListener(svg.GameStatusEvent.IDLE, function(status_bus) {
        return bus.onShowNotification(status_bus);
      });
      this._dispatcher.addEventListener(svg.RoundEvent.ROUNDEND, function(status_bus) {
        return bus.onShowNotification(status_bus);
      });
      this._dispatcher.addEventListener(ChangeEvent.TOGGLE, function(status_bus) {
        return bus.onShowNotification(status_bus);
      });
      value.addEventListener(svg.SplashEvent.SPLASH_HIDE, function() {
        return bus.onSplashHide();
      });
    }
    return set.prototype.onSplashHide = function() {
      /** @type {boolean} */
      this._splashShowing = false;
    }, set.prototype.onNotification = function(data) {
      if (!this._config.demoPlay) {
        this._queue.push(data);
      }
    }, set.prototype.onShowNotification = function(status_stream) {
      if (this._queue.length > 0 && !this._splashShowing) {
        var result = this._queue.shift();
        this._view.show(result);
      }
    }, set;
  }();
  var _createClass = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var Me = function(properties) {
    /**
     * @param {!HTMLElement} name
     * @return {?}
     */
    function Main(name) {
      var plugin = properties.call(this, name) || this;
      return name.addEventListener(svg.CommandEvent.GAME_IN, function(event) {
        return plugin.onCommand(event);
      }), plugin;
    }
    return _createClass(Main, properties), Main.prototype.onCommand = function(context) {
      switch(context.command.type) {
        case svg.ServerCommand.SSPJACKPOTPROJECTION:
          var item = context.command.getInt(0);
          var checked = context.command.getInt(1);
          var historyID = context.command.getInt(2);
          var o = context.command.getInt(3);
          var s = context.command.getInt(4);
          var a = context.command.getInt(5);
          var u = context.command.getInt(6);
          var c = context.command.getInt(7);
          var p = context.command.getBoolean(8, true);
          var h = context.command.getInt(9, 0);
          var l = context.command.getString(10);
          this._dispatcher.dispatch(new SelectionEvent(item, checked, historyID, o, s, a, u, c, p, h, l));
          break;
        case svg.ServerCommand.SSPCUSTOMDATA:
          try {
            var menuipopup = context.command.getXML(0);
            var d = void 0;
            var f = void 0;
            /** @type {number} */
            var i = 0;
            for (; i < menuipopup.childNodes.length; i++) {
              if ("custom" === menuipopup.childNodes[i].nodeName) {
                d = menuipopup.childNodes[i];
                break;
              }
            }
            if (d) {
              /** @type {number} */
              i = 0;
              for (; i < d.childNodes.length; i++) {
                if ("MysteryJackpot" === d.childNodes[i].nodeName) {
                  var greeterElem = d.childNodes[i];
                  if ("0" === greeterElem.getAttribute("Enabled")) {
                    return;
                  }
                  f = d.childNodes[i];
                  break;
                }
              }
            }
            if (f) {
              /** @type {!Array} */
              var el = [];
              /** @type {number} */
              i = 0;
              for (; i < f.childNodes.length; i++) {
                if ("Jackpot" === f.childNodes[i].nodeName) {
                  var item = f.childNodes[i];
                  /** @type {number} */
                  var input = +item.getAttribute("Value");
                  var encoding = item.getAttribute("Name");
                  /** @type {number} */
                  var extraOptions = +item.getAttribute("TotalBet");
                  var position = item.getAttribute("Position");
                  /** @type {number} */
                  var scorefactor = +item.getAttribute("PrizeType");
                  el.push(new Buffer(input, encoding, extraOptions, position, scorefactor));
                }
              }
              this._dispatcher.dispatch(new Events(el));
            }
          } catch (t) {
          }
          break;
        case svg.ServerCommand.SSJACKPOTNOTIFICATION:
          var toMonth = context.command.getInt(0);
          var _index = context.command.getInt(1);
          var hh = context.command.getString(2);
          var mm = context.command.getString(3);
          this._dispatcher.dispatch(new Date(Date.NOTIFICATION, toMonth, _index, hh, mm));
      }
    }, Main;
  }(svg.CommandConverter);
  var De = function() {
    /**
     * @param {?} state
     * @param {string} color
     * @return {undefined}
     */
    function Node(state, color) {
      this._s = state;
      /** @type {string} */
      this._color = color;
    }
    return Object.defineProperty(Node.prototype, "s", {
      get : function() {
        return this._s;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(Node.prototype, "color", {
      get : function() {
        return this._color;
      },
      enumerable : true,
      configurable : true
    }), Node;
  }();
  var mid_t = function() {
    /**
     * @return {undefined}
     */
    function t() {
    }
    return Object.defineProperty(t.prototype, "MonetaryPrizeMessage", {
      get : function() {
        return svg.ResourceManager.getInstance().getTextManager().getByName("IDS_JACKPOT_MYSTERYJACKPOTWON").getText();
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(t.prototype, "NonMonetaryPrizeMessage", {
      get : function() {
        return svg.ResourceManager.getInstance().getTextManager().getByName("IDS_JACKPOT_MYSTERYPRIZEWON").getText();
      },
      enumerable : true,
      configurable : true
    }), t.prototype.show = function(str) {
    }, t.prototype.init = function() {
    }, t;
  }();
  var trigger = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var pt_mid = function(t) {
    /**
     * @return {?}
     */
    function init() {
      var that = t.call(this) || this;
      return that._container = document.createElement("div"), that._container.id = "jackpot_notification_view", that._messageText = document.createElement("p"), that._messageText.id = "jackpot_notification_messagetext", that._prizeText = document.createElement("p"), that._prizeText.id = "jackpot_notification_prizetext", that._container.appendChild(that._messageText), that._container.appendChild(that._prizeText), that._canvas = document.getElementsByTagName("canvas")[0], that.appendStyles(), that._canvas.parentElement.appendChild(that._container), 
      that;
    }
    return trigger(init, t), init.prototype.appendStyles = function() {
      /** @type {string} */
      this._container.style.position = "absolute";
      /** @type {string} */
      this._container.style.fontFamily = "Oswald-Regular, arial";
      /** @type {string} */
      this._container.style.top = "15vh";
      /** @type {string} */
      this._container.style.left = "-200px";
      /** @type {string} */
      this._container.style.width = "200px";
      /** @type {string} */
      this._container.style.minHeight = "90px";
      /** @type {string} */
      this._container.style.background = "linear-gradient(to bottom, #414141, #1E1E1E)";
      /** @type {string} */
      this._container.style.opacity = "0.8";
      /** @type {string} */
      this._container.style.borderRadius = "10px";
      /** @type {string} */
      this._container.style.transition = "left 0.5s";
      /** @type {string} */
      this._container.style.zIndex = "99999";
      /** @type {string} */
      this._container.style.textAlign = "center";
      /** @type {string} */
      this._container.style.wordWrap = "break-word";
      /** @type {string} */
      this._messageText.style.fontStyle = "normal";
      /** @type {string} */
      this._messageText.style.color = "white";
      /** @type {string} */
      this._messageText.style.fontSize = "18px";
      /** @type {string} */
      this._messageText.style.margin = "0";
      /** @type {string} */
      this._messageText.style.padding = "10px";
      /** @type {string} */
      this._prizeText.style.fontStyle = "normal";
      /** @type {string} */
      this._prizeText.style.color = "#FDFF68";
      /** @type {string} */
      this._prizeText.style.fontSize = "36px";
      /** @type {string} */
      this._prizeText.style.margin = "0";
      /** @type {string} */
      this._prizeText.style.padding = "10px";
    }, init.prototype.show = function(data) {
      var $trashTreeContextMenu = this;
      if (data.jpType === e.MONETARY) {
        var chartMessage = this.MonetaryPrizeMessage.replace("%d", data.jpName);
        this._messageText.innerText = chartMessage;
      } else {
        chartMessage = this.NonMonetaryPrizeMessage.replace("%d", data.jpName);
        this._messageText.innerText = chartMessage;
        this._prizeText.innerText = data.prizeName;
      }
      this._container.style.left = this._canvas.style.left;
      setTimeout(function() {
        $trashTreeContextMenu.hide();
      }, 5000);
    }, init.prototype.hide = function() {
      var msg = this;
      setTimeout(function() {
        /** @type {string} */
        msg._messageText.innerText = "";
        /** @type {string} */
        msg._prizeText.innerText = "";
      }, 600);
      /** @type {string} */
      this._container.style.left = -Math.abs(parseInt(this._container.style.width)) + "px";
    }, init;
  }(mid_t);
  var cmd = function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  var objectsThere = function(t) {
    /**
     * @return {?}
     */
    function init() {
      var that = t.call(this) || this;
      var PersonModel = svg.ResourceManager.getInstance().getEntityManager();
      return that._entity = PersonModel.getByName("jackpot"), that._messageAnim = that._entity.getAnimation("message"), that._messageText = that._entity.getTextField("message.messageText"), that._prizeText = that._entity.getTextField("message.prizeText"), that._prizeText.setText(""), that._messageText.setText(""), that._messageAnim.play("hide"), that;
    }
    return cmd(init, t), init.prototype.show = function(v) {
      if (v.jpType === e.MONETARY) {
        var topicC = this.MonetaryPrizeMessage.replace("%d", v.jpName);
        this._messageText.setText(topicC);
      } else {
        topicC = this.NonMonetaryPrizeMessage.replace("%d", v.jpName);
        this._messageText.setText(topicC);
        this._prizeText.setText(v.prizeName);
      }
      this._messageAnim.play("hide");
      this._messageAnim.play("show");
    }, init;
  }(mid_t);
}, function(canCreateDiscussions, e, floor) {
  var findIndex = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(2);
  var newOrg = function(end) {
    /**
     * @param {?} string
     * @return {?}
     */
    function types(string) {
      return end.call(this, string) || this;
    }
    return findIndex(types, end), types.INIT = "BOD_EXPANDING_INIT", types.START = "BOD_EXPANDING_START", types.TRANSFORM_SYMBOL = "BOD_TRANSFORM_SYMBOL", types.CONTINUE = "BOD_EXPANDING_CONTINUE", types.END = "BOD_EXPANDING_END", types;
  }(startYNew.MegatonEvent);
  e.BODExpandingFeatureEvent = newOrg;
}, function(module, canCreateDiscussions) {
  module.exports = common;
}, function(canCreateDiscussions, event, $) {
  var extend = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(event, "__esModule", {
    value : true
  });
  var ol = $(0);
  var ss = $(2);
  var self = $(6);
  var $realtime = $(0);
  var relSet = function(util) {
    /**
     * @param {!HTMLElement} button
     * @param {?} config
     * @param {?} i
     * @param {string} key
     * @param {?} value
     * @param {?} option
     * @return {?}
     */
    function api(button, config, i, key, value, option) {
      var _this = util.call(this, button, config, i) || this;
      return _this._freespinManager = key, _this._reelManager = value, _this._winPresentationController = option, button.addEventListener(self.BODExpandingFeatureEvent.START, _this.startExpandingFeature.bind(_this)), _this.clean(), _this;
    }
    return extend(api, util), Object.defineProperty(api.prototype, "featureId", {
      get : function() {
        return this._featureId;
      },
      enumerable : true,
      configurable : true
    }), api.prototype.continueWin = function() {
      this._dispatcher.dispatch(new self.BODExpandingFeatureEvent(self.BODExpandingFeatureEvent.CONTINUE));
    }, api.prototype.end = function() {
      this._dispatcher.dispatch(new self.BODExpandingFeatureEvent(self.BODExpandingFeatureEvent.END));
    }, api.prototype.startExpandingFeature = function() {
      this._expandingSymbols = this._reelManager.getScatterSymbols(this._featureData.symbol);
      /** @type {number} */
      var layer_i = 0;
      for (; layer_i < this._expandingSymbols.length; layer_i++) {
        var name = this._expandingSymbols[layer_i].reelId;
        /** @type {number} */
        var nodeType = 0;
        for (; nodeType < 3; nodeType++) {
          var structure = this._reelManager.getSymbol(name, nodeType);
          this._symbolsToExpand.push(structure);
        }
      }
      (new ss.Task).startHandler(this.mainExpandingHandler.bind(this));
    }, api.prototype.mainExpandingHandler = function(args) {
      switch(args.state) {
        case 0:
          this._mainTask = args.startHandler(this.expandingLoop.bind(this));
          break;
        case 1:
          args.startDelayMs(api.AFTER_TRANSFORM_DELAY);
          break;
        case 2:
          /** @type {number} */
          var layer_i = 0;
          for (; layer_i < this._symbolsToExpand.length; layer_i++) {
            this._symbolsToExpand[layer_i].expandingWin();
          }
          this._dispatcher.dispatch(new $realtime.FeatureWinEvent(this));
          args.startHandler(this._winPresentationController.expandingWinPresentationHandler.bind(this._winPresentationController));
          this.continueWin();
          break;
        default:
          this.end();
          this.clean();
          args.complete();
      }
    }, api.prototype.expandingLoop = function(api) {
      api.startLoop(this.symbolExpandHandler.bind(this));
    }, api.prototype.symbolExpandHandler = function(parser) {
      switch(parser.state) {
        case 0:
          var params = this._symbolsToExpand[this._expandingIdx];
          if (params.getId() !== this._featureData.symbol) {
            this._reelManager.setSymbol(params.reelId, params.rowId - 3, this._featureData.symbol);
          }
          /** @type {boolean} */
          params.isExpanding = true;
          parser.startDelayMs(0);
          break;
        case 1:
          this._dispatcher.dispatch(new self.BODExpandingFeatureEvent(self.BODExpandingFeatureEvent.TRANSFORM_SYMBOL));
          this._symbolsToExpand[this._expandingIdx].expandingGlow();
          parser.startDelayMs(api.TRANSFORM_DELAY);
          break;
        default:
          this._expandingIdx++;
          if (this._expandingIdx >= this._symbolsToExpand.length) {
            this._mainTask.complete();
          }
          parser.complete();
      }
    }, api.prototype.dispatchWinEvent = function() {
      this._dispatcher.dispatch(new self.BODExpandingFeatureEvent(self.BODExpandingFeatureEvent.INIT));
    }, api.prototype.clean = function() {
      /** @type {!Array} */
      this._symbolsToExpand = [];
      /** @type {!Array} */
      this._expandingSymbols = [];
      /** @type {number} */
      this._expandingIdx = 0;
      /** @type {number} */
      this._winLineIdx = 0;
    }, api.TRANSFORM_DELAY = 150, api.EXPANDING_FEATURE_WIN = 270, api.AFTER_TRANSFORM_DELAY = 300, api.AFTER_WIN_DELAY = 1000, api;
  }(ol.Feature);
  event.BoDExpandingFeature = relSet;
}, function(canCreateDiscussions, e, floor) {
  var getInstance = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(2);
  var newOrg = function(f) {
    /**
     * @param {!Object} a
     * @return {?}
     */
    function o(a) {
      var m = f.call(this, o.TRIGGER) || this;
      return m._symbols = a, m;
    }
    return getInstance(o, f), Object.defineProperty(o.prototype, "symbols", {
      get : function() {
        return this._symbols;
      },
      enumerable : true,
      configurable : true
    }), o.TRIGGER = "BOD_TRIGGER", o;
  }(startYNew.MegatonEvent);
  e.BoDTriggerEvent = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var next = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(2);
  var newOrg = function(cb) {
    /**
     * @return {?}
     */
    function instrumented() {
      return null !== cb && cb.apply(this, arguments) || this;
    }
    return next(instrumented, cb), instrumented.SYMBOL_SELECTION = "BOD_SYMBOL_SELECTION", instrumented.LAST_SELECTION = "BOD_LAST_SELECTION", instrumented.TRIGGER_START = "BOD_TRIGGER_START", instrumented.RETRIGGER_INTRO = "RETRIGGER_INTRO", instrumented.RETRIGGER_OUTRO = "RETRIGGER_OUTRO", instrumented;
  }(startYNew.MegatonEvent);
  e.BoDFreespinViewEvent = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var next = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(2);
  var newOrg = function(cb) {
    /**
     * @return {?}
     */
    function instrumented() {
      return null !== cb && cb.apply(this, arguments) || this;
    }
    return next(instrumented, cb), instrumented.SHOW_LINE = "BOD_SHOW_LINE", instrumented;
  }(startYNew.MegatonEvent);
  e.BoDWinPresentationControllerEvent = newOrg;
}, function(canCreateDiscussions, navigation, validatorErrors) {
  /**
   * @param {!Object} e
   * @param {string} type
   * @param {string} data
   * @return {undefined}
   */
  function start(e, type, data) {
    new errors.BoDGame(e, type, data);
  }
  Object.defineProperty(navigation, "__esModule", {
    value : true
  });
  var errors = validatorErrors(13);
  /** @type {function(!Object, string, string): undefined} */
  navigation.start = start;
}, function(canCreateDiscussions, e, require) {
  var clearSetEntry = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var renderAssign = require(14);
  var EffectChain = require(17);
  var presenter = require(1);
  var ThoughtCollection = require(0);
  var THREE = require(0);
  var Engine = require(0);
  var GenerateGif = require(0);
  var requestHelpers = require(0);
  var CheckHourlyStat = require(0);
  var $ = require(18);
  var WebInspector = require(19);
  var Laces = require(23);
  var cc = require(25);
  var CheckDailyStat = require(26);
  var globals = require(31);
  var Effect = require(33);
  var jsonfn = require(39);
  var TagHourlyStat = require(41);
  var neatHelp = require(44);
  var view_1 = require(45);
  var newOrg = function(s) {
    /**
     * @param {?} status
     * @param {?} e
     * @param {?} f
     * @return {?}
     */
    function set(status, e, f) {
      var _this = this;
      return GenerateGif.WinlineShadedWebGLComponent.initializeShader(CheckHourlyStat.winlineVertexSource, requestHelpers.unishineWinlineFragmentSource), _this = s.call(this, status, e, "Book of Dead", f) || this, new $.BoDLogo(_this._dispatcher), _this.createSoundManager(), _this._dispatcher.addEventListener(presenter.GameStatusEvent.READY, _this.onGameReady.bind(_this)), _this;
    }
    return clearSetEntry(set, s), set.prototype.onGameReady = function() {
      if (!this._config.allowSplashScreen) {
        this._resourceManager.getEntityManager().getByName("fpsFeatures").getDisplay("").setVisible(false);
      }
    }, set.prototype.createConfig = function() {
      return new renderAssign.BoDVideoSlotConfig;
    }, set.prototype.createGambleManager = function() {
      return new jsonfn.BoDRedOrBlackManager(this._dispatcher, this._logicQueue, this._roundHandler, this._betSettings);
    }, set.prototype.createSplashManager = function() {
      return new EffectChain.BoDSplashManager(this._dispatcher, this._config);
    }, set.prototype.createUIByChannel = function(rootInjector) {
      return new view_1.BoDUIManager(this._dispatcher, this._betSettings, this._gameSettings, this._config, this._roundHandler, this._autoplaySettings, rootInjector, this._winManager, this._paytableData, this._reelManager, this._symbolManager, this._entity);
    }, set.prototype.createReelManager = function(database, connection) {
      return new WebInspector.BoDReelManager(this._dispatcher, database, connection, this._config, this._entity, this._gameSettings);
    }, set.prototype.createWinManager = function(y, width, height) {
      return new Effect.BoDWinManager(this._dispatcher, this._entity, y, width, height);
    }, set.prototype.createSymbolManager = function(mapEditorHtml) {
      return new Laces.BoDSymbolManager(this._dispatcher, mapEditorHtml);
    }, set.prototype.createBetSettings = function(type) {
      return new Engine.VideoSlotBetSettings(10, 5, 0, type);
    }, set.prototype.createPaytableHandler = function(isNeedCleanUp) {
      return new cc.BoDPaytableData(isNeedCleanUp, 3);
    }, set.prototype.createFreespinManager = function() {
      return new CheckDailyStat.BoDFreespinManager(this._dispatcher, this._logicQueue, this._entity);
    }, set.prototype.createFeatureManager = function(id) {
      return new globals.BoDFeatureManager(this._dispatcher, this._logicQueue, id, this._config, this._freespinManager, this._reelManager, this._winManager.winPresentationController, this._symbolManager);
    }, set.prototype.createSoundManager = function() {
      return new TagHourlyStat.BoDSoundManager(this._dispatcher, this._gameSettings, this._betSettings, this._config, this._reelManager, this._winManager);
    }, set.prototype.createAutoplaySettings = function() {
      var data = this._config;
      return new THREE.VideoSlotAutoplaySettings(true, false, false, true, data.autoplayReset, data.autoplayLimits, data.autoPlayResume);
    }, set.prototype.createAutoplayHandler = function(callback, connection) {
      return new neatHelp.BoDAutoplayHandler(this._dispatcher, callback, connection, this._config);
    }, set;
  }(ThoughtCollection.VideoSlot);
  e.BoDGame = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var getInstance = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function parent() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return getInstance(parent, f), Object.defineProperty(parent.prototype, "winCapValue", {
      get : function() {
        return 250000;
      },
      enumerable : true,
      configurable : true
    }), parent;
  }(startYNew.VideoSlotConfig);
  e.BoDVideoSlotConfig = newOrg;
}, function(module, canCreateDiscussions, n) {
  !function(metaWindow, factory) {
    module.exports = factory();
  }(window, function() {
    return function(e) {
      /**
       * @param {string} i
       * @return {?}
       */
      function t(i) {
        if (n[i]) {
          return n[i].exports;
        }
        var module = n[i] = {
          i : i,
          l : false,
          exports : {}
        };
        return e[i].call(module.exports, module, module.exports, t), module.l = true, module.exports;
      }
      var n = {};
      return t.m = e, t.c = n, t.d = function(o, name, n) {
        if (!t.o(o, name)) {
          Object.defineProperty(o, name, {
            enumerable : true,
            get : n
          });
        }
      }, t.r = function(x) {
        if ("undefined" != typeof Symbol && Symbol.toStringTag) {
          Object.defineProperty(x, Symbol.toStringTag, {
            value : "Module"
          });
        }
        Object.defineProperty(x, "__esModule", {
          value : true
        });
      }, t.t = function(name, version) {
        if (1 & version && (name = t(name)), 8 & version) {
          return name;
        }
        if (4 & version && "object" == typeof name && name && name.__esModule) {
          return name;
        }
        /** @type {!Object} */
        var d = Object.create(null);
        if (t.r(d), Object.defineProperty(d, "default", {
          enumerable : true,
          value : name
        }), 2 & version && "string" != typeof name) {
          var s;
          for (s in name) {
            t.d(d, s, function(nameProp) {
              return name[nameProp];
            }.bind(null, s));
          }
        }
        return d;
      }, t.n = function(module) {
        /** @type {function(): ?} */
        var n = module && module.__esModule ? function() {
          return module.default;
        } : function() {
          return module;
        };
        return t.d(n, "a", n), n;
      }, t.o = function(t, object) {
        return Object.prototype.hasOwnProperty.call(t, object);
      }, t.p = "", t(t.s = 0);
    }([function(canCreateDiscussions, iface, j) {
      /**
       * @return {undefined}
       */
      function templateIdentifier() {
        nineOclock.recalculateScale();
      }
      Object.defineProperty(iface, "__esModule", {
        value : true
      });
      var t = j(1);
      var root = j(2);
      var nineOclock = j(6);
      /** @type {null} */
      var component = null;
      /**
       * @param {!Object} children
       * @return {undefined}
       */
      var section = function(children) {
        /** @type {!Object} */
        component = children;
      };
      /**
       * @param {!Object} uuid
       * @return {undefined}
       */
      iface.initJackpot = function(uuid) {
        t.render(t.h(root.App, {
          ref : section
        }), uuid);
      };
      /**
       * @param {string} compData
       * @return {undefined}
       */
      iface.setJackpotState = function(compData) {
        component.setState(compData);
      };
      /** @type {function(): undefined} */
      iface.notifyUiChanged = templateIdentifier;
      (function(t) {
        var e;
        for (e in t) {
          if (!iface.hasOwnProperty(e)) {
            iface[e] = t[e];
          }
        }
      })(j(8));
    }, function(canCreateDiscussions, d, _) {
      /**
       * @param {string} name
       * @param {!Object} attributes
       * @return {?}
       */
      function h(name, attributes) {
        var lastSimple;
        var val;
        var simple;
        var i;
        /** @type {!Array} */
        var arr = undefined;
        /** @type {number} */
        i = arguments.length;
        for (; i-- > 2;) {
          t.push(arguments[i]);
        }
        if (attributes && null != attributes.children) {
          if (!t.length) {
            t.push(attributes.children);
          }
          delete attributes.children;
        }
        for (; t.length;) {
          if ((val = t.pop()) && void 0 !== val.pop) {
            i = val.length;
            for (; i--;) {
              t.push(val[i]);
            }
          } else {
            if ("boolean" == typeof val) {
              /** @type {null} */
              val = null;
            }
            if (simple = "function" != typeof name) {
              if (null == val) {
                /** @type {string} */
                val = "";
              } else {
                if ("number" == typeof val) {
                  /** @type {string} */
                  val = String(val);
                } else {
                  if ("string" != typeof val) {
                    /** @type {boolean} */
                    simple = false;
                  }
                }
              }
            }
            if (simple && lastSimple) {
              arr[arr.length - 1] += val;
            } else {
              if (arr === undefined) {
                /** @type {!Array} */
                arr = [val];
              } else {
                arr.push(val);
              }
            }
            /** @type {boolean} */
            lastSimple = simple;
          }
        }
        var p = new VNode;
        return p.nodeName = name, p.children = arr, p.attributes = null == attributes ? void 0 : attributes, p.key = null == attributes ? void 0 : attributes.key, void 0 !== options.vnode && options.vnode(p), p;
      }
      /**
       * @param {!Object} target
       * @param {!Object} source
       * @return {?}
       */
      function extend(target, source) {
        var prop;
        for (prop in source) {
          target[prop] = source[prop];
        }
        return target;
      }
      /**
       * @param {!HTMLElement} vnode
       * @param {!Object} props
       * @return {?}
       */
      function cloneElement(vnode, props) {
        return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
      }
      /**
       * @param {?} component
       * @return {undefined}
       */
      function enqueueRender(component) {
        if (!component._dirty && (component._dirty = true) && 1 == exports.push(component)) {
          (options.debounceRendering || defer)(rerender);
        }
      }
      /**
       * @return {undefined}
       */
      function rerender() {
        var component;
        var errors = exports;
        /** @type {!Array} */
        exports = [];
        for (; component = errors.pop();) {
          if (component._dirty) {
            renderComponent(component);
          }
        }
      }
      /**
       * @param {!Element} node
       * @param {!Node} vnode
       * @param {string} hydrating
       * @return {?}
       */
      function isSameNodeType(node, vnode, hydrating) {
        return "string" == typeof vnode || "number" == typeof vnode ? void 0 !== node.splitText : "string" == typeof vnode.nodeName ? !node._componentConstructor && isNamedNode(node, vnode.nodeName) : hydrating || node._componentConstructor === vnode.nodeName;
      }
      /**
       * @param {!Element} node
       * @param {string} nodeName
       * @return {?}
       */
      function isNamedNode(node, nodeName) {
        return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
      }
      /**
       * @param {!HTMLElement} vnode
       * @return {?}
       */
      function getNodeProps(vnode) {
        var props = extend({}, vnode.attributes);
        props.children = vnode.children;
        var defaultProps = vnode.nodeName.defaultProps;
        if (void 0 !== defaultProps) {
          var i;
          for (i in defaultProps) {
            if (void 0 === props[i]) {
              props[i] = defaultProps[i];
            }
          }
        }
        return props;
      }
      /**
       * @param {undefined} nodeName
       * @param {boolean} isSvg
       * @return {?}
       */
      function createNode(nodeName, isSvg) {
        /** @type {!Element} */
        var node = isSvg ? document.createElementNS("http://www.w3.org/2000/svg", nodeName) : document.createElement(nodeName);
        return node.normalizedNodeName = nodeName, node;
      }
      /**
       * @param {!Node} elem
       * @return {undefined}
       */
      function removeNode(elem) {
        var p = elem.parentNode;
        if (p) {
          p.removeChild(elem);
        }
      }
      /**
       * @param {!Element} node
       * @param {string} name
       * @param {?} old
       * @param {?} value
       * @param {boolean} isSvg
       * @return {undefined}
       */
      function setAccessor(node, name, old, value, isSvg) {
        if ("className" === name && (name = "class"), "key" === name) {
        } else {
          if ("ref" === name) {
            if (old) {
              old(null);
            }
            if (value) {
              value(node);
            }
          } else {
            if ("class" !== name || isSvg) {
              if ("style" === name) {
                if (value && "string" != typeof value && "string" != typeof old || (node.style.cssText = value || ""), value && "object" == typeof value) {
                  if ("string" != typeof old) {
                    var name;
                    for (name in old) {
                      if (!(name in value)) {
                        /** @type {string} */
                        node.style[name] = "";
                      }
                    }
                  }
                  for (name in value) {
                    node.style[name] = "number" == typeof value[name] && false === reBlockName.test(name) ? value[name] + "px" : value[name];
                  }
                }
              } else {
                if ("dangerouslySetInnerHTML" === name) {
                  if (value) {
                    node.innerHTML = value.__html || "";
                  }
                } else {
                  if ("o" == name[0] && "n" == name[1]) {
                    /** @type {boolean} */
                    var useCapture = name !== (name = name.replace(/Capture$/, ""));
                    name = name.toLowerCase().substring(2);
                    if (value) {
                      if (!old) {
                        node.addEventListener(name, eventProxy, useCapture);
                      }
                    } else {
                      node.removeEventListener(name, eventProxy, useCapture);
                    }
                    (node._listeners || (node._listeners = {}))[name] = value;
                  } else {
                    if ("list" !== name && "type" !== name && !isSvg && name in node) {
                      try {
                        node[name] = null == value ? "" : value;
                      } catch (t) {
                      }
                      if (!(null != value && false !== value || "spellcheck" == name)) {
                        node.removeAttribute(name);
                      }
                    } else {
                      var ns = isSvg && name !== (name = name.replace(/^xlink:?/, ""));
                      if (null == value || false === value) {
                        if (ns) {
                          node.removeAttributeNS("http://www.w3.org/1999/xlink", name.toLowerCase());
                        } else {
                          node.removeAttribute(name);
                        }
                      } else {
                        if ("function" != typeof value) {
                          if (ns) {
                            node.setAttributeNS("http://www.w3.org/1999/xlink", name.toLowerCase(), value);
                          } else {
                            node.setAttribute(name, value);
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              node.className = value || "";
            }
          }
        }
      }
      /**
       * @param {!Object} e
       * @return {?}
       */
      function eventProxy(e) {
        return this._listeners[e.type](options.event && options.event(e) || e);
      }
      /**
       * @return {undefined}
       */
      function flushMounts() {
        var c;
        for (; c = mounts.pop();) {
          if (options.afterMount) {
            options.afterMount(c);
          }
          if (c.componentDidMount) {
            c.componentDidMount();
          }
        }
      }
      /**
       * @param {string} dom
       * @param {!Object} vnode
       * @param {boolean} context
       * @param {boolean} mountAll
       * @param {!Object} parent
       * @param {string} componentRoot
       * @return {?}
       */
      function diff(dom, vnode, context, mountAll, parent, componentRoot) {
        if (!closeOffset++) {
          /** @type {boolean} */
          isSvgMode = null != parent && void 0 !== parent.ownerSVGElement;
          /** @type {boolean} */
          hydrating = null != dom && !("__preactattr_" in dom);
        }
        var ret = idiff(dom, vnode, context, mountAll, componentRoot);
        return parent && ret.parentNode !== parent && parent.appendChild(ret), --closeOffset || (hydrating = false, componentRoot || flushMounts()), ret;
      }
      /**
       * @param {!Element} dom
       * @param {!Object} vnode
       * @param {boolean} context
       * @param {boolean} mountAll
       * @param {!Element} componentRoot
       * @return {?}
       */
      function idiff(dom, vnode, context, mountAll, componentRoot) {
        /** @type {!Element} */
        var out = dom;
        var prevSvgMode = isSvgMode;
        if (null != vnode && "boolean" != typeof vnode || (vnode = ""), "string" == typeof vnode || "number" == typeof vnode) {
          return dom && void 0 !== dom.splitText && dom.parentNode && (!dom._component || componentRoot) ? dom.nodeValue != vnode && (dom.nodeValue = vnode) : (out = document.createTextNode(vnode), dom && (dom.parentNode && dom.parentNode.replaceChild(out, dom), recollectNodeTree(dom, true))), out.__preactattr_ = true, out;
        }
        var nodeName = vnode.nodeName;
        if ("function" == typeof nodeName) {
          return buildComponentFromVNode(dom, vnode, context, mountAll);
        }
        if (isSvgMode = "svg" === nodeName || "foreignObject" !== nodeName && isSvgMode, nodeName = String(nodeName), (!dom || !isNamedNode(dom, nodeName)) && (out = createNode(nodeName, isSvgMode), dom)) {
          for (; dom.firstChild;) {
            out.appendChild(dom.firstChild);
          }
          if (dom.parentNode) {
            dom.parentNode.replaceChild(out, dom);
          }
          recollectNodeTree(dom, true);
        }
        var fc = out.firstChild;
        var props = out.__preactattr_;
        var vchildren = vnode.children;
        if (null == props) {
          props = out.__preactattr_ = {};
          var errors = out.attributes;
          var i = errors.length;
          for (; i--;) {
            props[errors[i].name] = errors[i].value;
          }
        }
        return !hydrating && vchildren && 1 === vchildren.length && "string" == typeof vchildren[0] && null != fc && void 0 !== fc.splitText && null == fc.nextSibling ? fc.nodeValue != vchildren[0] && (fc.nodeValue = vchildren[0]) : (vchildren && vchildren.length || null != fc) && innerDiffNode(out, vchildren, context, mountAll, hydrating || null != props.dangerouslySetInnerHTML), diffAttributes(out, vnode.attributes, props), isSvgMode = prevSvgMode, out;
      }
      /**
       * @param {!Node} dom
       * @param {number} vchildren
       * @param {boolean} context
       * @param {boolean} mountAll
       * @param {string} isHydrating
       * @return {undefined}
       */
      function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
        var prop;
        var c;
        var f;
        var vchild;
        var child;
        var siblings = dom.childNodes;
        /** @type {!Array} */
        var children = [];
        var keyed = {};
        /** @type {number} */
        var parent = 0;
        /** @type {number} */
        var authedPriority = 0;
        var explicitSiblingCount = siblings.length;
        /** @type {number} */
        var othersPriority = 0;
        var vlen = vchildren ? vchildren.length : 0;
        if (0 !== explicitSiblingCount) {
          /** @type {number} */
          var i = 0;
          for (; i < explicitSiblingCount; i++) {
            var child = siblings[i];
            var props = child.__preactattr_;
            var key = vlen && props ? child._component ? child._component.__key : props.key : null;
            if (null != key) {
              parent++;
              keyed[key] = child;
            } else {
              if (props || (void 0 !== child.splitText ? !isHydrating || child.nodeValue.trim() : isHydrating)) {
                children[othersPriority++] = child;
              }
            }
          }
        }
        if (0 !== vlen) {
          /** @type {number} */
          i = 0;
          for (; i < vlen; i++) {
            vchild = vchildren[i];
            /** @type {null} */
            child = null;
            key = vchild.key;
            if (null != key) {
              if (parent && void 0 !== keyed[key]) {
                child = keyed[key];
                keyed[key] = void 0;
                parent--;
              }
            } else {
              if (authedPriority < othersPriority) {
                /** @type {number} */
                prop = authedPriority;
                for (; prop < othersPriority; prop++) {
                  if (void 0 !== children[prop] && isSameNodeType(c = children[prop], vchild, isHydrating)) {
                    child = c;
                    children[prop] = void 0;
                    if (prop === othersPriority - 1) {
                      othersPriority--;
                    }
                    if (prop === authedPriority) {
                      authedPriority++;
                    }
                    break;
                  }
                }
              }
            }
            child = idiff(child, vchild, context, mountAll);
            f = siblings[i];
            if (child && child !== dom && child !== f) {
              if (null == f) {
                dom.appendChild(child);
              } else {
                if (child === f.nextSibling) {
                  removeNode(f);
                } else {
                  dom.insertBefore(child, f);
                }
              }
            }
          }
        }
        if (parent) {
          for (i in keyed) {
            if (void 0 !== keyed[i]) {
              recollectNodeTree(keyed[i], false);
            }
          }
        }
        for (; authedPriority <= othersPriority;) {
          if (void 0 !== (child = children[othersPriority--])) {
            recollectNodeTree(child, false);
          }
        }
      }
      /**
       * @param {!Node} node
       * @param {boolean} unmountOnly
       * @return {undefined}
       */
      function recollectNodeTree(node, unmountOnly) {
        var inner = node._component;
        if (inner) {
          unmountComponent(inner);
        } else {
          if (null != node.__preactattr_ && node.__preactattr_.ref) {
            node.__preactattr_.ref(null);
          }
          if (!(false !== unmountOnly && null != node.__preactattr_)) {
            removeNode(node);
          }
          removeChildren(node);
        }
      }
      /**
       * @param {!Node} node
       * @return {undefined}
       */
      function removeChildren(node) {
        node = node.lastChild;
        for (; node;) {
          var tmpNode = node.previousSibling;
          recollectNodeTree(node, true);
          node = tmpNode;
        }
      }
      /**
       * @param {!Element} dom
       * @param {!Array} attrs
       * @param {!Array} old
       * @return {undefined}
       */
      function diffAttributes(dom, attrs, old) {
        var name;
        for (name in old) {
          if (!(attrs && null != attrs[name] || null == old[name])) {
            setAccessor(dom, name, old[name], old[name] = void 0, isSvgMode);
          }
        }
        for (name in attrs) {
          if (!("children" === name || "innerHTML" === name || name in old && attrs[name] === ("value" === name || "checked" === name ? dom[name] : old[name]))) {
            setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
          }
        }
      }
      /**
       * @param {!Function} Ctor
       * @param {?} props
       * @param {boolean} context
       * @return {?}
       */
      function createComponent(Ctor, props, context) {
        var inst;
        /** @type {number} */
        var i = list.length;
        if (Ctor.prototype && Ctor.prototype.render) {
          inst = new Ctor(props, context);
          Component.call(inst, props, context);
        } else {
          inst = new Component(props, context);
          /** @type {!Function} */
          inst.constructor = Ctor;
          /** @type {function(!CanvasRenderingContext2D, !Object, boolean): ?} */
          inst.render = doRender;
        }
        for (; i--;) {
          if (list[i].constructor === Ctor) {
            return inst.nextBase = list[i].nextBase, list.splice(i, 1), inst;
          }
        }
        return inst;
      }
      /**
       * @param {!CanvasRenderingContext2D} options
       * @param {!Object} value
       * @param {boolean} context
       * @return {?}
       */
      function doRender(options, value, context) {
        return this.constructor(options, context);
      }
      /**
       * @param {!Object} component
       * @param {!Object} props
       * @param {number} opts
       * @param {string} context
       * @param {boolean} mountAll
       * @return {undefined}
       */
      function setComponentProps(component, props, opts, context, mountAll) {
        if (!component._disable) {
          /** @type {boolean} */
          component._disable = true;
          component.__ref = props.ref;
          component.__key = props.key;
          delete props.ref;
          delete props.key;
          if (void 0 === component.constructor.getDerivedStateFromProps) {
            if (!component.base || mountAll) {
              if (component.componentWillMount) {
                component.componentWillMount();
              }
            } else {
              if (component.componentWillReceiveProps) {
                component.componentWillReceiveProps(props, context);
              }
            }
          }
          if (context && context !== component.context) {
            if (!component.prevContext) {
              component.prevContext = component.context;
            }
            /** @type {string} */
            component.context = context;
          }
          if (!component.prevProps) {
            component.prevProps = component.props;
          }
          /** @type {!Object} */
          component.props = props;
          /** @type {boolean} */
          component._disable = false;
          if (0 !== opts) {
            if (1 !== opts && false === options.syncComponentUpdates && component.base) {
              enqueueRender(component);
            } else {
              renderComponent(component, 1, mountAll);
            }
          }
          if (component.__ref) {
            component.__ref(component);
          }
        }
      }
      /**
       * @param {!Element} component
       * @param {number} opts
       * @param {boolean} mountAll
       * @param {boolean} isChild
       * @return {undefined}
       */
      function renderComponent(component, opts, mountAll, isChild) {
        if (!component._disable) {
          var rendered;
          var inst;
          var cbase;
          var props = component.props;
          var state = component.state;
          var context = component.context;
          var previousProps = component.prevProps || props;
          var previousState = component.prevState || state;
          var value = component.prevContext || context;
          var isUpdate = component.base;
          var nextBase = component.nextBase;
          var initialBase = isUpdate || nextBase;
          var initialChildComponent = component._component;
          /** @type {boolean} */
          var T = false;
          var newValue = value;
          if (component.constructor.getDerivedStateFromProps && (state = extend(extend({}, state), component.constructor.getDerivedStateFromProps(props, state)), component.state = state), isUpdate && (component.props = previousProps, component.state = previousState, component.context = value, 2 !== opts && component.shouldComponentUpdate && false === component.shouldComponentUpdate(props, state, context) ? T = true : component.componentWillUpdate && component.componentWillUpdate(props, state, context), 
          component.props = props, component.state = state, component.context = context), component.prevProps = component.prevState = component.prevContext = component.nextBase = null, component._dirty = false, !T) {
            rendered = component.render(props, state, context);
            if (component.getChildContext) {
              context = extend(extend({}, context), component.getChildContext());
            }
            if (isUpdate && component.getSnapshotBeforeUpdate) {
              newValue = component.getSnapshotBeforeUpdate(previousProps, previousState);
            }
            var toUnmount;
            var base;
            var childComponent = rendered && rendered.nodeName;
            if ("function" == typeof childComponent) {
              var childProps = getNodeProps(rendered);
              inst = initialChildComponent;
              if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {
                setComponentProps(inst, childProps, 1, context, false);
              } else {
                toUnmount = inst;
                component._component = inst = createComponent(childComponent, childProps, context);
                inst.nextBase = inst.nextBase || nextBase;
                /** @type {!Element} */
                inst._parentComponent = component;
                setComponentProps(inst, childProps, 0, context, false);
                renderComponent(inst, 1, mountAll, true);
              }
              base = inst.base;
            } else {
              cbase = initialBase;
              toUnmount = initialChildComponent;
              if (toUnmount) {
                /** @type {null} */
                cbase = component._component = null;
              }
              if (initialBase || 1 === opts) {
                if (cbase) {
                  /** @type {null} */
                  cbase._component = null;
                }
                base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);
              }
            }
            if (initialBase && base !== initialBase && inst !== initialChildComponent) {
              var baseParent = initialBase.parentNode;
              if (baseParent && base !== baseParent) {
                baseParent.replaceChild(base, initialBase);
                if (!toUnmount) {
                  /** @type {null} */
                  initialBase._component = null;
                  recollectNodeTree(initialBase, false);
                }
              }
            }
            if (toUnmount && unmountComponent(toUnmount), component.base = base, base && !isChild) {
              /** @type {!Element} */
              var componentRef = component;
              /** @type {!Element} */
              var t = component;
              for (; t = t._parentComponent;) {
                (componentRef = t).base = base;
              }
              base._component = componentRef;
              base._componentConstructor = componentRef.constructor;
            }
          }
          if (!isUpdate || mountAll) {
            mounts.unshift(component);
          } else {
            if (!T) {
              if (component.componentDidUpdate) {
                component.componentDidUpdate(previousProps, previousState, newValue);
              }
              if (options.afterUpdate) {
                options.afterUpdate(component);
              }
            }
          }
          for (; component._renderCallbacks.length;) {
            component._renderCallbacks.pop().call(component);
          }
          if (!(closeOffset || isChild)) {
            flushMounts();
          }
        }
      }
      /**
       * @param {!Element} dom
       * @param {!HTMLElement} vnode
       * @param {boolean} context
       * @param {boolean} mountAll
       * @return {?}
       */
      function buildComponentFromVNode(dom, vnode, context, mountAll) {
        var c = dom && dom._component;
        var originalComponent = c;
        /** @type {!Element} */
        var oldDom = dom;
        var isDirectOwner = c && dom._componentConstructor === vnode.nodeName;
        var isOwner = isDirectOwner;
        var props = getNodeProps(vnode);
        for (; c && !isOwner && (c = c._parentComponent);) {
          /** @type {boolean} */
          isOwner = c.constructor === vnode.nodeName;
        }
        return c && isOwner && (!mountAll || c._component) ? (setComponentProps(c, props, 3, context, mountAll), dom = c.base) : (originalComponent && !isDirectOwner && (unmountComponent(originalComponent), dom = oldDom = null), c = createComponent(vnode.nodeName, props, context), dom && !c.nextBase && (c.nextBase = dom, oldDom = null), setComponentProps(c, props, 1, context, mountAll), dom = c.base, oldDom && dom !== oldDom && (oldDom._component = null, recollectNodeTree(oldDom, false))), dom;
      }
      /**
       * @param {!Object} component
       * @return {undefined}
       */
      function unmountComponent(component) {
        if (options.beforeUnmount) {
          options.beforeUnmount(component);
        }
        var base = component.base;
        /** @type {boolean} */
        component._disable = true;
        if (component.componentWillUnmount) {
          component.componentWillUnmount();
        }
        /** @type {null} */
        component.base = null;
        var inner = component._component;
        if (inner) {
          unmountComponent(inner);
        } else {
          if (base) {
            if (base.__preactattr_ && base.__preactattr_.ref) {
              base.__preactattr_.ref(null);
            }
            component.nextBase = base;
            removeNode(base);
            list.push(component);
            removeChildren(base);
          }
        }
        if (component.__ref) {
          component.__ref(null);
        }
      }
      /**
       * @param {!Object} props
       * @param {string} context
       * @return {undefined}
       */
      function Component(props, context) {
        /** @type {boolean} */
        this._dirty = true;
        /** @type {string} */
        this.context = context;
        /** @type {!Object} */
        this.props = props;
        this.state = this.state || {};
        /** @type {!Array} */
        this._renderCallbacks = [];
      }
      /**
       * @param {!Object} obj
       * @param {!Object} data
       * @param {boolean} merge
       * @return {?}
       */
      function render(obj, data, merge) {
        return diff(merge, obj, {}, false, data, false);
      }
      _.r(d);
      _.d(d, "h", function() {
        return h;
      });
      _.d(d, "createElement", function() {
        return h;
      });
      _.d(d, "cloneElement", function() {
        return cloneElement;
      });
      _.d(d, "Component", function() {
        return Component;
      });
      _.d(d, "render", function() {
        return render;
      });
      _.d(d, "rerender", function() {
        return rerender;
      });
      _.d(d, "options", function() {
        return options;
      });
      /**
       * @return {undefined}
       */
      var VNode = function() {
      };
      var options = {};
      /** @type {!Array} */
      var t = [];
      /** @type {!Array} */
      var undefined = [];
      /** @type {!Function} */
      var defer = "function" == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;
      /** @type {!RegExp} */
      var reBlockName = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
      /** @type {!Array} */
      var exports = [];
      /** @type {!Array} */
      var mounts = [];
      /** @type {number} */
      var closeOffset = 0;
      /** @type {boolean} */
      var isSvgMode = false;
      /** @type {boolean} */
      var hydrating = false;
      /** @type {!Array} */
      var list = [];
      extend(Component.prototype, {
        setState : function(state, callback) {
          if (!this.prevState) {
            this.prevState = this.state;
          }
          this.state = extend(extend({}, this.state), "function" == typeof state ? state(this.state, this.props) : state);
          if (callback) {
            this._renderCallbacks.push(callback);
          }
          enqueueRender(this);
        },
        forceUpdate : function(callback) {
          if (callback) {
            this._renderCallbacks.push(callback);
          }
          renderComponent(this, 2);
        },
        render : function() {
        }
      });
      var preact = {
        h : h,
        createElement : h,
        cloneElement : cloneElement,
        Component : Component,
        render : render,
        rerender : rerender,
        options : options
      };
      d.default = preact;
    }, function(canCreateDiscussions, exports, require) {
      var fieldSpecificFormatter = this && this.__extends || function() {
        /**
         * @param {?} comp
         * @param {string} type
         * @return {?}
         */
        var fn = function(comp, type) {
          return (fn = Object.setPrototypeOf || {
            __proto__ : []
          } instanceof Array && function(el, instance) {
            /** @type {!Object} */
            el.__proto__ = instance;
          } || function(t, array) {
            var i;
            for (i in array) {
              if (array.hasOwnProperty(i)) {
                t[i] = array[i];
              }
            }
          })(comp, type);
        };
        return function(child, value) {
          /**
           * @return {undefined}
           */
          function data() {
            this.constructor = child;
          }
          fn(child, value);
          child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
        };
      }();
      Object.defineProperty(exports, "__esModule", {
        value : true
      });
      var self = require(1);
      var tip = require(3);
      var lang = require(4);
      var Constants = require(8);
      var App = function(f) {
        /**
         * @return {?}
         */
        function val() {
          var boilerStateMachine = f.call(this) || this;
          return boilerStateMachine.setState(new Constants.AppState), boilerStateMachine;
        }
        return fieldSpecificFormatter(val, f), val.prototype.render = function() {
          return self.h("div", {
            id : "jackpot-list"
          }, self.h(tip.Logo, {
            siblings : this.state.jackpots.length
          }), self.h(lang.JackpotList, {
            jackpotState : this.state.jackpots,
            channel : this.state.channel
          }));
        }, val;
      }(self.Component);
      exports.App = App;
    }, function(canCreateDiscussions, template, unitToColor) {
      Object.defineProperty(template, "__esModule", {
        value : true
      });
      var c = unitToColor(1);
      /**
       * @param {!Object} ancestor
       * @return {?}
       */
      template.Logo = function(ancestor) {
        var siblings = ancestor.siblings;
        return c.h("div", {
          class : "logo siblings-" + siblings
        });
      };
    }, function(canCreateDiscussions, BeautifulProperties, require) {
      var done = this && this.__assign || function() {
        return done = Object.assign || function(obj) {
          var source;
          /** @type {number} */
          var i__7286__auto___11343 = 1;
          /** @type {number} */
          var len__7285__auto___11342 = arguments.length;
          for (; i__7286__auto___11343 < len__7285__auto___11342; i__7286__auto___11343++) {
            source = arguments[i__7286__auto___11343];
            var prop;
            for (prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                obj[prop] = source[prop];
              }
            }
          }
          return obj;
        }, done.apply(this, arguments);
      };
      Object.defineProperty(BeautifulProperties, "__esModule", {
        value : true
      });
      var $ = require(1);
      var tip = require(5);
      var request = require(7);
      /**
       * @param {!Object} sub
       * @return {?}
       */
      BeautifulProperties.JackpotList = function(sub) {
        var schemas = sub.jackpotState;
        var channel = sub.channel;
        return $.h("ul", null, schemas.map(function(args) {
          return $.h("li", null, $.h(tip.Jackpot, done({}, args, {
            limitHOC : request.Limit,
            channel : channel
          })));
        }));
      };
    }, function(canCreateDiscussions, BeautifulProperties, $) {
      Object.defineProperty(BeautifulProperties, "__esModule", {
        value : true
      });
      var self = $(1);
      var tip = $(6);
      /**
       * @param {?} item
       * @return {?}
       */
      var addButton = function(item) {
        return self.h("span", {
          class : "prize"
        }, item.prize);
      };
      /**
       * @param {?} item
       * @return {?}
       */
      var render = function(item) {
        return self.h("div", {
          className : "prize-size-container"
        }, self.h(tip.FitContent, null, self.h("span", {
          class : "prize"
        }, item.prize)));
      };
      /**
       * @param {string} type
       * @param {string} button
       * @return {?}
       */
      var send = function(type, button) {
        return button ? "mobile" === type ? self.h(addButton, {
          prize : button
        }) : self.h(render, {
          prize : button
        }) : null;
      };
      /**
       * @param {!Object} item
       * @return {?}
       */
      BeautifulProperties.Jackpot = function(item) {
        var data = item.title;
        var i = item.prize;
        var content = item.label;
        var l = item.limit;
        var title = item.limitHOC;
        var key = item.type;
        var event = item.channel;
        var rows = self.h("div", null, self.h("h1", null, data), send(event, i), content && self.h("div", {
          class : "active-text"
        }, content), l && title({
          label : l
        }));
        return self.h("div", {
          class : "jackpot type-" + key
        }, "mobile" === event ? self.h(tip.FitContent, null, rows) : rows);
      };
    }, function(canCreateDiscussions, event, __webpack_require__) {
      /**
       * @return {undefined}
       */
      function testObservableFromPropertyChanges() {
        f.forEach(function(link) {
          return get(link);
        });
      }
      /**
       * @param {!Object} self
       * @return {undefined}
       */
      function get(self) {
        /**
         * @param {?} value
         * @return {?}
         */
        function getNumber(value) {
          return parseFloat(value) || 0;
        }
        if (self) {
          var styles = window.getComputedStyle(self.parentElement);
          /** @type {number} */
          var width = Math.max(0, self.parentElement.offsetWidth - getNumber(styles.paddingLeft) - getNumber(styles.paddingRight));
          /** @type {number} */
          var y = Math.max(0, self.parentElement.offsetHeight - getNumber(styles.paddingTop) - getNumber(styles.paddingBottom));
          /** @type {number} */
          var r = Math.min(width / self.offsetWidth, y / self.offsetHeight);
          /** @type {string} */
          self.style.transform = "scale(" + r + ")";
        }
      }
      var describe = this && this.__extends || function() {
        /**
         * @param {?} comp
         * @param {string} type
         * @return {?}
         */
        var fn = function(comp, type) {
          return (fn = Object.setPrototypeOf || {
            __proto__ : []
          } instanceof Array && function(el, instance) {
            /** @type {!Object} */
            el.__proto__ = instance;
          } || function(t, array) {
            var i;
            for (i in array) {
              if (array.hasOwnProperty(i)) {
                t[i] = array[i];
              }
            }
          })(comp, type);
        };
        return function(child, value) {
          /**
           * @return {undefined}
           */
          function data() {
            this.constructor = child;
          }
          fn(child, value);
          child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
        };
      }();
      Object.defineProperty(event, "__esModule", {
        value : true
      });
      var React = __webpack_require__(1);
      /** @type {!Set} */
      var f = new Set;
      /** @type {function(): undefined} */
      event.recalculateScale = testObservableFromPropertyChanges;
      var relSet = function(f) {
        /**
         * @return {?}
         */
        function App() {
          var input = null !== f && f.apply(this, arguments) || this;
          return input._ref = null, input;
        }
        return describe(App, f), App.prototype.componentDidUpdate = function() {
          var record = this;
          window.requestAnimationFrame(function() {
            return get(record._ref);
          });
        }, App.prototype.updateRef = function(path) {
          if (path) {
            f.add(path);
            /** @type {string} */
            this._ref = path;
            window.requestAnimationFrame(function() {
              get(path);
            });
          } else {
            f.delete(this._ref);
            /** @type {null} */
            this._ref = null;
          }
        }, App.prototype.render = function() {
          var repo = this;
          return React.h("div", {
            ref : function(ref) {
              return repo.updateRef(ref);
            },
            class : "content-scaler"
          }, this.props.children);
        }, App;
      }(React.Component);
      event.FitContent = relSet;
    }, function(canCreateDiscussions, data, require) {
      Object.defineProperty(data, "__esModule", {
        value : true
      });
      var util = require(1);
      /** @type {!RegExp} */
      var rCssJsTag = /^[0-9\-]{2}(:[0-9\-]{2}){1,2}?$/;
      /**
       * @param {?} type
       * @param {number} i
       * @return {?}
       */
      var e = function(type, i) {
        var data;
        return i > 0 && (data = util.h("span", {
          class : "time-prefix"
        }, ":")), [data, util.h("span", {
          class : "time-digits"
        }, type)];
      };
      /**
       * @param {!Object} options
       * @return {?}
       */
      data.Limit = function(options) {
        var content = options.label;
        return rCssJsTag.test(content) ? util.h("div", {
          class : "limit time-label"
        }, content.split(":").map(e)) : !!content && util.h("div", {
          class : "limit"
        }, content);
      };
    }, function(canCreateDiscussions, e, n) {
      Object.defineProperty(e, "__esModule", {
        value : true
      });
      var newOrg = function() {
        /**
         * @return {undefined}
         */
        function t() {
          /** @type {!Array} */
          this.jackpots = [];
        }
        return t;
      }();
      e.AppState = newOrg;
    }]);
  });
}, function(mixin, canCreateDiscussions, saveNotifs) {
  mixin.exports = saveNotifs(7)(0);
}, function(canCreateDiscussions, e, require) {
  var clearSetEntry = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var UrdfMaterial = require(0);
  var cp = require(1);
  var newOrg = function(model) {
    /**
     * @param {?} value
     * @param {?} resp
     * @return {?}
     */
    function set(value, resp) {
      var self = model.call(this, value, resp, 1) || this;
      var o = cp.ResourceManager.getInstance().getEntityManager();
      return self._animationLayer = self._entity.getHierarchy("animationOverlay"), self._scatterEntiy = o.create("?"), o.add("fpsFeatures", self._scatterEntiy), self._animationLayer.add("fpsFeatures", self._scatterEntiy), self;
    }
    return clearSetEntry(set, model), set.prototype.enable = function(value) {
      model.prototype.enable.call(this, value);
      this._entity.getDisplay("progressBar").setVisible(!value);
      this._entity.getDisplay("continueAnim").setVisible(value);
      this._entity.getDisplay("dontShowAgainAnim").setVisible(value);
      this._entity.getAnimation("continueAnim");
      this._entity.getAnimation("dontShowAgainAnim");
    }, set.prototype.getDontShowAgainBtn = function() {
      return this._entity.getButton("dontShowAgainBtn.btn");
    }, set.prototype.onProgress = function(n) {
      this._entity.getTransform("progress").setScaleX(n);
    }, set;
  }(UrdfMaterial.VideoSlotSplashManager);
  e.BoDSplashManager = newOrg;
}, function(canCreateDiscussions, e, require) {
  var waitFor = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var UrdfMaterial = require(0);
  var cp = require(1);
  var newOrg = function(cb) {
    /**
     * @param {?} url
     * @return {?}
     */
    function ready(url) {
      var axis = this;
      var _model = cp.ResourceManager.getInstance().getEntityManager();
      var data = _model.create("?");
      return _model.add("logo", data), axis = cb.call(this, url, data) || this, axis._isInIdle = true, axis;
    }
    return waitFor(ready, cb), ready;
  }(UrdfMaterial.VideoSlotLogo);
  e.BoDLogo = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var i = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var CrocMSRP = floor(0);
  var startXNew = floor(4);
  var TL = floor(20);
  var f = floor(21);
  var THREE = floor(22);
  var newOrg = function(h) {
    /**
     * @param {string} x
     * @param {?} l
     * @param {?} m
     * @param {?} o
     * @param {?} value
     * @param {?} property
     * @return {?}
     */
    function o(x, l, m, o, value, property) {
      var point = h.call(this, x, l, m, o, value, property) || this;
      return point.createWaitController(x), point;
    }
    return i(o, h), Object.defineProperty(o.prototype, "y0", {
      get : function() {
        return 215;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "x0", {
      get : function() {
        return 182.5;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "yGap", {
      get : function() {
        return 0.5;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(o.prototype, "xGap", {
      get : function() {
        return 13.5;
      },
      enumerable : true,
      configurable : true
    }), o.prototype.createStopSequencer = function(params, value_in_code) {
      var n = new f.BoDSuspenseHandler(startXNew.BoDSymbol.SYMBOL_SCATTER, [0, 1, 2, 3, 4], 2, 3);
      return new CrocMSRP.AnticipatedReelSequencer(this._reelData, 300, 0, params.minRoundTime, params.minQuickRoundTime, [n]);
    }, o.prototype.createReelStrips = function() {
      return [[0, 2, 1, 4, 2, 6, 0, 2, 3, 1, 7, 2, 4, 3, 6, 0, 3, 1, 4, 9, 1, 5, 4, 0, 3, 8], [7, 1, 3, 2, 9, 0, 4, 5, 2, 1, 0, 8, 2, 3, 1, 0, 5, 3, 1, 6, 4, 3, 0], [4, 0, 2, 1, 7, 4, 0, 8, 1, 5, 2, 0, 7, 9, 0, 1, 6, 3, 2, 7, 1, 4, 5, 3], [0, 1, 7, 4, 2, 6, 3, 0, 2, 3, 7, 1, 3, 2, 4, 9, 1, 2, 0, 6, 2, 0, 8, 4, 3, 5], [2, 0, 9, 4, 5, 0, 2, 8, 1, 2, 5, 1, 3, 6, 2, 7, 3, 6, 1, 3, 5, 0, 4, 7]];
    }, o.prototype.createPatterns = function() {
      return [[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [2, 2, 2, 2, 2], [0, 1, 2, 1, 0], [2, 1, 0, 1, 2], [1, 0, 0, 0, 1], [1, 2, 2, 2, 1], [0, 0, 1, 2, 2], [2, 2, 1, 0, 0], [1, 2, 1, 0, 1]];
    }, o.prototype.createWaitController = function(t) {
      return new TL.BoDWaitController(t, this);
    }, o.prototype.createReelPresentationController = function(n11, n12, b, range, o, i, delta) {
      return new THREE.BoDReelPresentationController(n11, n12, this._reelData, b, range, i, this.additionalAdjacentSymbolCnt, delta);
    }, o;
  }(startYNew.ReelManager);
  e.BoDReelManager = newOrg;
}, function(canCreateDiscussions, e, floor) {
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var startXNew = floor(0);
  var f = floor(4);
  var newOrg = function() {
    /**
     * @param {!HTMLElement} container
     * @param {!Object} background
     * @return {undefined}
     */
    function Renderer(container, background) {
      container.addEventListener(startYNew.ReelSuspenseEvent.SHOW, this.onSuspense.bind(this));
      container.addEventListener(startXNew.ReelEvent.ALLSTOPPED, this.onAllStopped.bind(this));
      /** @type {!Object} */
      this._reelManager = background;
      /** @type {!Array} */
      this._scatters = [];
      /** @type {boolean} */
      this._suspenseMode = false;
    }
    return Renderer.prototype.onSuspense = function(access) {
      /** @type {boolean} */
      this._suspenseMode = true;
      var maskStr = this._reelManager.getScatterSymbols(f.BoDSymbol.SYMBOL_SCATTER);
      if (!(maskStr.length < this._scatters.length)) {
        this._scatters = maskStr;
        /** @type {number} */
        var i = 0;
        for (; i < maskStr.length; i++) {
          this._scatters[i].wait();
        }
        /** @type {number} */
        var name = 0;
        for (; name < 5 && name != access.reelIdx; name++) {
          /** @type {number} */
          var stroke = 0;
          for (; stroke < 3; stroke++) {
            var list = this._reelManager.getSymbol(name, stroke);
            if (list.getId() != f.BoDSymbol.SYMBOL_SCATTER) {
              list.fade(true);
            }
          }
        }
      }
    }, Renderer.prototype.onAllStopped = function() {
      if (this._suspenseMode) {
        /** @type {number} */
        var name = 0;
        for (; name < 5; name++) {
          /** @type {number} */
          var stroke = 0;
          for (; stroke < 3; stroke++) {
            var list = this._reelManager.getSymbol(name, stroke);
            if (list.getId() != f.BoDSymbol.SYMBOL_SCATTER) {
              list.fade(false);
            }
          }
        }
        /** @type {number} */
        var i = 0;
        for (; i < this._scatters.length; i++) {
          this._scatters[i].stop();
        }
        /** @type {!Array} */
        this._scatters = [];
        /** @type {boolean} */
        this._suspenseMode = false;
      }
    }, Renderer;
  }();
  e.BoDWaitController = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var i = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function transition() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return i(transition, f), transition.prototype.setSymbols = function(_strings) {
      var readersLength = this._scatterReelIndices.length;
      /** @type {number} */
      var n = 0;
      /** @type {number} */
      var i = 0;
      var _overlays = this._scatterReelIndices;
      for (; i < _overlays.length; i++) {
        var o = _overlays[i];
        /** @type {boolean} */
        this._suspenseAt[o] = n >= this._minTriggerCnt && this._maxTriggerCnt > n;
        var s = _strings && _strings[o] ? _strings[o] : [];
        /** @type {number} */
        var layer_i = 0;
        var crossfilterable_layers = s;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          if (crossfilterable_layers[layer_i] === this._scatterSymbolId) {
            n++;
            break;
          }
        }
        readersLength--;
      }
    }, transition;
  }(startYNew.ScatterSuspenseHandler);
  e.BoDSuspenseHandler = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var styleProperty = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var startYNew = floor(4);
  var newOrg = function(display) {
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} x
     * @param {?} r
     * @param {?} e
     * @param {?} f
     * @param {?} o
     * @param {?} options
     * @return {?}
     */
    function o(a, b, x, r, e, f, o, options) {
      return display.call(this, a, b, x, r, e, f, o, options) || this;
    }
    return styleProperty(o, display), o.prototype.checkSymbols = function(response, f, o, i) {
      return display.prototype.checkSymbols.call(this, response, f, o, i, [startYNew.BoDSymbol.SYMBOL_WILD, startYNew.BoDSymbol.SYMBOL_SCATTER]);
    }, o;
  }(f.ReelPresentationController);
  e.BoDReelPresentationController = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var getInstance = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var startYNew = floor(4);
  var base = floor(24);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function parent() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return getInstance(parent, f), Object.defineProperty(parent.prototype, "expandingSymbolId", {
      get : function() {
        return this._expandingSymbolId;
      },
      set : function(mymuted) {
        this._expandingSymbolId = mymuted;
      },
      enumerable : true,
      configurable : true
    }), parent.prototype.createSymbol = function() {
      return new startYNew.BoDSymbol(this);
    }, parent.prototype.createSymbolStateController = function(err) {
      return new base.BoDSymbolStateController(err);
    }, Object.defineProperty(parent.prototype, "symbolStateController", {
      get : function() {
        return this._symbolStateController;
      },
      enumerable : true,
      configurable : true
    }), parent.prototype.createSymbolLayers = function(controller) {
      return [controller.getHierarchy("reelOverlay"), controller.getHierarchy("shineOverlay")];
    }, parent;
  }(f.SymbolManager);
  e.BoDSymbolManager = newOrg;
}, function(canCreateDiscussions, e, encodeURIComponent) {
  var getInstance = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var first_trend = encodeURIComponent(0);
  var t = encodeURIComponent(0);
  var WorkQueueService = encodeURIComponent(0);
  var newOrg = function(f) {
    /**
     * @param {!HTMLElement} el
     * @return {?}
     */
    function parent(el) {
      var box = f.call(this, el) || this;
      return box._firstFreespinDone = false, el.addEventListener(WorkQueueService.ReelEvent.STARTED, box.onReelStarted.bind(box)), box;
    }
    return getInstance(parent, f), parent.prototype.onReelStarted = function() {
      if (this._state == t.SymbolState.FREESPIN) {
        /** @type {boolean} */
        this._firstFreespinDone = true;
      }
      if (this._state == t.SymbolState.NORMAL) {
        /** @type {boolean} */
        this._firstFreespinDone = false;
      }
    }, Object.defineProperty(parent.prototype, "firstFreespinDone", {
      get : function() {
        return this._firstFreespinDone;
      },
      enumerable : true,
      configurable : true
    }), parent;
  }(first_trend.SymbolStateController);
  e.BoDSymbolStateController = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var extend = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var m = floor(1);
  var startYNew = floor(1);
  var newOrg = function(end) {
    /**
     * @return {?}
     */
    function Set() {
      var e = null !== end && end.apply(this, arguments) || this;
      return e._osptValues = [[100, 25, 5], [100, 25, 5], [100, 25, 5], [150, 40, 5], [150, 40, 5], [750, 100, 30, 5], [750, 100, 30, 5], [2000, 400, 40, 5], [5000, 1000, 100, 10], null], e;
    }
    return extend(Set, end), Object.defineProperty(Set.prototype, "_values", {
      get : function() {
        return Set._VALUES;
      },
      enumerable : true,
      configurable : true
    }), Set.prototype.getValues = function() {
      var item;
      /** @type {!Array} */
      var json = [];
      /** @type {number} */
      var i = 0;
      var length = this._values.length;
      for (; i < length; i++) {
        item = this.getValuesByIndex(i);
        /** @type {number} */
        var p = 0;
        var pos = item.length;
        for (; p < pos; p++) {
          json.push(item[p]);
        }
      }
      return json;
    }, Set.prototype.getValuesByIndex = function(pos) {
      var b = m.ResourceManager.getInstance().getCreditFormatter();
      var creditDisplay = m.ResourceManager.getInstance().getCreditFormatter().creditDisplay;
      /** @type {!Array} */
      var newNodeLists = [];
      if (10 === pos) {
        return newNodeLists.push(m.ResourceManager.getInstance().getMoneyFormatter().MoneyToString(this._values[pos][0] * this._betSettings.denomination, startYNew.MoneyFormatterFlag.NO_DECIMALS)), newNodeLists;
      }
      var binaryHash = this._values[pos] ? this._values[pos] : [];
      var beta = this._betSettings.coins;
      var u = 9 === pos ? this._betSettings.lines : 1;
      /** @type {number} */
      var i = 0;
      for (; i < binaryHash.length; i++) {
        if (creditDisplay) {
          newNodeLists.push(b.formatCoinValue(beta * binaryHash[i] * u));
        } else {
          newNodeLists.push(binaryHash[i].toString());
        }
      }
      return newNodeLists;
    }, Set.prototype.getOSPTValuesByIndex = function(str) {
      /** @type {!Array} */
      var newNodeLists = [];
      var data = this._osptValues[str] ? this._osptValues[str] : [];
      var vbo = m.ResourceManager.getInstance().getCreditFormatter();
      var creditDisplay = m.ResourceManager.getInstance().getCreditFormatter().creditDisplay;
      var n = this._betSettings.coins;
      /** @type {number} */
      var i = 0;
      for (; i < data.length; i++) {
        if (creditDisplay) {
          newNodeLists.push(vbo.formatCoinValue(n * data[i]));
        } else {
          newNodeLists.push(data[i].toString());
        }
      }
      return newNodeLists;
    }, Set._VALUES = [[100, 25, 5], [100, 25, 5], [100, 25, 5], [150, 40, 5], [150, 40, 5], [750, 100, 30, 5], [750, 100, 30, 5], [2000, 400, 40, 5], [5000, 1000, 100, 10], [200, 20, 2], [250000]], Set;
  }(f.PaytableData);
  e.BoDPaytableData = newOrg;
}, function(canCreateDiscussions, e, __webpack_require__) {
  var copyToFunction = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var _UiIcon = __webpack_require__(0);
  var global = __webpack_require__(27);
  var QRCode = __webpack_require__(28);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function $() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return copyToFunction($, f), $.prototype.createFreespinLogicController = function(url, options, h, i) {
      return new global.BoDFreespinLogicController(url, options, h, i);
    }, $.prototype.createView = function(data) {
      return new QRCode.BoDFreespinView(data);
    }, Object.defineProperty($.prototype, "expandingSymbol", {
      set : function(originY) {
        this._view.selectedSymbolId = originY;
      },
      enumerable : true,
      configurable : true
    }), $;
  }(_UiIcon.FreespinManager);
  e.BoDFreespinManager = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var clearSetEntry = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var startYNew = floor(9);
  var newOrg = function(log) {
    /**
     * @param {?} e
     * @param {?} n
     * @param {?} type
     * @param {?} data
     * @return {?}
     */
    function set(e, n, type, data) {
      var self = log.call(this, e, n, type, data) || this;
      return self._symbols = [], self._firstSpinDone = false, self._dispatcher.addEventListener(startYNew.BoDTriggerEvent.TRIGGER, self.onTrigger.bind(self)), self;
    }
    return clearSetEntry(set, log), set.prototype.showRetrigger = function() {
      return this._freespinWon > 0;
    }, set.prototype.onTrigger = function(object) {
      this._symbols = object.symbols;
      this._view.triggerView.setStartPositions(object.symbols);
    }, set.prototype.startIntroHandler = function(result) {
      switch(result.state) {
        case 0:
          /** @type {boolean} */
          this._firstSpinDone = false;
          /** @type {number} */
          var i = 0;
          for (; i < this._symbols.length; i++) {
            this._symbols[i].showSymbol(false);
          }
      }
      log.prototype.startIntroHandler.call(this, result);
    }, set;
  }(f.FreespinLogicController);
  e.BoDFreespinLogicController = newOrg;
}, function(canCreateDiscussions, e, n) {
  var getInstance = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var h = n(0);
  var p = n(0);
  var o = n(29);
  var end = n(4);
  var next = n(10);
  var newOrg = function(f) {
    /**
     * @param {?} selector
     * @return {?}
     */
    function parent(selector) {
      var n = f.call(this, selector) || this;
      return n._selectionPool = [], n;
    }
    return getInstance(parent, f), Object.defineProperty(parent.prototype, "selectedSymbolId", {
      set : function(mymuted) {
        /** @type {string} */
        this._selectedSymbolId = mymuted;
      },
      enumerable : true,
      configurable : true
    }), Object.defineProperty(parent.prototype, "triggerView", {
      get : function() {
        return this._triggerView;
      },
      enumerable : true,
      configurable : true
    }), parent.prototype.startIntroHandler = function(self) {
      switch(self.state) {
        case 0:
          this.dispatch(new p.FreespinViewEvent(next.BoDFreespinViewEvent.TRIGGER_START));
          this._triggerView.startTrigger(self);
          break;
        case 1:
          self.startFunction(this._introAnim.play, "loop_out");
          this._smokeAnim.play("play");
          this._selectedSymbolIntro.play("stop");
          /** @type {number} */
          this._selectionCounter = 1;
          break;
        case 2:
          self.startFunction(this._introAnim.play, "freespin_intro");
          break;
        case 3:
          self.startHandler(this.symbolSelectionHandler.bind(this));
          break;
        case 4:
          this._introAnim.play("freespin_text");
          self.startDelayMs(300);
          break;
        default:
          this.dispatch(new p.FreespinViewEvent(p.FreespinViewEvent.FREESPIN_INTRO));
          self.complete();
      }
    }, parent.prototype.introHideHandler = function(self) {
      self.execFunction(this._introAnim.play, "stop");
    }, parent.prototype.retriggerIntro = function(self, ncls) {
      switch(self.state) {
        case 0:
          this.dispatch(new next.BoDFreespinViewEvent(next.BoDFreespinViewEvent.RETRIGGER_INTRO));
          self.startFunction(this._retriggerAnim.play, "show");
          this._retriggerValue.setText("IDS_WON_ADD_X_FREESPINS");
          this._retriggerValue.setArgs("%d=" + ncls);
          break;
        default:
          self.complete();
      }
    }, parent.prototype.retriggerOutro = function(self) {
      switch(self.state) {
        case 0:
          this.dispatch(new next.BoDFreespinViewEvent(next.BoDFreespinViewEvent.RETRIGGER_OUTRO));
          self.startFunction(this._retriggerAnim.play, "hide");
          break;
        default:
          self.complete();
      }
    }, parent.prototype.symbolSelectionHandler = function(self) {
      if (self.state, this._selectionCounter < parent.SELECTION_LENGTH) {
        switch(this._selectionCounter) {
          case 0:
            /** @type {number} */
            var n = 0;
            for (; n < end.BoDSymbol.SYMBOL_WILD; n++) {
              this._selectionPool.push(n);
            }
            break;
          case parent.SELECTION_LENGTH - 1:
            /** @type {number} */
            n = 0;
            for (; n < end.BoDSymbol.SYMBOL_WILD; n++) {
              if (n != this._selectedSymbolId && n != this._previousSelection) {
                this._selectionPool.push(n);
              }
            }
            break;
          default:
            /** @type {number} */
            n = 0;
            for (; n < end.BoDSymbol.SYMBOL_WILD; n++) {
              if (n != this._previousSelection) {
                this._selectionPool.push(n);
              }
            }
        }
        /** @type {number} */
        var die = Math.floor(Math.random() * (this._selectionPool.length - 1 - 0 + 1)) + 0;
        var pos = this._selectionPool[die];
        this._previousSelection = pos;
        self.startFunction(this._selectedSymbolIntro.play, "book_" + pos);
        /** @type {!Array} */
        this._selectionPool = [];
        this._selectionCounter++;
      } else {
        this._selectedSymbolHud.play("hud_" + this._selectedSymbolId);
        self.execFunction(this._selectedSymbolIntro.play, "book_" + this._selectedSymbolId);
      }
      this.dispatch(new next.BoDFreespinViewEvent(next.BoDFreespinViewEvent.SYMBOL_SELECTION));
    }, parent.prototype.updatePanel = function(id, obj, panel) {
      this._fsValue.setText("IDS_FREESPIN_X_OF_Y");
      this._fsValue.setArgs("%d=" + (obj + 1) + "&%t=" + (id + obj));
    }, parent.prototype.createComponents = function(toAdd) {
      f.prototype.createComponents.call(this, toAdd);
      this._selectedSymbolIntro = toAdd.getAnimation("selectedSymbol");
      this._selectedSymbolHud = toAdd.getAnimation("fsCounter.hud");
      this._smokeAnim = toAdd.getAnimation("freespinPopup.smokeIntro");
      this._triggerView = new o.BoDTriggerView(toAdd);
    }, parent.SELECTION_LENGTH = 15, parent;
  }(h.FreespinView);
  e.BoDFreespinView = newOrg;
}, function(canCreateDiscussions, e, require) {
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var THREE = require(30);
  var newOrg = function() {
    /**
     * @param {number} v
     * @return {undefined}
     */
    function f(v) {
      /** @type {!Array} */
      this._movingSymbols = [];
      /** @type {!Array} */
      this._movingGroup = [];
      /** @type {number} */
      this._activeMovingSymbols = 0;
      /** @type {number} */
      var aP2 = 0;
      for (; aP2 < 5; aP2++) {
        this._movingSymbols.push(new THREE.BoDMovingObject(v, aP2, v.getTransform("scatterTarget")));
      }
    }
    return f.prototype.setStartPositions = function(json) {
      this._activeMovingSymbols = json.length;
      /** @type {number} */
      var k = 0;
      for (; k < this._activeMovingSymbols; k++) {
        this._movingSymbols[k].startPosition = json[k].transform;
      }
    }, f.prototype.startTrigger = function(self) {
      self.startHandler(this.startTriggerHandler.bind(this));
    }, f.prototype.startTriggerHandler = function(params) {
      switch(params.state) {
        case 0:
          /** @type {!Array} */
          this._movingGroup = [];
          /** @type {number} */
          var mapping = 0;
          for (; mapping < this._activeMovingSymbols; mapping++) {
            this._movingGroup.push(this._movingSymbols[mapping].startTriggerHandler.bind(this._movingSymbols[mapping]));
          }
          params.startGroup(this._movingGroup);
          break;
        default:
          params.complete();
          this.hide();
      }
    }, f.prototype.hide = function() {
      /** @type {number} */
      var currentItemPage = 0;
      for (; currentItemPage < this._activeMovingSymbols; currentItemPage++) {
        this._movingSymbols[currentItemPage].hide();
      }
    }, f;
  }();
  e.BoDTriggerView = newOrg;
}, function(canCreateDiscussions, e, floor) {
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(5);
  var newOrg = function() {
    /**
     * @param {(Image|string)} selection
     * @param {string} type
     * @param {!Object} element
     * @return {undefined}
     */
    function Chart(selection, type, element) {
      this.setupEntity(selection, type);
      /** @type {!Object} */
      this._target = element;
      this._transformAnimator = new startYNew.EaseInOutTransformAnimator;
    }
    return Object.defineProperty(Chart.prototype, "startPosition", {
      get : function() {
        return this._startPosition;
      },
      set : function(position) {
        /** @type {!Object} */
        this._startPosition = position;
      },
      enumerable : true,
      configurable : true
    }), Chart.prototype.startTriggerHandler = function(target) {
      switch(target.state) {
        case 0:
          this._transform.setX(this._startPosition.getX());
          this._transform.setY(this._startPosition.getY());
          this._animation.play("wait");
          target.startDelayMs(0);
          break;
        case 1:
          this.tween(target, this._target);
          break;
        default:
          target.complete();
      }
    }, Chart.prototype.hide = function() {
      this._animation.play("hide");
    }, Chart.prototype.setupEntity = function(node, depth) {
      this._transform = node.getTransform("scatterOverlay.movingObject" + depth);
      this._animation = node.getAnimation("scatterOverlay.movingObject" + depth);
      this.hide();
    }, Chart.prototype.tween = function(obj, options) {
      this._transformAnimator.move(obj, this._transform, this.startPosition, options, 800);
    }, Chart;
  }();
  e.BoDMovingObject = newOrg;
}, function(canCreateDiscussions, e, __webpack_require__) {
  var filter = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var _roundedCorners = __webpack_require__(0);
  var PhaserNano = __webpack_require__(8);
  var _horizontalCentering = __webpack_require__(4);
  var Phaser = __webpack_require__(32);
  var Handlebars = __webpack_require__(9);
  var newOrg = function(_) {
    /**
     * @param {string} game
     * @param {!Object} x
     * @param {?} i
     * @param {?} url
     * @param {!Object} key
     * @param {?} index
     * @param {!Object} name
     * @param {?} object
     * @return {?}
     */
    function o(game, x, i, url, key, index, name, object) {
      var data = _.call(this, game, x, i, url) || this;
      return data._freespinManager = key, data._reelManager = index, data._symbolManager = object, data._expandingIntro = new Phaser.BoDExpandingIntro(game, x, "BOD_EXPANDING_INTRO", key, data._symbolManager), data._expandingFeature = new PhaserNano.BoDExpandingFeature(game, x, "BOD_EXPANDING_FEATURE", key, data._reelManager, name), data;
    }
    return filter(o, _), o.prototype.getShowFeature = function(obj) {
      if (0 === obj.featureType) {
        if (obj.symbol === _horizontalCentering.BoDSymbol.SYMBOL_SCATTER && obj.numSymbols >= 3) {
          var password = this._reelManager.getScatterSymbols(obj.symbol);
          return this._dispatcher.dispatch(new Handlebars.BoDTriggerEvent(password)), this._expandingIntro;
        }
        if (this._freespinManager.isActive()) {
          return this._expandingFeature;
        }
      }
      return _.prototype.getShowFeature.call(this, obj);
    }, o;
  }(_roundedCorners.FeatureManager);
  e.BoDFeatureManager = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var processCycleRequire = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var startYNew = floor(0);
  var newOrg = function(p) {
    /**
     * @param {?} level
     * @param {?} n
     * @param {?} name
     * @param {string} o
     * @param {string} f
     * @return {?}
     */
    function f(level, n, name, o, f) {
      var i18n = p.call(this, level, n, name) || this;
      return i18n._freespinManager = o, i18n._symbolManager = f, i18n;
    }
    return processCycleRequire(f, p), f.prototype.onAward = function(state) {
      switch(p.prototype.onAward.call(this, state), state.awardType) {
        case startYNew.FeatureAwardFeatureEvent.FEATURE:
          var n = state.data;
          this._freespinManager.expandingSymbol = n;
          this._symbolManager.expandingSymbolId = n;
      }
    }, f;
  }(f.Feature);
  e.BoDExpandingIntro = newOrg;
}, function(canCreateDiscussions, e, require) {
  var getInstance = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var L = require(34);
  var TagHourlyStat = require(0);
  var sparql = require(35);
  var io = require(36);
  var CheckDailyStat = require(38);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function parent() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return getInstance(parent, f), parent.prototype.createWinLogicController = function(path, layer, callback, options, e) {
      return new L.BoDWinLogicController(path, layer, callback, options, e);
    }, Object.defineProperty(parent.prototype, "winPresentationController", {
      get : function() {
        return this._winPresentationController;
      },
      enumerable : true,
      configurable : true
    }), parent.prototype.createWinPresentationController = function(v, s, themeJson, name, o) {
      var p = this.createMasterView(themeJson, name);
      return new sparql.BoDWinPresentationController(v, s, p, o);
    }, parent.prototype.createMasterView = function(themeJson, name) {
      return new io.BoDMasterWinView(themeJson, name);
    }, parent.prototype.createWinState = function() {
      return new CheckDailyStat.BoDWinState;
    }, parent;
  }(TagHourlyStat.VideoSlotWinManager);
  e.BoDWinManager = newOrg;
}, function(canCreateDiscussions, e, __webpack_require__) {
  var extend = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var _classlist = __webpack_require__(0);
  var _UiIcon = __webpack_require__(2);
  var self = __webpack_require__(6);
  var window = __webpack_require__(8);
  var _createStore = __webpack_require__(0);
  var newOrg = function(util) {
    /**
     * @param {!HTMLElement} script
     * @param {?} key
     * @param {?} value
     * @param {?} i
     * @param {?} options
     * @return {?}
     */
    function o(script, key, value, i, options) {
      var type = util.call(this, script, key, value, i, options) || this;
      return script.addEventListener(self.BODExpandingFeatureEvent.INIT, type.onExpandingFeature.bind(type)), script.addEventListener(self.BODExpandingFeatureEvent.CONTINUE, type.clearWaiter.bind(type)), script.addEventListener(self.BODExpandingFeatureEvent.END, type.onExpandingEnd.bind(type)), type;
    }
    return extend(o, util), o.prototype.start = function(t, context, provider, id, height) {
      if (void 0 === provider) {
        /** @type {boolean} */
        provider = false;
      }
      if (void 0 === id) {
        /** @type {boolean} */
        id = false;
      }
      if (void 0 === height) {
        /** @type {number} */
        height = 0;
      }
      /** @type {number} */
      this._winState.showCount = -1;
      /** @type {number} */
      this._winState.freespinMode = id;
      this._winState.bigWinMode = this.isBigWinNeeded();
      /** @type {boolean} */
      this._winState.quickViewMode = false;
      /** @type {number} */
      this._winState.noGambleMode = provider;
      /** @type {number} */
      this._idleMode = context;
      /** @type {number} */
      this._waitUntil = height;
      this._endEvent = new _createStore.WinEvent(_createStore.WinEvent.DONE);
      this._dispatcher.dispatch(new _createStore.WinEvent(_createStore.WinEvent.INIT));
      if (this._winState.hasWins || this._winState.hasExpanding) {
        t.execHandler(this.showWinHandler.bind(this));
      } else {
        t.execHandler(this.noWinDelayHandler.bind(this), id);
      }
    }, o.prototype.onFeatureWin = function(e) {
      if (e.feature instanceof window.BoDExpandingFeature) {
        this._winState.clear();
      }
      util.prototype.onFeatureWin.call(this, e);
    }, o.prototype.reset = function() {
      util.prototype.reset.call(this);
      /** @type {boolean} */
      this._expandingMode = false;
    }, o.prototype.isBigWinNeeded = function() {
      return false;
    }, o.prototype.onExpandingFeature = function() {
      /** @type {boolean} */
      this._winState.hasExpanding = true;
      /** @type {boolean} */
      this._expandingMode = true;
    }, o.prototype.showWinHandler = function(args) {
      if (this._expandingMode) {
        switch(args.state) {
          case 1:
            if (this._winState.hasWins) {
              /** @type {number} */
              this._winState.showCount = 0;
              args.startHandler(this.showNormalWinHandler.bind(this));
            } else {
              args.startDelayMs(0);
            }
            break;
          case 2:
            this._dispatcher.dispatch(new self.BODExpandingFeatureEvent(self.BODExpandingFeatureEvent.START));
            this._expandingWaiter = args.wait(new _UiIcon.Waiter).ctx;
            break;
          case 3:
            /** @type {boolean} */
            this._suspended = true;
            /** @type {number} */
            this._winState.showCount = 1;
            args.startHandler(this.showNormalWinHandler.bind(this));
            break;
          case 4:
            if (this._suspended) {
              this._expandingWaiter = args.wait(new _UiIcon.Waiter).ctx;
            } else {
              args.startDelayMs(0);
            }
            break;
          default:
            util.prototype.showWinHandler.call(this, args);
        }
      } else {
        util.prototype.showWinHandler.call(this, args);
      }
    }, o.prototype.showMainWinsHandler = function(result) {
      if (this._suspended) {
        result.complete();
      } else {
        util.prototype.showMainWinsHandler.call(this, result);
      }
    }, o.prototype.clearWaiter = function() {
      if (this._expandingWaiter) {
        _UiIcon.Waiter.notifyContext(this._expandingWaiter);
        /** @type {null} */
        this._expandingWaiter = null;
      }
    }, o.prototype.onExpandingEnd = function() {
      this.clearWaiter();
      /** @type {boolean} */
      this._suspended = false;
    }, o;
  }(_classlist.WinLogicController);
  e.BoDWinLogicController = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var i = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(0);
  var startYNew = floor(8);
  var startXNew = floor(11);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function transition() {
      var e = null !== f && f.apply(this, arguments) || this;
      return e._displayingIndex = 0, e;
    }
    return i(transition, f), transition.prototype.expandingWinPresentationHandler = function(args) {
      switch(args.state) {
        case 0:
          this._mainTask = args.startHandler(this.forceShowHandler.bind(this));
          break;
        case 1:
          args.startDelayMs(startYNew.BoDExpandingFeature.AFTER_WIN_DELAY);
          break;
        default:
          this.forceHide();
          /** @type {number} */
          this._displayingIndex = 0;
          args.complete();
      }
    }, transition.prototype.forceShowHandler = function(api) {
      api.startLoop(this.forceShow.bind(this));
    }, transition.prototype.forceShow = function(jobItem) {
      switch(jobItem.state) {
        case 0:
          this._dispatcher.dispatch(new startXNew.BoDWinPresentationControllerEvent(startXNew.BoDWinPresentationControllerEvent.SHOW_LINE));
          this._view.forceShow(this._displayingIndex);
          jobItem.startDelayMs(startYNew.BoDExpandingFeature.EXPANDING_FEATURE_WIN);
          break;
        case 1:
          this._displayingIndex++;
          if (this._displayingIndex >= 10) {
            this._mainTask.complete();
          }
          jobItem.startDelayMs(0);
          break;
        default:
          jobItem.complete();
      }
    }, transition.prototype.forceHide = function() {
      this._view.forceHide();
    }, transition;
  }(f.WinPresentationController);
  e.BoDWinPresentationController = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var has = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var _ReduxibleRouter2 = floor(37);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function d() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return has(d, f), d.prototype.createWinPattern = function(fn, history, store) {
      return new _ReduxibleRouter2.BoDWinPatternView(fn, history, store);
    }, d.prototype.forceShow = function(type) {
      this._winPatterns[type].show(null);
    }, d.prototype.forceHide = function() {
      /** @type {number} */
      var currentItemPage = 0;
      for (; currentItemPage < 10; currentItemPage++) {
        this._winPatterns[currentItemPage].hide(null);
      }
    }, d.prototype.show = function(v) {
      var message = v.winData;
      if (message) {
        return message.line < 0 ? void(this.isSymbolWinNeeded(v) ? this._winSymbols.show(v) : this._winSymbols.emphasize(v)) : void f.prototype.show.call(this, v);
      }
    }, d;
  }(startYNew.MasterWinView);
  e.BoDMasterWinView = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var has = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function d() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return has(d, f), d.prototype.createWinlineOptions = function(object) {
      var data = f.prototype.createWinlineOptions.call(this, object);
      return data.red = 0.18, data.green = 0.25, data.blue = 0.59, data.shadowStrength = 0.5, data.shadowY = 4, data.shadowThickness = 15, data.glowStrength = 1, data.glowSharpness = 0.2, data.glowThickness = 6, data.shineSpeed = 4, data.shineStrength = 8, data.shineThickness = 300, data.frameWidth = 0, data.frameHeight = 0, data.maxShinePos = Number.POSITIVE_INFINITY, data;
    }, d.prototype.show = function(list) {
      f.prototype.show.call(this, list);
      var points = this._points;
      var plength = points.length;
      if (list) {
        list.winData.cnt;
      }
      /** @type {boolean} */
      points[0].hidden = false;
      /** @type {boolean} */
      points[plength - 1].hidden = false;
    }, d;
  }(startYNew.WinPatternShadedView);
  e.BoDWinPatternView = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var setDragDropHandlers = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var newOrg = function(s) {
    /**
     * @return {?}
     */
    function obj() {
      return null !== s && s.apply(this, arguments) || this;
    }
    return setDragDropHandlers(obj, s), Object.defineProperty(obj.prototype, "hasExpanding", {
      get : function() {
        return this._hasExpanding;
      },
      set : function(mymuted) {
        /** @type {boolean} */
        this._hasExpanding = mymuted;
      },
      enumerable : true,
      configurable : true
    }), obj.prototype.clear = function() {
      s.prototype.clear.call(this);
      /** @type {boolean} */
      this._hasExpanding = false;
    }, obj;
  }(startYNew.WinState);
  e.BoDWinState = newOrg;
}, function(canCreateDiscussions, e, parseInt) {
  var i = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var whiteRating = parseInt(0);
  var m = parseInt(1);
  var retry = parseInt(40);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function transition() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return i(transition, f), transition.prototype.createView = function() {
      var command = m.ResourceManager.getInstance().getEntityManager();
      var e = command.create("?");
      return command.add("gamble", e), new retry.BoDRedOrBlackView(e);
    }, transition;
  }(whiteRating.RedOrBlackManager);
  e.BoDRedOrBlackManager = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var callService$1 = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var newOrg = function(t) {
    /**
     * @param {!Image} p
     * @return {?}
     */
    function e(p) {
      var n = t.call(this, p) || this;
      return n._cardText = p.getAnimation("card_text"), n._bigSuits = p.getAnimation("big_suits"), n._smallSuits = p.getAnimation("small_suits"), n._panelDisplay = p.getDisplay("."), n;
    }
    return callService$1(e, t), e.prototype.setVisible = function(value) {
      this._panelDisplay.setVisible(value);
    }, e.prototype.showCard = function(edge, state, n) {
      if (void 0 === n) {
        /** @type {number} */
        n = 0;
      }
      if (this._cardAnim.getClipName() !== (state ? "show" : "hide") && state) {
        this._cardText.play("c" + n);
        this._bigSuits.play("c" + n);
        this._smallSuits.play("c" + n);
      }
      t.prototype.showCard.call(this, edge, state, n);
    }, e;
  }(startYNew.RedOrBlackView);
  e.BoDRedOrBlackView = newOrg;
}, function(canCreateDiscussions, e, makeBuffer) {
  var i = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var window = makeBuffer(0);
  var PhaserNano = makeBuffer(42);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function transition() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return i(transition, f), transition.prototype.createSoundController = function(img, x, y, key, height, name) {
      return new PhaserNano.BoDSoundController(img, x, y, key, height, name);
    }, transition;
  }(window.SoundManager);
  e.BoDSoundManager = newOrg;
}, function(canCreateDiscussions, Tone, require) {
  var callService$1 = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(Tone, "__esModule", {
    value : true
  });
  var options;
  var frontEndModuleConfig = require(0);
  var neatHelp = require(0);
  var requestHelpers = require(0);
  var Player = require(0);
  var Pages = require(0);
  var CheckHourlyStat = require(0);
  var CheckDailyStat = require(0);
  var jsonfn = require(0);
  var genBrick = require(0);
  var EffectChain = require(0);
  var module = require(43);
  var renderAssign = require(4);
  var genWaveBrick = require(10);
  var renderWaveLane = require(11);
  var TagHourlyStat = require(6);
  var renderArcs = require(0);
  var GenerateGif = require(0);
  var insertSVGTemplate = require(0);
  var insertSVGTemplateAssign = require(0);
  !function(m) {
    /** @type {string} */
    m[m.WIN = 0.8] = "WIN";
    /** @type {string} */
    m[m.AMBIENCE = 0.5] = "AMBIENCE";
    /** @type {string} */
    m[m.STEM = 0.8] = "STEM";
    /** @type {string} */
    m[m.REEL_START = 0.65] = "REEL_START";
    /** @type {string} */
    m[m.REEL_STOP = 0.85] = "REEL_STOP";
    /** @type {string} */
    m[m.SUSPENSE = 1.5] = "SUSPENSE";
    /** @type {string} */
    m[m.BOOK_FLIP = 0.7] = "BOOK_FLIP";
    /** @type {string} */
    m[m.FREESPIN_INTRO = 0.85] = "FREESPIN_INTRO";
    /** @type {string} */
    m[m.FREESPIN_AMBINECE = 0.8] = "FREESPIN_AMBINECE";
    /** @type {string} */
    m[m.FREESPIN_AMBINECE_DUCKED = 0.2] = "FREESPIN_AMBINECE_DUCKED";
    /** @type {string} */
    m[m.FREESPIN_SUMMARY = 0.85] = "FREESPIN_SUMMARY";
    /** @type {string} */
    m[m.GAMBLE_WAIT = 0.9] = "GAMBLE_WAIT";
    /** @type {string} */
    m[m.GAMBLE_AMBIENCE = 0.67] = "GAMBLE_AMBIENCE";
    /** @type {string} */
    m[m.GAMBLE_WIN = 0.53] = "GAMBLE_WIN";
    /** @type {string} */
    m[m.GAMBLE_LOSE = 0.68] = "GAMBLE_LOSE";
    /** @type {string} */
    m[m.GAMBLE_COLLECT = 0.67] = "GAMBLE_COLLECT";
    /** @type {string} */
    m[m.GAMBLE_OVERLAY = 0.67] = "GAMBLE_OVERLAY";
  }(options = Tone.Volume || (Tone.Volume = {}));
  var r10 = function(t) {
    /**
     * @param {!HTMLElement} self
     * @param {?} type
     * @param {?} data
     * @param {?} size
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function e(self, type, data, size, key, value) {
      var scope = t.call(this, self, type, data, size, key, value) || this;
      return scope._isSuspense = false, scope._isQuickstop = false, scope._isQuickStopPlayed = false, scope._isInFreespin = false, scope._isGamble = false, self.addEventListener(Player.ReelEvent.STARTING, scope.onReelStarting.bind(scope)), self.addEventListener(Player.ReelEvent.STOPPED, scope.onReelStopped.bind(scope)), self.addEventListener(Pages.ReelSuspenseEvent.SHOW, scope.onSuspense.bind(scope, true)), self.addEventListener(Pages.ReelSuspenseEvent.HIDE, scope.onSuspense.bind(scope, false)), 
      self.addEventListener(renderArcs.QuickStopEvent.QUICKSTOP, scope.onQuickStop.bind(scope)), self.addEventListener(EffectChain.GambleEvent.GAMBLE_START, scope.onGamble.bind(scope)), self.addEventListener(GenerateGif.VideoSlotUIEvent.COLLECT, scope.onGambleCollect.bind(scope)), self.addEventListener(GenerateGif.VideoSlotUIEvent.SPIN, scope.onGambleCollect.bind(scope)), self.addEventListener(EffectChain.GambleEvent.GAMBLE_COLLECT, scope.onGambleCollect.bind(scope)), self.addEventListener(insertSVGTemplate.VideoSlotShowButtonsEvent.SHOWBUTTONS, 
      scope.onGambleWait.bind(scope)), self.addEventListener(genBrick.GambleSelectEvent.GAMBLE_SELECT, scope.onGambleSelect.bind(scope)), self.addEventListener(jsonfn.GambleAnswerEvent.GAMBLE_ANSWER, scope.onGambleWinOrLose.bind(scope)), self.addEventListener(CheckHourlyStat.FreespinViewEvent.FREESPIN_INTRO, scope.onFreespinIntro.bind(scope)), self.addEventListener(CheckHourlyStat.FreespinViewEvent.FREESPIN_SUMMARY, scope.onFreespinSummary.bind(scope)), self.addEventListener(CheckDailyStat.FreespinEvent.FREESPIN_START, 
      scope.onFreespinStart.bind(scope)), self.addEventListener(genWaveBrick.BoDFreespinViewEvent.TRIGGER_START, scope.onTriggerStart.bind(scope)), self.addEventListener(genWaveBrick.BoDFreespinViewEvent.SYMBOL_SELECTION, scope.onExpandingSelect.bind(scope)), self.addEventListener(renderWaveLane.BoDWinPresentationControllerEvent.SHOW_LINE, scope.onExpandingLine.bind(scope)), self.addEventListener(TagHourlyStat.BODExpandingFeatureEvent.TRANSFORM_SYMBOL, scope.onTransformSybol.bind(scope)), self.addEventListener(CheckDailyStat.FreespinEvent.FREESPIN_END, 
      scope.onFreespinEnd.bind(scope)), self.addEventListener(genWaveBrick.BoDFreespinViewEvent.RETRIGGER_INTRO, scope.onFreespinRetriggerIntro.bind(scope)), self.addEventListener(genWaveBrick.BoDFreespinViewEvent.RETRIGGER_OUTRO, scope.onFreespinRetriggerOutro.bind(scope)), self.addEventListener(insertSVGTemplateAssign.AccumulatedWinSoundEvent.SOUND_STARTED, scope.onPlayWinSound.bind(scope)), scope;
    }
    return callService$1(e, t), e.prototype.createSounds = function() {
      t.prototype.createSounds.call(this);
      this._ambience = this._soundManager.create("ambience");
      this._reelLoop = this._soundManager.create("reelLoop");
      this._reelStart = this._soundManager.create("reelStart");
      this._reelStop = this._soundManager.create("reelStop");
      this._suspenseSnd = this._soundManager.create("reelWait");
      /** @type {!Array} */
      this._scatterLandSnd = [];
      /** @type {number} */
      var o = 1;
      for (; o <= 3; o++) {
        this._scatterLandSnd.push(this._soundManager.create("scatterLand" + o));
      }
      /** @type {number} */
      this._scatterCount = 0;
      this._bookFlip = this._soundManager.create("bookFlip");
      this._freespinAmbience = this._soundManager.create("freespinAmbience");
      this._freespinIntro = this._soundManager.create("freespinIntro");
      this._freespinRetrigger = this._soundManager.create("freespinRetrigger");
      this._freespinSummary = this._soundManager.create("freespinSummary");
      this._gambleWait = this._soundManager.create("gambleWait");
      this._gambleLose = this._soundManager.create("gambleLose");
      this._gambleWin = this._soundManager.create("gambleWin");
      this._gambleAmbience = this._soundManager.create("gambleLoop");
      this._gambleCollect = this._soundManager.create("gambleCollect");
      this._gambleOverlay = this._soundManager.create("gambleTick");
      this._gambleClick = this._soundManager.create("gambleClick");
      this._transformSymbolSnd = this._soundManager.create("transformSymbol");
      /** @type {!Array} */
      this._winSoundsDuration = [0.5, 1, 1, 2, 2.5, 3, 3, 4, 4, 5, 5];
      /** @type {!Array} */
      var offMeshConnections = [0.5, 1, 2, 4, 8, 12, 20, 80, 160, 500, 1000];
      /** @type {!Array} */
      var user_list = [];
      /** @type {number} */
      o = 0;
      for (; o < offMeshConnections.length; o++) {
        user_list.push({
          sound : this._soundManager.create("win" + (o + 1) + "Snd"),
          triggerLevel : offMeshConnections[o],
          volume : options.WIN
        });
      }
      this._winSoundController = new neatHelp.AccumulatedWinSoundController(this._dispatcher, user_list, requestHelpers.WinSoundMode.BET_MULTIPLIER);
      /** @type {!Array} */
      var openNotificationAnnotations = [0.5, 1, 3];
      /** @type {!Array} */
      var socket = [];
      /** @type {number} */
      o = 0;
      for (; o < openNotificationAnnotations.length; o++) {
        socket.push({
          sound : this._soundManager.create("ambienceStem" + (o + 1)),
          triggerLevel : openNotificationAnnotations[o],
          volume : options.STEM
        });
      }
      this._stemsController = new module.BoDStemsController(this._dispatcher, socket, requestHelpers.WinSoundMode.BET_MULTIPLIER);
      /** @type {!Array} */
      this._expandingLineSnd = [];
      /** @type {number} */
      this._expandingLineIdx = 0;
      /** @type {number} */
      o = 1;
      for (; o <= 10; o++) {
        this._expandingLineSnd.push(this._soundManager.create("expandingLine" + o));
      }
      /** @type {!Array} */
      this._expandingSelection = [];
      /** @type {number} */
      this._expandingSelectionCnt = 0;
      /** @type {number} */
      var handlerType = 1;
      for (; handlerType <= 15; handlerType++) {
        this._expandingSelection.push(this._soundManager.create("symbolSelect" + handlerType));
      }
    }, e.prototype.onPlayWinSound = function(pBufferSet) {
      var velocity = options.FREESPIN_AMBINECE_DUCKED;
      this.duckedAmbience(this._winSoundsDuration[pBufferSet.index], velocity);
    }, e.prototype.duckedAmbience = function(time, gain, when, delay) {
      if (void 0 === when) {
        /** @type {number} */
        when = 0.2;
      }
      if (void 0 === delay) {
        /** @type {number} */
        delay = 0.5;
      }
      var velocity = options.FREESPIN_AMBINECE;
      /** @type {!Array} */
      var alwaysDownload = [{
        time : when,
        gain : gain
      }, {
        time : time,
        gain : gain
      }, {
        time : time + delay,
        gain : velocity
      }];
      this.fadeChainAmbience(alwaysDownload);
    }, e.prototype.fadeChainAmbience = function(alwaysDownload) {
      if (this._isInFreespin) {
        this._freespinAmbience.fadeChain(alwaysDownload);
      }
    }, e.prototype.startAmbianceSounds = function() {
      this._ambience.playFadeIn(options.AMBIENCE, 2, 0, true);
      this._reelLoop.playForever(0);
      this._stemsController.start();
      this._winSoundController.enable();
    }, e.prototype.stopAmbienceSounds = function() {
      this._ambience.fadeOut(0.5);
      this._stemsController.stop();
    }, e.prototype.onReelStarting = function(canCreateDiscussions) {
      /** @type {boolean} */
      this._isQuickstop = false;
      if (0 === canCreateDiscussions.reelIdx) {
        this._reelStart.play(options.REEL_START);
        this._reelLoop.fadeTo(1, 0);
      }
    }, e.prototype.onExpandingLine = function() {
      this._expandingLineSnd[this._expandingLineIdx].play();
      if (++this._expandingLineIdx >= this._expandingLineSnd.length) {
        /** @type {number} */
        this._expandingLineIdx = 0;
      }
    }, e.prototype.onTransformSybol = function() {
      this._transformSymbolSnd.play();
    }, e.prototype.onReelStopped = function(aRoundNumber) {
      var obj = this._reelManager.getReelDataOf(aRoundNumber.reelIdx);
      if (!this._isInFreespin) {
        /** @type {number} */
        var i = 0;
        for (; i < obj.rows; i++) {
          if (obj.getSymbol(i).getId() === renderAssign.BoDSymbol.SYMBOL_SCATTER && this._scatterCount < this._scatterLandSnd.length) {
            this._scatterCount++;
            if (!this._isQuickstop) {
              if (this._scatterCount >= aRoundNumber.reelIdx - 1) {
                this._scatterLandSnd[this._scatterCount - 1].play();
              }
            }
          }
        }
      }
      if (this._isQuickstop) {
        if (!this._isQuickStopPlayed) {
          /** @type {boolean} */
          this._isQuickStopPlayed = true;
          this._reelStop.play(options.REEL_STOP + 0.2);
        }
      } else {
        this._reelStop.play(options.REEL_STOP);
      }
      if (4 === aRoundNumber.reelIdx) {
        /** @type {number} */
        this._scatterCount = 0;
        /** @type {boolean} */
        this._isQuickstop = false;
        /** @type {boolean} */
        this._isQuickStopPlayed = false;
        this._reelLoop.fadeTo(0, 0.5);
        this._suspenseSnd.fadeOut(0.5);
      }
    }, e.prototype.onSuspense = function(formatters, customFormatters) {
      if (formatters) {
        if (!this._gameSettings.fastPlay) {
          this._suspenseSnd.playForever(options.SUSPENSE);
        }
      }
      /** @type {boolean} */
      this._isQuickstop = false;
      /** @type {boolean} */
      this._isQuickStopPlayed = false;
      /** @type {boolean} */
      this._isSuspense = formatters;
    }, e.prototype.onTriggerStart = function() {
      this.stopAmbienceSounds();
      this._bookFlip.play(options.BOOK_FLIP);
    }, e.prototype.onExpandingSelect = function() {
      this._expandingSelection[this._expandingSelectionCnt].play();
      if (++this._expandingSelectionCnt >= this._expandingSelection.length) {
        /** @type {number} */
        this._expandingSelectionCnt = 0;
      }
    }, e.prototype.onFreespinIntro = function() {
      this._freespinIntro.play(options.FREESPIN_INTRO);
      /** @type {boolean} */
      this._isInFreespin = true;
    }, e.prototype.onFreespinStart = function() {
      this._freespinAmbience.playFadeIn(options.FREESPIN_AMBINECE, 1.5, 0, true);
    }, e.prototype.onFreespinRetriggerIntro = function() {
      this._freespinAmbience.fadeTo(options.FREESPIN_AMBINECE_DUCKED, 0.5);
      this._freespinRetrigger.play();
    }, e.prototype.onFreespinRetriggerOutro = function() {
      this._freespinAmbience.fadeTo(options.FREESPIN_AMBINECE, 0.5);
    }, e.prototype.onFreespinSummary = function() {
      /** @type {boolean} */
      this._isInFreespin = false;
      this._freespinAmbience.fadeOut(0.5);
      this._freespinSummary.play(options.FREESPIN_SUMMARY);
    }, e.prototype.onFreespinEnd = function() {
      this.startAmbianceSounds();
    }, e.prototype.onGamble = function() {
      this._gambleWait.fadeTo(0, 0.5);
      this._gambleAmbience.play(0, 0, true);
      this._gambleOverlay.play(0, 0, true);
    }, e.prototype.onGambleWait = function(cond) {
      if (cond.groupId === insertSVGTemplate.VideoSlotShowButtonsEvent.GAMBLE_WAIT) {
        this._ambience.fadeTo(0, 0.5);
        this._gambleWait.playFadeIn(options.GAMBLE_WAIT, 0.5, 0, true);
        /** @type {boolean} */
        this._isGamble = true;
      } else {
        if (cond.groupId === insertSVGTemplate.VideoSlotShowButtonsEvent.COLLECT) {
          this._gambleAmbience.fadeTo(options.GAMBLE_AMBIENCE, 0.5);
          this._gambleOverlay.fadeTo(options.GAMBLE_OVERLAY, 0.5);
        }
      }
    }, e.prototype.onGambleWinOrLose = function(canCreateDiscussions) {
      if (canCreateDiscussions.winCode > 0) {
        this._gambleWin.play(0.53, 0, false, 0.75);
      } else {
        this._gambleLose.play(0.68, 0, false, 0.75);
        this._gambleWait.fadeOut(0.75);
        this._gambleAmbience.fadeOut(0.75);
        this._gambleOverlay.fadeOut(0.75);
        this._ambience.fadeTo(options.AMBIENCE, 0.5);
        /** @type {boolean} */
        this._isGamble = false;
      }
    }, e.prototype.onGambleSelect = function(b) {
      if (0 !== b.value) {
        this._gambleAmbience.fadeTo(0.1, 0);
        this._gambleOverlay.fadeTo(0.1, 0);
        this._gambleClick.play();
      }
    }, e.prototype.onGambleCollect = function(verifiedEvent) {
      if ((verifiedEvent.type === GenerateGif.VideoSlotUIEvent.SPIN || verifiedEvent.type === GenerateGif.VideoSlotUIEvent.COLLECT || verifiedEvent.type === EffectChain.GambleEvent.GAMBLE_COLLECT) && this._isGamble) {
        this._gambleCollect.play(0.67);
        /** @type {boolean} */
        this._isGamble = false;
      }
      this._ambience.fadeTo(options.AMBIENCE, 0.5);
      this._gambleWait.fadeOut(0.5);
      this._gambleAmbience.fadeOut(0.5);
      this._gambleOverlay.fadeOut(0.5);
    }, e.prototype.onQuickStop = function() {
      /** @type {boolean} */
      this._isQuickstop = true;
    }, e;
  }(frontEndModuleConfig.SoundController);
  Tone.BoDSoundController = r10;
}, function(canCreateDiscussions, event, n) {
  var has = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(event, "__esModule", {
    value : true
  });
  var next = n(0);
  var h = n(0);
  var o = n(0);
  var end = n(0);
  var relSet = function(f) {
    /**
     * @param {!HTMLElement} element
     * @param {?} value
     * @param {number} cb
     * @return {?}
     */
    function text(element, value, cb) {
      if (void 0 === cb) {
        cb = h.WinSoundMode.BET_MULTIPLIER;
      }
      var t = f.call(this, element, value, cb) || this;
      return t._inGamble = false, element.addEventListener(o.VideoSlotShowButtonsEvent.SHOWBUTTONS, t.onGambleWait.bind(t)), element.addEventListener(end.GambleEvent.GAMBLE_COLLECT, t.onGambleCollect.bind(t)), t;
    }
    return has(text, f), text.prototype.onWinsDone = function(result) {
    }, text.prototype.onGambleWait = function(cond) {
      if (cond.groupId === o.VideoSlotShowButtonsEvent.GAMBLE_WAIT) {
        /** @type {boolean} */
        this._inGamble = true;
        /** @type {number} */
        var i = 0;
        for (; i < this._sounds.length; i++) {
          this._sounds[i].fadeTo(0, 0.5);
        }
      }
    }, text.prototype.onGambleCollect = function() {
      if (this._inGamble) {
        /** @type {number} */
        var i = 0;
        for (; i <= this._currentStemIndex; i++) {
          /** @type {!Array} */
          var e = [{
            time : this._fadeInTime,
            gain : this.getSoundVolume(i)
          }, {
            time : this._fadeToTime,
            gain : 0
          }];
          this._sounds[i].fadeChain(e);
          /** @type {boolean} */
          this._inGamble = false;
        }
        /** @type {number} */
        this._currentStemIndex = -1;
      } else {
        this.fadeOutStems();
      }
    }, text;
  }(next.StemsController);
  event.BoDStemsController = relSet;
}, function(canCreateDiscussions, e, floor) {
  var debug = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var startYNew = floor(0);
  var startXNew = floor(6);
  var newOrg = function(self) {
    /**
     * @param {!HTMLElement} t
     * @param {?} e
     * @param {?} n
     * @param {?} scale
     * @return {?}
     */
    function show(t, e, n, scale) {
      var s = self.call(this, t, e, n, scale) || this;
      return t.addEventListener(startXNew.BODExpandingFeatureEvent.END, s.onWinDone.bind(s)), s;
    }
    return debug(show, self), show;
  }(startYNew.VideoSlotAutoplayHandler);
  e.BoDAutoplayHandler = newOrg;
}, function(canCreateDiscussions, e, $) {
  var i = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var $realtime = $(3);
  var errors = $(46);
  var newOrg = function(f) {
    /**
     * @return {?}
     */
    function transition() {
      return null !== f && f.apply(this, arguments) || this;
    }
    return i(transition, f), transition.prototype.createOSPTController = function(type, name, data, err, next) {
      return new errors.BoDOSPTController(type, name, data, err, next);
    }, transition;
  }($realtime.VideoSlotUI);
  e.BoDUIManager = newOrg;
}, function(canCreateDiscussions, e, floor) {
  var _inherits = this && this.__extends || function() {
    /** @type {function(!Object, ?): !Object} */
    var fixFontSmoothing = Object.setPrototypeOf || {
      __proto__ : []
    } instanceof Array && function(el, instance) {
      /** @type {!Object} */
      el.__proto__ = instance;
    } || function(t, array) {
      var i;
      for (i in array) {
        if (array.hasOwnProperty(i)) {
          t[i] = array[i];
        }
      }
    };
    return function(child, value) {
      /**
       * @return {undefined}
       */
      function data() {
        this.constructor = child;
      }
      fixFontSmoothing(child, value);
      child.prototype = null === value ? Object.create(value) : (data.prototype = value.prototype, new data);
    };
  }();
  Object.defineProperty(e, "__esModule", {
    value : true
  });
  var f = floor(3);
  var startYNew = floor(4);
  var newOrg = function(t) {
    /**
     * @return {?}
     */
    function Circle() {
      return null !== t && t.apply(this, arguments) || this;
    }
    return _inherits(Circle, t), Circle.prototype.setup = function() {
      this.addSymbolWithText(startYNew.BoDSymbol.SYMBOL_SCATTER, "IDS_PT_THREE_TRIGGER_FREESPIN");
    }, Circle.prototype.createOSPTController = function(value, options, parent, color, x) {
      return new Circle(value, options, parent, color, x);
    }, Circle;
  }(f.OSPTController);
  e.BoDOSPTController = newOrg;
}]);
